<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AOSP</title>
      <link href="/liaojie.github.io/2022/02/18/aosp/"/>
      <url>/liaojie.github.io/2022/02/18/aosp/</url>
      
        <content type="html"><![CDATA[<p>AOSP<br>相关网站</p><p>官方地址</p><blockquote><p><a href="http://source.android.com/">http://source.android.com/</a></p></blockquote><p>清华大学镜像</p><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/liaojie.github.io/2022/02/12/jquery/"/>
      <url>/liaojie.github.io/2022/02/12/jquery/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI</title>
      <link href="/liaojie.github.io/2022/02/12/webapi/"/>
      <url>/liaojie.github.io/2022/02/12/webapi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动web开发</title>
      <link href="/liaojie.github.io/2022/02/12/yi-dong-web-kai-fa/"/>
      <url>/liaojie.github.io/2022/02/12/yi-dong-web-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="移动web开发之rem布局"><a href="#移动web开发之rem布局" class="headerlink" title="移动web开发之rem布局"></a>移动web开发之rem布局</h1><h3 id="rem基础"><a href="#rem基础" class="headerlink" title="rem基础"></a>rem基础</h3><h4 id="rem单位"><a href="#rem单位" class="headerlink" title="rem单位"></a>rem单位</h4><p>rem (root em)是一个相对单位，类似于em，em是父元素字体大小。</p><p>不同的是rem的基准是相对于html元素的字体大小。</p><p>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。</p><pre class="line-numbers language-none"><code class="language-none">/* 根html 为 12px */html {   font-size: 12px;}/* 此时 div 的字体大小就是 24px */       div {    font-size: 2rem;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。</p><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><h4 id="什么是媒体查询"><a href="#什么是媒体查询" class="headerlink" title="什么是媒体查询"></a>什么是媒体查询</h4><p>媒体查询（Media Query）是CSS3新语法。</p><ul><li>使用 @media查询，可以针对不同的媒体类型定义不同的样式</li><li>@media 可以针对不同的屏幕尺寸设置不同的样式</li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面 </li><li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li></ul><h4 id="媒体查询语法规范"><a href="#媒体查询语法规范" class="headerlink" title="媒体查询语法规范"></a>媒体查询语法规范</h4><ul><li>用 @media开头 注意@符号</li><li>mediatype  媒体类型</li><li>关键字 and  not  only</li><li>media feature 媒体特性必须有小括号包含</li></ul><pre class="line-numbers language-none"><code class="language-none">@media mediatype and|not|only (media feature) {    CSS-Code;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>mediatype 查询类型</p><p>将不同的终端设备划分成不同的类型，称为媒体类型</p></li></ol><p><img src="/liaojie.github.io/medias/11.jpg"></p><ol start="2"><li><p>关键字</p><p>关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。</p></li></ol><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li><li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li><li>only：指定某个特定的媒体类型，可以省略。    </li></ul><ol start="3"><li><p>媒体特性</p><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。</p><p>注意他们要加小括号包含</p><p><img src="/liaojie.github.io/medias/12.jpg"></p></li><li><p>媒体查询书写规则</p><p>注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁</p></li></ol><p><img src="/liaojie.github.io/medias/13.png"></p><h3 id="less-基础"><a href="#less-基础" class="headerlink" title="less 基础"></a>less 基础</h3><h4 id="维护css弊端"><a href="#维护css弊端" class="headerlink" title="维护css弊端"></a>维护css弊端</h4><p>CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。</p><ul><li>CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的。</li><li>不方便维护及扩展，不利于复用。</li><li>CSS 没有很好的计算能力</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目。 </li></ul><h4 id="Less-介绍"><a href="#Less-介绍" class="headerlink" title="Less 介绍"></a>Less 介绍</h4><p>Less（LeanerStyle Sheets 的缩写）是一门 CSS扩展语言，也成为CSS预处理器。</p><p>做为 CSS的一种形式的扩展，它并没有减少CSS的功能，而是在现有的CSS语法上，为CSS加入程序式语言的特性。</p><p>它在CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS的维护成本，就像它的名称所说的那样，Less可以让我们用更少的代码做更多的事情。</p><p>Less中文网址：<a href="http://lesscss.cn/">http://lesscss.cn/</a></p><p>常见的CSS预处理器：Sass、Less、Stylus</p><p>一句话：Less是一门 CSS 预处理语言，它扩展了CSS的动态特性。</p><p>Less安装</p><p>①安装nodejs，可选择版本(8.0)，网址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><p>②检查是否安装成功，使用cmd命令（win10是window+r 打开运行输入cmd）  —输入“node –v”查看版本即可</p><p>③基于nodejs在线安装Less，使用cmd命令“npm install -g less”即可</p><p>④检查是否安装成功，使用cmd命令“ lessc -v ”查看版本即可</p><p>Less 使用之变量</p><p>变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用。</p><pre class="line-numbers language-none"><code class="language-none">@变量名:值;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul><pre class="line-numbers language-none"><code class="language-none">@color: pink;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Less 编译 vocode Less 插件</p><p>Easy LESS 插件用来把less文件编译为css文件</p><p>安装完毕插件，重新加载下 vscode。</p><p>只要保存一下Less文件，会自动生成CSS文件。</p><p><img src="/liaojie.github.io/medias/14.png"></p><p>Less 嵌套</p><pre class="line-numbers language-none"><code class="language-none">// 将css改为less#header .logo {  width: 300px;}#header {    .logo {       width: 300px;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果遇见 （交集|伪类|伪元素选择器） ，利用&amp;进行连接</p><blockquote><p>a:hover{<br>   color:red;<br>}<br>a{<br> &amp;:hover{<br>     color:red;<br> }<br>}</p></blockquote><p>Less 运算</p><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。</p><pre class="line-numbers language-none"><code class="language-none">/*Less 里面写*/@witdh: 10px + 5;div {    border: @witdh solid red;}/*生成的css*/div {  border: 15px solid red;}/*Less 甚至还可以这样 */width: (@width + 5) * 2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>乘号（*）和除号（/）的写法  </li><li>运算符中间左右有个空格隔开 1px + 5</li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位 </li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ul><h3 id="rem适配方案"><a href="#rem适配方案" class="headerlink" title="rem适配方案"></a>rem适配方案</h3><p>1.让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</p><p>2.使用媒体查询根据不同设备按比例设置html的字体大小，然后页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。</p><p>技术方案：</p><p>1.less+rem+媒体查询</p><p>2.lflexible.js+rem</p><p>总结： </p><p>两种方案现在都存在。</p><p>方案2 更简单，现阶段大家无需了解里面的js代码。</p><h4 id="rem实际开发适配方案1"><a href="#rem实际开发适配方案1" class="headerlink" title="rem实际开发适配方案1"></a>rem实际开发适配方案1</h4><p>①假设设计稿是750px</p><p>②假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份）</p><p>③每一份作为html字体大小，这里就是50px</p><p>④那么在320px设备的时候，字体大小为320/15就是  21.33px</p><p>⑤用我们页面元素的大小除以不同的 html字体大小会发现他们比例还是相同的</p><p>⑥比如我们以750为标准设计稿</p><p>⑦一个100 * 100像素的页面元素在  750屏幕下，  就是 100/ 50  转换为rem  是  2rem * 2rem  比例是1比1</p><p>⑧320屏幕下，  html字体大小为21.33   则 2rem=  42.66px  此时宽和高都是 42.66  但是宽和高的比例还是 1比1</p><p>⑨但是已经能实现不同屏幕下  页面元素盒子等比例缩放的效果</p><p>总结：</p><p>①最后的公式：页面元素的rem值 =  页面元素值（px） /  （屏幕宽度  /  划分的份数）</p><p>②屏幕宽度/划分的份数就是 htmlfont-size 的大小</p><p>③或者：页面元素的rem值 =  页面元素值（px） /  html font-size 字体大小</p><h3 id="苏宁首页"><a href="#苏宁首页" class="headerlink" title="苏宁首页"></a>苏宁首页</h3><p>苏宁首页地址 ：<a href="m.suning.com">苏宁首页</a></p><p>1、 技术选型</p><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取rem适配布局（less + rem  + 媒体查询）</p><p>设计图： 本设计图采用 750px 设计尺寸</p><p>2、搭建文件结构</p><p><img src="/liaojie.github.io/medias/15.jpg"></p><p>3、设置视口标签以及引入初始化样式</p><pre class="line-numbers language-none"><code class="language-none">&lt;meta name="viewport" content="width=device-width, user-scalable=no,         initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt;&lt;link rel="stylesheet" href="css/normalize.css"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、设置公共common.less文件</p><ul><li>新建common.less    设置好最常见的屏幕尺寸，利用媒体查询设置不同的html字体大小，因为除了首页其他页面也需要</li><li>我们关心的尺寸有 320px、360px、375px、384px、400px、414px、424px、480px、540px、720px、750px</li><li>划分的份数我们定为 15等份</li><li>因为我们pc端也可以打开我们苏宁移动端首页，我们默认html字体大小为 50px，注意这句话写到最上面</li></ul><h3 id="rem-适配方案2"><a href="#rem-适配方案2" class="headerlink" title="rem 适配方案2"></a>rem 适配方案2</h3><p>手机淘宝团队出的简洁高效 移动端适配库</p><p>我们再也不需要在写不同屏幕的媒体查询，因为里面js做了处理</p><p>它的原理是把当前设备划分为10等份，但是不同设备下，比例还是一致的。</p><p>我们要做的，就是确定好我们当前设备的html 文字大小就可以了</p><p>比如当前设计稿是 750px， 那么我们只需要把 html 文字大小设置为 75px(750px / 10) 就可以</p><p>里面页面元素rem值： 页面元素的px 值 /  75  </p><p>剩余的，让flexible.js来去算</p><p>github地址：<a href="https://link.jianshu.com/?t=https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible</a></p><p>总结：</p><p>因为flexible是默认将屏幕分为10等分</p><p>但是当屏幕大于750的时候希望不要再去重置html字体了</p><p>所以要自己通过媒体查询设置一下</p><p>并且要把权重提到最高</p><p>VSCode  px 转换rem 插件 cssrem </p><p>因为cssrem中css自动转化为rem是参照默认插件的16转换的所以需要自己配置</p><p><img src="/liaojie.github.io/medias/16.jpg"></p><p><img src="/liaojie.github.io/medias/17.jpg"></p><h1 id="移动端WEB开发之响应式布局"><a href="#移动端WEB开发之响应式布局" class="headerlink" title="移动端WEB开发之响应式布局"></a>移动端WEB开发之响应式布局</h1><h3 id="1-响应式开发原理"><a href="#1-响应式开发原理" class="headerlink" title="1 响应式开发原理"></a>1 响应式开发原理</h3><h4 id="1-1-响应式开发原理"><a href="#1-1-响应式开发原理" class="headerlink" title="1.1 响应式开发原理"></a>1.1 响应式开发原理</h4><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。</p><p>设备的划分情况：</p><ul><li>小于768的为超小屏幕（手机）</li><li>768~992之间的为小屏设备（平板）</li><li>992~1200的中等屏幕（桌面显示器）</li><li>大于1200的宽屏设备（大桌面显示器）</li></ul><h4 id="1-2-响应式布局容器"><a href="#1-2-响应式布局容器" class="headerlink" title="1.2 响应式布局容器"></a>1.2 响应式布局容器</h4><p>响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。</p><p>原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化。</p><p>父容器版心的尺寸划分</p><ul><li>超小屏幕（手机，小于 768px）：设置宽度为 100%</li><li>小屏幕（平板，大于等于 768px）：设置宽度为 750px</li><li>中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px</li><li>大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px </li></ul><p>但是我们也可以根据实际情况自己定义划分</p><h3 id="2-bootstrap的介绍"><a href="#2-bootstrap的介绍" class="headerlink" title="2 bootstrap的介绍"></a>2 bootstrap的介绍</h3><h4 id="2-1-Bootstrap简介"><a href="#2-1-Bootstrap简介" class="headerlink" title="2.1 Bootstrap简介"></a>2.1 Bootstrap简介</h4><p>Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和 JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p><p><a href="lhttp://www.bootcss.com/">中文网</a><br><a href="lhttp://getbootstrap.com/">官网</a><br><a href="http://bootstrap.css88.com/">推荐网站</a></p><p>框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。</p><h4 id="2-2-bootstrap优点"><a href="#2-2-bootstrap优点" class="headerlink" title="2.2 bootstrap优点"></a>2.2 bootstrap优点</h4><ul><li>标准化的html+css编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>让开发更简单，提高了开发的效率</li></ul><h4 id="2-3-版本简介"><a href="#2-3-版本简介" class="headerlink" title="2.3 版本简介"></a>2.3 版本简介</h4><p>2.x.x：停止维护,兼容性好,代码不够简洁，功能不够完善。</p><p>3.x.x：目前使用最多,稳定,但是放弃了IE6-IE7。对 IE8 支持但是界面效果不好,偏向用于开发响应式布局、移动设备优先的WEB 项目。</p><p>4.x.x：最新版，目前还不是很流行</p><h4 id="2-4bootstrap基本使用"><a href="#2-4bootstrap基本使用" class="headerlink" title="2.4bootstrap基本使用"></a>2.4bootstrap基本使用</h4><p>在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。</p><p>Bootstrap 使用四步曲： </p><ol><li>创建文件夹结构  </li></ol><p><img src="/liaojie.github.io/medias/18.png"></p><ol start="2"><li>创建 html 骨架结构 </li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 101 Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Bootstrap --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span>    <span class="token comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span>    <span class="token comment">&lt;!--[if lt IE 9]&gt;      &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;      &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;    &lt;![endif]--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>你好，世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/jquery/1.11.3/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>引入相关样式文件  </li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;!-- Bootstrap 核心样式--&gt;&lt;link rel="stylesheet" href="bootstrap/css/bootstrap.min.css"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><p>书写内容 </p><p>直接拿Bootstrap 预先定义好的样式来使用</p><p>修改Bootstrap 原来的样式，注意权重问题</p><p>学好Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</p></li></ol><h4 id="2-5-bootstrap布局容器"><a href="#2-5-bootstrap布局容器" class="headerlink" title="2.5 bootstrap布局容器"></a>2.5 bootstrap布局容器</h4><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 或者.container-fluid 容器，它提供了两个作此用处的类。</p><p>.container</p><ul><li>响应式布局的容器  固定宽度</li><li>大屏 ( &gt;=1200px)  宽度定为 1170px</li><li>中屏 ( &gt;=992px)   宽度定为  970px</li><li>小屏 ( &gt;=768px)   宽度定为  750px</li><li>超小屏  (100%) </li></ul><p>.container-fluid</p><ul><li>流式布局容器 百分百宽度</li><li>占据全部视口（viewport）的容器。</li></ul><h4 id="2-6-bootstrap栅格系统"><a href="#2-6-bootstrap栅格系统" class="headerlink" title="2.6 bootstrap栅格系统"></a>2.6 bootstrap栅格系统</h4><p>Bootstrap提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</p><ul><li>按照不同屏幕划分为1~12 等份</li><li>行（row） 可以去除父容器作用15px的边距</li><li>xs-extra small：超小； sm-small：小；  md-medium：中等； lg-large：大；</li><li>列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右15像素的 padding</li><li>可以同时为一列指定多个设备的类名，以便划分不同份数  例如 class=”col-md-4 col-sm-6”</li></ul><p>栅格嵌套</p><p>栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-*<br>元素内。</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 列嵌套 --&gt; &lt;div class="col-sm-4"&gt;    &lt;div class="row"&gt;         &lt;div class="col-sm-6"&gt;小列&lt;/div&gt;         &lt;div class="col-sm-6"&gt;小列&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列偏移</p><p>使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 列偏移 --&gt; &lt;div class="row"&gt;     &lt;div class="col-lg-4"&gt;1&lt;/div&gt;     &lt;div class="col-lg-4 col-lg-offset-4"&gt;2&lt;/div&gt; &lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列排序</p><p>通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 列排序 --&gt; &lt;div class="row"&gt;     &lt;div class="col-lg-4 col-lg-push-8"&gt;左侧&lt;/div&gt;     &lt;div class="col-lg-8 col-lg-pull-4"&gt;右侧&lt;/div&gt; &lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应式工具</p><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容。</p><p><img src="/liaojie.github.io/medias/19.jpg"></p><h3 id="3-阿里百秀案例制作"><a href="#3-阿里百秀案例制作" class="headerlink" title="3 阿里百秀案例制作"></a>3 阿里百秀案例制作</h3><h4 id="3-1-技术选型"><a href="#3-1-技术选型" class="headerlink" title="3.1 技术选型"></a>3.1 技术选型</h4><p>方案：我们采取响应式页面开发方案</p><p>技术：bootstrap框架</p><p>设计图： 本设计图采用 1280px 设计尺寸</p><p>项目结构搭建</p><p>Bootstrap 使用四步曲： </p><ol><li>创建文件夹结构  </li><li>创建 html 骨架结构  </li><li>引入相关样式文件  </li><li>书写内容 </li></ol><p>container宽度修改</p><p>因为本效果图采取 1280的宽度， 而Bootstrap 里面 container宽度 最大为 1170px，因此我们需要手动改下container宽度</p><pre class="line-numbers language-none"><code class="language-none">/* 利用媒体查询修改 container宽度适合效果图宽度  */ @media (min-width: 1280px) {    .container { width: 1280px;     }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex伸缩布局</title>
      <link href="/liaojie.github.io/2022/02/12/flex-shen-suo-bu-ju/"/>
      <url>/liaojie.github.io/2022/02/12/flex-shen-suo-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="移动web开发流式布局"><a href="#移动web开发流式布局" class="headerlink" title="移动web开发流式布局"></a>移动web开发流式布局</h1><h2 id="1-移动端基础"><a href="#1-移动端基础" class="headerlink" title="1 移动端基础"></a>1 移动端基础</h2><h3 id="1-1浏览器现状"><a href="#1-1浏览器现状" class="headerlink" title="1.1浏览器现状"></a>1.1浏览器现状</h3><p> PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。</p><p>移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。</p><p>国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。</p><p><strong>总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。</strong></p><h3 id="1-2-手机屏幕的现状"><a href="#1-2-手机屏幕的现状" class="headerlink" title="1.2 手机屏幕的现状"></a>1.2 手机屏幕的现状</h3><ul><li>移动端设备屏幕尺寸非常多，碎片化严重。</li><li>Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。</li><li>近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。</li><li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</li></ul><h3 id="1-3常见移动端屏幕尺寸"><a href="#1-3常见移动端屏幕尺寸" class="headerlink" title="1.3常见移动端屏幕尺寸"></a>1.3常见移动端屏幕尺寸</h3><p><img src="/liaojie.github.io/medias/1.png"></p><h3 id="1-4移动端调试方法"><a href="#1-4移动端调试方法" class="headerlink" title="1.4移动端调试方法"></a>1.4移动端调试方法</h3><ul><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h2 id="2-视口"><a href="#2-视口" class="headerlink" title="2 视口"></a>2 视口</h2><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p><h3 id="2-1-布局视口-layout-viewport"><a href="#2-1-布局视口-layout-viewport" class="headerlink" title="2.1 布局视口 layout viewport"></a>2.1 布局视口 layout viewport</h3><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p><p><img src="/liaojie.github.io/medias/2.png"></p><h3 id="2-2视觉视口-visual-viewport"><a href="#2-2视觉视口-visual-viewport" class="headerlink" title="2.2视觉视口 visual viewport"></a>2.2视觉视口 visual viewport</h3><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><p><img src="/liaojie.github.io/medias/3.png"></p><h3 id="2-3理想视口-ideal-viewport"><a href="#2-3理想视口-ideal-viewport" class="headerlink" title="2.3理想视口 ideal viewport"></a>2.3理想视口 ideal viewport</h3><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p><p>理想视口，对设备来讲，是最理想的视口尺寸</p><p>需要手动添写meta视口标签通知浏览器操作</p><p>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p><p><strong>总结：我们开发最终会用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口</strong></p><h3 id="2-4meta标签"><a href="#2-4meta标签" class="headerlink" title="2.4meta标签"></a>2.4meta标签</h3><p><img src="/liaojie.github.io/medias/4.png"></p><p>最标准的viewport设置</p><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例1.0</li><li>最小允许的缩放比例1.0</li></ul><h2 id="3二倍图"><a href="#3二倍图" class="headerlink" title="3二倍图"></a>3二倍图</h2><h3 id="3-1物理像素-amp-物理像素比"><a href="#3-1物理像素-amp-物理像素比" class="headerlink" title="3.1物理像素&amp;物理像素比"></a>3.1物理像素&amp;物理像素比</h3><p>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>我们开发时候的1px 不是一定等于1个物理像素的</p><p>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</p><p>如果把1张100 * 100的图片放到手机里面会按照物理像素比给我们缩放</p><p>lRetina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</p><p>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</p><p>通常使用二倍图， 因为iPhone 6 的影响背景图片 注意缩放问题</p><h3 id="3-2背景缩放background-size"><a href="#3-2背景缩放background-size" class="headerlink" title="3.2背景缩放background-size"></a>3.2背景缩放background-size</h3><p>background-size 属性规定背景图像的尺寸</p><pre class="line-numbers language-none"><code class="language-none">background-size: 背景图片宽度 背景图片高度;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单位： 长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h2 id="4-移动开发选择和技术解决方案"><a href="#4-移动开发选择和技术解决方案" class="headerlink" title="4 移动开发选择和技术解决方案"></a>4 移动开发选择和技术解决方案</h2><p>####4.1移动端主流方案</p><p>1.单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile)<br>可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站</p><p>京东pc端：</p><p><img src="/liaojie.github.io/medias/5.png"></p><p>京东移动端：</p><p><img src="/liaojie.github.io/medias/6.jpg"></p><p>2.响应式页面兼容移动端（其次）</p><p><img src="/liaojie.github.io/medias/7.jpg"></p><p>响应式网站：即pc和移动端共用一套网站，只不过在不同屏幕下，样式会自动适配</p><h3 id="4-2-移动端技术解决方案"><a href="#4-2-移动端技术解决方案" class="headerlink" title="4.2 移动端技术解决方案"></a>4.2 移动端技术解决方案</h3><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。</p><p>我们可以放心使用 H5 标签和 CSS3 样式。</p><p>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p><p>官网地址： <a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><h3 id="4-3-移动端大量使用-CSS3盒子模型box-sizin"><a href="#4-3-移动端大量使用-CSS3盒子模型box-sizin" class="headerlink" title="4.3 移动端大量使用 CSS3盒子模型box-sizin"></a>4.3 移动端大量使用 CSS3盒子模型box-sizin</h3><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </p><p>CSS3盒子模型：     盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding </p><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><pre class="line-numbers language-none"><code class="language-none">/*CSS3盒子模型*/box-sizing: border-box;/*传统盒子模型*/box-sizing: content-box;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>移动端可以全部CSS3 盒子模型</p><p>PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</p><h3 id="4-4移动端特殊样式"><a href="#4-4移动端特殊样式" class="headerlink" title="4.4移动端特殊样式"></a>4.4移动端特殊样式</h3><pre class="line-numbers language-none"><code class="language-none">/*CSS3盒子模型*/box-sizing: border-box;-webkit-box-sizing: border-box;/*点击高亮我们需要清除清除  设置为transparent 完成透明*/-webkit-tap-highlight-color: transparent;/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/-webkit-appearance: none;/*禁用长按页面时的弹出菜单*/img,a { -webkit-touch-callout: none; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5移动端常见布局"><a href="#5移动端常见布局" class="headerlink" title="5移动端常见布局"></a>5移动端常见布局</h2><p>移动端单独制作</p><ul><li>流式布局（百分比布局）</li><li>flex 弹性布局（强烈推荐）</li><li>less+rem+媒体查询布局</li><li>混合布局</li></ul><p>响应式</p><ul><li>媒体查询</li><li>bootstarp</li></ul><p>流式布局：</p><p>流式布局，就是百分比布局，也称非固定像素布局。</p><p>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</p><p>流式布局方式是移动web开发使用的比较常见的布局方式。</p><h1 id="移动web开发——flex布局"><a href="#移动web开发——flex布局" class="headerlink" title="移动web开发——flex布局"></a>移动web开发——flex布局</h1><h2 id="1传统布局和flex布局对比"><a href="#1传统布局和flex布局对比" class="headerlink" title="1传统布局和flex布局对比"></a>1传统布局和flex布局对比</h2><h3 id="1-1传统布局"><a href="#1-1传统布局" class="headerlink" title="1.1传统布局"></a>1.1传统布局</h3><ul><li>兼容性好</li><li>布局繁琐</li><li>局限性，不能再移动端很好的布局</li></ul><h3 id="1-2-flex布局"><a href="#1-2-flex布局" class="headerlink" title="1.2 flex布局"></a>1.2 flex布局</h3><ul><li>操作方便，布局极其简单，移动端使用比较广泛</li><li>pc端浏览器支持情况比较差</li><li>IE11或更低版本不支持flex或仅支持部分</li></ul><h3 id="1-3-建议"><a href="#1-3-建议" class="headerlink" title="1.3 建议"></a>1.3 建议</h3><ul><li>如果是pc端页面布局，还是采用传统方式</li><li>如果是移动端或者是不考虑兼容的pc则采用flex</li></ul><h2 id="2-flex布局原理"><a href="#2-flex布局原理" class="headerlink" title="2 flex布局原理"></a>2 flex布局原理</h2><ul><li>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li><li>flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局 </li><li>采用 Flex 布局的元素，称为 Flex 容器（flexcontainer），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flexitem），简称”项目”。</li></ul><p><strong>总结</strong>：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</p><h2 id="3-父项常见属性"><a href="#3-父项常见属性" class="headerlink" title="3 父项常见属性"></a>3 父项常见属性</h2><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行  </li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h3 id="3-1-flex-direction设置主轴的方向"><a href="#3-1-flex-direction设置主轴的方向" class="headerlink" title="3.1 flex-direction设置主轴的方向"></a>3.1 flex-direction设置主轴的方向</h3><ul><li>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴</li><li>默认主轴方向就是 x 轴方向，水平向右</li><li>默认侧轴方向就是 y 轴方向，水平向下</li></ul><p><img src="/liaojie.github.io/medias/1.jpg"></p><ul><li>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</li></ul><p><img src="/liaojie.github.io/medias/2.jpg"></p><h3 id="3-2-justify-content-设置主轴上的子元素排列方式"><a href="#3-2-justify-content-设置主轴上的子元素排列方式" class="headerlink" title="3.2 justify-content 设置主轴上的子元素排列方式"></a>3.2 justify-content 设置主轴上的子元素排列方式</h3><p><img src="/liaojie.github.io/medias/3.jpg"></p><h3 id="3-3-flex-wrap设置是否换行"><a href="#3-3-flex-wrap设置是否换行" class="headerlink" title="3.3 flex-wrap设置是否换行"></a>3.3 flex-wrap设置是否换行</h3><ul><li>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。</li><li>nowrap 不换行</li><li>wrap 换行</li></ul><h3 id="3-4-align-items-设置侧轴上的子元素排列方式（单行-）"><a href="#3-4-align-items-设置侧轴上的子元素排列方式（单行-）" class="headerlink" title="3.4 align-items 设置侧轴上的子元素排列方式（单行 ）"></a>3.4 align-items 设置侧轴上的子元素排列方式（单行 ）</h3><ul><li>该属性是控制子项在侧轴（默认是y轴）上的排列方式  在子项为单项（单行）的时候使用</li><li>flex-start 从头部开始</li><li>flex-end 从尾部开始</li><li>center 居中显示</li><li>stretch 拉伸</li></ul><h3 id="3-5-align-content-设置侧轴上的子元素的排列方式（多行）"><a href="#3-5-align-content-设置侧轴上的子元素的排列方式（多行）" class="headerlink" title="3.5 align-content  设置侧轴上的子元素的排列方式（多行）"></a>3.5 align-content  设置侧轴上的子元素的排列方式（多行）</h3><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。</p><p><img src="/liaojie.github.io/medias/4.jpg"></p><h3 id="3-6-align-content-和align-items区别"><a href="#3-6-align-content-和align-items区别" class="headerlink" title="3.6 align-content 和align-items区别"></a>3.6 align-content 和align-items区别</h3><ul><li>align-items  适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。 </li><li>总结就是单行找align-items  多行找 align-content</li></ul><h3 id="3-7-flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性"><a href="#3-7-flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性" class="headerlink" title="3.7 flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性"></a>3.7 flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</h3><pre class="line-numbers language-none"><code class="language-none">flex-flow:row wrap;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-flex布局子项常见属性"><a href="#4-flex布局子项常见属性" class="headerlink" title="4 flex布局子项常见属性"></a>4 flex布局子项常见属性</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="4-1-flex-属性"><a href="#4-1-flex-属性" class="headerlink" title="4.1  flex 属性"></a>4.1  flex 属性</h3><p>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。</p><pre class="line-numbers language-none"><code class="language-none">.item {    flex: &lt;number&gt;; /* 默认值 0 */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-align-self控制子项自己在侧轴上的排列方式"><a href="#4-2-align-self控制子项自己在侧轴上的排列方式" class="headerlink" title="4.2 align-self控制子项自己在侧轴上的排列方式"></a>4.2 align-self控制子项自己在侧轴上的排列方式</h3><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</p><p>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><pre class="line-numbers language-none"><code class="language-none">span:nth-child(2) {      /* 设置自己在侧轴上的排列方式 */      align-self: flex-end;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-order-属性定义项目的排列顺序"><a href="#4-3-order-属性定义项目的排列顺序" class="headerlink" title="4.3 order 属性定义项目的排列顺序"></a>4.3 order 属性定义项目的排列顺序</h3><p>数值越小，排列越靠前，默认为0。</p><p>注意：和 z-index 不一样。</p><pre class="line-numbers language-none"><code class="language-none">.item {    order: &lt;number&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-携程网首页案例制作"><a href="#5-携程网首页案例制作" class="headerlink" title="5 携程网首页案例制作"></a>5 携程网首页案例制作</h2><p>携程网链接：<a href="http://m.ctrip.com/">http://m.ctrip.com</a></p><p>1.技术选型</p><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取flex布局</p><p>2.搭建相关文件夹</p><p><img src="/liaojie.github.io/medias/5.jpg"></p><p>3.设置视口标签以及引入初始化样式</p><pre class="line-numbers language-none"><code class="language-none">&lt;meta name="viewport" content="width=device-width, user-scalable=no,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt;&lt;link rel="stylesheet" href="css/normalize.css"&gt;&lt;link rel="stylesheet" href="css/index.css"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.常用初始化样式</p><pre class="line-numbers language-none"><code class="language-none">body{  max-width: 540px;  min-width:320px;  margin:0 auto;  font:normal 14px/1.5 Tahoma,"Lucida Grande",Verdana,"Microsoft Yahei",STXihei,hei;  color:#000;  background:#f2f2f2;  overflow-x:hidden;  -webkit-tap-highlight-color:transparent;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.模块名字划分</p><p><img src="/liaojie.github.io/medias/8.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex伸缩布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib</title>
      <link href="/liaojie.github.io/2022/02/12/matplotlib/"/>
      <url>/liaojie.github.io/2022/02/12/matplotlib/</url>
      
        <content type="html"><![CDATA[<h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><h2 id="Matplotlib之HelloWorld"><a href="#Matplotlib之HelloWorld" class="headerlink" title="Matplotlib之HelloWorld"></a>Matplotlib之HelloWorld</h2><h3 id="什么是Matplotlib"><a href="#什么是Matplotlib" class="headerlink" title="什么是Matplotlib"></a>什么是Matplotlib</h3><ul><li>是专门用于开发2D图表(包括3D图表)</li><li>以渐进、交互式方式实现数据可视化</li></ul><h3 id="为什么要学习Matplotlib"><a href="#为什么要学习Matplotlib" class="headerlink" title="为什么要学习Matplotlib"></a>为什么要学习Matplotlib</h3><p>可视化是在整个数据挖掘的关键辅助工具，可以清晰的理解数据，从而调整我们的分析方法。</p><ul><li>能将数据进行可视化,更直观的呈现</li><li>使数据更加客观、更具说服力</li></ul><h3 id="实现一个简单的Matplotlib画图-—-以折线图为例"><a href="#实现一个简单的Matplotlib画图-—-以折线图为例" class="headerlink" title="实现一个简单的Matplotlib画图 — 以折线图为例"></a>实现一个简单的Matplotlib画图 — 以折线图为例</h3><h4 id="3-1-matplotlib-pyplot模块"><a href="#3-1-matplotlib-pyplot模块" class="headerlink" title="3.1 matplotlib.pyplot模块"></a>3.1 matplotlib.pyplot模块</h4><p>matplotlib.pytplot包含了一系列类似于matlab的画图函数。</p><blockquote><p>import matplotlib.pyplot as plt</p></blockquote><h4 id="3-2-图形绘制流程"><a href="#3-2-图形绘制流程" class="headerlink" title="3.2 图形绘制流程"></a>3.2 图形绘制流程</h4><ul><li>1.创建画布 – plt.figure()</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token punctuation">)</span>figsize<span class="token punctuation">:</span>指定图的长宽dpi<span class="token punctuation">:</span>图像的清晰度返回fig对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>2.绘制图像 – plt.plot(x, y)</li></ul><blockquote><p>以折线图为例</p></blockquote><ul><li>3.显示图像 – plt.show()</li></ul><h4 id="3-3-折线图绘制与显示"><a href="#3-3-折线图绘制与显示" class="headerlink" title="3.3 折线图绘制与显示"></a>3.3 折线图绘制与显示</h4><p>举例：展现上海一周的天气,比如从星期一到星期日的天气温度如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 1.创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 2.绘制折线图</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 3.显示图像</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="认识Matplotlib图像结构-了解"><a href="#认识Matplotlib图像结构-了解" class="headerlink" title="认识Matplotlib图像结构(了解)"></a>认识Matplotlib图像结构(了解)</h4><p><img src="/liaojie.github.io/medias/matplotlib%E5%9B%BE%E5%83%8F%E7%BB%93%E6%9E%84.png"></p><h2 id="基础绘图功能-—-以折线图为例"><a href="#基础绘图功能-—-以折线图为例" class="headerlink" title="基础绘图功能 — 以折线图为例"></a>基础绘图功能 — 以折线图为例</h2><h3 id="完善原始折线图-—-给图形添加辅助功能"><a href="#完善原始折线图-—-给图形添加辅助功能" class="headerlink" title="完善原始折线图 — 给图形添加辅助功能"></a>完善原始折线图 — 给图形添加辅助功能</h3><p>为了更好地理解所有基础绘图功能，我们通过天气温度变化的绘图来融合所有的基础API使用<br>需求：画出某城市11点到12点1小时内每分钟的温度变化折线图，温度范围在15度 ~ 18度</p><h4 id="1-1-准备数据并画出初始折线图"><a href="#1-1-准备数据并画出初始折线图" class="headerlink" title="1.1 准备数据并画出初始折线图"></a>1.1 准备数据并画出初始折线图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> random<span class="token comment"># 画出温度变化图</span><span class="token comment"># 0.准备x, y坐标的数据</span>x <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>y_shanghai <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token comment"># 1.创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token comment"># 2.绘制折线图</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">)</span><span class="token comment"># 3.显示图像</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-添加自定义x-y刻度"><a href="#1-2-添加自定义x-y刻度" class="headerlink" title="1.2 添加自定义x,y刻度"></a>1.2 添加自定义x,y刻度</h4><ul><li><code>plt.xticks(x, **kwargs)</code><br>x:要显示的刻度值</li><li><code>plt.yticks(y, **kwargs)</code><br>y:要显示的刻度值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 增加以下两行代码</span><span class="token comment"># 构造x轴刻度标签</span>x_ticks_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11点{}分"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token comment"># 构造y轴刻度</span>y_ticks <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token comment"># 修改x,y轴坐标的刻度显示</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_ticks_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-中文显示问题解决"><a href="#1-3-中文显示问题解决" class="headerlink" title="1.3 中文显示问题解决"></a>1.3 中文显示问题解决</h4><p>解决方案一：<br>下载中文字体（黑体，看准系统版本）</p><ul><li>步骤一：下载 SimHei 字体（或者其他的支持中文显示的字体也行）</li><li>步骤二：安装字体<ul><li>linux下：拷贝字体到 usr/share/fonts 下：<br><code>sudo cp ~/SimHei.ttf /usr/share/fonts/SimHei.ttf</code></li><li>windows和mac下：双击安装</li></ul></li><li>步骤三：删除<code>~/.matplotlib</code>中的缓存文件</li></ul><pre class="line-numbers language-none"><code class="language-none">cd ~/.matplotlibrm -r *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>步骤四：修改配置文件matplotlibrc</li></ul><p><code>vi ~/.matplotlib/matplotlibrc</code></p><p>将文件内容修改为：</p><pre class="line-numbers language-none"><code class="language-none">font.family : sans-seriffont.sans-serif : SimHeiaxes.unicode_minus : False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解决方案二：<br>在Python脚本中动态设置matplotlibrc,这样也可以避免由于更改配置文件而造成的麻烦，具体代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pylab <span class="token keyword">import</span> mpl<span class="token comment"># 设置显示中文字体</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.sans-serif"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"SimHei"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有时候，字体更改后，会导致坐标轴中的部分字符无法正常显示，此时需要更改axes.unicode_minus参数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置正常显示符号</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"axes.unicode_minus"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-4-添加网格显示"><a href="#1-4-添加网格显示" class="headerlink" title="1.4 添加网格显示"></a>1.4 添加网格显示</h4><p>为了更加清楚地观察图形对应的值</p><blockquote><p>plt.grid(True, linestyle=’–’, alpha=0.5)</p></blockquote><h4 id="1-5-添加描述信息"><a href="#1-5-添加描述信息" class="headerlink" title="1.5 添加描述信息"></a>1.5 添加描述信息</h4><p>添加x轴、y轴描述信息及标题</p><blockquote><p>通过fontsize参数可以修改图像中字体的大小</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"中午11点0分到12点之间的温度变化图示"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-6-图像保存"><a href="#1-6-图像保存" class="headerlink" title="1.6 图像保存"></a>1.6 图像保存</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 保存图片到指定路径</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>注意：plt.show()会释放figure资源，如果在显示图像之后保存图片将只能保存空图片。<br>完整代码：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> random<span class="token keyword">from</span> pylab <span class="token keyword">import</span> mpl<span class="token comment"># 设置显示中文字体</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.sans-serif"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"SimHei"</span><span class="token punctuation">]</span><span class="token comment"># 设置正常显示符号</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"axes.unicode_minus"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 0.准备数据</span>x <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>y_shanghai <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token comment"># 1.创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 2.绘制图像</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">)</span><span class="token comment"># 2.1 添加x,y轴刻度</span><span class="token comment"># 构造x,y轴刻度标签</span>x_ticks_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11点{}分"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>y_ticks <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token comment"># 刻度显示</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_ticks_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 2.2 添加网格显示</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment"># 2.3 添加描述信息</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"中午11点--12点某城市温度变化图"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment"># 2.4 图像保存</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"./test.png"</span><span class="token punctuation">)</span><span class="token comment"># 3.图像显示</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="在一个坐标系中绘制多个图像"><a href="#在一个坐标系中绘制多个图像" class="headerlink" title="在一个坐标系中绘制多个图像"></a>在一个坐标系中绘制多个图像</h3><h4 id="2-1-多次plot"><a href="#2-1-多次plot" class="headerlink" title="2.1 多次plot"></a>2.1 多次plot</h4><p>需求：再添加一个城市的温度变化</p><p>收集到北京当天温度变化情况，温度在1度到3度。怎么去添加另一个在同一坐标系当中的不同图形，其实很简单只需要再次plot即可，但是需要区分线条</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 增加北京的温度数据</span>y_beijing <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token comment"># 绘制折线图</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">)</span><span class="token comment"># 使用多次plot可以画多个折线</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_beijing<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-设置图形风格"><a href="#2-2-设置图形风格" class="headerlink" title="2.2 设置图形风格"></a>2.2 设置图形风格</h4><table><thead><tr><th>颜色字符</th><th>风格字符</th></tr></thead><tbody><tr><td>r 红色</td><td>- 实线</td></tr><tr><td>g 绿色</td><td>- - 虚线</td></tr><tr><td>b 蓝色</td><td>-. 点划线</td></tr><tr><td>w 白色</td><td>: 点虚线</td></tr><tr><td>c 青色</td><td>‘ ‘ 留空、空格</td></tr><tr><td>m 洋红</td><td></td></tr><tr><td>y 黄色</td><td></td></tr><tr><td>k 黑色</td><td></td></tr></tbody></table><h4 id="2-3-显示图例"><a href="#2-3-显示图例" class="headerlink" title="2.3 显示图例"></a>2.3 显示图例</h4><ul><li>注意：如果只在plt.plot()中设置label还不能最终显示出图例，还需要通过plt.legend()将图例显示出来。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 绘制折线图</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token comment"># 使用多次plot可以画多个折线</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_beijing<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token comment"># 显示图例</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"best"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>Location String</th><th>Location Code</th></tr></thead><tbody><tr><td>‘best’</td><td>0</td></tr><tr><td>‘upper right’</td><td>1</td></tr><tr><td>‘upper left’</td><td>2</td></tr><tr><td>‘lower left’</td><td>3</td></tr><tr><td>‘lower right’</td><td>4</td></tr><tr><td>‘right’</td><td>5</td></tr><tr><td>‘center left’</td><td>6</td></tr><tr><td>‘center right’</td><td>7</td></tr><tr><td>‘lower center’</td><td>8</td></tr><tr><td>‘upper center’</td><td>9</td></tr><tr><td>‘center’</td><td>10</td></tr></tbody></table><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 0.准备数据</span>x <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>y_shanghai <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>y_beijing <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token comment"># 1.创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 2.绘制图像</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_beijing<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token comment"># 2.1 添加x,y轴刻度</span><span class="token comment"># 构造x,y轴刻度标签</span>x_ticks_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11点{}分"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>y_ticks <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token comment"># 刻度显示</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_ticks_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 2.2 添加网格显示</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment"># 2.3 添加描述信息</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"中午11点--12点某城市温度变化图"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment"># 2.4 图像保存</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"./test.png"</span><span class="token punctuation">)</span><span class="token comment"># 2.5 添加图例</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 3.图像显示</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个坐标系显示—-plt-subplots-面向对象的画图方法"><a href="#多个坐标系显示—-plt-subplots-面向对象的画图方法" class="headerlink" title="多个坐标系显示— plt.subplots(面向对象的画图方法)"></a>多个坐标系显示— plt.subplots(面向对象的画图方法)</h3><p>如果我们想要将上海和北京的天气图显示在同一个图的不同坐标系当中</p><p>可以通过subplots函数实现(旧的版本中有subplot，使用起来不方便)，推荐subplots函数</p><ul><li><code>matplotlib.pyplot.subplots(nrows=1, ncols=1, **fig_kw)</code> 创建一个带有多个axes(坐标系/绘图区)的图</li></ul><pre class="line-numbers language-none"><code class="language-none">Parameters:nrows, ncols : 设置有几行几列坐标系int, optional, default: 1, Number of rows/columns of the subplot grid.Returns:fig : 图对象axes : 返回相应数量的坐标系设置标题等方法不同：set_xticksset_yticksset_xlabelset_ylabel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于axes子坐标系的更多方法：参考<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes">https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes</a></p><ul><li>注意：plt.函数名()相当于面向过程的画图方法，axes.set_方法名()相当于面向对象的画图方法。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 0.准备数据</span>x <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>y_shanghai <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>y_beijing <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token comment"># 1.创建画布</span><span class="token comment"># plt.figure(figsize=(20, 8), dpi=100)</span>fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 2.绘制图像</span><span class="token comment"># plt.plot(x, y_shanghai, label="上海")</span><span class="token comment"># plt.plot(x, y_beijing, color="r", linestyle="--", label="北京")</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_beijing<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token comment"># 2.1 添加x,y轴刻度</span><span class="token comment"># 构造x,y轴刻度标签</span>x_ticks_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11点{}分"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>y_ticks <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token comment"># 刻度显示</span><span class="token comment"># plt.xticks(x[::5], x_ticks_label[::5])</span><span class="token comment"># plt.yticks(y_ticks[::5])</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>x_ticks_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>x_ticks_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 2.2 添加网格显示</span><span class="token comment"># plt.grid(True, linestyle="--", alpha=0.5)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment"># 2.3 添加描述信息</span><span class="token comment"># plt.xlabel("时间")</span><span class="token comment"># plt.ylabel("温度")</span><span class="token comment"># plt.title("中午11点--12点某城市温度变化图", fontsize=20)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"中午11点--12点某城市温度变化图"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"中午11点--12点某城市温度变化图"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment"># # 2.4 图像保存</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"./test.png"</span><span class="token punctuation">)</span><span class="token comment"># # 2.5 添加图例</span><span class="token comment"># plt.legend(loc=0)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 3.图像显示</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="折线图的应用场景"><a href="#折线图的应用场景" class="headerlink" title="折线图的应用场景"></a>折线图的应用场景</h3><ul><li>呈现公司产品(不同区域)每天活跃用户数</li><li>呈现app每天下载数量</li><li>呈现产品新功能上线后,用户点击次数随时间的变化</li><li>拓展：画各种数学函数图像<ul><li>注意：plt.plot()除了可以画折线图，也可以用于画各种数学函数图像</li></ul></li></ul><p>正弦函数图像</p><p>代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 0.准备数据</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># 1.创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 2.绘制函数图像</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment"># 2.1 添加网格显示</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 3.显示图像</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见图形绘制"><a href="#常见图形绘制" class="headerlink" title="常见图形绘制"></a>常见图形绘制</h2><p>Matplotlib能够绘制折线图、散点图、柱状图、直方图、饼图。<br>我们需要知道不同的统计图的意义，以此来决定选择哪种统计图来呈现我们的数据。</p><h3 id="常见图形种类及意义"><a href="#常见图形种类及意义" class="headerlink" title="常见图形种类及意义"></a>常见图形种类及意义</h3><ul><li><p>折线图：以折线的上升或下降来表示统计数量的增减变化的统计图<br>特点：能够显示数据的变化趋势，反映事物的变化情况。(变化)<br><code>api：plt.plot(x, y)</code></p></li><li><p>散点图：用两组数据构成多个坐标点，考察坐标点的分布,判断两变量之间是否存在某种关联或总结坐标点的分布模式。<br>特点：判断变量之间是否存在数量关联趋势,展示离群点(分布规律)<br><code>api：plt.scatter(x, y)</code></p></li><li><p>柱状图：排列在工作表的列或行中的数据可以绘制到柱状图中。<br>特点：绘制连离散的数据,能够一眼看出各个数据的大小,比较数据之间的差别。(统计/对比)<br><code>api：plt.bar(x, width, align='center', **kwargs)</code></p></li></ul><pre class="line-numbers language-none"><code class="language-none">Parameters:x : 需要传递的数据width : 柱状图的宽度align : 每个柱状图的位置对齐方式{‘center’, ‘edge’}, optional, default: ‘center’**kwargs :color:选择柱状图的颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直方图：由一系列高度不等的纵向条纹或线段表示数据分布的情况。 一般用横轴表示数据范围，纵轴表示分布情况。<br>特点：绘制连续性的数据展示一组或者多组数据的分布状况(统计)<br><code>api：matplotlib.pyplot.hist(x, bins=None)</code></li></ul><pre class="line-numbers language-none"><code class="language-none">Parameters:x : 需要传递的数据bins : 组距<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>饼图：用于表示不同分类的占比情况，通过弧度大小来对比各种分类。<br>特点：分类数据的占比情况(占比)<br><code>api：plt.pie(x, labels=,autopct=,colors)</code></li></ul><pre class="line-numbers language-none"><code class="language-none">Parameters:x:数量，自动算百分比labels:每部分名称autopct:占比显示指定%1.2f%%colors:每部分颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="散点图绘制"><a href="#散点图绘制" class="headerlink" title="散点图绘制"></a>散点图绘制</h3><p>需求：探究房屋面积和房屋价格的关系<br>房屋面积数据：</p><pre class="line-numbers language-none"><code class="language-none">x = [225.98, 247.07, 253.14, 457.85, 241.58, 301.01, 20.67, 288.64,163.56, 120.06, 207.83, 342.75, 147.9 , 53.06, 224.72, 29.51,21.61, 483.21, 245.25, 399.25, 343.35]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>房屋价格数据：</p><pre class="line-numbers language-none"><code class="language-none">y = [196.63, 203.88, 210.75, 372.74, 202.41, 247.61, 24.9 , 239.34,140.32, 104.15, 176.84, 288.23, 128.79, 49.64, 191.74, 33.1 ,30.74, 400.02, 205.35, 330.64, 283.45]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 0.准备数据</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">225.98</span><span class="token punctuation">,</span> <span class="token number">247.07</span><span class="token punctuation">,</span> <span class="token number">253.14</span><span class="token punctuation">,</span> <span class="token number">457.85</span><span class="token punctuation">,</span> <span class="token number">241.58</span><span class="token punctuation">,</span> <span class="token number">301.01</span><span class="token punctuation">,</span> <span class="token number">20.67</span><span class="token punctuation">,</span> <span class="token number">288.64</span><span class="token punctuation">,</span><span class="token number">163.56</span><span class="token punctuation">,</span> <span class="token number">120.06</span><span class="token punctuation">,</span> <span class="token number">207.83</span><span class="token punctuation">,</span> <span class="token number">342.75</span><span class="token punctuation">,</span> <span class="token number">147.9</span> <span class="token punctuation">,</span> <span class="token number">53.06</span><span class="token punctuation">,</span> <span class="token number">224.72</span><span class="token punctuation">,</span> <span class="token number">29.51</span><span class="token punctuation">,</span><span class="token number">21.61</span><span class="token punctuation">,</span> <span class="token number">483.21</span><span class="token punctuation">,</span> <span class="token number">245.25</span><span class="token punctuation">,</span> <span class="token number">399.25</span><span class="token punctuation">,</span> <span class="token number">343.35</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">196.63</span><span class="token punctuation">,</span> <span class="token number">203.88</span><span class="token punctuation">,</span> <span class="token number">210.75</span><span class="token punctuation">,</span> <span class="token number">372.74</span><span class="token punctuation">,</span> <span class="token number">202.41</span><span class="token punctuation">,</span> <span class="token number">247.61</span><span class="token punctuation">,</span> <span class="token number">24.9</span> <span class="token punctuation">,</span> <span class="token number">239.34</span><span class="token punctuation">,</span><span class="token number">140.32</span><span class="token punctuation">,</span> <span class="token number">104.15</span><span class="token punctuation">,</span> <span class="token number">176.84</span><span class="token punctuation">,</span> <span class="token number">288.23</span><span class="token punctuation">,</span> <span class="token number">128.79</span><span class="token punctuation">,</span> <span class="token number">49.64</span><span class="token punctuation">,</span> <span class="token number">191.74</span><span class="token punctuation">,</span> <span class="token number">33.1</span> <span class="token punctuation">,</span><span class="token number">30.74</span><span class="token punctuation">,</span> <span class="token number">400.02</span><span class="token punctuation">,</span> <span class="token number">205.35</span><span class="token punctuation">,</span> <span class="token number">330.64</span><span class="token punctuation">,</span> <span class="token number">283.45</span><span class="token punctuation">]</span><span class="token comment"># 1.创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 2.绘制散点图</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment"># 3.显示图像</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="柱状图绘制"><a href="#柱状图绘制" class="headerlink" title="柱状图绘制"></a>柱状图绘制</h3><p>需求-对比每部电影的票房收入</p><ul><li><p>准备数据</p><pre class="line-numbers language-none"><code class="language-none">['雷神3：诸神黄昏','正义联盟','东方快车谋杀案','寻梦环游记','全球风暴', '降魔传','追捕','七十七天','密战','狂兽','其它'][73853,57767,22354,15969,14839,8725,8716,8318,7916,6764,52222]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>绘制柱状图</p></li></ul><p>代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 0.准备数据</span><span class="token comment"># 电影名字</span>movie_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'雷神3：诸神黄昏'</span><span class="token punctuation">,</span><span class="token string">'正义联盟'</span><span class="token punctuation">,</span><span class="token string">'东方快车谋杀案'</span><span class="token punctuation">,</span><span class="token string">'寻梦环游记'</span><span class="token punctuation">,</span><span class="token string">'全球风暴'</span><span class="token punctuation">,</span><span class="token string">'降魔传'</span><span class="token punctuation">,</span><span class="token string">'追捕'</span><span class="token punctuation">,</span><span class="token string">'七十七天'</span><span class="token punctuation">,</span><span class="token string">'密战'</span><span class="token punctuation">,</span><span class="token string">'狂兽'</span><span class="token punctuation">,</span><span class="token string">'其它'</span><span class="token punctuation">]</span><span class="token comment"># 横坐标</span>x <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>movie_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 票房数据</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">73853</span><span class="token punctuation">,</span><span class="token number">57767</span><span class="token punctuation">,</span><span class="token number">22354</span><span class="token punctuation">,</span><span class="token number">15969</span><span class="token punctuation">,</span><span class="token number">14839</span><span class="token punctuation">,</span><span class="token number">8725</span><span class="token punctuation">,</span><span class="token number">8716</span><span class="token punctuation">,</span><span class="token number">8318</span><span class="token punctuation">,</span><span class="token number">7916</span><span class="token punctuation">,</span><span class="token number">6764</span><span class="token punctuation">,</span><span class="token number">52222</span><span class="token punctuation">]</span><span class="token comment"># 1.创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 2.绘制柱状图</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 2.1b修改x轴的刻度显示</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x<span class="token punctuation">,</span> movie_name<span class="token punctuation">)</span><span class="token comment"># 2.2 添加网格显示</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment"># 2.3 添加标题</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"电影票房收入对比"</span><span class="token punctuation">)</span><span class="token comment"># 3.显示图像</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接：<br><a href="https://matplotlib.org/index.html">https://matplotlib.org/index.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RL</title>
      <link href="/liaojie.github.io/2022/02/12/rl/"/>
      <url>/liaojie.github.io/2022/02/12/rl/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Theano</title>
      <link href="/liaojie.github.io/2022/02/12/theano/"/>
      <url>/liaojie.github.io/2022/02/12/theano/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tkinter</title>
      <link href="/liaojie.github.io/2022/02/12/tkinter/"/>
      <url>/liaojie.github.io/2022/02/12/tkinter/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Tkinter"><a href="#什么是-Tkinter" class="headerlink" title="什么是 Tkinter"></a>什么是 Tkinter</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>Tkinter 是使用 python 进行窗口视窗设计的模块. 简单的构造, 多平台, 多系统的兼容性, 能让它成为让你快速入门定制窗口文件的好助手. 它在 python 窗口视窗模块中是一款简单型的. 所以用来入门, 熟悉 窗口视窗的使用, 非常有必要.</p><h1 id="Label-amp-Button-标签和按钮"><a href="#Label-amp-Button-标签和按钮" class="headerlink" title="Label &amp; Button 标签和按钮"></a>Label &amp; Button 标签和按钮</h1><h2 id="窗口主体框架"><a href="#窗口主体框架" class="headerlink" title="窗口主体框架"></a>窗口主体框架</h2><p>每一个 tkinter 应用的主体框架都可以包含下面这部分. 定义 <code>window</code> 窗口 和 <code>window</code>的一些属性, 然后书写窗口内容, 最后执行window.mainloop让窗口活起来.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwindow <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'my window'</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'200x100'</span><span class="token punctuation">)</span><span class="token comment"># 这里是窗口的内容</span>window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="窗口内容"><a href="#窗口内容" class="headerlink" title="窗口内容"></a>窗口内容</h2><p>这次我们会建立一个用来描述的标签 <code>tk.Label</code>, 比如:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span>     text<span class="token operator">=</span><span class="token string">'OMG! this is TK!'</span><span class="token punctuation">,</span>    <span class="token comment"># 标签的文字</span>    bg<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span>     <span class="token comment"># 背景颜色</span>    font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Arial'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment"># 字体和字体大小</span>    width<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2</span>  <span class="token comment"># 标签长宽</span>    <span class="token punctuation">)</span>l<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 固定窗口位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以通过变量的形式控制标签的显示, 这时我们引入按钮 <code>tk.Button</code> 的概念, 没点一次按钮, 标签变化一次. 用一下内容替换上面的标签. 并把需要变化的文字存成变量 <code>var</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 这时文字变量储存器</span>l <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span>     textvariable<span class="token operator">=</span>var<span class="token punctuation">,</span>   <span class="token comment"># 使用 textvariable 替换 text, 因为这个可以变化</span>    bg<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Arial'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我们来做 按钮 <code>tk.Button</code>: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span>     text<span class="token operator">=</span><span class="token string">'hit me'</span><span class="token punctuation">,</span>      <span class="token comment"># 显示在按钮上的文字</span>    width<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>     command<span class="token operator">=</span>hit_me<span class="token punctuation">)</span>     <span class="token comment"># 点击按钮式执行的命令</span>b<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 按钮位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么点击是的命令我们用 <code>if else</code> 语句来判断. 用 <code>on_hit</code> 来判断当前状态.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">on_hit <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 默认初始状态为 False</span><span class="token keyword">def</span> <span class="token function">hit_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> on_hit    <span class="token keyword">if</span> on_hit <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>     <span class="token comment"># 从 False 状态变成 True 状态</span>        on_hit <span class="token operator">=</span> <span class="token boolean">True</span>        var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'you hit me'</span><span class="token punctuation">)</span>   <span class="token comment"># 设置标签的文字为 'you hit me'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token comment"># 从 True 状态变成 False 状态</span>        on_hit <span class="token operator">=</span> <span class="token boolean">False</span>        var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment"># 设置 文字为空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Entry-amp-Text-输入-文本框"><a href="#Entry-amp-Text-输入-文本框" class="headerlink" title="Entry &amp; Text 输入, 文本框"></a>Entry &amp; Text 输入, 文本框</h1><h2 id="窗口主体框架-1"><a href="#窗口主体框架-1" class="headerlink" title="窗口主体框架"></a>窗口主体框架</h2><p>每一个tkinter应用的主体框架都包含以下几部分：</p><ul><li>主窗口: <code>window</code>，及主窗口的一些基本属性（标题、大小）</li><li>让窗口活起来：<code>window.mainloop()</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwindow <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'my window'</span><span class="token punctuation">)</span><span class="token comment">##窗口尺寸</span>window<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'200x200'</span><span class="token punctuation">)</span><span class="token comment">##显示出来</span>window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="窗口内容（窗口上的控件）"><a href="#窗口内容（窗口上的控件）" class="headerlink" title="窗口内容（窗口上的控件）"></a>窗口内容（窗口上的控件）</h2><p>创建按钮分别触发两种情况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">b1 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"insert point"</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>command<span class="token operator">=</span>insert_point<span class="token punctuation">)</span>b1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"insert end"</span><span class="token punctuation">,</span>command<span class="token operator">=</span>insert_end<span class="token punctuation">)</span>b2<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建输入框entry，用户输入任何内容都显示为*</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">e <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>window<span class="token punctuation">,</span>show<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个文本框用于显示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> tk<span class="token punctuation">.</span>Text<span class="token punctuation">(</span>window<span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义触发事件时的函数（注意：因为Python的执行顺序是从上往下，所以函数一定要放在按钮的上面）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    var <span class="token operator">=</span> e<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">'insert'</span><span class="token punctuation">,</span>var<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">insert_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    var <span class="token operator">=</span> e<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span>var<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Listbox-列表部件"><a href="#Listbox-列表部件" class="headerlink" title="Listbox 列表部件"></a>Listbox 列表部件</h1><h2 id="创建主窗口"><a href="#创建主窗口" class="headerlink" title="创建主窗口"></a>创建主窗口</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'my window'</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'200x200'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建一个label用于显示"><a href="#创建一个label用于显示" class="headerlink" title="创建一个label用于显示"></a>创建一个label用于显示</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">var1 <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#创建变量</span>l <span class="token operator">=</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">'yellow'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>textvariable<span class="token operator">=</span>var1<span class="token punctuation">)</span>l<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建一个方法用于按钮的点击事件"><a href="#创建一个方法用于按钮的点击事件" class="headerlink" title="创建一个方法用于按钮的点击事件"></a>创建一个方法用于按钮的点击事件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_selection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> lb<span class="token punctuation">.</span>get<span class="token punctuation">(</span>lb<span class="token punctuation">.</span>curselection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#获取当前选中的文本</span>    var1<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>     <span class="token comment">#为label设置值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建一个按钮"><a href="#创建一个按钮" class="headerlink" title="创建一个按钮"></a>创建一个按钮</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">b1 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'print selection'</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span>              height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> command<span class="token operator">=</span>print_selection<span class="token punctuation">)</span>b1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建一个Listbox和变量var2，并将var2的值赋给Listbox"><a href="#创建一个Listbox和变量var2，并将var2的值赋给Listbox" class="headerlink" title="创建一个Listbox和变量var2，并将var2的值赋给Listbox"></a>创建一个Listbox和变量var2，并将var2的值赋给Listbox</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">var2 <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#为变量设置值</span><span class="token comment">#创建Listbox</span>lb <span class="token operator">=</span> tk<span class="token punctuation">.</span>Listbox<span class="token punctuation">(</span>window<span class="token punctuation">,</span> listvariable<span class="token operator">=</span>var2<span class="token punctuation">)</span>  <span class="token comment">#将var2的值赋给Listbox</span><span class="token comment">#创建一个list并将值循环添加到Listbox控件中</span>list_items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> list_items<span class="token punctuation">:</span>    lb<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>  <span class="token comment">#从最后一个位置开始加入值</span>lb<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'first'</span><span class="token punctuation">)</span>       <span class="token comment">#在第一个位置加入'first'字符</span>lb<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'second'</span><span class="token punctuation">)</span>      <span class="token comment">#在第二个位置加入'second'字符</span>lb<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment">#删除第二个位置的字符</span>lb<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#显示主窗口</span>window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Radiobutton-选择按钮"><a href="#Radiobutton-选择按钮" class="headerlink" title="Radiobutton 选择按钮"></a>Radiobutton 选择按钮</h1><h2 id="radiobutton-部件"><a href="#radiobutton-部件" class="headerlink" title="radiobutton 部件"></a>radiobutton 部件</h2><p>首先我们需要定义一个 <code>var</code> 用来将 radiobutton 的值和 Label 的值联系在一起. 然后创建一个radiobutton部分:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>l <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'empty'</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>r1 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Radiobutton<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'Option A'</span><span class="token punctuation">,</span>                    variable<span class="token operator">=</span>var<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">,</span>                    command<span class="token operator">=</span>print_selection<span class="token punctuation">)</span>r1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>variable=var</code>, <code>value='A'</code>的意思就是，当我们鼠标选中了其中一个选项，把value的值<code>A</code>放到变量var中，然后赋值给<code>variable</code></p><h2 id="触发功能"><a href="#触发功能" class="headerlink" title="触发功能"></a>触发功能</h2><p>我们将定义一个功能, 用来对选择的 radiobutton 进行操作. <code>print_selection</code> 功能就是选择了某个 radiobutton 后我们会在屏幕上打印的选项.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_selection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">.</span>config<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'you have selected '</span> <span class="token operator">+</span> var<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当触发这个函数功能时，我们的 <code>label</code> 中就会显示 <code>text</code> 所赋值的字符串即 ‘you have selected’, 后面则是我们所选中的选项 <code>var.get()</code>就是获取到变量 <code>var</code> 的值， 举个例子就是我们一开始所做的将选项 “option A” 选中时的值以 “A” 放入 <code>var</code> 中， 所以获取的也就是A 即如果我们这时候选中 “option A” 选项，label显示的值则是 “you have selected A”.</p><h1 id="Scale-尺度"><a href="#Scale-尺度" class="headerlink" title="Scale 尺度"></a>Scale 尺度</h1><h2 id="scale-部件"><a href="#scale-部件" class="headerlink" title="scale 部件"></a>scale 部件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> tk<span class="token punctuation">.</span>Scale<span class="token punctuation">(</span>window<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'try me'</span><span class="token punctuation">,</span> from_<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> to<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> orient<span class="token operator">=</span>tk<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">,</span>             length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> showvalue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> tickinterval<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> resolution<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> command<span class="token operator">=</span>print_selection<span class="token punctuation">)</span>s<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的参数<code>label</code>是指scale部件的名称，即在这里scale部件名称为try me</p><ul><li>参数<code>from_=5，to=11</code>的意思就是从5到11，即这个滚动条最小值为5，最大值为11（这里使用from_是因为在python中有from这个关键词）</li><li>参数<code>orient=tk.HORIZONTAL</code>在这里就是设置滚动条的方向，如我们所看到的效果图，这里<code>HORIZONTAL</code>就是横向。</li><li>参数<code>length</code>这里是指滚动条部件的长度，但注意的是和其他部件width表示不同，width表示的是以字符为单位，比如<code>width=4</code>，就是4个字符的长度，而此处的<code>length=200</code>，是指我们常用的像素为单位，即长度为200个像素</li><li>参数<code>resolution=0.01</code>这里我们可以借助数学题来理解，我们做的很多数学题都会让我们来保留几位小数，此处的0.01就是保留2位小数，即效果图中的5.00 9.00等等后面的两位小数，如果保留一位就是<code>resolution=0.1</code> 这里的<code>showvalue</code>就是设置在滚动条上方的显示。<code>showvalue=0</code>，上方无结果显示，如果改为<code>showvalue=1</code>,则显示在上面。</li><li>参数<code>tickinterval</code>设置的就是坐标的间隔，此处为tickinterval=2，显示的即为5.00 7.00 9.00 11.00 如果改为tickinterval=3则为5.00 8.00 11.00</li></ul><h2 id="触发功能-1"><a href="#触发功能-1" class="headerlink" title="触发功能"></a>触发功能</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'empty'</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_selection</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">.</span>config<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'you have selected '</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里相比前面多了参数<code>v</code>，这里的参数v即将滚动条定位的数据，即如效果图中最开始，定位到5.00，<code>label</code>中显示you have selected 5.00</p><h1 id="Checkbutton-勾选项"><a href="#Checkbutton-勾选项" class="headerlink" title="Checkbutton 勾选项"></a>Checkbutton 勾选项</h1><h2 id="Checkbutton部件"><a href="#Checkbutton部件" class="headerlink" title="Checkbutton部件"></a>Checkbutton部件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">var1 <span class="token operator">=</span> tk<span class="token punctuation">.</span>IntVar<span class="token punctuation">(</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Checkbutton<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'Python'</span><span class="token punctuation">,</span> variable<span class="token operator">=</span>var1<span class="token punctuation">,</span> onvalue<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> offvalue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                    command<span class="token operator">=</span>print_selection<span class="token punctuation">)</span>c1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数<code>onvalue</code>和前面讲的部件<code>radiobutton</code>中的value相似， 当我们选中了这个checkbutton，<code>onvalue</code>的值1就会放入到<code>var1</code>中， 然后var1将其赋值给参数<code>variable</code>，<code>offvalue</code>用法相似，但是<code>offvalue</code>是在没有选中这个checkbutton时，<code>offvalue</code>的值1放入var1，然后赋值给参数<code>variable</code> 这是创建一个checkbutton部件，以此类推，可以创建多个checkbutton</p><h2 id="触发功能-2"><a href="#触发功能-2" class="headerlink" title="触发功能"></a>触发功能</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_selection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>var1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>var2<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#如果选中第一个选项，未选中第二个选项</span>        l<span class="token punctuation">.</span>config<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'I love only Python '</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token punctuation">(</span>var1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>var2<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#如果选中第二个选项，未选中第一个选项</span>        l<span class="token punctuation">.</span>config<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'I love only C++'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token punctuation">(</span>var1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>var2<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#如果两个选项都未选中</span>        l<span class="token punctuation">.</span>config<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'I do not love either'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        l<span class="token punctuation">.</span>config<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'I love both'</span><span class="token punctuation">)</span>             <span class="token comment">#如果两个选项都选中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相对于前面学过的 <code>print_selection</code>，这一段比较长，其实功能差不多，只不过加了<code>if...elif...else</code>来选择控制而已即如代码注释，<code>config</code>在前面已经讲过就是将参数<code>text</code>的值显示，这里的<code>var1.get() == 1</code> 就是前面所说的var1获得的变量<code>onvalue=1</code>，<code>var1.get() == 0</code>即是<code>var1</code>获得的变量<code>offvalu=0</code>同理<code>var2</code>也是如此。</p><h1 id="Canvas-画布"><a href="#Canvas-画布" class="headerlink" title="Canvas 画布"></a>Canvas 画布</h1><h2 id="Canvas部件"><a href="#Canvas部件" class="headerlink" title="Canvas部件"></a>Canvas部件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">canvas <span class="token operator">=</span> tk<span class="token punctuation">.</span>Canvas<span class="token punctuation">(</span>window<span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>canvas<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的参数和以往学过的部件一样，所以就不再一一解释。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">image_file <span class="token operator">=</span> tk<span class="token punctuation">.</span>PhotoImage<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string">'ins.gif'</span><span class="token punctuation">)</span>image <span class="token operator">=</span> canvas<span class="token punctuation">.</span>create_image<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> anchor<span class="token operator">=</span><span class="token string">'nw'</span><span class="token punctuation">,</span> image<span class="token operator">=</span>image_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的代码主要是实现我们最终看到的在左上角的那张小图片。 <code>image_file = tk.PhotoImage(file='ins.gif')</code>这一句是创造一个变量存放<code>ins.gif</code>这张图片。 <code>image = canvas.create_image(10, 10, anchor='nw', image=image_file)</code>里面的参数<code>10,10</code>就是图片放入画布的坐标， 而这里的<code>anchor=nw</code>则是把图片的左上角作为锚定点，在加上刚刚给的坐标位置，即可将图片位置确定。 最后一个参数的意思大家应该都知道，就是将刚刚存入的图片变量，赋值给<code>image</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span>line <span class="token operator">=</span> canvas<span class="token punctuation">.</span>create_line<span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这段代码主要实现的是画一条直线，后面<code>()</code>中给的参数就是线段两点的坐标，两点确定一条直线。此处给的就是从坐标(50,50)到(80,80)画一条直线。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">oval <span class="token operator">=</span> canvas<span class="token punctuation">.</span>create_oval<span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>  <span class="token comment">#创建一个圆，填充色为`red`红色</span>arc <span class="token operator">=</span> canvas<span class="token punctuation">.</span>create_arc<span class="token punctuation">(</span>x0<span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span> y0<span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span> x1<span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span> y1<span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> extent<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">)</span>  <span class="token comment">#创建一个扇形</span>rect <span class="token operator">=</span> canvas<span class="token punctuation">.</span>create_rectangle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment">#创建一个矩形</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里面就是创建扇形时多了两个没见过的参数<code>start=0</code>和<code>extent=180</code>，其实就是从0度到180度，就好像扇子的边打开一样。在我们看来就是个半圆， 如果改为<code>extent=90</code>，我们看到的就是一个1/4圆</p><h2 id="触发功能-3"><a href="#触发功能-3" class="headerlink" title="触发功能"></a>触发功能</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">moveit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas<span class="token punctuation">.</span>move<span class="token punctuation">(</span>rect<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的触发不再是以往的print_selection了，哈哈，那么这里的是怎么样的功能呢，首先我们从单词理解来看就是移动的函数，在视频中也演示过了， 就是我们每点一次button 矩形就会移动这里<code>canvas.move(rect, 0, 2)</code>的参数<code>(rect,0,2)</code>就是移动<code>rect</code>这个变量，即我们看到的矩形 后面的0和2，也就是横坐标移动0个单位，纵坐标移动2个单位，简单的说就是每次点击，横向不动，纵向移动两个单位。</p><h1 id="Menubar-菜单"><a href="#Menubar-菜单" class="headerlink" title="Menubar 菜单"></a>Menubar 菜单</h1><h2 id="menubar-部件"><a href="#menubar-部件" class="headerlink" title="menubar 部件"></a>menubar 部件</h2><p>下面是我们制作整个菜单栏的流程, 我们先需要加入一个 Menubar 作为整体框架, 然后再在 Menubar 中加一些部件.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">##创建一个菜单栏，这里我们可以把他理解成一个容器，在窗口的上方</span>menubar <span class="token operator">=</span> tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token comment">##定义一个空菜单单元</span>filemenu <span class="token operator">=</span> tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>menubar<span class="token punctuation">,</span> tearoff<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">##将上面定义的空菜单命名为`File`，放在菜单栏中，就是装入那个容器中</span>menubar<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'File'</span><span class="token punctuation">,</span> menu<span class="token operator">=</span>filemenu<span class="token punctuation">)</span><span class="token comment">##在`File`中加入`New`的小菜单，即我们平时看到的下拉菜单，每一个小菜单对应命令操作。</span><span class="token comment">##如果点击这些单元, 就会触发`do_job`的功能</span>filemenu<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'New'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>do_job<span class="token punctuation">)</span>filemenu<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Open'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>do_job<span class="token punctuation">)</span><span class="token comment">##同样的在`File`中加入`Open`小菜单</span>filemenu<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Save'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>do_job<span class="token punctuation">)</span><span class="token comment">##同样的在`File`中加入`Save`小菜单</span>filemenu<span class="token punctuation">.</span>add_separator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">##这里就是一条分割线</span><span class="token comment">##同样的在`File`中加入`Exit`小菜单,此处对应命令为`window.quit`</span>filemenu<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Exit'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>window<span class="token punctuation">.</span>quit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的我们在定义另一个菜单<code>Edit</code>也是如此和定义的<code>File</code>菜单一样 这里再来看一下效果中比较不一样的菜单就是<code>File</code>中的<code>Import</code>菜单, 在这个菜单选项中, 我们还能分支出更多的选项.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">submenu <span class="token operator">=</span> tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>filemenu<span class="token punctuation">)</span><span class="token comment">##和上面定义菜单一样，不过此处实在`File`上创建一个空的菜单</span>filemenu<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Import'</span><span class="token punctuation">,</span> menu<span class="token operator">=</span>submenu<span class="token punctuation">,</span> underline<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">##给放入的菜单`submenu`命名为`Import`</span>submenu<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Submenu1"</span><span class="token punctuation">,</span> command<span class="token operator">=</span>do_job<span class="token punctuation">)</span><span class="token comment">##这里和上面也一样，在`Import`中加入一个小菜单命令`Submenu1`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="触发功能-4"><a href="#触发功能-4" class="headerlink" title="触发功能"></a>触发功能</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">counter <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">do_job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> counter    l<span class="token punctuation">.</span>config<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'do '</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>    counter<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的功能就是每触发一次命令，counter就会+1，在label上的显示就会从 do 0 ,do 1 , do 2… </p><h1 id="Frame-框架"><a href="#Frame-框架" class="headerlink" title="Frame 框架"></a>Frame 框架</h1><h2 id="Frame-部件"><a href="#Frame-部件" class="headerlink" title="Frame 部件"></a>Frame 部件</h2><p>Frame 是一个在 Windows 上分离小区域的部件, 它能将 Windows 分成不同的区,然后存放不同的其他部件. 同时一个 Frame 上也能再分成两个 Frame, Frame 可以认为是一种容器.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">###定义一个`label`显示`on the window`</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'on the window'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">###在`window`上创建一个`frame`</span>frm <span class="token operator">=</span> tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>window<span class="token punctuation">)</span>frm<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">###在刚刚创建的`frame`上创建两个`frame`，我们可以把它理解成一个大容器里套了一个小容器，即`frm`上有两个`frame` ，`frm_l`和`frm_r`</span>frm_l <span class="token operator">=</span> tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>frm<span class="token punctuation">)</span>frm_r <span class="token operator">=</span> tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>frm<span class="token punctuation">)</span><span class="token comment">###这里是控制小的`frm`部件在大的`frm`的相对位置，此处`frm_l`就是在`frm`的左边，`frm_r`在`frm`的右边</span>frm_l<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>frm_r<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span><span class="token comment">###这里的三个label就是在我们创建的frame上定义的label部件，还是以容器理解，就是容器上贴了标签，来指明这个是什么，解释这个容器。</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frm_l<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'on the frm_l1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">##这个`label`长在`frm_l`上，显示为`on the frm_l1`</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frm_l<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'on the frm_l2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">##这个`label`长在`frm_l`上，显示为`on the frm_l2`</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frm_r<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'on the frm_r1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">##这个`label`长在`frm_r`上，显示为`on the frm_r1`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="messagebox-弹窗"><a href="#messagebox-弹窗" class="headerlink" title="messagebox 弹窗"></a>messagebox 弹窗</h1><h2 id="messagebox部件"><a href="#messagebox部件" class="headerlink" title="messagebox部件"></a>messagebox部件</h2><p>其实这里的<code>messagebox</code>就是我们平时看到的弹窗。 我们首先需要定义一个触发功能，来触发这个弹窗 这里我们就放上以前学过的<code>button</code>按钮</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'hit me'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>hit_me<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过触发功能，调用<code>messagebox</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hit_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'hahahaha'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里点击button按钮就会弹出提示对话窗</p><p>下面给出几种形式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment">#提示信息对话窗</span>tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showwarning<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#提出警告对话窗</span>tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#提出错误对话窗</span>tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askquestion<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#询问选择对话窗</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果给出如下定义就是打印出我们所选项对应的值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hit_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askquestion<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'hahahaha'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样创建方法都是一样的形式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askquestion<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#返回yes和no</span><span class="token keyword">print</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askokcancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#返回true和false</span><span class="token keyword">print</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askyesno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#返回true和false</span><span class="token keyword">print</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askretrycancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#返回true和false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="pack-grid-place-放置位置"><a href="#pack-grid-place-放置位置" class="headerlink" title="pack grid place 放置位置"></a>pack grid place 放置位置</h1><h2 id="pack"><a href="#pack" class="headerlink" title="pack"></a>pack</h2><p>首先我们先看看我们常用的<code>pack()</code>, 他会按照上下左右的方式排列. </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">'top'</span><span class="token punctuation">)</span><span class="token comment">#上</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">)</span><span class="token comment">#下</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span><span class="token comment">#左</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span><span class="token comment">#右</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h2><p>接下里我们在看看<code>grid()</code>, grid 是方格, 所以所有的内容会被放在这些规律的方格中.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span>i<span class="token punctuation">,</span> column<span class="token operator">=</span>j<span class="token punctuation">,</span> padx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> pady<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上的代码就是创建一个四行三列的表格，其实<code>grid</code>就是用表格的形式定位的。这里的参数 <code>row</code>为行，<code>colum</code>为列，<code>padx</code>就是单元格左右间距，<code>pady</code>就是单元格上下间距。</p><h2 id="place"><a href="#place" class="headerlink" title="place"></a>place</h2><p>再接下来就是<code>place()</code>, 这个比较容易理解，就是给精确的坐标来定位，如此处给的<code>（20,10）</code>，就是将这个部件放在坐标为<code>（x，y）</code>的这个位置 后面的参数<code>anchor=nw</code>就是前面所讲的锚定点是西北角。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> anchor<span class="token operator">=</span><span class="token string">'nw'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="案例-登录窗口"><a href="#案例-登录窗口" class="headerlink" title="案例: 登录窗口"></a>案例: 登录窗口</h5><p>1.界面创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># welcome image</span>canvas <span class="token operator">=</span> tk<span class="token punctuation">.</span>Canvas<span class="token punctuation">(</span>window<span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token comment">#创建画布</span>image_file <span class="token operator">=</span> tk<span class="token punctuation">.</span>PhotoImage<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string">'welcome.gif'</span><span class="token punctuation">)</span><span class="token comment">#加载图片文件</span>image <span class="token operator">=</span> canvas<span class="token punctuation">.</span>create_image<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> anchor<span class="token operator">=</span><span class="token string">'nw'</span><span class="token punctuation">,</span> image<span class="token operator">=</span>image_file<span class="token punctuation">)</span><span class="token comment">#将图片置于画布上</span>canvas<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">'top'</span><span class="token punctuation">)</span><span class="token comment">#放置画布（为上端）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里创建的就是我们效果图中的welcome, 如果你想使用和我一样的 welcome 的图片, 你可以在<a href="/liaojie.github.io/medias/welcome.gif">这里</a>下载。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># user information</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'User name: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> y<span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token comment">#创建一个`label`名为`User name: `置于坐标（50,150）</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'Password: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> y<span class="token operator">=</span> <span class="token number">190</span><span class="token punctuation">)</span>var_usr_name <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#定义变量</span>var_usr_name<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'example@python.com'</span><span class="token punctuation">)</span><span class="token comment">#变量赋值'example@python.com'</span>entry_usr_name <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>window<span class="token punctuation">,</span> textvariable<span class="token operator">=</span>var_usr_name<span class="token punctuation">)</span><span class="token comment">#创建一个`entry`，显示为变量`var_usr_name`即图中的`example@python.com`</span>entry_usr_name<span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">160</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">)</span>var_usr_pwd <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>entry_usr_pwd <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>window<span class="token punctuation">,</span> textvariable<span class="token operator">=</span>var_usr_pwd<span class="token punctuation">,</span> show<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token comment">#`show`这个参数将输入的密码变为`***`的形式</span>entry_usr_pwd<span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">160</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">190</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就是创建我们熟悉的登录界面，就是常见的用户名，密码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># login and sign up button</span>btn_login <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'Login'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>usr_login<span class="token punctuation">)</span><span class="token comment">#定义一个`button`按钮，名为`Login`,触发命令为`usr_login`</span>btn_login<span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">170</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">230</span><span class="token punctuation">)</span>btn_sign_up <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'Sign up'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>usr_sign_up<span class="token punctuation">)</span>btn_sign_up<span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">270</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">230</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里定义的就是我们的登录按钮。</p><p>2.触发功能</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">usr_login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">usr_sign_up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.触发的 usr_login 功能</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">##这两行代码就是获取用户输入的`usr_name`和`usr_pwd`</span>usr_name <span class="token operator">=</span> var_usr_name<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>usr_pwd <span class="token operator">=</span> var_usr_pwd<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">##这里设置异常捕获，当我们第一次访问用户信息文件时是不存在的，所以这里设置异常捕获。</span><span class="token comment">##中间的两行就是我们的匹配，即程序将输入的信息和文件中的信息匹配。</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'usrs_info.pickle'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> usr_file<span class="token punctuation">:</span>        usrs_info <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>usr_file<span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span> <span class="token comment">##这里就是我们在没有读取到`usr_file`的时候，程序会创建一个`usr_file`这个文件，并将管理员</span> <span class="token comment">##的用户和密码写入，即用户名为`admin`密码为`admin`。</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'usrs_info.pickle'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> usr_file<span class="token punctuation">:</span>        usrs_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'admin'</span><span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">}</span>        pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>usrs_info<span class="token punctuation">,</span> usr_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一部分就是将用户输入的用户名和密码获取到，和我们保存在<code>usr_file</code>中的数据对比。针对正确的密码和错误的密码分别对待.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#如果用户名和密码与文件中的匹配成功，则会登录成功，并跳出弹窗`how are you?`加上你的用户名。</span><span class="token keyword">if</span> usr_name <span class="token keyword">in</span> usrs_info<span class="token punctuation">:</span>    <span class="token keyword">if</span> usr_pwd <span class="token operator">==</span> usrs_info<span class="token punctuation">[</span>usr_name<span class="token punctuation">]</span><span class="token punctuation">:</span>        tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Welcome'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'How are you? '</span> <span class="token operator">+</span> usr_name<span class="token punctuation">)</span>    <span class="token comment">##如果用户名匹配成功，而密码输入错误，则会弹出'Error, your password is wrong, try again.'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'Error, your password is wrong, try again.'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token comment"># 如果发现用户名不存在</span>    is_sign_up <span class="token operator">=</span> tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askyesno<span class="token punctuation">(</span><span class="token string">'Welcome'</span><span class="token punctuation">,</span>                           <span class="token string">'You have not sign up yet. Sign up today?'</span><span class="token punctuation">)</span>    <span class="token comment"># 提示需不需要注册新用户</span>    <span class="token keyword">if</span> is_sign_up<span class="token punctuation">:</span>        usr_sign_up<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.usr_sign_up 界面</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">window_sign_up <span class="token operator">=</span> tk<span class="token punctuation">.</span>Toplevel<span class="token punctuation">(</span>window<span class="token punctuation">)</span>window_sign_up<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'350x200'</span><span class="token punctuation">)</span>window_sign_up<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Sign up window'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这一段首先是创建一个注册的窗口。这里和以往不同的是，多了一个<code>tk.Toplevel</code>我们打个比方，就好像我们前面所学 的<code>frame</code>一样，就是在编辑的功能下还有很多功能一样，这里就是在主体窗口的<code>window</code>上创建一个<code>Sign up window</code>窗口。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">new_name <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#将输入的注册名赋值给变量</span>new_name<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'example@python.com'</span><span class="token punctuation">)</span><span class="token comment">#将最初显示定为'example@python.com'</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window_sign_up<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'User name: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#将`User name:`放置在坐标（10,10）。</span>entry_new_name <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>window_sign_up<span class="token punctuation">,</span> textvariable<span class="token operator">=</span>new_name<span class="token punctuation">)</span><span class="token comment">#创建一个注册名的`entry`，变量为`new_name`</span>entry_new_name<span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#`entry`放置在坐标（150,10）.</span>new_pwd <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window_sign_up<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'Password: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>entry_usr_pwd <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>window_sign_up<span class="token punctuation">,</span> textvariable<span class="token operator">=</span>new_pwd<span class="token punctuation">,</span> show<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">)</span>entry_usr_pwd<span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>new_pwd_confirm <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window_sign_up<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'Confirm password: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">)</span>entry_usr_pwd_confirm <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>window_sign_up<span class="token punctuation">,</span> textvariable<span class="token operator">=</span>new_pwd_confirm<span class="token punctuation">,</span> show<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">)</span>entry_usr_pwd_confirm<span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token comment"># 下面的 sign_to_Mofan_Python 我们再后面接着说</span>btn_comfirm_sign_up <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window_sign_up<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'Sign up'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>sign_to_Mofan_Python<span class="token punctuation">)</span>btn_comfirm_sign_up<span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">130</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相信大家对这一段代码已经很熟悉了，因为这是大家前面所学过的知识。其实就是像我们平时所见的注册窗口有一样，在<code>Sign up window</code>窗口 上添加<code>new_name</code>，<code>new_pwd</code>， <code>new_pwd_confirm</code>，还有最后一个注册按钮。这里便于大家复习，我们将new_name这段详细介绍一下（如代码注释）。 到这里就完成了我们这个注册的主要界面用户名，密码，确认密码。</p><p>5.sign_to_Mofan_Python() 功能 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">usr_sign_up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sign_to_Mofan_Python</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">##以下三行就是获取我们注册时所输入的信息</span>        np <span class="token operator">=</span> new_pwd<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        npf <span class="token operator">=</span> new_pwd_confirm<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        nn <span class="token operator">=</span> new_name<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">##这里是打开我们记录数据的文件，将注册信息读出</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'usrs_info.pickle'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> usr_file<span class="token punctuation">:</span>            exist_usr_info <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>usr_file<span class="token punctuation">)</span>        <span class="token comment">##这里就是判断，如果两次密码输入不一致，则提示`'Error', 'Password and confirm password must be the same!'`</span>        <span class="token keyword">if</span> np <span class="token operator">!=</span> npf<span class="token punctuation">:</span>            tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">,</span> <span class="token string">'Password and confirm password must be the same!'</span><span class="token punctuation">)</span>        <span class="token comment">##如果用户名已经在我们的数据文件中，则提示`'Error', 'The user has already signed up!'`</span>        <span class="token keyword">elif</span> nn <span class="token keyword">in</span> exist_usr_info<span class="token punctuation">:</span>            tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">,</span> <span class="token string">'The user has already signed up!'</span><span class="token punctuation">)</span>        <span class="token comment">##最后如果输入无以上错误，则将注册输入的信息记录到文件当中，并提示注册成功`'Welcome', 'You have successfully signed up!'`</span>        <span class="token comment">##然后销毁窗口。</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            exist_usr_info<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">=</span> np            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'usrs_info.pickle'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> usr_file<span class="token punctuation">:</span>                pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>exist_usr_info<span class="token punctuation">,</span> usr_file<span class="token punctuation">)</span>            tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">'Welcome'</span><span class="token punctuation">,</span> <span class="token string">'You have successfully signed up!'</span><span class="token punctuation">)</span>            <span class="token comment">##然后销毁窗口。</span>            window_sign_up<span class="token punctuation">.</span>destroy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里其实和前面所讲的<code>login</code>功能类似，如代码注释。</p><p>如果两次密码输入不一致，则提示<code>'Error'</code>, <code>'Password and confirm password must be the same!'</code></p><p>如果用户名已经在我们的数据文件中，则提示<code>'Error'</code>, <code>'The user has already signed up!'</code></p><p>注册成功就是我们一开始展示的效果图。</p><p>更多代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># root.title('我的第一个Python窗体')</span><span class="token comment"># root.geometry('240x240') # 这里的乘号不是 * ，而是小写英文字母 x</span><span class="token comment"># lb = Label(root, text='我是第一个标签',</span><span class="token comment">#            bg='#d3fbfb',</span><span class="token comment">#            fg='red',</span><span class="token comment">#            font=('华文新魏', 32),</span><span class="token comment">#            width=20,</span><span class="token comment">#            height=2,</span><span class="token comment">#            relief=SUNKEN)</span><span class="token comment"># lb.pack()</span><span class="token comment"># root.geometry('320x240')</span><span class="token comment"># msg1 = Message(root, text='''我的水平起始位置相对窗体 0.2，垂直起始位置为绝对位置 80 像素，我的高度是窗体高度的0.4，宽度是200像素''', relief=GROOVE)</span><span class="token comment"># msg1.place(relx=0.2, y=80, relheight=0.4, width=200)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''# 时钟# 方法一：利用configure()方法或config()来实现文本变化import tkinterimport timedef gettime():    timestr = time.strftime("%H:%M:%S")  # 获取当前的时间并转化为字符串    lb.configure(text=timestr)  # 重新设置标签文本    root.after(1000, gettime)  # 每隔1s调用函数 gettime 自身获取时间root = tkinter.Tk()root.title('时钟')lb = tkinter.Label(root, text='', fg='blue', font=("黑体", 80))lb.pack()gettime()root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 方法二：利用textvariable变量属性来实现文本变化import tkinterimport timedef gettime():    var.set(time.strftime("%H:%M:%S"))  # 获取当前时间    root.after(1000, gettime)  # 每隔1s调用函数 gettime 自身获取时间root = tkinter.Tk()root.title('时钟')var = tkinter.StringVar()lb = tkinter.Label(root, textvariable=var, fg='blue', font=("黑体", 80))lb.pack()gettime()root.mainloop()'''</span><span class="token triple-quoted-string string">'''from tkinter import *import timeimport datetimedef gettime():    s = str(datetime.datetime.now()) + '\n'    txt.insert(END, s)    root.after(1000, gettime)  # 每隔1s调用函数 gettime 自身获取时间root = Tk()root.geometry('320x240')txt = Text(root)txt.pack()gettime()root.mainloop()'''</span><span class="token triple-quoted-string string">'''from tkinter import *def run1():    a = float(inp1.get())    b = float(inp2.get())    s = '%0.2f+%0.2f=%0.2f\n' % (a, b, a + b)    txt.insert(END, s)  # 追加显示运算结果    inp1.delete(0, END)  # 清空输入    inp2.delete(0, END)  # 清空输入def run2(x, y):    a = float(x)    b = float(y)    s = '%0.2f+%0.2f=%0.2f\n' % (a, b, a + b)    txt.insert(END, s)  # 追加显示运算结果    inp1.delete(0, END)  # 清空输入    inp2.delete(0, END)  # 清空输入root = Tk()root.geometry('460x240')root.title('简单加法器')lb1 = Label(root, text='请输入两个数，按下面两个按钮之一进行加法计算')lb1.place(relx=0.1, rely=0.1, relwidth=0.8, relheight=0.1)inp1 = Entry(root)inp1.place(relx=0.1, rely=0.2, relwidth=0.3, relheight=0.1)inp2 = Entry(root)inp2.place(relx=0.6, rely=0.2, relwidth=0.3, relheight=0.1)# 方法-直接调用 run1()btn1 = Button(root, text='方法一', command=run1)btn1.place(relx=0.1, rely=0.4, relwidth=0.3, relheight=0.1)# 方法二利用 lambda 传参数调用run2()btn2 = Button(root, text='方法二', command=lambda: run2(inp1.get(), inp2.get()))btn2.place(relx=0.6, rely=0.4, relwidth=0.3, relheight=0.1)# 在窗体垂直自上而下位置60%处起，布局相对窗体高度40%高的文本框txt = Text(root)txt.place(rely=0.6, relheight=0.4)root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 单选框from tkinter import *def Mysel():    dic = {0: '甲', 1: '乙', 2: '丙'}    s = "您选了" + dic.get(var.get()) + "项"    lb.config(text=s)root = Tk()root.title('单选按钮')lb = Label(root)lb.pack()var = IntVar()rd1 = Radiobutton(root, text="甲", variable=var, value=0, command=Mysel)rd1.pack()rd2 = Radiobutton(root, text="乙", variable=var, value=1, command=Mysel)rd2.pack()rd3 = Radiobutton(root, text="丙", variable=var, value=2, command=Mysel)rd3.pack()root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 复选框from tkinter import *import tkinterdef run():    if (CheckVar1.get() == 0 and CheckVar2.get() == 0 and CheckVar3.get() == 0 and CheckVar4.get() == 0):        s = '您还没选择任何爱好项目'    else:        s1 = "足球" if CheckVar1.get() == 1 else ""        s2 = "篮球" if CheckVar2.get() == 1 else ""        s3 = "游泳" if CheckVar3.get() == 1 else ""        s4 = "田径" if CheckVar4.get() == 1 else ""        s = "您选择了%s %s %s %s" % (s1, s2, s3, s4)    lb2.config(text=s)root = tkinter.Tk()root.title('复选框')lb1 = Label(root, text='请选择您的爱好项目')lb1.pack()CheckVar1 = IntVar()CheckVar2 = IntVar()CheckVar3 = IntVar()CheckVar4 = IntVar()ch1 = Checkbutton(root, text='足球', variable=CheckVar1, onvalue=1, offvalue=0)ch2 = Checkbutton(root, text='篮球', variable=CheckVar2, onvalue=1, offvalue=0)ch3 = Checkbutton(root, text='游泳', variable=CheckVar3, onvalue=1, offvalue=0)ch4 = Checkbutton(root, text='田径', variable=CheckVar4, onvalue=1, offvalue=0)ch1.pack()ch2.pack()ch3.pack()ch4.pack()btn = Button(root, text="OK", command=run)btn.pack()lb2 = Label(root, text='')lb2.pack()root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 列表框from tkinter import *def ini():    Lstbox1.delete(0, END)    list_items = ["数学", "物理", "化学", "语文", "外语"]    for item in list_items:        Lstbox1.insert(END, item)def clear():    Lstbox1.delete(0, END)def ins():    if entry.get() != '':        if Lstbox1.curselection() == ():            Lstbox1.insert(Lstbox1.size(), entry.get())        else:            Lstbox1.insert(Lstbox1.curselection(), entry.get())def updt():    if entry.get() != '' and Lstbox1.curselection() != ():        selected = Lstbox1.curselection()[0]        Lstbox1.delete(selected)        Lstbox1.insert(selected, entry.get())def delt():    if Lstbox1.curselection() != ():        Lstbox1.delete(Lstbox1.curselection())root = Tk()root.title('列表框实验')root.geometry('320x240')frame1 = Frame(root, relief=RAISED)frame1.place(relx=0.0)frame2 = Frame(root, relief=GROOVE)frame2.place(relx=0.5)Lstbox1 = Listbox(frame1)Lstbox1.pack()entry = Entry(frame2)entry.pack()btn1 = Button(frame2, text='初始化', command=ini)btn1.pack(fill=X)btn2 = Button(frame2, text='添加', command=ins)btn2.pack(fill=X)btn3 = Button(frame2, text='插入', command=ins)  # 添加和插入功能实质上是一样的btn3.pack(fill=X)btn4 = Button(frame2, text='修改', command=updt)btn4.pack(fill=X)btn5 = Button(frame2, text='删除', command=delt)btn5.pack(fill=X)btn6 = Button(frame2, text='清空', command=clear)btn6.pack(fill=X)root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 组合框from tkinter.ttk import *from tkinter import *def calc(event):    a = float(t1.get())    b = float(t2.get())    dic = {0: a + b, 1: a - b, 2: a * b, 3: a / b}    c = dic[comb.current()]    lbl.config(text=str(c))root = Tk()root.title('四则运算')root.geometry('320x240')t1 = Entry(root)t1.place(relx=0.1, rely=0.1, relwidth=0.2, relheight=0.1)t2 = Entry(root)t2.place(relx=0.5, rely=0.1, relwidth=0.2, relheight=0.1)var = StringVar()comb = Combobox(root, textvariable=var, values=['加', '减', '乘', '除', ])comb.place(relx=0.1, rely=0.5, relwidth=0.2)comb.bind('&lt;&lt;ComboboxSelected&gt;&gt;', calc)lbl = Label(root, text='结果')lbl.place(relx=0.5, rely=0.7, relwidth=0.2, relheight=0.3)root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 滑块from tkinter import *def show(event):    s = '滑块的取值为' + str(var.get())    lb.config(text=s)root = Tk()root.title('滑块实验')root.geometry('320x180')var = DoubleVar()scl = Scale(root, orient=HORIZONTAL, length=200, from_=1.0, to=5.0, label='请拖动滑块', tickinterval=1, resolution=0.05,            variable=var)scl.bind('&lt;ButtonRelease-1&gt;', show)scl.pack()lb = Label(root, text='')lb.pack()root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 菜单from tkinter import *def new():    s = '新建'    lb1.config(text=s)def ope():    s = '打开'    lb1.config(text=s)def sav():    s = '保存'    lb1.config(text=s)def cut():    s = '剪切'    lb1.config(text=s)def cop():    s = '复制'    lb1.config(text=s)def pas():    s = '粘贴'    lb1.config(text=s)def popupmenu(event):    mainmenu.post(event.x_root, event.y_root)root = Tk()root.title('菜单实验')root.geometry('320x240')lb1 = Label(root, text='显示信息', font=('黑体', 32, 'bold'))lb1.place(relx=0.2, rely=0.2)mainmenu = Menu(root)menuFile = Menu(mainmenu)  # 菜单分组 menuFilemainmenu.add_cascade(label="文件", menu=menuFile)menuFile.add_command(label="新建", command=new)menuFile.add_command(label="打开", command=ope)menuFile.add_command(label="保存", command=sav)menuFile.add_separator()  # 分割线menuFile.add_command(label="退出", command=root.destroy)menuEdit = Menu(mainmenu)  # 菜单分组 menuEditmainmenu.add_cascade(label="编辑", menu=menuEdit)menuEdit.add_command(label="剪切", command=cut)menuEdit.add_command(label="复制", command=cop())menuEdit.add_command(label="粘贴", command=pas())root.config(menu=mainmenu)root.bind('Button-3', popupmenu)  # 根窗体绑定鼠标右击响应事件root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 子窗体from tkinter import *def newwind():    winNew = Toplevel(root)    winNew.geometry('320x240')    winNew.title('新窗体')    lb2 = Label(winNew, text='我在新窗体上')    lb2.place(relx=0.2, rely=0.2)    btClose = Button(winNew, text='关闭', command=winNew.destroy)    btClose.place(relx=0.7, rely=0.5)root = Tk()root.title('新建窗体实验')root.geometry('320x240')lb1 = Label(root, text='主窗体', font=('黑体', 32, 'bold'))lb1.place(relx=0.2, rely=0.2)mainmenu = Menu(root)menuFile = Menu(mainmenu)mainmenu.add_cascade(label='菜单', menu=menuFile)menuFile.add_command(label='新窗体', command=newwind)menuFile.add_separator()menuFile.add_command(label='退出', command=root.destroy)root.config(menu=mainmenu)root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 交互对话框from tkinter import *import tkinter.messageboxdef xz():    answer = tkinter.messagebox.askokcancel('请选择', '请选择确定或取消')    if answer:        lb.config(text='已确认')    else:        lb.config(text='已取消')root = Tk()lb = Label(root, text='')lb.pack()btn = Button(root, text='弹出对话框', command=xz)btn.pack()root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 输入对话框from tkinter.simpledialog import *def xz():    s = askstring('请输入', '请输入一串文字')    lb.config(text=s)root = Tk()lb = Label(root, text='')lb.pack()btn = Button(root, text='弹出输入对话框', command=xz)btn.pack()root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 文件选择对话框from tkinter import *import tkinter.filedialogdef xz():    filename = tkinter.filedialog.askopenfilename()    if filename != '':        lb.config(text='您选择的文件是' + filename)    else:        lb.config(text='您没有选择任何文件')root = Tk()lb = Label(root, text='')lb.pack()btn = Button(root, text='弹出文件选择对话框', command=xz)btn.pack()root.mainloop()'''</span><span class="token triple-quoted-string string">'''# 颜色选择对话框from tkinter import *import tkinter.colorchooserdef xz():    color = tkinter.colorchooser.askcolor()    colorstr = str(color)    print('打印字符串%s 切掉后=%s' % (colorstr, colorstr[-9:-2]))    lb.config(text=colorstr[-9:-2], background=colorstr[-9:-2])root = Tk()lb = Label(root, text='请关注颜色的变化')lb.pack()btn = Button(root, text='弹出颜色选择对话框', command=xz)btn.pack()root.mainloop()'''</span><span class="token comment"># 背景图片</span><span class="token triple-quoted-string string">'''# 插入文件图片import tkinter as tkroot = tk.Tk()# 创建一个标签类, [justify]:对齐方式textLabel = tk.Label(root, text="右边会看到一个图片\n",                     justify=tk.LEFT)  # 左对齐textLabel.pack(side=tk.LEFT)  # 自动对齐,side：方位# 创建一个图片管理类photo = tk.PhotoImage(file="shop.png")  # file：t图片路径imgLabel = tk.Label(root, image=photo)  # 把图片整合到标签类中imgLabel.pack(side=tk.RIGHT)  # 自动对齐tk.mainloop()'''</span><span class="token triple-quoted-string string">'''import tkinter as tkroot = tk.Tk()# 增加背景图片photo = tk.PhotoImage(file="shop.png")theLabel = tk.Label(root,                    text="我是内容,\n请你阅读",                    # 内容                    justify=tk.LEFT,                    # 对齐方式                    image=photo,                    # 加入图片                    compound=tk.CENTER,                    # 关键:设置为背景图片                    font=("华文行楷", 20),                    # 字体和字号                    fg="white")  # 前景色theLabel.pack()tk.mainloop()'''</span><span class="token triple-quoted-string string">'''# 插入文件图片import tkinter as tkroot = tk.Tk()frame1 = tk.Frame(root)  # 这是上面的框架frame2 = tk.Frame(root)  # 这是下面的框架var = tk.StringVar()  # 储存文字的类var.set("右边会看到一个图片，\n换行")  # 设置文字# 创建一个标签类, [justify]:对齐方式，[frame]所属框架textLabel = tk.Label(frame1, textvariable=var,                     justify=tk.LEFT)  # 显示文字内容textLabel.pack(side=tk.LEFT)  # 自动对齐,side：方位# 创建一个图片管理类photo = tk.PhotoImage(file="shop.png")  # file：t图片路径imgLabel = tk.Label(frame1, image=photo)  # 把图片整合到标签类中imgLabel.pack(side=tk.RIGHT)  # 自动对齐def callback():  # 触发的函数    var.set("设置文字")  # 设置文字# [frame]所属框架 ，text 文字内容 command：触发方法theButton = tk.Button(frame2, text="我是下面的按钮", command=callback)theButton.pack()  # 自动对齐frame1.pack(padx=10, pady=10)  # 上框架对齐frame2.pack(padx=10, pady=10)  # 下框架对齐tk.mainloop()'''</span><span class="token triple-quoted-string string">'''# 摄像头from tkinter import *import cv2from PIL import Image, ImageTkdef take_snapshot():    print("有人给你点赞啦！")def video_loop():    success, img = camera.read()  # 从摄像头读取照片    if success:        cv2.waitKey(100)        cv2image = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA)  # 转换颜色从BGR到RGBA        current_image = Image.fromarray(cv2image)  # 将图像转换成Image对象        imgtk = ImageTk.PhotoImage(image=current_image)        panel.imgtk1 = imgtk        panel.config(image=imgtk)        root.after(1, video_loop)camera = cv2.VideoCapture(0)  # 摄像头root = Tk()root.title("opencv + tkinter")# root.protocol('WM_DELETE_WINDOW', detector)panel = Label(root)  # initialize image panelpanel.pack(padx=10, pady=10)# root.config(cursor="arrow")btn = Button(root, text="点赞!", command=take_snapshot)btn.pack(fill="both", expand=True, padx=10, pady=10)video_loop()root.mainloop()# 当一切都完成后，关闭摄像头并释放所占资源camera.release()cv2.destroyAllWindows()'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Threading</title>
      <link href="/liaojie.github.io/2022/02/12/threading/"/>
      <url>/liaojie.github.io/2022/02/12/threading/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫</title>
      <link href="/liaojie.github.io/2022/02/12/python-pa-chong/"/>
      <url>/liaojie.github.io/2022/02/12/python-pa-chong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP</title>
      <link href="/liaojie.github.io/2022/02/12/nlp/"/>
      <url>/liaojie.github.io/2022/02/12/nlp/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>H5C3进阶</title>
      <link href="/liaojie.github.io/2022/02/12/h5c3-jin-jie/"/>
      <url>/liaojie.github.io/2022/02/12/h5c3-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h2><h3 id="一、什么是HTML5"><a href="#一、什么是HTML5" class="headerlink" title="一、什么是HTML5"></a>一、什么是<code>HTML5</code></h3><ol><li><code>HTML5</code> 的概念与定义 </li></ol><ul><li>定义：<code>HTML5</code> 定义了 <code>HTML</code> 标准的最新版本，是对 <code>HTML</code> 的第五次重大修改，号称下一代的 <code>HTML</code> </li><li>两个概念：<ul><li>是一个新版本的 <code>HTML</code> 语言，定义了新的标签、特性和属性</li><li>拥有一个强大的技术集，这些技术集是指： <code>HTML5</code> 、<code>CSS3</code> 、<code>javascript</code>, 这也是广义上的 <code>HTML5</code></li></ul></li></ul><ol start="2"><li><code>HTML5</code> 拓展了哪些内容</li></ol><ul><li>语义化标签</li><li>本地存储</li><li>兼容特性</li><li><code>2D</code>、<code>3D</code> </li><li>动画、过渡</li><li><code>CSS3</code> 特性</li><li>性能与集成</li></ul><ol start="3"><li><code>HTML5 </code> 的现状</li></ol><p>绝对多数新的属性，都已经被浏览器所支持，最新版本的浏览器已经开始陆续支持最新的特性，</p><p>总的来说：<code>HTML5</code> 已经是大势所趋</p><h3 id="二、HTML5-新增标签"><a href="#二、HTML5-新增标签" class="headerlink" title="二、HTML5  新增标签"></a>二、<code>HTML5 </code> 新增标签</h3><ol><li><p>什么是语义化</p></li><li><p>新增了那些语义化标签</p></li></ol><ul><li><code>header</code>   —  头部标签</li><li><code>nav</code>        —  导航标签</li><li><code>article</code> —   内容标签</li><li><code>section</code> —   块级标签</li><li><code>aside</code>     —   侧边栏标签</li><li><code>footer</code>   —   尾部标签</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/yuyibq.png"></p><ol start="3"><li>使用语义化标签的注意</li></ol><pre class="line-numbers language-none"><code class="language-none">- 语义化标签主要针对搜索引擎- 新标签可以使用一次或者多次- 在 `IE9` 浏览器中，需要把语义化标签都转换为块级元素- 语义化标签，在移动端支持比较友好，- 另外，`HTML5` 新增的了很多的语义化标签，随着课程深入，还会学习到其他的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、多媒体音频标签"><a href="#三、多媒体音频标签" class="headerlink" title="三、多媒体音频标签"></a>三、多媒体音频标签</h3><ol><li>多媒体标签有两个，分别是</li></ol><ul><li>音频  – <code>audio</code></li><li>视频  – <code>video</code></li></ul><ol start="2"><li><code>audio</code> 标签说明</li></ol><ul><li>可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，</li><li>但是：播放格式是有限的</li></ul><ol start="3"><li>audio 支持的音频格式</li></ol><ul><li>audio 目前支持三种格式</li></ul><p><img src="/liaojie.github.io/medias/audio.png"></p><ol start="4"><li>audio 的参数</li></ol><p><img src="/liaojie.github.io/medias/audiocanshu.png"></p><ol start="5"><li>audio 代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;body&gt;  &lt;!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 --&gt;  &lt;!-- &lt;audio src=<span class="token string">"./media/snow.mp3"</span> controls autoplay&gt;&lt;/audio&gt; --&gt;  &lt;!--     因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件   --&gt;  &lt;audio controls&gt;    &lt;source src=<span class="token string">"./media/snow.mp3"</span> type=<span class="token string">"audio/mpeg"</span> /&gt;  &lt;/audio&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、多媒体视频标签"><a href="#四、多媒体视频标签" class="headerlink" title="四、多媒体视频标签"></a>四、多媒体视频标签</h3><ol><li>video 视频标签</li></ol><ul><li><p>目前支持三种格式</p><p> <img src="/liaojie.github.io/medias/vedio.png"></p></li></ul><ol start="2"><li>语法格式</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./media/video.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p>video 参数</p><p><img src="/liaojie.github.io/medias/videocanshu.png"></p></li><li><p>video 代码演示</p></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- &lt;video src="./media/video.mp4" controls="controls"&gt;&lt;/video&gt; --&gt;</span>  <span class="token comment">&lt;!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span> <span class="token attr-name">muted</span> <span class="token attr-name">loop</span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./media/pig.jpg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./media/video.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./media/video.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>多媒体标签总结</li></ol><ul><li>音频标签与视频标签使用基本一致</li><li>多媒体标签在不同浏览器下情况不同，存在兼容性问题</li><li>谷歌浏览器把音频和视频标签的自动播放都禁止了</li><li>谷歌浏览器中视频添加 muted 标签可以自己播放</li><li>注意：重点记住使用方法以及自动播放即可，其他属性可以在使用时查找对应的手册</li></ul><h3 id="五、新增-input-标签"><a href="#五、新增-input-标签" class="headerlink" title="五、新增 input 标签"></a>五、新增 input 标签</h3><p><img src="/liaojie.github.io/medias/h5input.png"></p><h3 id="六、新增表单属性"><a href="#六、新增表单属性" class="headerlink" title="六、新增表单属性"></a>六、新增表单属性</h3><p><img src="/liaojie.github.io/medias/newinput.png"></p><h3 id="七、CSS3-属性选择器-上"><a href="#七、CSS3-属性选择器-上" class="headerlink" title="七、CSS3 属性选择器(上)"></a>七、<code>CSS3</code> 属性选择器(上)</h3><ol><li>什么是 <code>CSS3</code></li></ol><ul><li>在 <code>CSS2</code> 的基础上拓展、新增的样式</li></ul><ol start="2"><li><code>CSS3</code> 发展现状</li></ol><ul><li>移动端支持优于 <code>PC</code> 端</li><li><code>CSS3</code> 目前还草案，在不断改进中</li><li><code>CSS3</code> 相对 <code>H5</code>，应用非常广泛</li></ul><ol start="3"><li><p>属性选择器列表</p><p><img src="/liaojie.github.io/medias/attrcanshu.png"></p></li><li><p>属性选择器代码演示</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">button</span> <span class="token punctuation">{</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button[disabled]</span> <span class="token punctuation">{</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> default<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、CSS3属性选择器-下"><a href="#八、CSS3属性选择器-下" class="headerlink" title="八、CSS3属性选择器(下)"></a>八、CSS3属性选择器(下)</h3><ol><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input[type=search]</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span[class^=black]</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span[class$=black]</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> lightsalmon<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span[class*=black]</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、结构伪类选择器"><a href="#九、结构伪类选择器" class="headerlink" title="九、结构伪类选择器"></a>九、结构伪类选择器</h3><ol><li><p>属性列表</p><p><img src="/liaojie.github.io/medias/jiegouweilei.png"></p></li><li><p>代码演示</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul li:first-child</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li:last-child</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li:nth-child(3)</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十、nth-child-参数详解"><a href="#十、nth-child-参数详解" class="headerlink" title="十、nth-child 参数详解"></a>十、<code>nth-child</code> 参数详解</h3><ol><li>nth-child 详解</li></ol><ul><li><p>注意：本质上就是选中第几个子元素</p></li><li><p>n 可以是数字、关键字、公式</p></li><li><p>n 如果是数字，就是选中第几个</p></li><li><p>常见的关键字有 <code>even</code> 偶数、<code>odd</code> 奇数</p></li><li><p>常见的公式如下(如果 n 是公式，则从 0 开始计算)</p></li><li><p>但是第 0 个元素或者超出了元素的个数会被忽略</p><p>   <img src="/liaojie.github.io/medias/nthchildcanshu.png"></p></li></ul><ol start="2"><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;style&gt;  <span class="token comment">/* 偶数 */</span>  <span class="token selector">ul li:nth-child(even)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/* 奇数 */</span>  <span class="token selector">ul li:nth-child(odd)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/*n 是公式，从 0 开始计算 */</span>  <span class="token selector">ul li:nth-child(n)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/* 偶数 */</span>  <span class="token selector">ul li:nth-child(2n)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> lightskyblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/* 奇数 */</span>  <span class="token selector">ul li:nth-child(2n + 1)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> lightsalmon<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/* 选择第 0 5 10 15, 应该怎么选 */</span>  <span class="token selector">ul li:nth-child(5n)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/* n + 5 就是从第5个开始往后选择 */</span>  <span class="token selector">ul li:nth-child(n + 5)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> peru<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/* -n + 5 前五个 */</span>  <span class="token selector">ul li:nth-child(-n + 5)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> tan<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十一、nth-child-和-nt-of-type-的区别"><a href="#十一、nth-child-和-nt-of-type-的区别" class="headerlink" title="十一、nth-child 和  nt-of-type 的区别"></a>十一、<code>nth-child</code> 和  <code>nt-of-type</code> 的区别</h3><ol><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;  div :nth-child(1)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">div :nth-child(2)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">div span:nth-of-type(2)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">div span:nth-of-type(3)</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>区别</li></ol><ul><li><code>nth-child</code>  选择父元素里面的第几个子元素，不管是第几个类型</li><li><code>nt-of-type</code>  选择指定类型的元素</li></ul><h3 id="十二、伪元素选择器"><a href="#十二、伪元素选择器" class="headerlink" title="十二、伪元素选择器"></a>十二、伪元素选择器</h3><ol><li><p>伪类选择器</p><p><img src="/liaojie.github.io/medias/weiyuansu.png"></p></li><li><p>伪类选择器注意事项</p></li></ol><ul><li><code>before</code> 和 <code>after</code> 必须有 <code>content</code> 属性</li><li><code>before</code> 在内容前面，after 在内容后面</li><li><code>before</code> 和 <code>after</code> 创建的是一个元素，但是属于行内元素</li><li>创建出来的元素在 <code>Dom</code> 中查找不到，所以称为伪元素</li><li>伪元素和标签选择器一样，权重为 1</li></ul><ol start="3"><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;    div</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid lightcoral<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">div::after,    div::before</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">div::after</span> <span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'德'</span><span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> lightskyblue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">div::before</span> <span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'道'</span><span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> mediumaquamarine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  &lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十三、伪元素的案例"><a href="#十三、伪元素的案例" class="headerlink" title="十三、伪元素的案例"></a>十三、伪元素的案例</h3><ol><li>添加字体图标</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> 220px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> 22px<span class="token punctuation">;</span>   <span class="token property">border</span><span class="token punctuation">:</span> 1px solid lightseagreen<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>   <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p::after</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'\ea50'</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十四、2D-转换之-translate"><a href="#十四、2D-转换之-translate" class="headerlink" title="十四、2D 转换之 translate"></a>十四、<code>2D</code> 转换之 <code>translate</code></h3><ol><li><code>2D</code> 转换</li></ol><ul><li><code>2D</code> 转换是改变标签在二维平面上的位置和形状</li><li>移动： <code>translate</code></li><li>旋转： <code>rotate</code></li><li>缩放： <code>scale</code></li></ul><ol start="2"><li><code>translate</code> 语法</li></ol><ul><li>x 就是 x 轴上水平移动</li><li>y 就是 y 轴上水平移动</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token property">transfrom</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重点知识点</li></ol><ul><li><code>2D</code> 的移动主要是指 水平、垂直方向上的移动</li><li><code>translate</code> 最大的优点就是不影响其他元素的位置</li><li><code>translate</code> 中的100%单位，是相对于本身的宽度和高度来进行计算的</li><li>行内标签没有效果</li></ul><ol start="4"><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token comment">/* 平移 */</span>  <span class="token comment">/* 水平垂直移动 100px */</span>  <span class="token comment">/* transform: translate(100px, 100px); */</span>  <span class="token comment">/* 水平移动 100px */</span>  <span class="token comment">/* transform: translate(100px, 0) */</span>  <span class="token comment">/* 垂直移动 100px */</span>  <span class="token comment">/* transform: translate(0, 100px) */</span>  <span class="token comment">/* 水平移动 100px */</span>  <span class="token comment">/* transform: translateX(100px); */</span>  <span class="token comment">/* 垂直移动 100px */</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十五、2D-转换-rotate"><a href="#十五、2D-转换-rotate" class="headerlink" title="十五、2D 转换 rotate"></a>十五、<code>2D 转换 rotate</code></h3><ol><li>rotate 旋转<ul><li><code>2D</code> 旋转指的是让元素在二维平面内顺时针或者逆时针旋转</li></ul></li><li><code>rotate</code> 语法</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 单位是：deg */</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>度数<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>重点知识点</li></ol><ul><li><code>rotate</code> 里面跟度数，单位是 <code>deg</code></li><li>角度为正时，顺时针，角度为负时，逆时针</li><li>默认旋转的中心点是元素的中心点</li></ul><ol start="4"><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img:hover</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h2><h3 id="一、rotate"><a href="#一、rotate" class="headerlink" title="一、rotate"></a>一、rotate</h3><blockquote><p>2d旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转</p></blockquote><p>使用步骤：</p><ol><li>给元素添加转换属性 <code>transform</code></li><li>属性值为 <code>rotate(角度)</code>  如 <code>transform:rotate(30deg)</code>  顺时针方向旋转<strong>30度</strong></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二、设置元素旋转中心点-transform-origin"><a href="#二、设置元素旋转中心点-transform-origin" class="headerlink" title="二、设置元素旋转中心点(transform-origin)"></a>二、设置元素旋转中心点(transform-origin)</h3><ol><li><code>transform-origin</code> 基础语法</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transform-origin</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>重要知识点</li></ol><ul><li>注意后面的参数 x 和 y 用空格隔开</li><li>x y 默认旋转的中心点是元素的中心 (50% 50%)，等价于 <code>center</code>  <code>center</code></li><li>还可以给 x y 设置像素或者方位名词(<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>、<code>center</code>)</li></ul><h3 id="三、2D-转换之-scale"><a href="#三、2D-转换之-scale" class="headerlink" title="三、2D 转换之 scale"></a>三、<code>2D</code> 转换之 <code>scale</code></h3><ol><li><p><code>scale</code> 的作用</p><ul><li>用来控制元素的放大与缩小</li></ul></li><li><p>语法</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>知识要点</li></ol><ul><li>注意，x 与 y 之间使用逗号进行分隔</li><li><code>transform: scale(1, 1)</code>: 宽高都放大一倍，相当于没有放大</li><li><code>transform: scale(2, 2)</code>: 宽和高都放大了二倍</li><li><code>transform: scale(2)</code>: 如果只写了一个参数，第二个参数就和第一个参数一致</li><li><code>transform:scale(0.5, 0.5)</code>: 缩小</li><li><code>scale</code> 最大的优势：可以设置转换中心点缩放，默认以中心点缩放，而且不影响其他盒子</li></ul><ol start="4"><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div:hover</span> <span class="token punctuation">{</span> <span class="token comment">/* 注意，数字是倍数的含义，所以不需要加单位 */</span> <span class="token comment">/* transform: scale(2, 2) */</span> <span class="token comment">/* 实现等比缩放，同时修改宽与高 */</span> <span class="token comment">/* transform: scale(2) */</span> <span class="token comment">/* 小于 1 就等于缩放*/</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、-2D-转换综合写法以及顺序问题"><a href="#四、-2D-转换综合写法以及顺序问题" class="headerlink" title="四、 2D 转换综合写法以及顺序问题"></a>四、 <code>2D</code> 转换综合写法以及顺序问题</h3><ol><li>知识要点</li></ol><ul><li>同时使用多个转换，其格式为 <code>transform: translate() rotate() scale()</code></li><li>顺序会影响到转换的效果(先旋转会改变坐标轴方向)</li><li>但我们同时有位置或者其他属性的时候，要将位移放到最前面</li></ul><ol><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div:hover</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="五、-动画-animation"><a href="#五、-动画-animation" class="headerlink" title="五、 动画(animation)"></a>五、 动画(animation)</h3><ol><li>什么是动画</li></ol><ul><li>动画是 <code>CSS3</code> 中最具颠覆性的特征之一，可通过设置多个节点来精确的控制一个或者一组动画，从而实现复杂的动画效果</li></ul><ol start="2"><li>动画的基本使用</li></ol><ul><li>先定义动画</li><li>在调用定义好的动画</li></ul><ol start="3"><li>语法格式(定义动画)</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">{</span>    <span class="token selector">0%</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">100%</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>语法格式(使用动画)</li></ol><pre class="line-numbers language-none"><code class="language-none">div {/* 调用动画 */    animation-name: 动画名称; /* 持续时间 */ animation-duration: 持续时间；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>动画序列</li></ol><ul><li>0% 是动画的开始，100 % 是动画的完成，这样的规则就是动画序列</li><li>在 @keyframs 中规定某项 CSS 样式，就由创建当前样式逐渐改为新样式的动画效果</li><li>动画是使元素从一个样式逐渐变化为另一个样式的效果，可以改变任意多的样式任意多的次数</li><li>用百分比来规定变化发生的时间，或用 <code>from</code> 和 <code>to</code>，等同于 0% 和 100%</li></ul><ol start="6"><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;    div</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>      <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>      <span class="token property">animation-duration</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@keyframes</span> move</span><span class="token punctuation">{</span>      <span class="token selector">0%</span> <span class="token punctuation">{</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0px<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token selector">100%</span> <span class="token punctuation">{</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>500px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  &lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、动画常见属性"><a href="#六、动画常见属性" class="headerlink" title="六、动画常见属性"></a>六、动画常见属性</h3><ol><li>常见的属性</li></ol><p><img src="/liaojie.github.io/medias/animationcanshu.png"></p><ol start="2"><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>  <span class="token comment">/* 动画名称 */</span>  <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>  <span class="token comment">/* 动画花费时长 */</span>  <span class="token property">animation-duration</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span>  <span class="token comment">/* 动画速度曲线 */</span>  <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease-in-out<span class="token punctuation">;</span>  <span class="token comment">/* 动画等待多长时间执行 */</span>  <span class="token property">animation-delay</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span>  <span class="token comment">/* 规定动画播放次数 infinite: 无限循环 */</span>  <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span>  <span class="token comment">/* 是否逆行播放 */</span>  <span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>  <span class="token comment">/* 动画结束之后的状态 */</span>  <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div:hover</span> <span class="token punctuation">{</span>  <span class="token comment">/* 规定动画是否暂停或者播放 */</span>  <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、-动画简写方式"><a href="#七、-动画简写方式" class="headerlink" title="七、 动画简写方式"></a>七、 动画简写方式</h3><ol><li>动画简写方式</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 起始与结束状态 */</span><span class="token property">animation</span><span class="token punctuation">:</span> name duration timing-function delay iteration-count direction fill-mode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>知识要点</li></ol><ul><li>简写属性里面不包含 <code>animation-paly-state</code></li><li>暂停动画 <code>animation-paly-state: paused</code>; 经常和鼠标经过等其他配合使用</li><li>要想动画走回来，而不是直接调回来：<code>animation-direction: alternate</code></li><li>盒子动画结束后，停在结束位置：<code>animation-fill-mode: forwards</code> </li></ul><ol><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span> move 2s linear 1s infinite alternate forwards<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="八、速度曲线细节"><a href="#八、速度曲线细节" class="headerlink" title="八、速度曲线细节"></a>八、速度曲线细节</h3><ol><li>速度曲线细节<ul><li><code>animation-timing-function</code>: 规定动画的速度曲线，默认是<code>ease</code></li></ul></li></ol><p><img src="/liaojie.github.io/medias/steps.png"></p><ol><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> move 4s <span class="token function">steps</span><span class="token punctuation">(</span>24<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 480px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、奔跑的熊大"><a href="#九、奔跑的熊大" class="headerlink" title="九、奔跑的熊大"></a>九、奔跑的熊大</h3><ol><li>代码演示</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span> <span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>        <span class="token punctuation">}</span>              <span class="token selector">div</span> <span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>media/bear.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>            <span class="token comment">/* 我们元素可以添加多个动画， 用逗号分隔 */</span>            <span class="token property">animation</span><span class="token punctuation">:</span> bear .4s <span class="token function">steps</span><span class="token punctuation">(</span>8<span class="token punctuation">)</span> infinite<span class="token punctuation">,</span> move 3s forwards<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token atrule"><span class="token rule">@keyframes</span> bear</span> <span class="token punctuation">{</span>            <span class="token selector">0%</span> <span class="token punctuation">{</span>                <span class="token property">background-position</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">100%</span> <span class="token punctuation">{</span>                <span class="token property">background-position</span><span class="token punctuation">:</span> -1600px 0<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>            <span class="token selector">0%</span> <span class="token punctuation">{</span>                <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">100%</span> <span class="token punctuation">{</span>                <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>                <span class="token comment">/* margin-left: -100px; */</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="part-3"><a href="#part-3" class="headerlink" title="part 3"></a>part 3</h2><h3 id="一、-认识-3D-转换"><a href="#一、-认识-3D-转换" class="headerlink" title="一、 认识 3D 转换"></a>一、 认识 <code>3D</code> 转换</h3><ol><li><code>3D</code> 的特点</li></ol><ul><li>近大远小</li><li>物体和面遮挡不可见</li></ul><ol start="2"><li>三维坐标系</li></ol><ul><li><p>x 轴：水平向右  – <strong>注意：x 轴右边是正值，左边是负值</strong></p></li><li><p>y 轴：垂直向下  – <strong>注意：y 轴下面是正值，上面是负值</strong></p></li><li><p>z 轴：垂直屏幕  –  <strong>注意：往外边的是正值，往里面的是负值</strong></p><p>   <img src="/liaojie.github.io/medias/sanwei.png"></p></li></ul><h3 id="二、3D-转换"><a href="#二、3D-转换" class="headerlink" title="二、3D 转换"></a>二、<code>3D</code> 转换</h3><ol><li><code>3D</code> 转换知识要点</li></ol><ul><li><code>3D</code> 位移：<code>translate3d(x, y, z)</code></li><li><code>3D</code> 旋转：<code>rotate3d(x, y, z)</code></li><li>透视：<code>perspctive</code></li><li><code>3D</code>呈现 <code>transfrom-style</code></li></ul><ol start="2"><li><code>3D</code> 移动 <code>translate3d</code></li></ol><ul><li><code>3D</code> 移动就是在 <code>2D</code> 移动的基础上多加了一个可以移动的方向，就是 z 轴方向</li><li><code>transform: translateX(100px)</code>：仅仅是在 x 轴上移动</li><li><code>transform: translateY(100px)</code>：仅仅是在 y 轴上移动</li><li><code>transform: translateZ(100px)</code>：仅仅是在 z 轴上移动</li><li><code>transform: translate3d(x, y, z)</code>：其中x、y、z 分别指要移动的轴的方向的距离</li><li><strong>注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充</strong></li></ul><ol start="3"><li>语法</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> 100px<span class="token punctuation">,</span> 100px<span class="token punctuation">)</span><span class="token comment">/* 注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充 */</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> 100px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三、透视-perspective"><a href="#三、透视-perspective" class="headerlink" title="三、透视 perspective"></a>三、透视 <code>perspective</code></h3><ol><li>知识点讲解</li></ol><ul><li>如果想要网页产生 <code>3D</code> 效果需要透视(理解成 <code>3D</code> 物体投影的 <code>2D</code> 平面上)</li><li>实际上模仿人类的视觉位置，可视为安排一直眼睛去看</li><li>透视也称为视距，所谓的视距就是人的眼睛到屏幕的距离</li><li>距离视觉点越近的在电脑平面成像越大，越远成像越小</li><li>透视的单位是像素</li></ul><ol start="2"><li>知识要点</li></ol><ul><li><p><strong>透视需要写在被视察元素的父盒子上面</strong></p></li><li><p>注意下方图片</p><ul><li><p>d：就是视距，视距就是指人的眼睛到屏幕的距离</p></li><li><p>z：就是 z 轴，z 轴越大(正值)，我们看到的物体就越大</p><p><img src="/liaojie.github.io/medias/perspective.png"></p></li></ul></li></ul><ol start="3"><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>  <span class="token property">perspective</span><span class="token punctuation">:</span> 1000px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="四、-translateZ"><a href="#四、-translateZ" class="headerlink" title="四、 translateZ"></a>四、 <code>translateZ</code></h3><ol><li><code>translateZ</code> 与 <code>perspecitve</code> 的区别</li></ol><ul><li><code>perspecitve</code> 给父级进行设置，<code>translateZ</code> 给 子元素进行设置不同的大小</li></ul><h3 id="五、3D-旋转rotateX"><a href="#五、3D-旋转rotateX" class="headerlink" title="五、3D 旋转rotateX"></a>五、<code>3D</code> 旋转<code>rotateX</code></h3><blockquote><p>3D 旋转指可以让元素在三维平面内沿着 x 轴、y 轴、z 轴 或者自定义轴进行旋转</p></blockquote><ol><li>语法</li></ol><ul><li><code>transform: rotateX(45deg)</code> – 沿着 x 轴正方向旋转 45 度</li><li><code>transform: rotateY(45deg)</code> – 沿着 y 轴正方向旋转 45 度</li><li><code>transform: rotateZ(45deg)</code> – 沿着 z 轴正方向旋转 45 度</li><li><code>transform: rotate3d(x, y, z, 45deg)</code> – 沿着自定义轴旋转 45 deg 为角度</li></ul><ol start="2"><li>代码案例</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">perspective</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all 1s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img:hover</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>左手准则</p><ul><li><p>左手的手拇指指向 x 轴的正方向</p></li><li><p>其余手指的弯曲方向就是该元素沿着 x 轴旋转的方向            </p></li></ul></li></ol><h3 id="六、3D-旋转-rotateY"><a href="#六、3D-旋转-rotateY" class="headerlink" title="六、3D 旋转 rotateY"></a>六、<code>3D</code> 旋转 <code>rotateY</code></h3><ol><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">perspective</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all 1s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img:hover</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>左手准则</p><ul><li><p>左手的拇指指向 y 轴的正方向</p></li><li><p>其余的手指弯曲方向就是该元素沿着 y 轴旋转的方向(正值)</p><p><img src="/liaojie.github.io/medias/rotateY.png"></p></li></ul></li></ol><h3 id="七、-3D-旋转-rotateZ"><a href="#七、-3D-旋转-rotateZ" class="headerlink" title="七、 3D 旋转 rotateZ"></a>七、 <code>3D</code> 旋转 <code>rotateZ</code></h3><ol><li>代码演示</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">perspective</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all 1s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img:hover</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>rotate3d</code></li></ol><ul><li><code>transform: rotate3d(x, y, z, deg)</code> – 沿着自定义轴旋转 deg 为角度</li><li>x, y, z 表示旋转轴的矢量，是标识你是否希望沿着该轴进行旋转，最后一个标识旋转的角度<ul><li><code>transform: rotate3d(1, 1, 0, 180deg)</code> – 沿着对角线旋转 45deg</li><li><code>transform: rotate3d(1, 0, 0, 180deg)</code> – 沿着 x 轴旋转 45deg</li></ul></li></ul><ol start="3"><li><p>代码演示</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">perspective</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all 1s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img:hover</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate3d</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 180deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="八、3D-呈现-transform-style"><a href="#八、3D-呈现-transform-style" class="headerlink" title="八、3D 呈现 transform-style"></a>八、<code>3D</code> 呈现 <code>transform-style</code></h3><ol><li><code>transform-style</code></li></ol><ul><li>☆☆☆☆☆</li><li>控制子元素是否开启三维立体环境</li><li><code>transform-style: flat</code>  代表子元素不开启 <code>3D</code> 立体空间，默认的</li><li><code>transform-style: preserve-3d</code> 子元素开启立体空间</li><li>代码写给父级，但是影响的是子盒子</li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github</title>
      <link href="/liaojie.github.io/2022/02/08/github/"/>
      <url>/liaojie.github.io/2022/02/08/github/</url>
      
        <content type="html"><![CDATA[<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</p><p>gitHub于2008年4月10日正式上线，除了git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。</p><h3 id="Github可以做什么"><a href="#Github可以做什么" class="headerlink" title="Github可以做什么"></a>Github可以做什么</h3><p>最通用的，star喜欢的项目，fork并pull为他人项目打补丁</p><ol><li><p>Github Pages 可以为项目建立静态主页(即gh-pages分支), 也可以建立命名特殊的repo(<a href="http://username.github.io/">http://username.github.io</a>) 来建立个人静态网站(使用 GitHub Pages 来做博客并非不道德)</p></li><li><p>Vim vundle 用户重度依赖Github来管理插件</p></li><li><p>Github可以作为自己的简历 ,比如 GitHub Résumé 和 <a href="https://github.com/hit9/GhResume">https://github.com/hit9/GhResume</a></p></li><li><p>在线编译和测试社区Travis CI依赖Github</p></li><li><p>用Gists管理代码片段，而且可以内嵌到网页</p></li><li><p>托管编程环境。在Github上搜索dotfiles来看看大家都怎么管理自己的vim, git,tmux等配置文件的。一般的，我们可以通过submodule来管理插件等第三方工具</p></li><li><p>可以为自己的项目建立wiki,github/gollum 是其backend. 而且，我们可以用markdown写wiki，用git来管理wiki</p></li><li><p>Read the Docs ，这个东西当然不是Github官方的，但是它会检出你的Github上指定项目的docs目录，并用sphinx来生成在线文档。其实readthedocs也是个’静态服务器’</p></li><li><p>Github API 你可以用Github API做很多事情: 用github issues系统来做评论系统(petal，comcom ) ，用Github的markdown接口来渲染markdown，用github的oauth来做第三方登录..</p></li></ol><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库(Repository)"></a>仓库(Repository)</h3><ul><li>用来存放项目代码,每个项目对应一个仓库</li></ul><h3 id="收藏-Star"><a href="#收藏-Star" class="headerlink" title="收藏(Star)"></a>收藏(Star)</h3><h3 id="复制克隆项目-fork"><a href="#复制克隆项目-fork" class="headerlink" title="复制克隆项目(fork)"></a>复制克隆项目(fork)</h3><ul><li>该fork项目独立存在</li></ul><h3 id="发送请求-Pull-Requset"><a href="#发送请求-Pull-Requset" class="headerlink" title="发送请求(Pull Requset)"></a>发送请求(Pull Requset)</h3><ul><li>克隆别人的项目修改后可以发送请求合并代码</li></ul><h3 id="关注-Watch"><a href="#关注-Watch" class="headerlink" title="关注(Watch)"></a>关注(Watch)</h3><ul><li>项目更新时可以收到通知</li></ul><h3 id="事务卡片-Issue"><a href="#事务卡片-Issue" class="headerlink" title="事务卡片(Issue)"></a>事务卡片(Issue)</h3><ul><li>发现代码bug,但是目前没有成行的代码,需要讨论时用</li></ul><h2 id="仓库管理"><a href="#仓库管理" class="headerlink" title="仓库管理"></a>仓库管理</h2><h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><p>仓库主页-&gt;create new file</p><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h3><p>仓库主页-&gt;点击文件名-&gt;文件详情页-&gt;Edit this file</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>仓库主页-&gt;点击文件名-&gt;文件详情页-&gt;Delete this file</p><h3 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h3><p>仓库主页-&gt;find file</p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>仓库主页-&gt;Clone or download</p><h2 id="搭建网站-Github-Pages"><a href="#搭建网站-Github-Pages" class="headerlink" title="搭建网站(Github Pages)"></a>搭建网站(Github Pages)</h2>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio技巧</title>
      <link href="/liaojie.github.io/2022/01/26/androidstudio-ji-qiao/"/>
      <url>/liaojie.github.io/2022/01/26/androidstudio-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h2><p>代码管理的话，要先安装git</p><h3 id="Android-Studio开启版本管理"><a href="#Android-Studio开启版本管理" class="headerlink" title="Android Studio开启版本管理"></a>Android Studio开启版本管理</h3><p><img src="/liaojie.github.io/medias/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%861.png"></p><p>然后选择你常用的版本管理器</p><p><img src="/liaojie.github.io/medias/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%862.png"></p><p>做android系统开发的话，整个系统的代码管理是repo+git,开启之后红色一片，表示没有添加</p><p><img src="/liaojie.github.io/medias/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%863.png"></p><p><img src="/liaojie.github.io/medias/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%864.png"></p><p>添加完以后就变成了绿色</p><p><img src="/liaojie.github.io/medias/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%865.png"></p><p>也可以使用GUI来提交代码</p><p><img src="/liaojie.github.io/medias/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%866.png"></p><p>这里是本地提交，并没有关联远程仓库</p><h3 id="把项目推送到github上"><a href="#把项目推送到github上" class="headerlink" title="把项目推送到github上"></a>把项目推送到github上</h3><p><img src="/liaojie.github.io/medias/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%867.png"></p><p>然后填写账号密码就可以了，接着就可以在自己的github上看到了。</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="万能的alt-回车"><a href="#万能的alt-回车" class="headerlink" title="万能的alt+回车"></a>万能的alt+回车</h3><p>这个快捷键非常智能，不同的场景下不同的功能，而且还有选项！</p><p>比如说：</p><ul><li>实现方法</li><li>创建成员变量</li><li>创建局部变量</li><li>抛出异常</li><li>创建方法</li><li>创建常量</li><li>…</li></ul><p>有错误的时候也可以ctrl+回车</p><p>它会提示你有什么错误，如何解决</p><h3 id="局部变量改成成员变量"><a href="#局部变量改成成员变量" class="headerlink" title="局部变量改成成员变量"></a>局部变量改成成员变量</h3><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%811.gif"></p><h3 id="逻辑-判断语句的编写"><a href="#逻辑-判断语句的编写" class="headerlink" title="逻辑/判断语句的编写"></a>逻辑/判断语句的编写</h3><ol><li>判断语句if，先写要判断的内容，再点if即可</li></ol><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%812.gif"></p><ol start="2"><li>判空/非空</li></ol><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%813.gif"></p><ol start="3"><li>for循环</li></ol><p>遍历集合，遍历数组</p><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%814.gif"></p><p>循环某个次数</p><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%815.gif"></p><ol start="4"><li>while</li></ol><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%816.gif"></p><h3 id="getter-setter的生成"><a href="#getter-setter的生成" class="headerlink" title="getter/setter的生成"></a>getter/setter的生成</h3><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%817.gif"></p><h3 id="toString方法的生成"><a href="#toString方法的生成" class="headerlink" title="toString方法的生成"></a>toString方法的生成</h3><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%818.gif"></p><h3 id="构造方法生成"><a href="#构造方法生成" class="headerlink" title="构造方法生成"></a>构造方法生成</h3><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%819.gif"></p><h3 id="折叠-展开代码"><a href="#折叠-展开代码" class="headerlink" title="折叠/展开代码"></a>折叠/展开代码</h3><p>快捷键：</p><ul><li>折叠代码ctrl和alt和-</li><li>展开代码ctrl和alt和+</li></ul><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%8110.gif"></p><h3 id="上下移动代码"><a href="#上下移动代码" class="headerlink" title="上下移动代码"></a>上下移动代码</h3><p>快捷键：ctrl+shift+上/下</p><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%8111.gif"></p><h3 id="复制整行代码"><a href="#复制整行代码" class="headerlink" title="复制整行代码"></a>复制整行代码</h3><p>应用场景，比如在写代码的时候，前后两行代码是很像的，参数不一样，那么你们可以复制上面的一行，然后修改一下参数即可。</p><p>快捷键：ctrl+d</p><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%8112.gif"></p><h3 id="多行代码同时编辑"><a href="#多行代码同时编辑" class="headerlink" title="多行代码同时编辑"></a>多行代码同时编辑</h3><p>快捷键，alt+鼠标操作</p><p>应用场景：cpoy log的时候，或者多行同时修改的时候，比如说我要在多个常量前面添加key</p><p><img src="/liaojie.github.io/medias/%E7%BC%96%E7%A0%8113.gif"></p><h3 id="选中内容大小写的切换"><a href="#选中内容大小写的切换" class="headerlink" title="选中内容大小写的切换"></a>选中内容大小写的切换</h3><p>快捷键：alt+shift+u</p><h3 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h3><h4 id="IDE快捷键和相关说明"><a href="#IDE快捷键和相关说明" class="headerlink" title="IDE快捷键和相关说明"></a>IDE快捷键和相关说明</h4><p><img src="/liaojie.github.io/medias/%E5%BF%AB%E6%8D%B7%E9%94%AE1.png"></p><h4 id="重构常用快捷键"><a href="#重构常用快捷键" class="headerlink" title="重构常用快捷键"></a>重构常用快捷键</h4><p><img src="/liaojie.github.io/medias/%E5%BF%AB%E6%8D%B7%E9%94%AE2.png"></p><h4 id="操作文件常用的快捷键"><a href="#操作文件常用的快捷键" class="headerlink" title="操作文件常用的快捷键"></a>操作文件常用的快捷键</h4><p><img src="/liaojie.github.io/medias/%E5%BF%AB%E6%8D%B7%E9%94%AE3.png"></p><h4 id="调试时常用到的快捷键"><a href="#调试时常用到的快捷键" class="headerlink" title="调试时常用到的快捷键"></a>调试时常用到的快捷键</h4><p><img src="/liaojie.github.io/medias/%E5%BF%AB%E6%8D%B7%E9%94%AE4.png"></p><h4 id="查找时常用到的快捷键"><a href="#查找时常用到的快捷键" class="headerlink" title="查找时常用到的快捷键"></a>查找时常用到的快捷键</h4><p><img src="/liaojie.github.io/medias/%E5%BF%AB%E6%8D%B7%E9%94%AE5.png"></p><h4 id="编码时常用到的快捷键"><a href="#编码时常用到的快捷键" class="headerlink" title="编码时常用到的快捷键"></a>编码时常用到的快捷键</h4><p><img src="/liaojie.github.io/medias/%E5%BF%AB%E6%8D%B7%E9%94%AE6.png"></p><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><h3 id="依赖设置"><a href="#依赖设置" class="headerlink" title="依赖设置"></a>依赖设置</h3><p>依赖内容一般有三种，本地的Jar包，aar包，本地的module，远程仓库的内容</p><h4 id="本地的jar包，aar包"><a href="#本地的jar包，aar包" class="headerlink" title="本地的jar包，aar包"></a>本地的jar包，aar包</h4><p>首先把包复制到app/libs目录下</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE1.png"><br><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE2.png"></p><p>项目右键，然后moduleSettings，打开模块设置</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE3.png"></p><p>选择要依赖的包</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE4.png"></p><p>也可以手动添加，在app的gradle文件里</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE5.png"></p><p>推荐大家通过GUI进行添加，不容易出错。</p><h4 id="远程仓库的依赖"><a href="#远程仓库的依赖" class="headerlink" title="远程仓库的依赖"></a>远程仓库的依赖</h4><p>在github上，我们常会看到一些usage，有说明gradle的依赖</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE6.png"><br><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE7.png"></p><p>然后点击右上角的sync now，同步一下。</p><p>能够使用，说明已经下载下来依赖上了。</p><p>如果报SSL的错误，展开错误看看，是gradle的错误，还是仓库的路径的错误，找到没有证书的链接以后，全局搜索一下，把https里的s去掉，采用普通 的http访问即可。</p><p>如果说超时，估计是你的电脑访问不了仓库，那怎么办呢？</p><p>修改一下仓库的地址，添加阿里云的或者其他的</p><pre class="line-numbers language-none"><code class="language-none">maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE8.png"></p><h4 id="module依赖"><a href="#module依赖" class="headerlink" title="module依赖"></a>module依赖</h4><p>如果上面说有方法，远程maven仓库无法依赖，或者出错了。还可以把源码下载下来，把lib库作为一个module加入到项目里，然后关联起来也是可以的。</p><p>在settings.gradle里添加多一个模块，然后在app.gradle里依赖。</p><p>但是不建议大家么做，因为如果libary又依赖其他的libary，不好管理，所以还是使用jar包，或者aar包比较好。体积也小。</p><h3 id="打开项目所在的目录"><a href="#打开项目所在的目录" class="headerlink" title="打开项目所在的目录"></a>打开项目所在的目录</h3><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE9.png"></p><p>这个还是挺常用的，比如说我们要拷贝lib包的时候，或者压缩项目给别人时，对比内容的时候….</p><h3 id="应用打包"><a href="#应用打包" class="headerlink" title="应用打包"></a>应用打包</h3><p>先是一般的打包，打包成apk</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE10.png"></p><p>打包完以后右下角会有提示</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE11.png"></p><p>点击路径就可以打开文件夹了</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE12.png"></p><p>这个生成的你也看到了，是debug的包，没有签名的，是调试包。</p><h3 id="创建应用签名"><a href="#创建应用签名" class="headerlink" title="创建应用签名"></a>创建应用签名</h3><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE13.png"></p><p>选择apk</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE14.png"></p><p>next</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE15.png"></p><p>创建秘钥</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE16.png"></p><p>签名有啥用呢？最明显的用处就是防止别人替换掉自己的应用，另外则是android系统要求应用必须签名者可以安装的。</p><p>可是们跑的应用可以直接安装上去呀，其实也是有签名的，只不过那个是debug签名罢了。</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE17.png"><br><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE18.png"></p><p>签名成功以后：</p><p><img src="/liaojie.github.io/medias/%E9%A1%B9%E7%9B%AE19.png"></p><p>这样子打包出来的apk就是你签名的apk了，android studio默认也是有给签名的，只不过是debug签名罢了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android数据库</title>
      <link href="/liaojie.github.io/2022/01/26/android-shu-ju-ku/"/>
      <url>/liaojie.github.io/2022/01/26/android-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>1.创建一个类继承于SQLiteOpenHelper</p><p>实现里面的方法,创建构造方法<br>参数解释:</p><ul><li>@param context to use for locating paths to the the database 上下文</li><li>@param name of the database file, or null for an in-memory database 数据库名称</li><li>@param factory to use for creating cursor objects, or null for the default 游标工厂</li><li>@param version number of the database (starting at 1); if the database is older 版本号</li></ul><p>2.创建对象新建数据库</p><p>调用getReadableDatabase()/getWriteableDatabase()方法即可创建数据库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建数据库</span>db_DatabaseHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">db_DatabaseHelper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>helper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="onCreate-SQLiteDatabase-db"><a href="#onCreate-SQLiteDatabase-db" class="headerlink" title="onCreate(SQLiteDatabase db)"></a>onCreate(SQLiteDatabase db)</h2><p>第一次创建数据库的时候调用该函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建数据表(表名单独用类保存为常量)</span><span class="token comment">//1.编写sql语句</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"create table"</span> <span class="token operator">+</span> TABLE_NAME <span class="token operator">+</span> <span class="token string">"_id integer, name varhcar(50), age integer, salary integer"</span><span class="token punctuation">;</span><span class="token comment">//2.执行sql语句</span>db<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="onUpgrade-SQLiteDatabase-db-int-oldVersion-int-newVersion"><a href="#onUpgrade-SQLiteDatabase-db-int-oldVersion-int-newVersion" class="headerlink" title="onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)"></a>onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)</h2><p>当数据库升级的时候调用该函数<br>根据版本号不同对数据库做相应的处理（增减字段等）</p><h2 id="编写DAO操作类"><a href="#编写DAO操作类" class="headerlink" title="编写DAO操作类"></a>编写DAO操作类</h2><p>1.通过helper对象获取SQLiteDatabase对象<br>2.编写sql语句<br>3.SQLiteDatabase对象执行sql语句<br>4.关闭数据库</p><p>eg:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">QLiteDatabase</span> db <span class="token operator">=</span> mhelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into "</span> <span class="token operator">+</span> db_Constants<span class="token punctuation">.</span>TABLE_NAME <span class="token operator">+</span> <span class="token string">"(_id,name,age,salary,phone,address)values(?,?,?,?,?,?)"</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">3500</span><span class="token punctuation">,</span><span class="token string">"13678088714"</span><span class="token punctuation">,</span><span class="token string">"陕西西安"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5.查询操作</p><ul><li>查询操作调用方法rawQuery(sql,null);</li><li>该方法返回游标对象 Cursor</li><li>moveToNext()遍历返回结果</li><li>getColumnIndex(“columnName”); 通过列名获取列号</li><li>getString(index)\getInt(index); 通过列号获取数据</li><li>关闭游标、数据库。</li></ul><p>eg:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SQLiteDatabase</span> db <span class="token operator">=</span> mhelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from "</span> <span class="token operator">+</span> db_Constants<span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">;</span><span class="token class-name">Cursor</span> cursor <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">rawQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">moveToNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cursor<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用Android-API操作数据"><a href="#使用Android-API操作数据" class="headerlink" title="使用Android API操作数据"></a>使用Android API操作数据</h2><p>Android提供了数据操作的API，使操作数据库变得更加简单</p><p>插入</p><ul><li>insert(数据表名称， null, ContentValues);</li><li>ContentValues是map容器，通过put()添加键值对及列名与其对应的值</li><li>@return (long)新插入的行号，若为-1表示发生错误</li></ul><p>eg:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SQLiteDatabase</span> db <span class="token operator">=</span> mhelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String sql = "insert into " + db_Constants.TABLE_NAME + "(_id,name,age,salary,phone,address)values(?,?,?,?,?,?)";</span><span class="token comment">//db.execSQL(sql, new Object[]{1,"张*",2*,****,"136****8714","陕西**"});</span><span class="token class-name">ContentValues</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> <span class="token string">"1367****714"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"陕西**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>db_Constants<span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除</p><ul><li>delete(数据表名称, 条件, 参数)</li><li>参数是用字符串数组表示，代替条件中的‘?’</li><li>@return (int)影响行数</li></ul><p>eg:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SQLiteDatabase</span> db <span class="token operator">=</span> mhelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String sql = "delete from " + db_Constants.TABLE_NAME + " where age = 30";</span><span class="token comment">//db.execSQL(sql);</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Args</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Args</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"30"</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>db_Constants<span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">,</span><span class="token string">"age = ?"</span><span class="token punctuation">,</span><span class="token class-name">Args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新</p><ul><li>update(数据表名称, ContentValues, 条件, 参数)</li><li>return (int)影响行数</li></ul><p>eg:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SQLiteDatabase</span> db <span class="token operator">=</span> mhelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String sql = "update " + db_Constants.TABLE_NAME + " set salary = 6500 where age =21";</span><span class="token comment">//db.execSQL(sql);</span><span class="token class-name">ContentValues</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> <span class="token number">6500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Args</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Args</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"30"</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>db_Constants<span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">,</span> values<span class="token punctuation">,</span> <span class="token string">"age = ?"</span><span class="token punctuation">,</span> <span class="token class-name">Args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询</p><ul><li>query(数据表名称, 返回字段, 条件, 参数, 分组, HAVING,排序)</li><li>HAVING 是条件中有函数的时候使用</li><li>@return (Cursor)游标</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SQLiteDatabase</span> db <span class="token operator">=</span> mhelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String sql = "select * from " + db_Constants.TABLE_NAME;</span><span class="token comment">// Cursor cursor = db.rawQuery(sql,null);</span><span class="token comment">// while(cursor.moveToNext()){</span><span class="token comment">//     int index = cursor.getColumnIndex("name");</span><span class="token comment">//     String name = cursor.getString(index);</span><span class="token comment">//     Log.d(TAG, name);</span><span class="token comment">// }</span><span class="token comment">// cursor.close();</span><span class="token class-name">Cursor</span> cursor <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>db_Constants<span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">moveToNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> index <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><p>安全性</p><ul><li>当数据库在进行写操作时，由于异常发生，可能导致数据前后出现不一致的对象，因此有必要采用事务</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">db<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启事务</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token comment">//数据操作</span>db<span class="token punctuation">.</span><span class="token function">setTransactionSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>exception e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理异常</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>db<span class="token punctuation">.</span><span class="token function">endTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭事务</span>db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>高效性</p><ul><li>在执行大量数据操作时，普通方式会重复打开关闭数据库，而开启事务后，是将数据先写入内存，再一次性写入数据。</li></ul><p><a href="https://github.com/liaojie1314/DatabaseDemo">代码</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb</title>
      <link href="/liaojie.github.io/2022/01/26/adb/"/>
      <url>/liaojie.github.io/2022/01/26/adb/</url>
      
        <content type="html"><![CDATA[<p>ADB是什么？</p><p>ADB是android debug bridge–&gt; 安卓调试桥</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>一般来说,作为android开发人员,不需要下载。在sdk里自带就有。在sdk的platform-tools目录下就有。</p><p>如果是测试人员的话,可以到这个地址上去下载:</p><p><a href="https://adbshell.com/downloads">ADB下载</a></p><p>下载好了然后需要配置环境变量:</p><p>右键此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量-&gt;Path(添加adb.exe的文件夹路径)-&gt;一直点击确定即可</p><p>测试:WIN+R,输入cmd进入命令行,输入adb出现下面结果就说明成功了</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/adb%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.png"></p><h2 id="手机配置"><a href="#手机配置" class="headerlink" title="手机配置"></a>手机配置</h2><ul><li>打开开发者模式—&gt;不同手机不一样,可以在设置里搜索一下。默认开发者模式是不可见的,需要多次点击android版本号</li><li>要允许USB调试</li><li>允许Usb安装应用</li><li>关闭各种系统优化</li></ul><p>插上手机usb时,可能会弹窗需要授权,点击允许就可以了。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="查看设备"><a href="#查看设备" class="headerlink" title="查看设备"></a>查看设备</h3><p><code>adb devices</code>:查看当前连接设备</p><h3 id="重新挂载"><a href="#重新挂载" class="headerlink" title="重新挂载"></a>重新挂载</h3><p>命令:<code>adb remount</code></p><p>remount就是重新挂载的意思。</p><p>一般做系统开发才会用到这个命令。</p><p>比如说,你要推送东西进system目录下,你需要重新挂载,默认情况下是只读的状态。</p><p>如果出现如下提示,提示说我不是root,我得adb root才行。那我们就执行一下adb root,再执行adb remount</p><blockquote><p>Not running as root. Try “adb root” first.</p></blockquote><h3 id="设备重启"><a href="#设备重启" class="headerlink" title="设备重启"></a>设备重启</h3><p>命令:<code>adb reboot</code></p><p>如果提示你不是root的,你切换一下root用户就好了。</p><h3 id="设备关机"><a href="#设备关机" class="headerlink" title="设备关机"></a>设备关机</h3><p><code>adb shell reboot -p</code></p><h3 id="选择设备"><a href="#选择设备" class="headerlink" title="选择设备"></a>选择设备</h3><p>如果你执行adb名的话,则会提示你有多台设备,比如说,我电脑现在有两个手机设备</p><p>我执行adb reboot</p><p>就会提示多台设备,可以加-s参数来指定设备。</p><p><code>adb -s xxx设备名称</code></p><h3 id="进入shell"><a href="#进入shell" class="headerlink" title="进入shell"></a>进入shell</h3><p>命令:<code>adb shell</code></p><p>就进入到了安卓系统的shell了。</p><h2 id="常用的shell命令"><a href="#常用的shell命令" class="headerlink" title="常用的shell命令"></a>常用的shell命令</h2><h3 id="列出文件"><a href="#列出文件" class="headerlink" title="列出文件"></a>列出文件</h3><p><code>ls -l</code></p><h3 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h3><p><code>cd 目录地址</code></p><p>比如说我去查看data/data/下的目录,这个是我们应用的内部目录,里面有很多包名,对应着各应用的文件夹。</p><p>我没有权限,那怎么办呢？我们输入su就可以了</p><h3 id="查看文件路径"><a href="#查看文件路径" class="headerlink" title="查看文件路径"></a>查看文件路径</h3><p><code>pwd</code></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p><code>rm命令,如果是文件夹则要加参数-r,强制删除-f,force</code></p><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p><code>mkdir 文件夹名称</code></p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p><code>touch 文件名</code></p><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p><code>mv 需要移动的文件 移动到的文件夹路径(./ 当前路径)</code></p><h3 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h3><p>有时候临时查看,我们可以用里面的命令cat,vim,vi,more这些命令可能没有,被阉割掉了。或者说本来就是没有的,毕竟android要的是linux的内核。</p><p><code>cat 文件名</code></p><p>发现全是乱码。怎么解决呢？得设置一下编码</p><blockquote><p>chcp 65001</p></blockquote><p>65001是utf-8,936是gbk,再看就行了</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="从Android系统中拉取文件出来"><a href="#从Android系统中拉取文件出来" class="headerlink" title="从Android系统中拉取文件出来"></a>从Android系统中拉取文件出来</h3><p>命令: <code>adb pull 内部文件地址 本地目录</code></p><p>如果我们进去里面是用了su命令的, 切换到超级用户。我们就要先adb root</p><h3 id="推送文件到android系统中"><a href="#推送文件到android系统中" class="headerlink" title="推送文件到android系统中"></a>推送文件到android系统中</h3><p>命令: <code>adb push 本地文件 安卓系统内部路径</code></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="抓取Log"><a href="#抓取Log" class="headerlink" title="抓取Log"></a>抓取Log</h3><p>命令: <code>adb logcat &gt; xxx.log</code></p><p>输入ctrl+c停止抓取log</p><p>adb抓取Log有好些个参数,比如说等级,输出时间之类的。</p><p>一般建议全抓取,然后用Notepad++来搜索Log</p><h3 id="ADB获取包名"><a href="#ADB获取包名" class="headerlink" title="ADB获取包名"></a>ADB获取包名</h3><p>应用场景: 我们在开发的时候,有时需要打开别人的应用,如果没有别人的文档的时候。你怎么知道别人的action,category之类的是什么呢？或者用显式意图,你也得知道别人的包名和入口类的全名称呀。然后构建compoment,用于启动。</p><p>那怎么获取到包名呢？</p><p>我一般会用logcat抓取log,然后过滤一些特定的标识</p><p>比如说</p><pre class="line-numbers language-none"><code class="language-none">adb shelllogcat | grep cmp=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后去打开你的目标应用</p><pre class="line-numbers language-none"><code class="language-none">locat | grep START<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个也是有的</p><h3 id="应用安装"><a href="#应用安装" class="headerlink" title="应用安装"></a>应用安装</h3><p>命令: <code>adb install 本地apk地址</code></p><p>直接拖拽apk也可</p><p>不过需要这个手机端得允许usb安装应用</p><h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><p><code>adb uninstall 包名</code></p><p>直接adb跟包名就好,一般我们只卸载自己的,不过你可以去卸载一下系统的应用试试看！</p><p>一般系统应用的目录是:</p><pre class="line-numbers language-none"><code class="language-none">/system/priv-app/system/app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第三方应用的目录在</p><pre class="line-numbers language-none"><code class="language-none">/data/app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动一个Acitivity"><a href="#启动一个Acitivity" class="headerlink" title="启动一个Acitivity"></a>启动一个Acitivity</h3><p>命令: <code>adb shell am start -n 包名/类名</code></p><p>这种是显示意图启动</p><p>后面的斜杠不是或的意思,就是要两个都写。比如说:</p><blockquote><p>adb shell am start -n com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity</p></blockquote><p>这样子就启动了google浏览器了, 前提是得有哈。</p><h3 id="adb发送广播"><a href="#adb发送广播" class="headerlink" title="adb发送广播"></a>adb发送广播</h3><p>这个做系统开发比较常用,比如说做一些测试的时候。不需要写代码。</p><p>直接发就好了</p><pre class="line-numbers language-none"><code class="language-none">adb shell am broadcast -a 参数[-a ] action (常用) [-d &lt;DATA_URI&gt;] data的Uri [-t &lt;MIME_TYPE&gt;] mime type [-c [-c ] ...] category (一般) [-e|--es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt; ...] （字符串参数 先是key 再是value） [--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt; ...] (布尔类型参数 先是key 再是value） [-e|--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt; ...] （整型参数 先是key 再是value） [-n ] 组件名称 [-f ] [] flags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样子,我们写个广播接收者,然后我们发送一下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBroadcast</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"TestBroadcast"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"action is == &gt; "</span> <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"net.example.test.ACTION.TEST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> text <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isHansom <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getBooleanExtra</span><span class="token punctuation">(</span><span class="token string">"isHansom"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> monies <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"text == &gt; "</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"isHansom == &gt; "</span> <span class="token operator">+</span> isHansom<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"monies == &gt; "</span> <span class="token operator">+</span> monies<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.test.TestBroadcast<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>net.example.test.ACTION.TEST<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ADB截图"><a href="#ADB截图" class="headerlink" title="ADB截图"></a>ADB截图</h3><p><code>adb shell screencap -p /sdcard/screen.png adb pull /sdcard/screen.png ./</code></p><p>截图,放到特定位置</p><h3 id="ADB发送模拟按键"><a href="#ADB发送模拟按键" class="headerlink" title="ADB发送模拟按键"></a>ADB发送模拟按键</h3><p>命令: <code>adb shell input keyevent  键码（keyCode）</code></p><p>具体的KeyCode可以去看源码:</p><p>android.view.KeyEvent</p><p>Home和Back按钮</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> KEYCODE_HOME <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">/** Key code constant: Back key. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> KEYCODE_BACK <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>eg: <code>adb shell input keyevent 3</code></p>]]></content>
      
      
      <categories>
          
          <category> adb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android四大组件之服务</title>
      <link href="/liaojie.github.io/2022/01/25/android-si-da-zu-jian-zhi-fu-wu/"/>
      <url>/liaojie.github.io/2022/01/25/android-si-da-zu-jian-zhi-fu-wu/</url>
      
        <content type="html"><![CDATA[<p>Service是Android 系统中的四大组件之一,它跟Activity的级别差不多,但不能页面显示只能后台运行,并且可以和其他组件进行交互.service可以在很多场合的应用中使用,比如播放多媒体的时候用户启动了其他Activity这个时候程序要在后台继续播放,比如检测SD卡上文件的变化,再或者在后台记录你地理信息位置的改变等等,总之服务总是藏在后台的.例如,一个service可能处理网络事物、播放音乐、执行文件I/O,或与一个内容提供者交互,所有这些都在后台进行.<br>我们一定要知道的是这里Service的后台运行并不是子线程.Service的运行是在主线程中进行的,只是它没有界面显示而已,它的耗时操作同样需要开启子线程,否者会跟Activity一样出现ANR(application not response–程序没有响应).</p><h3 id="什么是服务呢？"><a href="#什么是服务呢？" class="headerlink" title="什么是服务呢？"></a>什么是服务呢？</h3><p>用俗话话应该是长期于后台运行的程序,如果是官方一点,首先它是一个组件,用于执行长期运行的任务,并且与用户没有交互。</p><p>每一个服务都需要在配置文件AndroidManifest.xml文件里进行声明,怎么声明呢？</p><p>使用标签,其实跟前面的activity,广播接收者receiver一样声明。</p><p>通过Context.startService()来开启服务,通过Context.stop()来停止服务。当然啦,还有一种启动形式就是通过Context.bindService()的方法。</p><h3 id="为什么要使用服务呢？"><a href="#为什么要使用服务呢？" class="headerlink" title="为什么要使用服务呢？"></a>为什么要使用服务呢？</h3><p>从上面的文字说,我们知道这个服务是用于执行长期后台运行的操作。有些时候,我们没有界面,但是程序仍然需要工作。比如说,我们播放音乐,在后台播放音乐。比如说,我们下载任务,在后台下载文件。这些都是没有界面 的后台运行程序,这些都是用服务做的。</p><p>所以,服务就有它的用处了。</p><p>第二个原因是什么呢？先给大家讲几个概念:</p><p>1、前台进程:可以理解为是最顶部的,直接跟用户交互的。比如说我们操作的Activity界面.</p><p>2、可见进程:可以见的,但是不操作的,比如说我们在一个Activity的顶部弹出一个Dialog,这个Dialog就是前台进程,但是这个Activity则是可见进程。</p><p>3、服务进程:服务可以理解为是忙碌的后台进程,虽然是在后台,但是它很忙碌。</p><p>4、后台进程:后台进程就是退隐到后台,不做事的进程。</p><p>5、空进程:空进程是不做事的,没有任何东西在上面跑着,仅作缓存作用。</p><p>假设,内存不够用了,会先杀谁呢？</p><p>首先杀的是空进程,要是还不够就杀后台进程,要是还不够,那么就杀服务,但是服务被杀死以后,等内存够用了,服务又会跑起来了。</p><p>所以:如果我们需要长期后台操作的任务,使用Service就对了！其实Framework里多数是服务。如果我们进行音乐播放,即使退到了后台,也可以播放,我们使用服务完成吧！如果我们下载东西,退到后台也能下载,那么我们就使用服务吧！如果我们在不停地记录日志,那我们就用服务吧！</p><p>如果面试问到:服务用于执行耗时操作,这是对的吗？</p><p>如时服务直接执行耗时操作,也会出现anr.</p><p>在这里给大家补充一下anr的时长知识。首先ANR的意思是android no response,也就是无相应或者理解为操作超时。</p><p>在android系统中广播的ANR时长为:</p><pre class="line-numbers language-none"><code class="language-none">// How long we allow a receiver to run before giving up on it.    static final int BROADCAST_FG_TIMEOUT = 10*1000;    static final int BROADCAST_BG_TIMEOUT = 60*1000;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>前台广播为10秒,后台广播为60秒。</p><p>按键操作的anr时长为:</p><pre class="line-numbers language-none"><code class="language-none">// How long we wait until we timeout on key dispatching.  static final int KEY_DISPATCHING_TIMEOUT = 5*1000;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按钮事件的时长为5秒,常指的是Activity的操作。</p><pre class="line-numbers language-none"><code class="language-none">// How long we wait for a service to finish executing.   static final int SERVICE_TIMEOUT = 20*1000;     // How long we wait for a service to finish executing.   static final int SERVICE_BACKGROUND_TIMEOUT = SERVICE_TIMEOUT * 10; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务的话,前台服务为20秒超时,后台服务为200秒超时。</p><p>如果在服务中直接做耗时操作,也是会出现ANR异常的。服务可以长期在后台运行,所以你可以这么做:如果要做耗时操作,比如说网络的访问,数据库的读写之类的,可以开线程去做。</p><h3 id="服务的声明周期"><a href="#服务的声明周期" class="headerlink" title="服务的声明周期"></a>服务的声明周期</h3><p>前面我们知道了为什么要使用服务,接下来我们就使用一下服务,并且学习一下它的声明周期。</p><p>首先,创建一个类,继承Service,就像我们之前写Activity要继承自Activity,而广播则继承自BroadcastReceiver。代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">IBinder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"FirstService"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStartCommand..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onDestroy..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着,我们写一个Activity去控制服务:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"MainActivity"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startService</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"start service ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FirstService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stopService</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"stop service...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">stopService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FirstService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册服务,四大组件都需要注册。在配置文件里配置如下:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.FirstService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以前我们在学习Activity的时候,就知道显示意图和隐式意图了。其实服务也是一样的,启动方式也有显式和隐式的。</p><p>上面的Activity中我们直接使用显式意图来启动服务。如果需要使用隐式意图的方式去启动,则需要配置一个意图过滤。</p><p>可以看出,我们在startService之后,就执行了onCreate方法,接着是onStartCommand方法。当我们执行stopService的时候,就会走onDestroy方法了。</p><p>这就是服务最基本的生命周期了。其实onStart也是服务的生命周期,只是这个方法已经过时了。</p><p>当然啦,服务的生命周期并没有这么简单,我们后面再详细去探讨吧！</p><h3 id="绑定启动服务"><a href="#绑定启动服务" class="headerlink" title="绑定启动服务"></a>绑定启动服务</h3><p>前面的开启服务方式,有一个弊端。就是没法进行通讯。所以我们接直来呢会学习另外一种启动服务的方式–通过绑定服务的形式来启动服务。</p><p>绑定服务,对应的停止服务则是解绑服务了！</p><p>好,我们先看代码吧:</p><p>这是我们的第二个服务:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">IBinder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"SecondService"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onBind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onUnbind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onUnbind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onUnbind</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStartCommand"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onDestroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后,在清单文件里注册一下:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.SecondService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注册完以后,我们编写一个主界面,我们叫做:BindServiceActivity</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Activity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">ComponentName</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">ServiceConnection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">IBinder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindServiceActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_bind_service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bindServiceClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建意图对象</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第一个是参数是意图对象,第二个参数是回调,第三个参数是标记,这个是自动创建的意,如果服务没有start,那么会自己创建。</span>        <span class="token comment">//automatically create the service as long as the binding exists</span>        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> mServiceConnection<span class="token punctuation">,</span> BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">ServiceConnection</span> mServiceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unBindServiceClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//解绑服务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mServiceConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">unbindService</span><span class="token punctuation">(</span>mServiceConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>界面是:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bindServiceClick<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>绑定服务<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unBindServiceClick<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>解绑服务<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个按钮的功能就是绑定服务和解绑服务,可以看上面的代码,其实非常简单的！</p><p>我们第一个步骤就是先把服务绑定,启动起来。第二步我们才去研究怎么样进行通讯。</p><p>好的,到这里,我们已经实现了通过绑定服务和启动服务来启动服务。并且通过解绑服务来停止服务。</p><p>接下来,我们看一下,Activity跟服务之间是怎么通讯的。我们可以看到服务的生命周期有点不一样了！它会执行onBind方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onBind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法里我们需要返回一个东西,也就是IBinder,假设我们现在这样子,需要调用服务里的一个方法,我们可以在里面声明 一个方法叫服务的内部方法！</p><p>我们把服务写成这样子:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Binder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">IBinder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommunicateBinder</span> <span class="token keyword">extends</span> <span class="token class-name">Binder</span><span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">callInnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"SecondService"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"innerMethod was called..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onBind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommunicateBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onUnbind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onUnbind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onUnbind</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStartCommand"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onDestroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一个服务内部的类,继承了Binder类,其实Binder类的话是实现了IBinder接口的</p><p>所以我们在绑上的时候,就返回这个类给绑定服务的地方,我们看看绑定服务的地方是怎么获取到这个类的:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Activity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">ComponentName</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">ServiceConnection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">IBinder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindServiceActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_bind_service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bindServiceClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建意图对象</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第一个是参数是意图对象,第二个参数是回调,第三个参数是标记,这个是自动创建的意,如果服务没有start,那么会自己创建。</span>        <span class="token comment">//automatically create the service as long as the binding exists</span>        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> mServiceConnection<span class="token punctuation">,</span> BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SecondService<span class="token punctuation">.</span>CommunicateBinder</span> mCommunicateBinder<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ServiceConnection</span> mServiceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token keyword">instanceof</span> <span class="token class-name">SecondService<span class="token punctuation">.</span>CommunicateBinder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mCommunicateBinder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SecondService<span class="token punctuation">.</span>CommunicateBinder</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unBindServiceClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//解绑服务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mServiceConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">unbindService</span><span class="token punctuation">(</span>mServiceConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callServiceMethod</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCommunicateBinder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//调用服务内部的方法</span>            mCommunicateBinder<span class="token punctuation">.</span><span class="token function">callInnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过</p><pre class="line-numbers language-none"><code class="language-none">@Override        public void onServiceConnected(ComponentName name, IBinder service) {            if (service instanceof SecondService.CommunicateBinder) {                mCommunicateBinder = (SecondService.CommunicateBinder) service;            }        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们就拿到了绑定上以后传回来的那个类,这样子我们就可以调用服务里的方法了:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callServiceMethod</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCommunicateBinder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//调用服务内部的方法</span>            mCommunicateBinder<span class="token punctuation">.</span><span class="token function">callInnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在UI上添加了一个按钮,看一下我们测试的结果</p><p>这样子我们就可以控制服务了,假设说我们有一个服务在后台跑着,用它来播放音乐的,因为我们音乐可以后台播放呀,对吧！这个时间 ,我们需要控制音乐的播放和暂停了,就可以通过这种形式去控制音乐了。</p><p>这样的代码还不够完美,对于服务内部的方法,应该隐藏起来,而公共的东西进行抽取,所以,我们应该定义一个接口,把服务里的:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommunicateBinder</span> <span class="token keyword">extends</span> <span class="token class-name">Binder</span><span class="token punctuation">{</span>     <span class="token keyword">void</span> <span class="token function">callInnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法隐藏起来,那隐藏起来以后,外部怎么能调用呢？当然是通过接口的形式来实现啦！</p><p>我们创建一个接口:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo<span class="token punctuation">.</span>interfaces</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IServiceControl</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">callServiceInnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着,我们私有服务里这个类,并且实现这个接口:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">CommunicateBinder</span> <span class="token keyword">extends</span> <span class="token class-name">Binder</span> <span class="token keyword">implements</span> <span class="token class-name">IServiceControl</span><span class="token punctuation">{</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callServiceInnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样子,我们在服务连接上以后,就可以强转成接口来调用了:</p><p>此时没法调用,因为这个类已经私有。</p><p>我们需要把代码改成这样子:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Activity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">ComponentName</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">ServiceConnection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">IBinder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span><span class="token class-name">IServiceControl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo<span class="token punctuation">.</span>services<span class="token punctuation">.</span></span><span class="token class-name">SecondService</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindServiceActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_bind_service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bindServiceClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建意图对象</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第一个是参数是意图对象,第二个参数是回调,第三个参数是标记,这个是自动创建的意,如果服务没有start,那么会自己创建。</span>        <span class="token comment">//automatically create the service as long as the binding exists</span>        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> mServiceConnection<span class="token punctuation">,</span> BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">IServiceControl</span> mCommunicateBinder<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ServiceConnection</span> mServiceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token keyword">instanceof</span> <span class="token class-name">IServiceControl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mCommunicateBinder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IServiceControl</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unBindServiceClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//解绑服务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mServiceConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">unbindService</span><span class="token punctuation">(</span>mServiceConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callServiceMethod</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCommunicateBinder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//调用服务内部的方法</span>            mCommunicateBinder<span class="token punctuation">.</span><span class="token function">callServiceInnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样子的效果是一样的,但是代码非常优雅！估计能理解这个的同学就可以体会到了接口有多么有用了！</p><p>但是,以绑定的方式启动的服务,在context销毁的时候,必须解绑,否则会泄漏</p><p>bindService开启的服务,在系统里是看不到服务在运行的:</p><p>如果是通过startService的方式启动的服务,则会在应用里看到</p><p>如果是通过bindService的方式来启动,则不会有</p><p>总结一下绑定服务的特点（这些内容会在视频里给大家做实验证明）:</p><p>1、绑定服务在系统设置里是没有显进服务正在跑着的;</p><p>2、如果onBind方法返回的是null,那么onServiceConnected方法不会被调用;</p><p>3、绑定服务的生命周期跟Activity是不求同时生,但求同时死,Activity没了,服务也要解绑;</p><p>4、服务在解除绑定以后会停止运行,执行unBind方法—&gt;onDestroy方法;</p><p>5、绑定服务开启的服务,只可以解绑一次,多次解绑会抛异常;</p><p>6、绑定的connection要跟解绑的connection要对应着,否则没法解绑。</p><p>稍微总结一下,startService和bindService的区别,优点和缺点:</p><p>1、startService这个方法来启动服务的话,是长期运行的,只有stopService才会停止服务。而bindService来启动服务,不用的时候,需要调用unBindService,否则会导致context泄漏,所以bindService不是长期运行的。当context销毁的时候,则会停止服务运行。</p><p>2、startService来启动服务可以长期运行,但是不可以通讯,而bindService的方式来启动服务则可以通讯,两者都有优缺点,所以我们就有了混合起来使用的方法。</p><p>接下来,我们会学习服务的混合开启方式,达到互补的效果。</p><h3 id="混合启动服务"><a href="#混合启动服务" class="headerlink" title="混合启动服务"></a>混合启动服务</h3><p>在前面的基础上,我们把开启服务,停止服务,绑定服务,解绑服务,调用服务内部的方法结合起来。再看看它的生命周期,以及作用效果。</p><p>首先,我们先总结一下服务的生命周期:</p><blockquote><p>startService–&gt;stopService</p></blockquote><p>这个生命周期我们前面已经看到了:</p><blockquote><p>onCreate—&gt;onStartCommand—-&gt;onDestroy<br>bindService–&gt;unBindService</p></blockquote><p>这个生命周期,我们也从前面的例子中看到了:</p><blockquote><p>onCreate—-&gt;onBind—&gt;onUnbind—-&gt;onDestroy</p></blockquote><p>我们提到,两种开启服务各有各自的优点和缺点。startService的方法可以长期地在后台运行,而bindService的方法则不可以长期于后台运行;bindService启动服务,可以跟服务进行通讯,但是startService启动服务不可以跟服务进行通讯。</p><p>我们混合两种开启方式,比如说,我们先startService,再进行bindService,这样子的话,服务可以长期于后台运行,又可以跟服务进行通讯了。</p><p>我们还是以例子的形式来学习一下:</p><p>我们在前面的例子稍加修改,添加了开启服务和停止服务,绑定服务和解绑服务不变,其实就是前面例子的结合体来的。</p><p>界面:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>startServiceClick<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>开启服务<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stopServiceClick<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>停止服务<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bindServiceClick<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>绑定服务<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unBindServiceClick<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>解绑服务<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>callServiceMethod<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>调用服务内部方法<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的,有点击事件,我们在activity里的代码实现一下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Activity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">ComponentName</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">ServiceConnection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">IBinder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span><span class="token class-name">IServiceControl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>servicedemo<span class="token punctuation">.</span>services<span class="token punctuation">.</span></span><span class="token class-name">SecondService</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindServiceActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_bind_service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bindServiceClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建意图对象</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第一个是参数是意图对象,第二个参数是回调,第三个参数是标记,这个是自动创建的意,如果服务没有start,那么会自己创建。</span>        <span class="token comment">//automatically create the service as long as the binding exists</span>        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> mServiceConnection<span class="token punctuation">,</span> BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startServiceClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startService</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stopServiceClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">stopService</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">IServiceControl</span> mCommunicateBinder<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ServiceConnection</span> mServiceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token keyword">instanceof</span> <span class="token class-name">IServiceControl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mCommunicateBinder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IServiceControl</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unBindServiceClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//解绑服务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mServiceConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">unbindService</span><span class="token punctuation">(</span>mServiceConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callServiceMethod</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCommunicateBinder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//调用服务内部的方法</span>            mCommunicateBinder<span class="token punctuation">.</span><span class="token function">callServiceInnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就是开始使用啦！</p><p>首先:</p><blockquote><p>开启服务—&gt;绑定服务—-&gt;调用服务的方法——&gt;解绑服务——&gt;停止服务（不停止服务它会一直跑着）</p></blockquote><p>开启服务:</p><p>D/SecondService: onCreate D/SecondService: onStartCommand</p><p>绑定服务:</p><p>D/SecondService: onBind</p><p>调用服务的方法:</p><p>D/SecondService: innerMethod was called…</p><p>解绑服务:</p><p>D/SecondService: onUnbind</p><p>停止服务:</p><p>D/SecondService: onDestroy</p><p>从上面的操作记录来看,我们在解绑服务的时候,它并没有执行onDestroy方法,也就是说,服务还是在运行的。所以我们使用到了startService的好处:1、服务在后台长期运行;</p><p>而我们也是能调用服务内部的方法的,所以我们使用到了bindService的好处:2、跟服务进行通讯</p><p>也就是说,只要startService的方式开启服务,没有stopService,服务一直在运行者。</p><p>然后:</p><p>我们去开启服务（startService）—-&gt;绑定服务（bindService）—–&gt;停止服务（stopService）</p><p>我们可以得出结论:通过startService,再去bindService,如果没有解绑,那么是停止不了服务的</p><p>实际开发中的模板流程:</p><p>第一步:startService–&gt;这一步是为了服务可以长期后台运行 第二步:bindService–&gt;这一步的目录是为了拿到服务的控制binder 第三步:调用服务里的方法 第四步:unBindService—&gt;解绑服务,否则无法停止服务的（但是服务,仍然在后台运行） 第五步:在不需要服务的时候停止服务stopService<br>跨进程通讯AIDL</p><p>什么是AIDL呢？可能一般的开发人员使用的场景不多,但是就我现在做开发,天天用到,因为我做的launcher要显示所有第三方应用的附加界面,并且要进行通讯,所以就要用到AIDL了！</p><p>AIDL其实是:android interface definition language 安卓接口定义语言（其实这个使用得少,但是面试的时候会问一下吧！）</p><p>在例子开始之前,我们要了解一个概念:</p><p>IPC:inter process communication 进程间通讯。要知道什么是进程间通讯,那就要从进程的角度去理解了。在window下的话,我们打开一个应用,它就会给这个应用开一个进程,而在android里也是一样的</p><p>进程之间是独立的,而每个应用使用的内存也是独立的。为什么要独立呢,如果不独立的话就会存在安全问题呀！比如说,在你的应用里有支付相关的内容,如果其他应用可以访问得到的话,那么就危险了！对吧！</p><p>进程之间是独立的,那就有一个问题了！它们是怎么进行通讯的呢？有这样的场景呀,比如说:我们第三方应用要发起充值的业务,通过支付宝进行充值,调用支付宝简单,但是支付宝怎么把支付结果告诉我们的应用呢？对吧！</p><p>进程间的通讯,基本上在每个操作系统上都有这个概念。其实我们猜也能猜到是怎么实现的！</p><p>我们可以划出一个公共的内存空间,把要通讯的数据,通过这个空间来交流即可！而这个空间呢,就是binder了！</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/binder.png"></p><p>接下来的话,我们就会写一个例子,怎么样来跨进程通讯！</p><p>这个例子大概是这样子的:一个应用程序去调用另外一个应用里的服务里的方法。</p><p>如上所说,我们就是要创建两个应用了！</p><p>但是要先理解两个概念,本地服务和远程服务。</p><p>本地服务是相对于自己来说的,在自己应用上的服务,其实就是本地服务。相对于自己来说,服务在别人的应用上,那么就是远程服务了。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/B%E6%98%AF%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1.png"></p><p>接下来的这个例子,我们就是有两个应用,一个是应用A,一个是应用B。在应用B里头有一个服务。然后我们的应用A绑定应用B的服务,并且调用里面的方法。</p><p>第一步,创建两个应用:AIDLDemoA,和AIDLDemoB</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/AIDLDemoA,%E5%92%8CAIDLDemoB.png"></p><p>第二步:在 AIDLDemoB的程序里面创建一个服务:AppBService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidldemob</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">IBinder</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppBService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步,在配置文件里注册这个服务:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.AppBService<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.aidldemob.INNER_SERVICE<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里这个exported=”true”其实就是允许外部启动这个服务,绑定这个服务。默认就是true的,如果改成false了,外部就没法绑定/启动了。</p><p>这个action是给第三方应用（应用A）绑定用的。</p><p>第四步,重点来了:我们要创建AIDL接口:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%88%9B%E5%BB%BAAIDL%E6%8E%A5%E5%8F%A3.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// IDemoBServiceControl.aidl</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidldemob</span><span class="token punctuation">;</span><span class="token comment">// Declare any non-default types here with import statements</span><span class="token keyword">interface</span> <span class="token class-name">IDemoBServiceControl</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * Demonstrates some basic types that you can use as parameters     * and return values in AIDL.     */</span>    <span class="token keyword">void</span> <span class="token function">basicTypes</span><span class="token punctuation">(</span><span class="token keyword">int</span> anInt<span class="token punctuation">,</span> <span class="token keyword">long</span> aLong<span class="token punctuation">,</span> <span class="token keyword">boolean</span> aBoolean<span class="token punctuation">,</span> <span class="token keyword">float</span> aFloat<span class="token punctuation">,</span>            <span class="token keyword">double</span> aDouble<span class="token punctuation">,</span> <span class="token class-name">String</span> aString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后,就会创建这样一个文件了,对于AIDL的知识点挺多的,大家先学会怎么使用,后面再学习更多的内容,比如说,你要知道怎么要传一个自定义的bean类,怎么要相互控制,都是可以的。</p><p>这里面的话,我们就使用A应用,调用B应用里的服务的方法,并且把内容传过去。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// IDemoBServiceControl.aidl</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidldemob</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IDemoBServiceControl</span> <span class="token punctuation">{</span>     <span class="token keyword">void</span> <span class="token function">callInnerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">innserServicePrint</span><span class="token punctuation">(</span>in <span class="token class-name">String</span> printContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本数据类型不需要导包,我们自己定义的才要导包,这个以后我们会学到的。</p><p>第五步,我们点击build里的make一下,这样子就会自动生成一个类,所以我们才可以new出来:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidldemob</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">IBinder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppBService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"AppBService"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"应用B的服务被绑定..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IDemoBServiceControl<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callInnerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>                <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerServicePrint</span><span class="token punctuation">(</span><span class="token class-name">String</span> printContent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>                <span class="token function">printMethod</span><span class="token punctuation">(</span>printContent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onUnbind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"应用B的服务解绑了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onUnbind</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"应用B的服务内部方法被调用了!..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"应用B的输出方法被调用,传过来的内容是 -- &gt; "</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是我们服务修改成这样子,IDemoBServiceControl.Stub()这个类是根据我们的aidl接口生成的,它继承自己IBinder,所以我们可以直接new出来返回,当onBind的时候。</p><p>第五步:复制aidl的整个文件夹到应用A</p><p>要注意的地方是:确保它们的包名是一样的。</p><p>至于AIDL的原理,现在解释可能大家还没法理解。大家先按步骤去做,如果到这里已经很吃力了,那就去看视频好了。</p><p>然后,我们在应用A绑定服务的时候,就可以拿到这个接口的实现了</p><p>然后是主的Activity:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidldemoa</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">ComponentName</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">ServiceConnection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">IBinder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidldemob<span class="token punctuation">.</span></span><span class="token class-name">IDemoBServiceControl</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"MainActivity"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">IDemoBServiceControl</span> mIDemoBServiceControl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 这个方法用于绑定服务     *     * @param view     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remoteServiceBindClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置远程服务B的包名</span>        intent<span class="token punctuation">.</span><span class="token function">setPackage</span><span class="token punctuation">(</span><span class="token string">"com.example.aidldemob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置服务的action: com.example.aidldemob.INNER_SERVICE</span>        intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"com.example.aidldemob.INNER_SERVICE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绑定服务,服务不能重复绑定</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mIDemoBServiceControl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> mServiceConnection<span class="token punctuation">,</span> BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">ServiceConnection</span> mServiceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//我们可以通过AIDL自动创建的类的一个方法,自动转,不需要强转了</span>            mIDemoBServiceControl <span class="token operator">=</span> <span class="token class-name">IDemoBServiceControl<span class="token punctuation">.</span>Stub</span><span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"远程服务绑定了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mIDemoBServiceControl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"远程服务断开绑定了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 这个方法用于解绑服务     *     * @param view     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unBindRemoteService</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unBindRemoteService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 这个方法用于调用远程服务里的方法     *     * @param view     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callRemoteServiceInnerMethod</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mIDemoBServiceControl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mIDemoBServiceControl<span class="token punctuation">.</span><span class="token function">callInnerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 这个方法用于调用远程服务的方法,让期输出内容     *     * @param view     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callRemoteServicePrintText</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mIDemoBServiceControl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mIDemoBServiceControl<span class="token punctuation">.</span><span class="token function">innerServicePrint</span><span class="token punctuation">(</span><span class="token string">"阳光沙滩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unBindRemoteService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unBindRemoteService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mServiceConnection <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mIDemoBServiceControl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">unbindService</span><span class="token punctuation">(</span>mServiceConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>            mIDemoBServiceControl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们先跑起应用B,再跑起应用A。然后看应用B的Log,因为我们要看应用B的输出内容</p><p>从上面的结果,我们可以看到,我们应用A控制应用B了,已经做到了跨应用（进程）进行通讯了,后面的话我们以一个实际的使用例子来说一下吧！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/liaojie.github.io/2022/01/22/wei-xin-xiao-cheng-xu/"/>
      <url>/liaojie.github.io/2022/01/22/wei-xin-xiao-cheng-xu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号</title>
      <link href="/liaojie.github.io/2022/01/22/wei-xin-gong-zhong-hao/"/>
      <url>/liaojie.github.io/2022/01/22/wei-xin-gong-zhong-hao/</url>
      
        <content type="html"><![CDATA[<p>订阅号开发(服务号需要企业认证,不适合个人开发)</p><h2 id="1-注册微信公众号"><a href="#1-注册微信公众号" class="headerlink" title="1 注册微信公众号"></a>1 注册微信公众号</h2><p>1.注册网站</p><p>官网:<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p><p>2.注册流程</p><p>1)打开官网,点击右上角的立即注册<br>2)选择订阅号注册<br>3)依次输入要求的信息,勾上我同意,点击注册<br>4)选择中国内地,点击确定<br>5)选择订阅号确定<br>6)主体类型选择个人,填写好信息点击继续<br>7)填写好信息点击完成</p><p>关键词回复:</p><ul><li>半匹配:只要包含关键字即可</li><li>全匹配:跟名字一样</li></ul><h2 id="开发者自行开发"><a href="#开发者自行开发" class="headerlink" title="开发者自行开发"></a>开发者自行开发</h2><h3 id="接口测试号"><a href="#接口测试号" class="headerlink" title="接口测试号"></a>接口测试号</h3><p>位置: 微信官方文档-&gt;开始开发-&gt;接口测试号申请</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%8E%A5%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png"></p><p>打开WebStorm创建一个简单的服务器:</p><p>在工程文件夹下导包:<br><code>npm install express</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入express模块</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">//创建app应用对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//验证服务器的有效性</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//监听端口号</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时得到的是一个本地网址:<a href="http://localhost:3000,要将其转换为外部可访问网址才行">http://localhost:3000,要将其转换为外部可访问网址才行</a><br>工具:将内网映射成外网 <code>ngrok</code></p><p>指令: <code>ngrok http 3000</code><br>观察<code>Forwarding</code>后面即为外网网址</p><p>将网址加上<code>/html</code>输入在浏览器（例如: <a href="http://xxx.ngrok.io/html">http://xxx.ngrok.io/html</a> ）<br>（注意:有的浏览器可能无法访问，换个浏览器就好）</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/ngrok.png"></p><p>有Gitub账号可直接登录，若没有账号可以先注册再登录</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/occount.png"></p><p>重新打开ngrok输入ngrok http 3000 –authtoken 加上上图authtoken后面的内容</p><p>（例如: ngrok http 3000 –authtoken 23RthpB7QpLdHrBTivoitz4CzZ8_4a9AcRX3ZuKKBXWfoPSYe）</p><p>将最终得到的网址填入URL栏,Token随便填写即可(尽量复杂)</p><p>填好之后在服务器上进行测试:</p><p>导入sha1库:<code>npm install sha1</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入express模块</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入sha1模块</span><span class="token keyword">const</span> sha1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sha1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建app应用对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//验证服务器的有效性</span><span class="token comment">/*1.微信服务器直到开发者服务器是哪个- 测试号管理器上填写url开发者服务器地址    -使用ngrok 内网穿透 将本地端口号开启的服务映射为外网可以访问的网址    - ngrok http 3000- Token    - 参与微信签名加密的一个参数2.开发者服务器 -验证消息是否来自微信服务器    目的:计算得出signature微信加密签名,和微信传递过来的signature进项对比,如果一样说明消息来自于微信服务器,如果不一样说明表示不是微信服务器发送的消息    1.将参与微信加密签名的三个参数(timestamp,nonce,token)组合在一起,按照字典序排序(0-9,a-z)形成一个数组    2.将数组里所有参数拼接成一个字符串,进行sha1加密    3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,    如果一样说明消息来自于微信服务器,返回echostr给微信服务器    如果不一样说明表示不是微信服务器发送的消息,返回error */</span><span class="token comment">//定义配置对象</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>    token<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    appID<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    appsecret<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token comment">//接收处理所有参数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//微信服务器提交的参数</span>    <span class="token comment">//console.log(req.query);</span>    <span class="token comment">/*    {  signature: '',    //微信的加密签名  echostr: '',   //微信的随机字符串  timestamp: '',  //微信发送请求的时间戳  nonce: '' //微信的随机数字}     */</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>signature<span class="token punctuation">,</span> echostr<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>token<span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span><span class="token comment">//1.将参与微信加密签名的三个参数(timestamp,nonce,token)组合在一起,按照字典序排序(0-9,a-z)形成一个数组</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> token<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> arrSort <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrSort<span class="token punctuation">)</span><span class="token comment">//2.将数组里所有参数拼接成一个字符串,进行sha1加密</span>    <span class="token keyword">const</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> sha1Str <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sha1Str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1Str <span class="token operator">===</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//监听端口号</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模块化代码"><a href="#模块化代码" class="headerlink" title="模块化代码:"></a>模块化代码:</h3><p>新建config文件夹,在该文件夹下新建index.js文件</p><p>index.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//配置对象模块</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    token<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    appID<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    appsecret<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建wechat文件夹,在该文件下新建auth.js文件</p><p>auth.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入config模块</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入sha1模块</span><span class="token keyword">const</span> sha1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sha1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*验证服务器有效性的模块 */</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//微信服务器提交的参数</span>        <span class="token comment">//console.log(req.query);</span>        <span class="token comment">/*        {      signature: '',    //微信的加密签名      echostr: '',   //微信的随机字符串      timestamp: '',  //微信发送请求的时间戳      nonce: '' //微信的随机数字    }         */</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>signature<span class="token punctuation">,</span> echostr<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>token<span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span><span class="token comment">//1.将参与微信加密签名的三个参数(timestamp,nonce,token)组合在一起,按照字典序排序(0-9,a-z)形成一个数组</span>        <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> token<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> arrSort <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrSort<span class="token punctuation">)</span><span class="token comment">//2.将数组里所有参数拼接成一个字符串,进行sha1加密</span>        <span class="token keyword">const</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> sha1Str <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sha1Str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1Str <span class="token operator">===</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入express模块</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入auto模块</span><span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./wechat/auth'</span><span class="token punctuation">)</span><span class="token comment">//创建app应用对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接收处理所有参数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//监听端口号</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取access-token"><a href="#获取access-token" class="headerlink" title="获取access_token"></a>获取access_token</h3><p>位置: 微信官方文档-&gt;开始开发-&gt;获取access_token</p><p>access_token是公众号的全局唯一接口调用凭据，公众号调用各接口时都需使用access_token。开发者需要进行妥善保存。access_token的存储至少要保留512个字符空间。access_token的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的access_token失效。</p><p>公众平台的API调用所需的access_token的使用及生成方式说明：</p><p>1、建议公众号开发者使用中控服务器统一获取和刷新access_token，其他业务逻辑服务器所使用的access_token均来自于该中控服务器，不应该各自去刷新，否则容易造成冲突，导致access_token覆盖而影响业务；</p><p>2、目前access_token的有效期通过返回的expire_in来传达，目前是7200秒之内的值。中控服务器需要根据这个有效时间提前去刷新新access_token。在刷新过程中，中控服务器可对外继续输出的老access_token，此时公众平台后台会保证在5分钟内，新老access_token都可用，这保证了第三方业务的平滑过渡；</p><p>3、access_token的有效时间可能会在未来有调整，所以中控服务器不仅需要内部定时主动刷新，还需要提供被动刷新access_token的接口，这样便于业务服务器在API调用获知access_token已超时的情况下，可以触发access_token的刷新流程。</p><p>4、对于可能存在风险的调用，在开发者进行获取 access_token调用时进入风险调用确认流程，需要用户管理员确认后才可以成功获取。具体流程为：</p><p>开发者通过某IP发起调用-&gt;平台返回错误码[89503]并同时下发模板消息给公众号管理员-&gt;公众号管理员确认该IP可以调用-&gt;开发者使用该IP再次发起调用-&gt;调用成功。</p><p>如公众号管理员第一次拒绝该IP调用，用户在1个小时内将无法使用该IP再次发起调用，如公众号管理员多次拒绝该IP调用，该IP将可能长期无法发起调用。平台建议开发者在发起调用前主动与管理员沟通确认调用需求，或请求管理员开启IP白名单功能并将该IP加入IP白名单列表。</p><p>公众号和小程序均可以使用AppID和AppSecret调用本接口来获取access_token。AppID和AppSecret可在“微信公众平台-开发-基本配置”页中获得（需要已经成为开发者，且帐号没有异常状态）。<strong>调用接口时，请登录“微信公众平台-开发-基本配置”提前将服务器IP地址添加到IP白名单中，点击查看设置方法，否则将无法调用成功。</strong>小程序无需配置IP白名单。</p><p>接口调用请求说明</p><pre class="line-numbers language-none"><code class="language-none">https请求方式: GET https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明</p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>grant_type</td><td>是</td><td>获取access_token填写client_credential</td></tr><tr><td>appid</td><td>是</td><td>第三方用户唯一凭证</td></tr><tr><td>secret</td><td>是</td><td>第三方用户唯一凭证密钥，即appsecret</td></tr></tbody></table><p>返回说明</p><p>正常情况下，微信会返回下述JSON数据包给公众号：</p><blockquote><p>{“access_token”:”ACCESS_TOKEN”,”expires_in”:7200}</p></blockquote><p>参数说明</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>access_token</td><td>获取到的凭证</td></tr><tr><td>expires_in</td><td>凭证有效时间，单位：秒</td></tr></tbody></table><p>错误时微信会返回错误码等信息，JSON数据包示例如下（该示例为AppID无效错误）:</p><blockquote><p>{“errcode”:40013,”errmsg”:”invalid appid”}</p></blockquote><p>返回码说明</p><table><thead><tr><th>返回码</th><th>说明</th></tr></thead><tbody><tr><td>-1</td><td>系统繁忙，此时请开发者稍候再试</td></tr><tr><td>0</td><td>请求成功</td></tr><tr><td>40001</td><td>AppSecret错误或者AppSecret不属于这个公众号，请开发者确认AppSecret的正确性</td></tr><tr><td>40002</td><td>请确保grant_type字段值为client_credential</td></tr><tr><td>40164</td><td>调用接口的IP地址不在白名单中，请在接口IP白名单中进行设置。</td></tr><tr><td>89503</td><td>此IP调用需要管理员确认,请联系管理员</td></tr><tr><td>89501</td><td>此IP正在等待管理员确认,请联系管理员</td></tr><tr><td>89506</td><td>24小时内该IP被管理员拒绝调用两次，24小时内不可再使用该IP调用</td></tr><tr><td>89507</td><td>1小时内该IP被管理员拒绝调用一次，1小时内不可再使用该IP调用</td></tr></tbody></table><p>在wechat文件夹下新建accessToken.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*access_token：微信调用接口全局唯一凭证特点:    1.唯一    2.有效期为2小时,提前5分钟重新请求    3.接口权限 每天2000次    https请求方式: GET https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET    设计思路:        1.首次本地没有,发送请求获取access_token,保存下来(本地文件)        2.第二次或以后:            - 先去本地读取文件,判断它是否过期                - 过期了                    - 重新请求,保存下来,覆盖之前的文件(保证文件是唯一的)                - 没过期                    - 直接使用        整理思路:            读取本地文件(readAccessToken):                - 本地有文件                    - 判断它是否过期(isValidAccessToken)                        - 过期了                           - 重新请求(getAccessToken),保存下来,覆盖之前的文件(保证文件是唯一的)(saveAccessToken)                        - 没过期                           - 直接使用                - 本地没有文件                    - 发送请求获取access_token(getAccessToken),保存下来(本地文件)(saveAccessToken) */</span><span class="token comment">//只需要引入request-promise-native库</span><span class="token keyword">const</span> rp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request-promise-native'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入fs模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>writeFile<span class="token punctuation">,</span> readFile<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入config文件</span><span class="token keyword">const</span> <span class="token punctuation">{</span>appID<span class="token punctuation">,</span> appsecret<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义一个类,获取access_token</span><span class="token keyword">class</span> <span class="token class-name">Wechat</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    用来获取access_token     */</span>    <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//定义请求的地址</span>        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid='</span> <span class="token operator">+</span> appID <span class="token operator">+</span> <span class="token string">'&amp;secret='</span> <span class="token operator">+</span> appsecret<span class="token punctuation">;</span>        <span class="token comment">//发送请求</span>        <span class="token comment">/*        需要下载俩个库        request        request-promise-native 返回值是一个promise对象         */</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">/*                    {                      access_token: '53_ASJAH4U8r3yuEZFT4NCdzgLcBZN-W0rPy-0sBU0bizFlnxrXJ8rl8VxCZqllW8A_MZTTYr3eNnQN8GX-TUv4vuB-YuHde5BLlNN38fK-pb0ZujB7yE-5XwkX5NBX7bEA-yY7v2V2Wu8W-G    SASVHcAFAKNZ',                      expires_in: 7200    }                     */</span>                    <span class="token comment">//设置access_token的过期时间 单位毫秒</span>                    res<span class="token punctuation">.</span>expires_in <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>expires_in <span class="token operator">-</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>                    <span class="token comment">//将promise的对象的状态改为成功的状态</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'getAccessToken方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来保存access_token的方法     * @param accessToken 要保存的凭据     */</span>    <span class="token function">saveAccessToken</span><span class="token punctuation">(</span><span class="token parameter">accessToken</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//将对象转化为json字符串</span>        accessToken <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./accessToken.txt'</span><span class="token punctuation">,</span> accessToken<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件保存成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'saveAccessToken方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来读取access_token的方法     */</span>    <span class="token function">readAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//读取本地文件中的access_taken</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./accessToken.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件读取成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将json字符串转化成js对象</span>                    data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'readAccessToken方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来检查access_token是否有效     * @param data     */</span>    <span class="token function">isValidAccessToken</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//检查传入的参数是否有效</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>data<span class="token punctuation">.</span>access_token <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>data<span class="token punctuation">.</span>expires_in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//代表access_token无效</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//检查传入的参数是否在有效期内</span>        <span class="token comment">// if (data.expires_in&lt;Date.now()){</span>        <span class="token comment">//     //过期了</span>        <span class="token comment">//     return false;</span>        <span class="token comment">// }else {</span>        <span class="token comment">//     //没有过期</span>        <span class="token comment">//     return true;</span>        <span class="token comment">// }</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>expires_in <span class="token operator">&gt;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来获取没有过期的access_token     * @returns {Promise&lt;unknown&gt;} access_token     */</span>    <span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//优化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>access_token <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires_in <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidAccessToken</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//说明之前保存过access_token,并且access_token有效,直接使用</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                access_token<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>access_token<span class="token punctuation">,</span>                expires_in<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires_in            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//本地有文件</span>                <span class="token comment">//判断它是否过期(isValidAccessToken)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidAccessToken</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//有效的</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//resolve(res);</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//过期了</span>                    <span class="token comment">//发送请求获取access_token(getAccessToken)</span>                    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//保存下来(本地文件)(saveAccessToken)</span>                    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveAccessToken</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将请求回来的access_token返回出去</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// resolve(res);</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//本地没有文件</span>                <span class="token comment">//发送请求获取access_token(getAccessToken)</span>                <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//保存下来(本地文件)(saveAccessToken)</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveAccessToken</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将请求回来的access_token返回出去</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// resolve(res);</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//将access_token挂载到this上</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>access_token <span class="token operator">=</span> res<span class="token punctuation">.</span>access_token<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>expires_in <span class="token operator">=</span> res<span class="token punctuation">.</span>expires_in<span class="token punctuation">;</span>                <span class="token comment">//返回res包装了一层promise对象(此对象为成功的对象)</span>                <span class="token comment">//是this.readAccessToken()最终返回值</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//模拟测试</span><span class="token keyword">const</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wechat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*  读取本地文件(readAccessToken):       - 本地有文件           - 判断它是否过期(isValidAccessToken)               - 过期了                  - 重新请求(getAccessToken),保存下来,覆盖之前的文件(保证文件是唯一的)(saveAccessToken)               - 没过期                  - 直接使用       - 本地没有文件           - 发送请求获取access_token(getAccessToken),保存下来(本地文件)(saveAccessToken) */</span>w<span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取用户发送的消息"><a href="#获取用户发送的消息" class="headerlink" title="获取用户发送的消息"></a>获取用户发送的消息</h3><p>扫描测试号二维码关注测试公众号,发送一条消息进行测试</p><p>auto.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入config模块</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入sha1模块</span><span class="token keyword">const</span> sha1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sha1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*验证服务器有效性的模块 */</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//微信服务器提交的参数</span>        <span class="token comment">//console.log(req.query);</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>signature<span class="token punctuation">,</span> echostr<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>token<span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token comment">/*            //1.将参与微信加密签名的三个参数(timestamp,nonce,token)组合在一起,按照字典序排序(0-9,a-z)形成一个数组                const arr = [timestamp, nonce, token];                const arrSort = arr.sort();                console.log(arrSort)            //2.将数组里所有参数拼接成一个字符串,进行sha1加密                const str = arr.join('');                console.log(str);                const sha1Str = sha1(str);                console.log(sha1Str);         */</span>        <span class="token comment">//简写</span>        <span class="token keyword">const</span> sha1str <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token punctuation">[</span>timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> token<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        微信服务器会发送俩种类型的消息给开发者        1.GET请求            - 验证服务器的有效性        2.POST请求            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1Str <span class="token operator">===</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span>            <span class="token comment">//验证消息来自于微信服务器</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1str <span class="token operator">!==</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//说明消息不是微信服务器的</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            {            signature: '',            timestamp: '',            nonce: '',            openid: '' //用户的微信ID             }             */</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行app.js得到如下信息:</p><pre class="line-numbers language-none"><code class="language-none">{ signature: '', timestamp: '', nonce: '', openid: '' //用户的微信ID}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来<br>在if中最后加上<code>res.end('');</code>即可</p><p>在项目下新建<code>utils</code>工具包文件夹,在里面新建一个文件<code>tool.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*工具函数包 */</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">getUserDataAsync</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> xmlData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            req                <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//当流式数据传递过来时会触发当前事件,会将数据注入到回调函数中</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//读取的数据是buffer,需要将其转化为字符串</span>                    xmlData <span class="token operator">+=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//当数据接收完毕时,会触发当前</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>auth.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入config模块</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入sha1模块</span><span class="token keyword">const</span> sha1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sha1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入tool模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>getUserDataAsync<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/tool'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*验证服务器有效性的模块 */</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//微信服务器提交的参数</span>        <span class="token comment">//console.log(req.query);</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>signature<span class="token punctuation">,</span> echostr<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>token<span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token keyword">const</span> sha1str <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token punctuation">[</span>timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> token<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        微信服务器会发送俩种类型的消息给开发者        1.GET请求            - 验证服务器的有效性        2.POST请求            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1Str <span class="token operator">===</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span>            <span class="token comment">//验证消息来自于微信服务器</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1str <span class="token operator">!==</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//说明消息不是微信服务器的</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// console.log(req.query);</span>            <span class="token comment">//接收请求体中的数据,流式数据</span>            <span class="token keyword">const</span> xmlData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserDataAsync</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行app.js得到如下信息:</p><pre class="line-numbers language-none"><code class="language-none">&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[gh_3b6b3cd4d8e8]]&gt;&lt;/ToUserName&gt; //开发中id           &lt;FromUserName&gt;&lt;![CDATA[okzHZ6Xb1dMfGx1fti6VV4en0aTU]]&gt;&lt;/FromUserName&gt;//用户 openid&lt;CreateTime&gt;1643090286&lt;/CreateTime&gt;//发送的时间戳&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;//发送消息类型                      &lt;Content&gt;&lt;![CDATA[123]]&gt;&lt;/Content&gt;//内容                      &lt;MsgId&gt;23523394398679914&lt;/MsgId&gt;//消息id 微信服务器会默认保存3天用户发送的数据,通过次id三天内就可以找到此消息数据                                     &lt;/xml&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们要得到xml中的数据</p><p>tool.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*工具函数包 */</span><span class="token comment">//npm install xml2js 导包</span><span class="token comment">//引入xml2js,将xml数据转化为js对象</span><span class="token keyword">const</span> <span class="token punctuation">{</span>parseString<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xml2js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">getUserDataAsync</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> xmlData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            req                <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//当流式数据传递过来时会触发当前事件,会将数据注入到回调函数中</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//读取的数据是buffer,需要将其转化为字符串</span>                    xmlData <span class="token operator">+=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//当数据接收完毕时,会触发当前</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">parseXMLAsync</span><span class="token punctuation">(</span><span class="token parameter">xmlData</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">parseString</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">,</span><span class="token punctuation">{</span>trim<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'parseXMLAsync方法出了问题:'</span><span class="token operator">+</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>auth.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入config模块</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入sha1模块</span><span class="token keyword">const</span> sha1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sha1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入tool模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>getUserDataAsync<span class="token punctuation">,</span>parseXMLAsync<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/tool'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*验证服务器有效性的模块 */</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//微信服务器提交的参数</span>        <span class="token comment">//console.log(req.query);</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>signature<span class="token punctuation">,</span> echostr<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>token<span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token keyword">const</span> sha1str <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token punctuation">[</span>timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> token<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        微信服务器会发送俩种类型的消息给开发者        1.GET请求            - 验证服务器的有效性        2.POST请求            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1Str <span class="token operator">===</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span>            <span class="token comment">//验证消息来自于微信服务器</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1str <span class="token operator">!==</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//说明消息不是微信服务器的</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// console.log(req.query);</span>            <span class="token comment">//接收请求体中的数据,流式数据</span>            <span class="token keyword">const</span> xmlData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserDataAsync</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将xml数据解析为js对象</span>            <span class="token keyword">const</span> jsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseXMLAsync</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行app.js得到如下信息:</p><pre class="line-numbers language-none"><code class="language-none">{  xml: {    ToUserName: [ 'gh_3b6b3cd4d8e8' ],    FromUserName: [ 'okzHZ6Xb1dMfGx1fti6VV4en0aTU' ],    CreateTime: [ '1643091294' ],    MsgType: [ 'text' ],    Content: [ '111' ],    MsgId: [ '23523410572447438' ]  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>格式化得到的数据:</p><p>tool.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*工具函数包 */</span><span class="token comment">//npm install xml2js 导包</span><span class="token comment">//引入xml2js,将xml数据转化为js对象</span><span class="token keyword">const</span> <span class="token punctuation">{</span>parseString<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xml2js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">getUserDataAsync</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> xmlData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            req                <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//当流式数据传递过来时会触发当前事件,会将数据注入到回调函数中</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//读取的数据是buffer,需要将其转化为字符串</span>                    xmlData <span class="token operator">+=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//当数据接收完毕时,会触发当前</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">parseXMLAsync</span><span class="token punctuation">(</span><span class="token parameter">xmlData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">parseString</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">,</span> <span class="token punctuation">{</span>trim<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'parseXMLAsync方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">formatMessage</span><span class="token punctuation">(</span><span class="token parameter">jsData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//获取xml对象</span>        jsData <span class="token operator">=</span> jsData<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>        <span class="token comment">//判断数据是否为一个对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> jsData <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//遍历对象</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> jsData<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//获取属性值</span>                <span class="token keyword">let</span> value <span class="token operator">=</span> jsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//过滤空数据</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//将合法数据赋值到message对象上</span>                    message<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>auth.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入config模块</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入sha1模块</span><span class="token keyword">const</span> sha1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sha1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入tool模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>getUserDataAsync<span class="token punctuation">,</span>parseXMLAsync<span class="token punctuation">,</span>formatMessage<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/tool'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*验证服务器有效性的模块 */</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//微信服务器提交的参数</span>        <span class="token comment">//console.log(req.query);</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>signature<span class="token punctuation">,</span> echostr<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>token<span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token keyword">const</span> sha1str <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token punctuation">[</span>timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> token<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        微信服务器会发送俩种类型的消息给开发者        1.GET请求            - 验证服务器的有效性        2.POST请求            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1Str <span class="token operator">===</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span>            <span class="token comment">//验证消息来自于微信服务器</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1str <span class="token operator">!==</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//说明消息不是微信服务器的</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// console.log(req.query);</span>            <span class="token comment">//接收请求体中的数据,流式数据</span>            <span class="token keyword">const</span> xmlData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserDataAsync</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将xml数据解析为js对象</span>            <span class="token keyword">const</span> jsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseXMLAsync</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//格式化数据</span>            <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">formatMessage</span><span class="token punctuation">(</span>jsData<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行app.js得到如下信息:</p><pre class="line-numbers language-none"><code class="language-none">{ CreateTime: '1643092243', MsgId: '23523424720943421' }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="简单的自动回复"><a href="#简单的自动回复" class="headerlink" title="简单的自动回复"></a>简单的自动回复</h3><p>微信官方文档-&gt;基础消息能力-&gt;被动回复用户消息</p><p>当用户发送消息给公众号时（或某些特定的用户操作引发的事件推送时），会产生一个POST请求，开发者可以在响应包（Get）中返回特定XML结构，来对该消息进行响应（现支持回复文本、图片、图文、语音、视频、音乐）。严格来说，发送被动响应消息其实并不是一种接口，而是对微信服务器发过来消息的一次回复。</p><p>微信服务器在将用户的消息发给公众号的开发者服务器地址（开发者中心处配置）后，微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次，如果在调试中，发现用户无法收到响应的消息，可以检查是否消息处理超时。关于重试的消息排重，有msgid的消息推荐使用msgid排重。事件类型消息推荐使用FromUserName + CreateTime 排重。</p><p>如果开发者希望增强安全性，可以在开发者中心处开启消息加密，这样，用户发给公众号的消息以及公众号被动回复用户消息都会继续加密，详见被动回复消息加解密说明。</p><p>假如服务器无法保证在五秒内处理并回复，必须做出下述回复，这样微信服务器才不会对此作任何处理，并且不会发起重试（这种情况下，可以使用客服消息接口进行异步回复），否则，将出现严重的错误提示。详见下面说明：</p><p>1、直接回复success（推荐方式） 2、直接回复空串（指字节长度为0的空字符串，而不是XML结构体中content字段的内容为空）</p><p>一旦遇到以下情况，微信都会在公众号会话中，向用户下发系统提示“该公众号暂时无法提供服务，请稍后再试”：</p><p>1、开发者在5秒内未回复任何内容 2、开发者回复了异常数据，比如JSON数据等</p><p>另外，请注意，回复图片（不支持gif动图）等多媒体消息时需要预先通过素材管理接口上传临时素材到微信服务器，可以使用素材管理中的临时素材，也可以使用永久素材。</p><p>各消息类型需要的XML数据包结构如下：</p><h5 id="回复文本消息"><a href="#回复文本消息" class="headerlink" title="回复文本消息"></a>回复文本消息</h5><pre class="line-numbers language-none"><code class="language-none">&lt;xml&gt;  &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;  &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;  &lt;CreateTime&gt;12345678&lt;/CreateTime&gt;  &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;  &lt;Content&gt;&lt;![CDATA[你好]]&gt;&lt;/Content&gt;&lt;/xml&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，文本为text</td></tr><tr><td>Content</td><td>是</td><td>回复的消息内容（换行：在content中能够换行，微信客户端就支持换行显示）</td></tr></tbody></table><h5 id="回复图片消息"><a href="#回复图片消息" class="headerlink" title="回复图片消息"></a>回复图片消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>12345678<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[image]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MediaId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Image</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，图片为image</td></tr><tr><td>MediaId</td><td>是</td><td>通过素材管理中的接口上传多媒体文件，得到的id。</td></tr></tbody></table><h5 id="回复语音消息"><a href="#回复语音消息" class="headerlink" title="回复语音消息"></a>回复语音消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>12345678<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[voice]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Voice</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MediaId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Voice</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间戳 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，语音为voice</td></tr><tr><td>MediaId</td><td>是</td><td>通过素材管理中的接口上传多媒体文件，得到的id</td></tr></tbody></table><h5 id="回复视频消息"><a href="#回复视频消息" class="headerlink" title="回复视频消息"></a>回复视频消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>12345678<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[video]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Video</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MediaId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[title]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Description</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[description]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Description</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Video</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，视频为video</td></tr><tr><td>MediaId</td><td>是</td><td>通过素材管理中的接口上传多媒体文件，得到的id</td></tr><tr><td>Title</td><td>否</td><td>视频消息的标题</td></tr><tr><td>Description</td><td>否</td><td>视频消息的描述</td></tr></tbody></table><h5 id="回复音乐消息"><a href="#回复音乐消息" class="headerlink" title="回复音乐消息"></a>回复音乐消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>12345678<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[music]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Music</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[TITLE]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Description</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[DESCRIPTION]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MusicUrl</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[MUSIC_Url]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MusicUrl</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HQMusicUrl</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[HQ_MUSIC_Url]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HQMusicUrl</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThumbMediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThumbMediaId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Music</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，音乐为music</td></tr><tr><td>Title</td><td>否</td><td>音乐标题</td></tr><tr><td>Description</td><td>否</td><td>音乐描述</td></tr><tr><td>MusicURL</td><td>否</td><td>音乐链接</td></tr><tr><td>HQMusicUrl</td><td>否</td><td>高质量音乐链接，WIFI环境优先使用该链接播放音乐</td></tr><tr><td>ThumbMediaId</td><td>是</td><td>缩略图的媒体id，通过素材管理中的接口上传多媒体文件，得到的id</td></tr></tbody></table><h5 id="回复图文消息"><a href="#回复图文消息" class="headerlink" title="回复图文消息"></a>回复图文消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>12345678<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[news]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ArticleCount</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ArticleCount</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Articles</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[title1]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Description</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[description1]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Description</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PicUrl</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[picurl]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PicUrl</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Url</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[url]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Url</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Articles</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，图文为news</td></tr><tr><td>ArticleCount</td><td>是</td><td>图文消息个数；当用户发送文本、图片、语音、视频、图文、地理位置这六种消息时，开发者只能回复1条图文消息；其余场景最多可回复8条图文消息</td></tr><tr><td>Articles</td><td>是</td><td>图文消息信息，注意，如果图文数超过限制，则将只发限制内的条数</td></tr><tr><td>Title</td><td>是</td><td>图文消息标题</td></tr><tr><td>Description</td><td>是</td><td>图文消息描述</td></tr><tr><td>PicUrl</td><td>是</td><td>图片链接，支持JPG、PNG格式，较好的效果为大图360 * 200，小图200 * 200</td></tr><tr><td>Url</td><td>是</td><td>点击图文消息跳转链接</td></tr></tbody></table><p>auth.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入config模块</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入sha1模块</span><span class="token keyword">const</span> sha1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sha1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入tool模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>getUserDataAsync<span class="token punctuation">,</span> parseXMLAsync<span class="token punctuation">,</span> formatMessage<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/tool'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*验证服务器有效性的模块 */</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//微信服务器提交的参数</span>        <span class="token comment">//console.log(req.query);</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>signature<span class="token punctuation">,</span> echostr<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>token<span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token keyword">const</span> sha1str <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token punctuation">[</span>timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> token<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        微信服务器会发送俩种类型的消息给开发者        1.GET请求            - 验证服务器的有效性        2.POST请求            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1Str <span class="token operator">===</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span>            <span class="token comment">//验证消息来自于微信服务器</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1str <span class="token operator">!==</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//说明消息不是微信服务器的</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// console.log(req.query);</span>            <span class="token comment">//接收请求体中的数据,流式数据</span>            <span class="token keyword">const</span> xmlData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserDataAsync</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// console.log(xmlData);</span>            <span class="token comment">//将xml数据解析为js对象</span>            <span class="token keyword">const</span> jsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseXMLAsync</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// console.log(jsData);</span>            <span class="token comment">//格式化数据</span>            <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">formatMessage</span><span class="token punctuation">(</span>jsData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// console.log(message);</span>            <span class="token comment">// console.log(message.Content)</span>            <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">'你在说什么?'</span><span class="token punctuation">;</span>            <span class="token comment">//判断用户发送的消息是不是文本消息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>MsgType<span class="token operator">===</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//判断用户发送的内容具体是什么</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content<span class="token operator">===</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//全匹配</span>                    content<span class="token operator">=</span><span class="token string">'你好!!'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content<span class="token operator">===</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    content<span class="token operator">=</span><span class="token string">'hello~~'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'爱'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//半匹配</span>                    content<span class="token operator">=</span><span class="token string">'我爱你'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//最终回复用户的消息</span>            <span class="token keyword">let</span> replyMessage <span class="token operator">=</span> <span class="token string">'&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA['</span><span class="token operator">+</span>message<span class="token punctuation">.</span>FromUserName<span class="token operator">+</span><span class="token string">']]&gt;&lt;/ToUserName&gt;&lt;FromUserName&gt;&lt;![CDATA['</span><span class="token operator">+</span>message<span class="token punctuation">.</span>ToUserName<span class="token operator">+</span><span class="token string">']]&gt;&lt;/FromUserName&gt;&lt;CreateTime&gt;'</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&lt;/CreateTime&gt;&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;&lt;Content&gt;&lt;![CDATA['</span><span class="token operator">+</span>content<span class="token operator">+</span><span class="token string">']]&gt;&lt;/Content&gt;&lt;/xml&gt;'</span><span class="token punctuation">;</span>            <span class="token comment">//返回响应给微信服务器</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>replyMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来</span>            <span class="token comment">// res.end('');</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行app.js即可测试公众号</p><h3 id="定义回复用户消息的模块文件"><a href="#定义回复用户消息的模块文件" class="headerlink" title="定义回复用户消息的模块文件"></a>定义回复用户消息的模块文件</h3><h4 id="接收普通消息"><a href="#接收普通消息" class="headerlink" title="接收普通消息"></a>接收普通消息</h4><p>当普通微信用户向公众账号发消息时，微信服务器将POST消息的XML数据包到开发者填写的URL上。</p><p>请注意：</p><blockquote><p>关于重试的消息排重，推荐使用msgid排重。<br>微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次。假如服务器无法保证在五秒内处理并回复，可以直接回复空串，微信服务器不会对此作任何处理，并且不会发起重试。详情请见“发送消息-被动回复消息”。<br>如果开发者需要对用户消息在5秒内立即做出回应，即使用“发送消息-被动回复消息”接口向用户被动回复消息时，可以在</p></blockquote><p>公众平台官网的开发者中心处设置消息加密。开启加密后，用户发来的消息和开发者回复的消息都会被加密（但开发者通过客服接口等API调用形式向用户发送消息，则不受影响）。关于消息加解密的详细说明，请见“发送消息-被动回复消息加解密说明”。 各消息类型的推送XML数据包结构如下：</p><h5 id="文本消息"><a href="#文本消息" class="headerlink" title="文本消息"></a>文本消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>1348831860<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[text]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[this is a test]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Content</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgId</span><span class="token punctuation">&gt;</span></span>1234567890123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，文本为text</td></tr><tr><td>Content</td><td>文本消息内容</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table><h5 id="图片消息"><a href="#图片消息" class="headerlink" title="图片消息"></a>图片消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>1348831860<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[image]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PicUrl</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[this is a url]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PicUrl</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MediaId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgId</span><span class="token punctuation">&gt;</span></span>1234567890123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，图片为image</td></tr><tr><td>PicUrl</td><td>图片链接（由系统生成）</td></tr><tr><td>MediaId</td><td>图片消息媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table><h5 id="语音消息"><a href="#语音消息" class="headerlink" title="语音消息"></a>语音消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>1357290913<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[voice]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MediaId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Format</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[Format]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Format</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgId</span><span class="token punctuation">&gt;</span></span>1234567890123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>语音为voice</td></tr><tr><td>MediaId</td><td>语音消息媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>Format</td><td>语音格式，如amr，speex等</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table><p>请注意，开通语音识别后，用户每次发送语音给公众号时，微信会在推送的语音消息XML数据包中，增加一个Recognition字段（注：由于客户端缓存，开发者开启或者关闭语音识别功能，对新关注者立刻生效，对已关注用户需要24小时生效。开发者可以重新关注此帐号进行测试）。开启语音识别后的语音XML数据包如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>1357290913<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[voice]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MediaId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Format</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[Format]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Format</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Recognition</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[腾讯微信团队]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Recognition</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgId</span><span class="token punctuation">&gt;</span></span>1234567890123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>语音为voice</td></tr><tr><td>MediaId</td><td>语音消息媒体id，可以调用获取临时素材接口拉取该媒体</td></tr><tr><td>Format</td><td>语音格式：amr</td></tr><tr><td>Recognition</td><td>语音识别结果，UTF8编码</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table><h5 id="视频消息"><a href="#视频消息" class="headerlink" title="视频消息"></a>视频消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>1357290913<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[video]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MediaId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThumbMediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[thumb_media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThumbMediaId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgId</span><span class="token punctuation">&gt;</span></span>1234567890123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>视频为video</td></tr><tr><td>MediaId</td><td>视频消息媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>ThumbMediaId</td><td>视频消息缩略图的媒体id，可以调用多媒体文件下载接口拉取数据。</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table><h5 id="小视频消息"><a href="#小视频消息" class="headerlink" title="小视频消息"></a>小视频消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>1357290913<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[shortvideo]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MediaId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThumbMediaId</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[thumb_media_id]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThumbMediaId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgId</span><span class="token punctuation">&gt;</span></span>1234567890123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>小视频为shortvideo</td></tr><tr><td>MediaId</td><td>视频消息媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>ThumbMediaId</td><td>视频消息缩略图的媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table><h5 id="地理位置消息"><a href="#地理位置消息" class="headerlink" title="地理位置消息"></a>地理位置消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>1351776360<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[location]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Location_X</span><span class="token punctuation">&gt;</span></span>23.134521<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Location_X</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Location_Y</span><span class="token punctuation">&gt;</span></span>113.358803<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Location_Y</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Scale</span><span class="token punctuation">&gt;</span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Scale</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Label</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[位置信息]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Label</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgId</span><span class="token punctuation">&gt;</span></span>1234567890123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，地理位置为location</td></tr><tr><td>Location_X</td><td>地理位置纬度</td></tr><tr><td>Location_Y</td><td>地理位置经度</td></tr><tr><td>Scale</td><td>地图缩放大小</td></tr><tr><td>Label</td><td>地理位置信息</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table><h5 id="链接消息"><a href="#链接消息" class="headerlink" title="链接消息"></a>链接消息</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>1351776360<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[link]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[公众平台官网链接]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Description</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[公众平台官网链接]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Description</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Url</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[url]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Url</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgId</span><span class="token punctuation">&gt;</span></span>1234567890123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>接收方微信号</td></tr><tr><td>FromUserName</td><td>发送方微信号，若为普通用户，则是一个OpenID</td></tr><tr><td>CreateTime</td><td>消息创建时间</td></tr><tr><td>MsgType</td><td>消息类型，链接为link</td></tr><tr><td>Title</td><td>消息标题</td></tr><tr><td>Description</td><td>消息描述</td></tr><tr><td>Url</td><td>消息链接</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table><h4 id="接收事件推送"><a href="#接收事件推送" class="headerlink" title="接收事件推送"></a>接收事件推送</h4><p>在微信用户和公众号产生交互的过程中，用户的某些操作会使得微信服务器通过事件推送的形式通知到开发者在开发者中心处设置的服务器地址，从而开发者可以获取到该信息。其中，某些事件推送在发生后，是允许开发者回复用户的，某些则不允许，详细内容如下：</p><h5 id="关注-取消关注事件"><a href="#关注-取消关注事件" class="headerlink" title="关注/取消关注事件"></a>关注/取消关注事件</h5><p>用户在关注与取消关注公众号时，微信会把这个事件推送到开发者填写的URL。方便开发者给用户下发欢迎消息或者做帐号的解绑。为保护用户数据隐私，开发者收到用户取消关注事件时需要删除该用户的所有信息。</p><p>微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次。</p><p>关于重试的消息排重，推荐使用FromUserName + CreateTime 排重。</p><p>假如服务器无法保证在五秒内处理并回复，可以直接回复空串，微信服务器不会对此作任何处理，并且不会发起重试。</p><p>推送XML数据包示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[FromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>123456789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[event]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Event</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[subscribe]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Event</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，subscribe(订阅)、unsubscribe(取消订阅)</td></tr></tbody></table><h5 id="扫描带参数二维码事件"><a href="#扫描带参数二维码事件" class="headerlink" title="扫描带参数二维码事件"></a>扫描带参数二维码事件</h5><p>用户扫描带场景值二维码时，可能推送以下两种事件：</p><blockquote><p>如果用户还未关注公众号，则用户可以关注公众号，关注后微信会将带场景值关注事件推送给开发者。<br>如果用户已经关注公众号，则微信会将带场景值扫描事件推送给开发者。</p></blockquote><ol><li>用户未关注时，进行关注后的事件推送</li></ol><p>推送XML数据包示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[FromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>123456789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[event]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Event</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[subscribe]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Event</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EventKey</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[qrscene_123123]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EventKey</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Ticket</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[TICKET]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Ticket</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，subscribe</td></tr><tr><td>EventKey</td><td>事件KEY值，qrscene_为前缀，后面为二维码的参数值</td></tr><tr><td>Ticket</td><td>二维码的ticket，可用来换取二维码图片</td></tr></tbody></table><ol start="2"><li>用户已关注时的事件推送</li></ol><p>推送XML数据包示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[FromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>123456789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[event]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Event</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[SCAN]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Event</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EventKey</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[SCENE_VALUE]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EventKey</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Ticket</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[TICKET]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Ticket</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，SCAN</td></tr><tr><td>EventKey</td><td>事件KEY值，是一个32位无符号整数，即创建二维码时的二维码scene_id</td></tr><tr><td>Ticket</td><td>二维码的ticket，可用来换取二维码图片</td></tr></tbody></table><h5 id="上报地理位置事件"><a href="#上报地理位置事件" class="headerlink" title="上报地理位置事件"></a>上报地理位置事件</h5><p>用户同意上报地理位置后，每次进入公众号会话时，都会在进入时上报地理位置，或在进入会话后每5秒上报一次地理位置，公众号可以在公众平台网站中修改以上设置。上报地理位置时，微信会将上报地理位置事件推送到开发者填写的URL。</p><p>推送XML数据包示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[fromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>123456789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[event]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Event</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[LOCATION]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Event</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Latitude</span><span class="token punctuation">&gt;</span></span>23.137466<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Latitude</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Longitude</span><span class="token punctuation">&gt;</span></span>113.352425<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Longitude</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Precision</span><span class="token punctuation">&gt;</span></span>119.385040<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Precision</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，LOCATION</td></tr><tr><td>Latitude</td><td>地理位置纬度</td></tr><tr><td>Longitude</td><td>地理位置经度</td></tr><tr><td>Precision</td><td>地理位置精度</td></tr></tbody></table><h5 id="自定义菜单事件"><a href="#自定义菜单事件" class="headerlink" title="自定义菜单事件"></a>自定义菜单事件</h5><p>用户点击自定义菜单后，微信会把点击事件推送给开发者，请注意，点击菜单弹出子菜单，不会产生上报。</p><p>点击菜单拉取消息时的事件推送</p><p>推送XML数据包示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[FromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>123456789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[event]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Event</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[CLICK]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Event</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EventKey</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[EVENTKEY]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EventKey</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，CLICK</td></tr><tr><td>EventKey</td><td>事件KEY值，与自定义菜单接口中KEY值对应</td></tr></tbody></table><p>点击菜单跳转链接时的事件推送</p><p>推送XML数据包示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[toUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FromUserName</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[FromUser]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FromUserName</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CreateTime</span><span class="token punctuation">&gt;</span></span>123456789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CreateTime</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MsgType</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[event]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MsgType</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Event</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[VIEW]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Event</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EventKey</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[www.qq.com]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EventKey</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，VIEW</td></tr><tr><td>EventKey</td><td>事件KEY值，设置的跳转URL</td></tr></tbody></table><p>在wechat文件夹下新建template.js,reply.js文件</p><p>template.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*加工处理最终回复用户消息的模板(xml数据)mediaID:上传素材得到 */</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">options</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> replayMessage <span class="token operator">=</span> <span class="token string">'&lt;xml&gt;'</span> <span class="token operator">+</span>        <span class="token string">'&lt;ToUserName&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>toUserName <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/ToUserName&gt;'</span> <span class="token operator">+</span>        <span class="token string">'&lt;FromUserName&gt;&lt;![CDATA['</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>fromUserName <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/FromUserName&gt;'</span> <span class="token operator">+</span>        <span class="token string">'&lt;CreateTime&gt;'</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>createTime <span class="token operator">+</span> <span class="token string">'&lt;/CreateTime&gt;'</span> <span class="token operator">+</span>        <span class="token string">'&lt;MsgType&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>msgType <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/MsgType&gt;'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>msgType <span class="token operator">===</span> <span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        replyMessage <span class="token operator">+=</span> <span class="token string">'&lt;Content&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>content <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/Content&gt;'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>msgType <span class="token operator">===</span> <span class="token string">'image'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        replyMessage <span class="token operator">+=</span> <span class="token string">'&lt;Image&gt;&lt;MediaId&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>mediaID <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/MediaId&gt;&lt;/Image&gt;'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>msgType <span class="token operator">===</span> <span class="token string">'voice'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        replyMessage <span class="token operator">+=</span> <span class="token string">'&lt;Voice&gt;&lt;MediaId&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>mediaID <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/MediaId&gt;&lt;/Voice&gt;'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>msgType <span class="token operator">===</span> <span class="token string">'video'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        replyMessage <span class="token operator">+=</span> <span class="token string">'&lt;Video&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;MediaId&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>mediaID <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/MediaId&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;Title&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/Title&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;Description&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>description <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/Description&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;/Video&gt;'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>msgType <span class="token operator">===</span> <span class="token string">'music'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        replyMessage <span class="token operator">+=</span> <span class="token string">'&lt;Music&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;Title&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/Title&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;Description&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>description <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/Description&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;MusicUrl&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>musicUrl <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/MusicUrl&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;HQMusicUrl&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>hpMusicUrl <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/HQMusicUrl&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;ThumbMediaId&gt;&lt;![CDATA['</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>mediaID <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/ThumbMediaId&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;/Music&gt;'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>msgType <span class="token operator">===</span> <span class="token string">'news'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        replyMessage <span class="token operator">+=</span> <span class="token string">'&lt;ArticleCount&gt;'</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">'&lt;/ArticleCount&gt;'</span> <span class="token operator">+</span>            <span class="token string">'&lt;Articles&gt;'</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            replyMessage <span class="token operator">+=</span> <span class="token string">'&lt;item&gt;'</span> <span class="token operator">+</span>                <span class="token string">'&lt;Title&gt;&lt;![CDATA['</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/Title&gt;'</span> <span class="token operator">+</span>                <span class="token string">'&lt;Description&gt;&lt;![CDATA['</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>description <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/Description&gt;'</span> <span class="token operator">+</span>                <span class="token string">'&lt;PicUrl&gt;&lt;![CDATA['</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>picUrl <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/PicUrl&gt;'</span> <span class="token operator">+</span>                <span class="token string">'&lt;Url&gt;&lt;![CDATA['</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">']]&gt;&lt;/Url&gt;'</span> <span class="token operator">+</span>                <span class="token string">'&lt;/item&gt;'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        replayMessage <span class="token operator">+=</span> <span class="token string">'&lt;/Articles&gt;'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    replayMessage <span class="token operator">+=</span> <span class="token string">'&lt;/xml&gt;'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> replayMessage<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>reply.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*处理用户发送的消息的类型和内容,决定返回不同的内容给用户 */</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">message</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>        toUserName<span class="token operator">:</span> message<span class="token punctuation">.</span>FromUserName<span class="token punctuation">,</span>        fromUserName<span class="token operator">:</span> message<span class="token punctuation">.</span>ToUserName<span class="token punctuation">,</span>        createTime<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        magType<span class="token operator">:</span> <span class="token string">'text'</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">'你在说什么?'</span><span class="token punctuation">;</span>    <span class="token comment">//判断用户发送的消息是不是文本消息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>MsgType <span class="token operator">===</span> <span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//判断用户发送的内容具体是什么</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//全匹配</span>            content <span class="token operator">=</span> <span class="token string">'你好!!'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content <span class="token operator">===</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            content <span class="token operator">=</span> <span class="token string">'hello~~'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'爱'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//半匹配</span>            content <span class="token operator">=</span> <span class="token string">'我爱你'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>MsgType <span class="token operator">===</span> <span class="token string">'image'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        options<span class="token punctuation">.</span>msgType <span class="token operator">=</span> <span class="token string">'image'</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span>mediaID <span class="token operator">=</span> message<span class="token punctuation">.</span>MediaId<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>PicUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>MsgType <span class="token operator">===</span> <span class="token string">'voice'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        options<span class="token punctuation">.</span>msgType <span class="token operator">=</span> <span class="token string">'voice'</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span>mediaID <span class="token operator">=</span> message<span class="token punctuation">.</span>MediaId<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Recognition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>MsgType <span class="token operator">===</span> <span class="token string">'location'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        content <span class="token operator">=</span> <span class="token string">'维度:'</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>Location_X <span class="token operator">+</span> <span class="token string">' 经度:'</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>Location_Y <span class="token operator">+</span> <span class="token string">' 缩放大小:'</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>Scale            <span class="token operator">+</span> <span class="token string">' 位置信息:'</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>Label<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>PicUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>MsgType <span class="token operator">===</span> <span class="token string">'event'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Event <span class="token operator">===</span> <span class="token string">'subscribe'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//用户订阅事件</span>            content <span class="token operator">=</span> <span class="token string">"感谢您的订阅"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>EventKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>                content <span class="token operator">=</span> <span class="token string">'用户扫描了带参数的二维码关注事件'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Event <span class="token operator">===</span> <span class="token string">'unsubscribe'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'无情取关'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Event <span class="token operator">===</span> <span class="token string">'SCAN'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            content <span class="token operator">=</span> <span class="token string">'用户已经关注,再次扫描了带参数的二维码关注事件'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Event <span class="token operator">===</span> <span class="token string">'LOCATION'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            content <span class="token operator">=</span> <span class="token string">'维度:'</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>Latitude <span class="token operator">+</span> <span class="token string">' 经度:'</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>Longitude <span class="token operator">+</span> <span class="token string">' 精度:'</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>Precision<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Event <span class="token operator">===</span> <span class="token string">'CLICK'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            content <span class="token operator">=</span> <span class="token string">'你点击了按钮:'</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>EventKey<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    options<span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token keyword">return</span> options<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>auth.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入config模块</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入template模块</span><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./template"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入reply模块</span><span class="token keyword">const</span> reply <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./reply"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入sha1模块</span><span class="token keyword">const</span> sha1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sha1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入tool模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>getUserDataAsync<span class="token punctuation">,</span> parseXMLAsync<span class="token punctuation">,</span> formatMessage<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/tool'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*验证服务器有效性的模块 */</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//微信服务器提交的参数</span>        <span class="token comment">//console.log(req.query);</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>signature<span class="token punctuation">,</span> echostr<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>token<span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token keyword">const</span> sha1str <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token punctuation">[</span>timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> token<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        微信服务器会发送俩种类型的消息给开发者        1.GET请求            - 验证服务器的有效性        2.POST请求            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1Str <span class="token operator">===</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span>            <span class="token comment">//验证消息来自于微信服务器</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sha1str <span class="token operator">!==</span> signature<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//说明消息不是微信服务器的</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// console.log(req.query);</span>            <span class="token comment">//接收请求体中的数据,流式数据</span>            <span class="token keyword">const</span> xmlData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserDataAsync</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// console.log(xmlData);</span>            <span class="token comment">//将xml数据解析为js对象</span>            <span class="token keyword">const</span> jsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseXMLAsync</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// console.log(jsData);</span>            <span class="token comment">//格式化数据</span>            <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">formatMessage</span><span class="token punctuation">(</span>jsData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> options<span class="token operator">=</span><span class="token function">reply</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//最终回复用户的消息</span>            <span class="token keyword">const</span> replyMessage <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//返回响应给微信服务器</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>replyMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来</span>            <span class="token comment">// res.end('');</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:接收语音识别结果、获取用户地理位置需在测试号管理界面开启</p><h3 id="实现自定义菜单"><a href="#实现自定义菜单" class="headerlink" title="实现自定义菜单"></a>实现自定义菜单</h3><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><p>请注意：</p><blockquote><p>自定义菜单最多包括3个一级菜单，每个一级菜单最多包含5个二级菜单。<br>一级菜单最多4个汉字，二级菜单最多8个汉字，多出来的部分将会以“…”代替。<br>创建自定义菜单后，菜单的刷新策略是，在用户进入公众号会话页或公众号profile页时，如果发现上一次拉取菜单的请求在5分钟以前，就会拉取一下菜单，如果菜单有更新，就会刷新客户端的菜单。测试时可以尝试取消关注公众账号后再次关注，则可以看到创建后的效果。</p></blockquote><p>自定义菜单接口可实现多种类型按钮，如下：</p><blockquote><p>click：点击推事件用户点击click类型按钮后，微信服务器会通过消息接口推送消息类型为event的结构给开发者（参考消息接口指南），并且带上按钮中开发者填写的key值，开发者可以通过自定义的key值与用户进行交互；<br>view：跳转URL用户点击view类型按钮后，微信客户端将会打开开发者在按钮中填写的网页URL，可与网页授权获取用户基本信息接口结合，获得用户基本信息。<br>scancode_push：扫码推事件用户点击按钮后，微信客户端将调起扫一扫工具，完成扫码操作后显示扫描结果（如果是URL，将进入URL），且会将扫码的结果传给开发者，开发者可以下发消息。<br>scancode_waitmsg：扫码推事件且弹出“消息接收中”提示框用户点击按钮后，微信客户端将调起扫一扫工具，完成扫码操作后，将扫码的结果传给开发者，同时收起扫一扫工具，然后弹出“消息接收中”提示框，随后可能会收到开发者下发的消息。<br>pic_sysphoto：弹出系统拍照发图用户点击按钮后，微信客户端将调起系统相机，完成拍照操作后，会将拍摄的相片发送给开发者，并推送事件给开发者，同时收起系统相机，随后可能会收到开发者下发的消息。<br>pic_photo_or_album：弹出拍照或者相册发图用户点击按钮后，微信客户端将弹出选择器供用户选择“拍照”或者“从手机相册选择”。用户选择后即走其他两种流程。<br>pic_weixin：弹出微信相册发图器用户点击按钮后，微信客户端将调起微信相册，完成选择操作后，将选择的相片发送给开发者的服务器，并推送事件给开发者，同时收起相册，随后可能会收到开发者下发的消息。<br>location_select：弹出地理位置选择器用户点击按钮后，微信客户端将调起地理位置选择工具，完成选择操作后，将选择的地理位置发送给开发者的服务器，同时收起位置选择工具，随后可能会收到开发者下发的消息。<br>media_id：下发消息（除文本消息）用户点击media_id类型按钮后，微信服务器会将开发者填写的永久素材id对应的素材下发给用户，永久素材类型可以是图片、音频、视频 、图文消息。请注意：永久素材id必须是在“素材管理/新增永久素材”接口上传后获得的合法id。<br>view_limited：跳转图文消息URL用户点击view_limited类型按钮后，微信客户端将打开开发者在按钮中填写的永久素材id对应的图文消息URL，永久素材类型只支持图文消息。请注意：永久素材id必须是在“素材管理/新增永久素材”接口上传后获得的合法id。<br>article_id：用户点击 article_id 类型按钮后，微信客户端将会以卡片形式，下发开发者在按钮中填写的图文消息<br>    article_view_limited：类似 view_limited，但不使用 media_id 而使用 article_id</p></blockquote><p>注意: 草稿接口灰度完成后，将不再支持图文信息类型的 media_id 和 view_limited，有需要的，请使用 article_id 和 article_view_limited 代替</p><p>请注意，3到8的所有事件，仅支持微信iPhone5.4.1以上版本，和Android5.4以上版本的微信用户，旧版本微信用户点击后将没有回应，开发者也不能正常接收到事件推送。9～12，是专门给第三方平台旗下未微信认证（具体而言，是资质认证未通过）的订阅号准备的事件类型，它们是没有事件推送的，能力相对受限，其他类型的公众号不必使用。</p><p>接口调用请求说明</p><p>http请求方式：POST（请使用https协议） <a href="https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN">https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN</a></p><p>click和view的请求示例</p><pre class="line-numbers language-none"><code class="language-none">{    "button":[    {           "type":"click",         "name":"今日歌曲",         "key":"V1001_TODAY_MUSIC"     },     {          "name":"菜单",          "sub_button":[          {                  "type":"view",              "name":"搜索",              "url":"http://www.soso.com/"           },           {                "type":"miniprogram",                "name":"wxa",                "url":"http://mp.weixin.qq.com",                "appid":"wx286b93c14bbf93aa",                "pagepath":"pages/lunar/index"            },           {              "type":"click",              "name":"赞一下我们",              "key":"V1001_GOOD"           }]      }]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他新增按钮类型的请求示例</p><pre class="line-numbers language-none"><code class="language-none">{    "button": [        {            "name": "扫码",             "sub_button": [                {                    "type": "scancode_waitmsg",                     "name": "扫码带提示",                     "key": "rselfmenu_0_0",                     "sub_button": [ ]                },                 {                    "type": "scancode_push",                     "name": "扫码推事件",                     "key": "rselfmenu_0_1",                     "sub_button": [ ]                }            ]        },         {            "name": "发图",             "sub_button": [                {                    "type": "pic_sysphoto",                     "name": "系统拍照发图",                     "key": "rselfmenu_1_0",                    "sub_button": [ ]                 },                 {                    "type": "pic_photo_or_album",                     "name": "拍照或者相册发图",                     "key": "rselfmenu_1_1",                     "sub_button": [ ]                },                 {                    "type": "pic_weixin",                     "name": "微信相册发图",                     "key": "rselfmenu_1_2",                     "sub_button": [ ]                }            ]        },         {            "name": "发送位置",             "type": "location_select",             "key": "rselfmenu_2_0"        },        {           "type": "media_id",            "name": "图片",            "media_id": "MEDIA_ID1"        },         {           "type": "view_limited",            "name": "图文消息",            "media_id": "MEDIA_ID2"        },        {            "type": "article_id",            "name": "发布后的图文消息",            "article_id": "ARTICLE_ID1"        },        {            "type": "article_view_limited",            "name": "发布后的图文消息",            "article_id": "ARTICLE_ID2"        }    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明</p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>button</td><td>是</td><td>一级菜单数组，个数应为1~3个</td></tr><tr><td>sub_button</td><td>否</td><td>二级菜单数组，个数应为1~5个</td></tr><tr><td>type</td><td>是</td><td>菜单的响应动作类型，view表示网页类型，click表示点击类型，miniprogram表示小程序类型</td></tr><tr><td>name</td><td>是</td><td>菜单标题，不超过16个字节，子菜单不超过60个字节</td></tr><tr><td>key</td><td>click等点击类型必须</td><td>菜单KEY值，用于消息接口推送，不超过128字节</td></tr><tr><td>url</td><td>view、miniprogram类型必须</td><td>网页 链接，用户点击菜单可打开链接，不超过1024字节。 type为miniprogram时，不支持小程序的老版本客户端将打开本url。</td></tr><tr><td>media_id</td><td>media_id类型和view_limited类型必须</td><td>调用新增永久素材接口返回的合法media_id</td></tr><tr><td>appid</td><td>miniprogram类型必须</td><td>小程序的appid（仅认证公众号可配置）</td></tr><tr><td>pagepath</td><td>miniprogram类型必须</td><td>小程序的页面路径</td></tr><tr><td>article_id</td><td>article_id类型和article_view_limited类型必须</td><td>发布后获得的合法 article_id</td></tr></tbody></table><p>返回结果</p><p>正确时的返回JSON数据包如下：</p><blockquote><p>{“errcode”:0,”errmsg”:”ok”}</p></blockquote><p>错误时的返回JSON数据包如下（示例为无效菜单名长度）：</p><blockquote><p>{“errcode”:40018,”errmsg”:”invalid button name size”}</p></blockquote><h4 id="删除接口"><a href="#删除接口" class="headerlink" title="删除接口"></a>删除接口</h4><p>使用接口创建自定义菜单后，开发者还可使用接口删除当前使用的自定义菜单。另请注意，在个性化菜单时，调用此接口会删除默认菜单及全部个性化菜单。</p><p>请求说明</p><p>http请求方式：GET <a href="https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=ACCESS_TOKEN">https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=ACCESS_TOKEN</a></p><p>返回说明</p><p>对应创建接口，正确的Json返回结果:</p><blockquote><p>{“errcode”:0,”errmsg”:”ok”}</p></blockquote><p>代码:</p><p>在wechat文件夹下新建menu.js文件用来存储发送回去的数据:</p><p>menu.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*自定义菜单 */</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"button"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"click"</span><span class="token punctuation">,</span>            <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"戳我呀~"</span><span class="token punctuation">,</span>            <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"CLICK"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"菜单二"</span><span class="token punctuation">,</span>            <span class="token string">"sub_button"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"view"</span><span class="token punctuation">,</span>                    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"百度搜索"</span><span class="token punctuation">,</span>                    <span class="token string">"url"</span><span class="token operator">:</span> <span class="token string">"http://www.baidu.com/"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"scancode_waitmsg"</span><span class="token punctuation">,</span>                    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"扫码带提示"</span><span class="token punctuation">,</span>                    <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"扫码带提示"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// {</span>                <span class="token comment">//     "type": "scancode_push",</span>                <span class="token comment">//     "name": "扫码推事件",</span>                <span class="token comment">//     "key": "扫码推事件"</span>                <span class="token comment">// },</span>                <span class="token comment">// {</span>                <span class="token comment">//     "type": "media_id",</span>                <span class="token comment">//     "name": "点击按钮发送图片",</span>                <span class="token comment">//     "media_id": "MEDIA_ID1"</span>                <span class="token comment">// },</span>                <span class="token comment">// {</span>                <span class="token comment">//     "type": "view_limited",</span>                <span class="token comment">//     "name": "图文消息",</span>                <span class="token comment">//     "media_id": "MEDIA_ID2"</span>                <span class="token comment">// }</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"发图"</span><span class="token punctuation">,</span>            <span class="token string">"sub_button"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"pic_sysphoto"</span><span class="token punctuation">,</span>                    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"系统拍照发图"</span><span class="token punctuation">,</span>                    <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"系统拍照发图"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"pic_photo_or_album"</span><span class="token punctuation">,</span>                    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"拍照或者相册发图"</span><span class="token punctuation">,</span>                    <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"拍照或者相册发图"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"pic_weixin"</span><span class="token punctuation">,</span>                    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"微信相册发图"</span><span class="token punctuation">,</span>                    <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"微信相册发图"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"发送位置"</span><span class="token punctuation">,</span>                    <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"location_select"</span><span class="token punctuation">,</span>                    <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"rselfmenu_2_0"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为创建菜单需要用到access_token值,所以我们在accessToken.js文件下增加俩个函数:创建菜单和删除菜单,并改名为wechat.js</p><p>wechat.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*access_token：微信调用接口全局唯一凭证特点:    1.唯一    2.有效期为2小时,提前5分钟重新请求    3.接口权限 每天2000次    https请求方式: GET https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET    设计思路:        1.首次本地没有,发送请求获取access_token,保存下来(本地文件)        2.第二次或以后:            - 先去本地读取文件,判断它是否过期                - 过期了                    - 重新请求,保存下来,覆盖之前的文件(保证文件是唯一的)                - 没过期                    - 直接使用        整理思路:            读取本地文件(readAccessToken):                - 本地有文件                    - 判断它是否过期(isValidAccessToken)                        - 过期了                           - 重新请求(getAccessToken),保存下来,覆盖之前的文件(保证文件是唯一的)(saveAccessToken)                        - 没过期                           - 直接使用                - 本地没有文件                    - 发送请求获取access_token(getAccessToken),保存下来(本地文件)(saveAccessToken) */</span><span class="token comment">//引入menu模块</span><span class="token keyword">const</span> menu<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./menu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只需要引入request-promise-native库</span><span class="token keyword">const</span> rp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request-promise-native'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入fs模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>writeFile<span class="token punctuation">,</span> readFile<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入config文件</span><span class="token keyword">const</span> <span class="token punctuation">{</span>appID<span class="token punctuation">,</span> appsecret<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义一个类,获取access_token</span><span class="token keyword">class</span> <span class="token class-name">Wechat</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    用来获取access_token     */</span>    <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//定义请求的地址</span>        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid='</span> <span class="token operator">+</span> appID <span class="token operator">+</span> <span class="token string">'&amp;secret='</span> <span class="token operator">+</span> appsecret<span class="token punctuation">;</span>        <span class="token comment">//发送请求</span>        <span class="token comment">/*        需要下载俩个库        request        request-promise-native 返回值是一个promise对象         */</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">/*                    {                      access_token: '',                      expires_in:     }                     */</span>                    <span class="token comment">//设置access_token的过期时间 单位毫秒</span>                    res<span class="token punctuation">.</span>expires_in <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>expires_in <span class="token operator">-</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>                    <span class="token comment">//将promise的对象的状态改为成功的状态</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'getAccessToken方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来保存access_token的方法     * @param accessToken 要保存的凭据     */</span>    <span class="token function">saveAccessToken</span><span class="token punctuation">(</span><span class="token parameter">accessToken</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//将对象转化为json字符串</span>        accessToken <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./accessToken.txt'</span><span class="token punctuation">,</span> accessToken<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件保存成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'saveAccessToken方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来读取access_token的方法     */</span>    <span class="token function">readAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//读取本地文件中的access_taken</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./accessToken.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件读取成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将json字符串转化成js对象</span>                    data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'readAccessToken方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来检查access_token是否有效     * @param data     */</span>    <span class="token function">isValidAccessToken</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//检查传入的参数是否有效</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>data<span class="token punctuation">.</span>access_token <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>data<span class="token punctuation">.</span>expires_in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//代表access_token无效</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//检查传入的参数是否在有效期内</span>        <span class="token comment">// if (data.expires_in&lt;Date.now()){</span>        <span class="token comment">//     //过期了</span>        <span class="token comment">//     return false;</span>        <span class="token comment">// }else {</span>        <span class="token comment">//     //没有过期</span>        <span class="token comment">//     return true;</span>        <span class="token comment">// }</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>expires_in <span class="token operator">&gt;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来获取没有过期的access_token     * @returns {Promise&lt;unknown&gt;} access_token     */</span>    <span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//优化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>access_token <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires_in <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidAccessToken</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//说明之前保存过access_token,并且access_token有效,直接使用</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                access_token<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>access_token<span class="token punctuation">,</span>                expires_in<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires_in            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//本地有文件</span>                <span class="token comment">//判断它是否过期(isValidAccessToken)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidAccessToken</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//有效的</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//resolve(res);</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//过期了</span>                    <span class="token comment">//发送请求获取access_token(getAccessToken)</span>                    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//保存下来(本地文件)(saveAccessToken)</span>                    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveAccessToken</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将请求回来的access_token返回出去</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// resolve(res);</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//本地没有文件</span>                <span class="token comment">//发送请求获取access_token(getAccessToken)</span>                <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//保存下来(本地文件)(saveAccessToken)</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveAccessToken</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将请求回来的access_token返回出去</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// resolve(res);</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//将access_token挂载到this上</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>access_token <span class="token operator">=</span> res<span class="token punctuation">.</span>access_token<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>expires_in <span class="token operator">=</span> res<span class="token punctuation">.</span>expires_in<span class="token punctuation">;</span>                <span class="token comment">//返回res包装了一层promise对象(此对象为成功的对象)</span>                <span class="token comment">//是this.readAccessToken()最终返回值</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来创建自定义菜单     * @param menu 菜单的对象     * @returns {Promise&lt;unknown&gt;}     */</span>    <span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token parameter">menu</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//获取access_token</span>                <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//定义请求地址</span>                <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.weixin.qq.com/cgi-bin/menu/create?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                <span class="token comment">//发送请求</span>                <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> body<span class="token operator">:</span> menu<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'createMenu方法出了问题:'</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来删除自定义菜单     * @returns {Promise&lt;unknown&gt;}     */</span>    <span class="token function">deleteMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//定义请求地址</span>                <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">GET https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                <span class="token comment">//发送请求</span>                <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span>                <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'deleteMenu方法出了问题:'</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Wechat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//删除之前定义的菜单</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> w<span class="token punctuation">.</span><span class="token function">deleteMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建新的菜单</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> w<span class="token punctuation">.</span><span class="token function">createMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行wechat.js得到如下结果:</p><blockquote><p>{ errcode: 0, errmsg: ‘ok’ }<br>{ errcode: 0, errmsg: ‘ok’ }</p></blockquote><h2 id="网页开发"><a href="#网页开发" class="headerlink" title="网页开发"></a>网页开发</h2><h3 id="获取ticket"><a href="#获取ticket" class="headerlink" title="获取ticket"></a>获取ticket</h3><p>自己写页面:<br>在项目下新建一个views文件夹,在里面新建search.ejs文件</p><p>search.ejs</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是一个搜索页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后配置模板资源目录、配置模板引擎、渲染页面,将渲染好的页面通过<code>render</code>方法返回给用户<br>app.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入express模块</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入auto模块</span><span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./wechat/auth'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建app应用对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置模板资源目录</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span><span class="token string">'./views'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置模板引擎</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//页面路由</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">//渲染页面,将渲染好的页面返回给用户</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//接收处理所有参数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//监听端口号</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行app.js,输入ngrok网址+<code>/search</code>得到如下结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/search%E9%A1%B5%E9%9D%A2.png"></p><p>接下来我们使用微信给我们提供的工具:<code>JS-SDK</code></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">官方文档</a></p><p>首先我们需要获得ticket(获取方式与access_token大同小异)</p><p>在utils文件夹下新建api.js用来存放api接口:</p><p>api.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//地址前缀</span><span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token string">'https://api.weixin.qq.com/cgi-bin/'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    accessToken<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">token?grant_type=client_credential</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    ticket<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ticket/getticket?type=jsapi</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    menu<span class="token operator">:</span> <span class="token punctuation">{</span>        create<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">menu/create?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token keyword">delete</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">menu/delete?</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tool.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*工具函数包 */</span><span class="token comment">//npm install xml2js 导包</span><span class="token comment">//引入xml2js,将xml数据转化为js对象</span><span class="token keyword">const</span> <span class="token punctuation">{</span>parseString<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xml2js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入fs模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>writeFile<span class="token punctuation">,</span> readFile<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入path模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span><span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">getUserDataAsync</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> xmlData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            req                <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//当流式数据传递过来时会触发当前事件,会将数据注入到回调函数中</span>                    <span class="token comment">// console.log(data);</span>                    <span class="token comment">//读取的数据是buffer,需要将其转化为字符串</span>                    xmlData <span class="token operator">+=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//当数据接收完毕时,会触发当前</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">parseXMLAsync</span><span class="token punctuation">(</span><span class="token parameter">xmlData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">parseString</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">,</span> <span class="token punctuation">{</span>trim<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'parseXMLAsync方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">formatMessage</span><span class="token punctuation">(</span><span class="token parameter">jsData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//获取xml对象</span>        jsData <span class="token operator">=</span> jsData<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>        <span class="token comment">//判断数据是否为一个对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> jsData <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//遍历对象</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> jsData<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//获取属性值</span>                <span class="token keyword">let</span> value <span class="token operator">=</span> jsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//过滤空数据</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//将合法数据赋值到message对象上</span>                    message<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">writeFileAsync</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//将对象转化为json字符串</span>        data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用绝对路径</span>        <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">writeFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件保存成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'writeFileAsync方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">readFileAsync</span><span class="token punctuation">(</span><span class="token parameter">fileName</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件读取成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将json字符串转化成js对象</span>                    data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'readFileAsync方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wechat.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入menu模块</span><span class="token keyword">const</span> menu<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./menu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只需要引入request-promise-native库</span><span class="token keyword">const</span> rp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request-promise-native'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入api模块</span><span class="token keyword">const</span> api<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/api'</span><span class="token punctuation">)</span><span class="token comment">//引入工具函数</span><span class="token keyword">const</span> <span class="token punctuation">{</span>writeFileAsync<span class="token punctuation">,</span>readFileAsync<span class="token punctuation">}</span><span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/tool'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入config文件</span><span class="token keyword">const</span> <span class="token punctuation">{</span>appID<span class="token punctuation">,</span> appsecret<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义一个类,获取access_token</span><span class="token keyword">class</span> <span class="token class-name">Wechat</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    用来获取access_token     */</span>    <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//定义请求的地址</span>        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>accessToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;appid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>appID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;secret=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>appsecret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token comment">//发送请求</span>        <span class="token comment">/*        需要下载俩个库        request        request-promise-native 返回值是一个promise对象         */</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//设置access_token的过期时间 单位毫秒</span>                    res<span class="token punctuation">.</span>expires_in <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>expires_in <span class="token operator">-</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>                    <span class="token comment">//将promise的对象的状态改为成功的状态</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'getAccessToken方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来保存access_token的方法     * @param accessToken 要保存的凭据     */</span>    <span class="token function">saveAccessToken</span><span class="token punctuation">(</span><span class="token parameter">accessToken</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">writeFileAsync</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">,</span><span class="token string">'access_token.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来读取access_token的方法     */</span>    <span class="token function">readAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">readFileAsync</span><span class="token punctuation">(</span><span class="token string">'access_token.txt'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来检查access_token是否有效     * @param data     */</span>    <span class="token function">isValidAccessToken</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//检查传入的参数是否有效</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>data<span class="token punctuation">.</span>access_token <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>data<span class="token punctuation">.</span>expires_in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//代表access_token无效</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>expires_in <span class="token operator">&gt;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来获取没有过期的access_token     * @returns {Promise&lt;unknown&gt;} access_token     */</span>    <span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//优化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>access_token <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires_in <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidAccessToken</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//说明之前保存过access_token,并且access_token有效,直接使用</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                access_token<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>access_token<span class="token punctuation">,</span>                expires_in<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires_in            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//本地有文件</span>                <span class="token comment">//判断它是否过期(isValidAccessToken)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidAccessToken</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//有效的</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//resolve(res);</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//过期了</span>                    <span class="token comment">//发送请求获取access_token(getAccessToken)</span>                    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//保存下来(本地文件)(saveAccessToken)</span>                    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveAccessToken</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将请求回来的access_token返回出去</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// resolve(res);</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//本地没有文件</span>                <span class="token comment">//发送请求获取access_token(getAccessToken)</span>                <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//保存下来(本地文件)(saveAccessToken)</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveAccessToken</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将请求回来的access_token返回出去</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// resolve(res);</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//将access_token挂载到this上</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>access_token <span class="token operator">=</span> res<span class="token punctuation">.</span>access_token<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>expires_in <span class="token operator">=</span> res<span class="token punctuation">.</span>expires_in<span class="token punctuation">;</span>                <span class="token comment">//返回res包装了一层promise对象(此对象为成功的对象)</span>                <span class="token comment">//是this.readAccessToken()最终返回值</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    用来获取jsapi_ticket     */</span>    <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//发送请求</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//获取access_token</span>            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//定义请求的地址</span>            <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>ticket<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//将promise的对象的状态改为成功的状态</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        ticket<span class="token operator">:</span>res<span class="token punctuation">.</span>ticket<span class="token punctuation">,</span>                        expires_in<span class="token operator">:</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>expires_in <span class="token operator">-</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'getTicket方法出了问题:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来保存jsapi_ticket的方法     * @param ticket 要保存的票据     */</span>    <span class="token function">saveTicket</span><span class="token punctuation">(</span><span class="token parameter">ticket</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">writeFileAsync</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span><span class="token string">'ticket.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来读取ticket的方法     */</span>    <span class="token function">readTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">readFileAsync</span><span class="token punctuation">(</span><span class="token string">'ticket.txt'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来检查ticket是否有效     * @param data     */</span>    <span class="token function">isValidTicket</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//检查传入的参数是否有效</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>data<span class="token punctuation">.</span>ticket <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>data<span class="token punctuation">.</span>expires_in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//代表ticket无效</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>expires_in <span class="token operator">&gt;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来获取没有过期的ticket     * @returns {Promise&lt;unknown&gt;} ticket     */</span>    <span class="token function">fetchTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//优化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ticket <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ticket_expires_in <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidTicket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//说明之前保存过ticket,并且ticket有效,直接使用</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                ticket<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ticket<span class="token punctuation">,</span>                expires_in<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires_in            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//本地有文件</span>                <span class="token comment">//判断它是否过期(isValidTicket)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidTicket</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//有效的</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//过期了</span>                    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//保存下来(本地文件)(saveTicket)</span>                    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveTicket</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将请求回来的access_token返回出去</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//本地没有文件</span>                <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveTicket</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//将ticket挂载到this上</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>ticket <span class="token operator">=</span> res<span class="token punctuation">.</span>ticket<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>ticket_expires_in <span class="token operator">=</span> res<span class="token punctuation">.</span>expires_in<span class="token punctuation">;</span>                <span class="token comment">//返回res包装了一层promise对象(此对象为成功的对象)</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来创建自定义菜单     * @param menu 菜单的对象     * @returns {Promise&lt;unknown&gt;}     */</span>    <span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token parameter">menu</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//获取access_token</span>                <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//定义请求地址</span>                <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>create<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                <span class="token comment">//发送请求</span>                <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> body<span class="token operator">:</span> menu<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'createMenu方法出了问题:'</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用来删除自定义菜单     * @returns {Promise&lt;unknown&gt;}     */</span>    <span class="token function">deleteMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//定义请求地址</span>                <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>delete<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                <span class="token comment">//发送请求</span>                <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'deleteMenu方法出了问题:'</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> w<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Wechat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*//删除之前定义的菜单    let result = await w.deleteMenu();    console.log(result);    //创建新的菜单    result = await w.createMenu(menu);    console.log(result);*/</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> w<span class="token punctuation">.</span><span class="token function">fetchTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将Wechat暴露出去:在最后添加<code>module.exports = Wechat;</code>并把上面的测试代码注释掉<br>即:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*(async ()=&gt;{    const w=new Wechat();    /!*!//删除之前定义的菜单    let result = await w.deleteMenu();    console.log(result);    //创建新的菜单    result = await w.createMenu(menu);    console.log(result);*!/    const data = await w.fetchTicket();    console.log(data);})()*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在config文件夹下的index.js中添加<code>url: 'ngrok地址'</code></p><p>app.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入express模块</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入sha1加密</span><span class="token keyword">const</span> sha1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sha1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入config文件</span><span class="token keyword">const</span> <span class="token punctuation">{</span>url<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入auto模块</span><span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./wechat/auth'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入wechat模块</span><span class="token keyword">const</span> Wechat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./wechat/wechat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建app应用对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置模板资源目录</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token string">'./views'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置模板引擎</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建实例对象</span><span class="token keyword">const</span> wechatApi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wechat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//页面路由</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//生成js-sdk需要使用的签名：</span>    <span class="token comment">//随机字符串</span>    <span class="token keyword">const</span> noncestr <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//时间戳</span>    <span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取票据</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>ticket<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> wechatApi<span class="token punctuation">.</span><span class="token function">fetchTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.组合参与签名的4个参数:jsapi_ticket(临时票据),noncestr(随机字符串),timestamp(时间戳),url(当前服务器地址)</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jsapi_ticket=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ticket<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">noncestr=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>noncestr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">timestamp=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">url=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/search</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">]</span>    <span class="token comment">//2.将其进行字典连续,并以'&amp;'拼接在一起</span>    <span class="token keyword">const</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//xxx=xxx&amp;xxx=xxx&amp;xxx=xxx</span>    <span class="token comment">//3.进行sha1加密,最终生成想要的signature</span>    <span class="token keyword">const</span> signature <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//渲染页面,将渲染好的页面返回给用户</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        signature<span class="token punctuation">,</span>        noncestr<span class="token punctuation">,</span>        timestamp    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//接收处理所有参数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//监听端口号</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改search.ejs</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-scale=1.0,user-scalable=no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>语音识别查电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://res.wx.qq.com/open/js/jweixin-1.6.0.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/zepto/1.2.0/zepto.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">/*    1.绑定域名        - 在接口测试号页面上填写js安全域名接口 不用写域名:"http://"    2.引入js文件        - http://res.wx.qq.com/open/js/jweixin-1.6.0.js    3.通过config接口注入权限验证配置     */</span>    wx<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        debug<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span>        appId<span class="token operator">:</span> <span class="token string">'wxd9cdd2f13c019b6d'</span><span class="token punctuation">,</span> <span class="token comment">// 必填，公众号的唯一标识</span>        timestamp<span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> timestamp </span><span class="token delimiter punctuation">%&gt;</span></span>'</span><span class="token punctuation">,</span> <span class="token comment">// 必填，生成签名的时间戳</span>        nonceStr<span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> noncestr </span><span class="token delimiter punctuation">%&gt;</span></span>'</span><span class="token punctuation">,</span> <span class="token comment">// 必填，生成签名的随机串</span>        signature<span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> signature </span><span class="token delimiter punctuation">%&gt;</span></span>'</span><span class="token punctuation">,</span><span class="token comment">// 必填，签名</span>        jsApiList<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">'onMenuShareQQ'</span><span class="token punctuation">,</span>            <span class="token string">'onMenuShareQZone'</span><span class="token punctuation">,</span>            <span class="token string">'startRecord'</span><span class="token punctuation">,</span>            <span class="token string">'stopRecord'</span><span class="token punctuation">,</span>            <span class="token string">'translateVoice'</span>        <span class="token punctuation">]</span> <span class="token comment">// 必填，需要使用的JS接口列表</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通过ready接口处理成功验证</span>    wx<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。</span>        <span class="token comment">// 对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span>        <span class="token comment">//验证接口是否有权限</span>        wx<span class="token punctuation">.</span><span class="token function">checkJsApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            jsApiList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'onMenuShareQQ'</span><span class="token punctuation">,</span>                <span class="token string">'onMenuShareQZone'</span><span class="token punctuation">,</span>                <span class="token string">'startRecord'</span><span class="token punctuation">,</span>                <span class="token string">'stopRecord'</span><span class="token punctuation">,</span>                <span class="token string">'translateVoice'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 需要检测的JS接口列表，所有JS接口列表见附录2,</span>            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 以键值对的形式返回，可用的api值true，不可用为false</span>                <span class="token comment">// 如：{"checkResult":{"chooseImage":true},"errMsg":"checkJsApi:ok"}</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置标志位,是否在录音中</span>        <span class="token keyword">var</span> isRecord <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//语音识别功能</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#search'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//开始录音</span>                wx<span class="token punctuation">.</span><span class="token function">startRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isRecord <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//结束录音</span>                wx<span class="token punctuation">.</span><span class="token function">stopRecord</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">//结束录音后会自动上传录音到微信服务器中,微信服务器会返回一个id给开发者使用</span>                        <span class="token keyword">var</span> localId <span class="token operator">=</span> res<span class="token punctuation">.</span>localId<span class="token punctuation">;</span>                        <span class="token comment">//将录音转化为文字</span>                        <span class="token comment">/*wx.translateVoice({                            localId: localId, // 需要识别的音频的本地Id，由录音相关接口获得                            isShowProgressTips: 1, // 默认为1，显示进度提示                            success: function (res) {                                alert(res.translateResult); // 语音识别的结果                            }                        });*/</span>                        isRecord <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通过error接口处理失败验证</span>    wx<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入<a href="https://www.bootcdn.cn/">BootCDN官网</a>,搜索<code>zepto</code>,复制第一个script标签即可</p><p>分享接口:</p><pre class="line-numbers language-none"><code class="language-none">wx.onMenuShareQQ({  title: '', // 分享标题  desc: '', // 分享描述  link: '', // 分享链接  imgUrl: '', // 分享图标  success: function () {  // 用户确认分享后执行的回调函数  },  cancel: function () {  // 用户取消分享后执行的回调函数  }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化项目"><a href="#优化项目" class="headerlink" title="优化项目"></a>优化项目</h3><p>写了这么久的项目,是不是觉得项目十分的杂乱,这时候我们就需要对项目就行优化</p><p>因为auth,reply,template三个模块的作用都是拿到数据并做出反应给用户,所以我们可以把他们整合到一起</p><p>然后menu,wechat我们是用来实现自定义菜单功能的,我们今后可以将所有接口都放到wechat里面</p><p>在项目下新建文件夹reply,用来处理用户响应,反应给用户的一些模块,即将auth,reply,template三个模块放进去,将auth改名为index</p><p>修改app.js中的引入auth代码,修改为</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入reply模块</span><span class="token keyword">const</span> reply <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./reply'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改<code>app.use(auth())</code>为<code>app.use(reply())</code></p><p>提取app.js中的路由模块</p><p>在项目下新建router文件夹,新建index.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入express模块</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入sha1加密</span><span class="token keyword">const</span> sha1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sha1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入config文件</span><span class="token keyword">const</span> <span class="token punctuation">{</span>url<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入wechat模块</span><span class="token keyword">const</span> Wechat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../wechat/wechat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入reply模块</span><span class="token keyword">const</span> reply <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../reply"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Router</span><span class="token keyword">const</span> Router <span class="token operator">=</span> express<span class="token punctuation">.</span>Router<span class="token punctuation">;</span><span class="token comment">//创建路由器对象</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建实例对象</span><span class="token keyword">const</span> wechatApi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wechat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//页面路由</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//生成js-sdk需要使用的签名：</span>    <span class="token comment">//随机字符串</span>    <span class="token keyword">const</span> noncestr <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//时间戳</span>    <span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取票据</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>ticket<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> wechatApi<span class="token punctuation">.</span><span class="token function">fetchTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.组合参与签名的4个参数:jsapi_ticket(临时票据),noncestr(随机字符串),timestamp(时间戳),url(当前服务器地址)</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jsapi_ticket=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ticket<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">noncestr=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>noncestr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">timestamp=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">url=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/search</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">]</span>    <span class="token comment">//2.将其进行字典连续,并以'&amp;'拼接在一起</span>    <span class="token keyword">const</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//xxx=xxx&amp;xxx=xxx&amp;xxx=xxx</span>    <span class="token comment">//3.进行sha1加密,最终生成想要的signature</span>    <span class="token keyword">const</span> signature <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//渲染页面,将渲染好的页面返回给用户</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        signature<span class="token punctuation">,</span>        noncestr<span class="token punctuation">,</span>        timestamp    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//接收处理所有参数</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//将路由器对象暴露出去</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改app.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入express模块</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入路由器模块</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建app应用对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置模板资源目录</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token string">'./views'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置模板引擎</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//应用路由器</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//监听端口号</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爬取浏览器数据"><a href="#爬取浏览器数据" class="headerlink" title="爬取浏览器数据"></a>爬取浏览器数据</h3><p>使用<code>puppeteer</code>库</p><p><a href="https://github.com/puppeteer/puppeteer">github地址</a></p><p><a href="https://github.com/puppeteer/puppeteer/blob/v13.1.3/docs/api.md">api文档</a></p><p>下载: <code>npm i puppeteer</code></p><p>puppeteer 在执行安装的过程中需要执行install.js，这里会下载Chromium，翻墙也下载失败，导致安装不成功，解决办法(使用淘宝镜像)：</p><blockquote><p>npm config set puppeteer_download_host=<a href="https://npm.taobao.org/mirrors">https://npm.taobao.org/mirrors</a><br>npm i puppeteer</p></blockquote><p>我们只需要爬取8条数据</p><p>在项目下新建文件夹server,在里面再新建一个文件夹crawler,在其中新建theaterCrawler.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span><span class="token comment">//爬取热门电影信息</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/cinema/nowplaying/chongqing/'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//1.打开浏览器</span>    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment">// args: ['--no-sandbox'],</span>        headless<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">//以无头浏览器形式打开浏览器,没有界面显示,在后台运行的8</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.创建tab标签页</span>    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.跳转到指定网址</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>        waitUntil<span class="token operator">:</span> <span class="token string">'networkidle2'</span> <span class="token comment">//等待网络空闲时再跳转加载页面</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.等待网址加载完成,开始爬取数据</span>    <span class="token comment">//开启延时器,延时2秒钟开始爬取数据</span>    <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//对加载好的页面进行dom操作</span>        <span class="token comment">//所有爬取的数据数组</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//获取所有热门电影的li</span>        <span class="token keyword">const</span> $list <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#nowplaying&gt;.mod-bd&gt;.lists&gt;.list-item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//只取8条数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> liDom <span class="token operator">=</span> $list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//电影标题</span>            <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>liDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//电影评分</span>            <span class="token keyword">let</span> rating <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>liDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'score'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//电影片长</span>            <span class="token keyword">let</span> runtime <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>liDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'duration'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//导演</span>            <span class="token keyword">let</span> directors <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>liDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'director'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//主演</span>            <span class="token keyword">let</span> casts <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>liDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//电影详情网址</span>            <span class="token keyword">let</span> href <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>liDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.poster&gt;a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//电影海报图</span>            <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>liDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.poster&gt;a&gt;img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//id</span>            <span class="token keyword">let</span> doubanId <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>liDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'subject'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                title<span class="token punctuation">,</span>                rating<span class="token punctuation">,</span>                runtime<span class="token punctuation">,</span>                directors<span class="token punctuation">,</span>                casts<span class="token punctuation">,</span>                href<span class="token punctuation">,</span>                image<span class="token punctuation">,</span>                doubanId            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">//将爬取的数据返回出去</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//console.log(result);</span>    <span class="token comment">//遍历爬取到的8条数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取每一条信息</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//获取电影详情网址</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>href<span class="token punctuation">;</span>        <span class="token comment">//跳转到电影详情页</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>            waitUntil<span class="token operator">:</span> <span class="token string">'networkidle2'</span> <span class="token comment">//等待网络空闲时再跳转加载页面</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//爬取其他数据</span>        <span class="token keyword">let</span> itemResult <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> genre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//类型</span>            <span class="token keyword">const</span> $genre <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[property="v:genre"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> $genre<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                genre<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>$genre<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//简介</span>            <span class="token keyword">const</span> summary <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[property="v:summary"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//上映日期</span>            <span class="token keyword">const</span> releaseDate <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[property="v:initialReleaseDate"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>            <span class="token comment">//给单个对象添加3个属性</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                genre<span class="token punctuation">,</span>                summary<span class="token punctuation">,</span>                releaseDate            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">//在最后给当前对象添加3个属性</span>        <span class="token comment">//在evaluate函数中没办法读取到服务器中的变量</span>        item<span class="token punctuation">.</span>genre <span class="token operator">=</span> itemResult<span class="token punctuation">.</span>genre<span class="token punctuation">;</span>        item<span class="token punctuation">.</span>summary <span class="token operator">=</span> itemResult<span class="token punctuation">.</span>summary<span class="token punctuation">;</span>        item<span class="token punctuation">.</span>releaseDate <span class="token operator">=</span> itemResult<span class="token punctuation">.</span>releaseDate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.关闭浏览器</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在server文件夹下新建index.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> theatersCrawler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./crawler/theatersCrawler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">theatersCrawler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行index.js得到如下数据:</p><pre class="line-numbers language-none"><code class="language-none">[                                                                            {                                                                            title: '四海',                                                             rating: 5.6,                                                               runtime: '128分钟',                                                        directors: '韩寒',                                                         casts: '刘昊然 / 刘浩存 / 沈腾',                                           href: 'https://movie.douban.com/subject/35337517/?from=playing_poster',    image: 'https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2867433563.webp',    doubanId: 35337517,    genre: [ '喜剧', '动作', '爱情' ],    summary: '在码头做摩托车特技表演顺便拉客的年轻人吴仁耀（刘昊然饰），他多年不见的浪荡父亲吴仁腾（沈腾饰）；梦想大城市生活的餐馆服务员周欢颂和他浮夸真诚的哥哥周欢歌。一支从没有赢过一场比赛的“不败传说”车队频频出战，一群可笑又可爱的小人物命运交织。阿耀和欢颂都立志活成自己亲人的反面，想彼此取暖，彼此独立，却又总不在一个频道上。世事无常，他们不得不背井离乡，迎接一场未知旅途，阿耀的一身技能竟会用在一个自己都意想不到的场合，他的亲情友情和爱情最终又将会是如何……',    releaseDate: '2022-02-01(中国大陆)'  },  {    title: '奇迹·笨小孩',    rating: 7.4,    runtime: '106分钟',    directors: '文牧野',    casts: '易烊千玺 / 田雨 / 陈哈琳',    href: 'https://movie.douban.com/subject/35312437/?from=playing_poster',    image: 'https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2842327103.webp',    doubanId: 35312437,    genre: [ '剧情' ],    summary: '二十岁的景浩（易烊千玺饰）独自带着年幼的妹妹来到深圳生活，兄妹俩生活温馨却拮据。为了妹妹高昂的手术费，机缘巧合之下，景浩得到一个机会，本以为美好生活即将来临，却不料遭遇重创。在时间和金钱的双重压力下，毫无退路的景浩决定孤注一掷，而他陷入困境的平凡人生，又能否燃起希望的火花？&lt;br&gt;电影《奇迹》是中宣部国家电影局2021年重点电影项目，也是2021年重点建党百年献礼片，描述十八大以后新时代年轻人在深圳创业的影片。',    releaseDate: '2022-02-01(中国大陆)'  },  {    title: '这个杀手不太冷静',    rating: 6.9,    runtime: '109分钟',    directors: '邢文雄',    casts: '马丽 / 魏翔 / 陈明昊',    href: 'https://movie.douban.com/subject/35505100/?from=playing_poster',    image: 'https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2814949620.webp',    doubanId: 35505100,    genre: [ '喜剧' ],    summary: '毕生追求男主梦的魏成功（魏翔饰）终于得到了女明星米兰（马丽饰）的“赏识”，被邀请出演她的男一号“杀手卡尔”，他兴致勃勃诠释角色的同时，却没想到已经落入了一场危机四伏的阴谋，但他依然借自己“精湛”的演技和绝佳的运气化险为夷，而残酷的真相也离他越来越近……',    releaseDate: '2022-02-01(中国大陆)'  },  {    title: '长津湖之水门桥',    rating: 7.2,    runtime: '149分钟',    directors: '徐克',    casts: '吴京 / 易烊千玺 / 朱亚文',    href: 'https://movie.douban.com/subject/35613853/?from=playing_poster',    image: 'https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2846021991.webp',    doubanId: 35613853,    genre: [ '剧情', '历史', '战争' ],    summary: '电影以抗美援朝战争第二次战役中的长津湖战役为背景，讲述了在结束了新兴里和下碣隅里的战斗之后，七连战士们又接到了更艰巨的任务……',    releaseDate: '2022-02-01(中国大陆)'  },  {    title: '狙击手',    rating: 7.7,    runtime: '96分钟',    directors: '张艺谋 张末',    casts: '陈永胜 / 章宇 / 张译',    href: 'https://movie.douban.com/subject/35215390/?from=playing_poster',    image: 'https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2738601191.webp',    doubanId: 35215390,    genre: [ '剧情', '历史', '战争' ],    summary: '影片根据抗美援朝战争“冷枪冷炮”运动中神枪手群体事迹改编。1952年冬至1953年初，中国人民志愿军与联合国军在朝鲜战场形成僵持，双方发起了低强度的密集狙击战，史称"冷枪冷炮运动"。在连长（张译饰）带领下的狙击五班战士枪法过人，成为敌军的心头大患，班长刘文武（章宇饰）更成为重点狙击对象。为重创狙击五班，敌方调配精英狙击小队，配以最先进的武器装备，更迫使狙击五班战士大永（陈永胜饰）等人为救同伴进入其设好的险境之地。但正当敌军打响自己如意算盘之时，他们未料到，被他们当作诱饵的侦察兵亮亮（刘奕铁饰）身上其实隐藏着更大的秘密......',    releaseDate: '2022-02-01(中国大陆)'  },  {    title: '喜羊羊与灰太狼之筐出未来',    rating: 0,    runtime: '94分钟',    directors: '黄伟明',    casts: '祖晴 / 张琳 / 邓玉婷',    href: 'https://movie.douban.com/subject/35608160/?from=playing_poster',    image: 'https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2797468943.webp',    doubanId: 35608160,    genre: [ '喜剧', '动画', '运动' ],    summary: '喜羊羊、灰太狼与一众小羊组成的守护者队进入篮球顶级赛事决赛，但却意外地败北，团队分崩离析。&lt;br&gt;虽然各散东西，但对篮球的热爱和对冠军的渴望让大家再次组队，参加新一届大赛，然而这次的对手更强大，他们面临更大的挑战！',    releaseDate: '2022-02-01(中国大陆)'  },  {    title: '熊出没·重返地球',    rating: 0,    runtime: '99分钟',    directors: '林汇达',    casts: '张秉君 / 张伟 / 谭笑',    href: 'https://movie.douban.com/subject/35377026/?from=playing_poster',    image: 'https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2856825681.webp',    doubanId: 35377026,    genre: [ '喜剧', '动画', '儿童' ],    summary: '有点懒又有点馋的熊二虽然总是各种失误犯错，内心却一直梦想成为一位英雄，以此获得大家特别是哥哥熊大的认可。&lt;br&gt;一块外星原核的坠落打破了狗熊岭的平静，熊二意外的与外星原核合体，成为了拥有外星智慧能量的熊！随之而来的是“外星人”阿布的抢夺。阿布为了夺回原核，故意制造事端，让熊二众叛亲离。就在阿布将要成功的时候，一支神秘高科技军团的攻击彻底打乱了计划，导致熊强组合甚至整个地球于巨大的危难之中。&lt;br&gt;阿布隐藏的身份以及来到地球的真正目的到底是什么？神秘的高科技军团背后有何故事？自暴自弃的熊二能否振作起来实现他的英雄梦？他们能否挽救地球的危机？',    releaseDate: '2022-02-01(中国大陆)'  },  {    title: '李茂扮太子',    rating: 4.3,    runtime: '100分钟',    directors: '高可',    casts: '马丽 / 常远 / 艾伦',    href: 'https://movie.douban.com/subject/35444998/?from=playing_poster',    image: 'https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2812626447.webp',    doubanId: 35444998,    genre: [ '喜剧', '古装' ],    summary: '富家女杨家珍（马丽饰）与小捕快李茂（常远饰）成婚，虽夫妻恩爱，但始终得不到家珍父母的认可。李茂意外发现自己竟与当朝太子相貌相同，一个想进宫获得晋升，一个想出宫获得自由，二人交换身份，却不知正一步步卷入尚书的阴谋里……',    releaseDate: '2022-01-01(中国大陆)'  }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保存数据到数据库"><a href="#保存数据到数据库" class="headerlink" title="保存数据到数据库"></a>保存数据到数据库</h3><p>在项目下新建db文件夹,在其中新建index.js文件,需要下载mongoose包:<code>npm install mongoose</code></p><p><a href="https://www.cnblogs.com/TM0831/p/10606624.html">安装mongoDB</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入mongoose</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//连接数据库</span>    mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/movie'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>useNewUrlParser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//绑定事件监听</span>    mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库连接成功~~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'数据库连接失败:'</span><span class="token operator">+</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在项目下新建model文件夹,在其中新建Theaters.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入mongoose</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Schema</span><span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token comment">//创建约束对象</span><span class="token keyword">const</span> theatersSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token operator">:</span> String<span class="token punctuation">,</span>    rating<span class="token operator">:</span> Number<span class="token punctuation">,</span>    runtime<span class="token operator">:</span> String<span class="token punctuation">,</span>    directors<span class="token operator">:</span> String<span class="token punctuation">,</span>    casts<span class="token operator">:</span> String<span class="token punctuation">,</span>    image<span class="token operator">:</span> String<span class="token punctuation">,</span>    doubanId<span class="token operator">:</span> <span class="token punctuation">{</span>        type<span class="token operator">:</span> Number<span class="token punctuation">,</span>        unique<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    genre<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span>    summary<span class="token operator">:</span> String<span class="token punctuation">,</span>    releaseDate<span class="token operator">:</span> String<span class="token punctuation">,</span>    posterKey<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token comment">//图片上传到七牛中返回的key值</span>    createTime<span class="token operator">:</span> <span class="token punctuation">{</span>        type<span class="token operator">:</span> Date<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//创建模型对象</span><span class="token keyword">const</span> Theaters <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Theaters'</span><span class="token punctuation">,</span>theatersSchema<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//暴露出去</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Theaters<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在server文件夹下新建save文件夹,并在其中新建saveTheaters.js文件用来保存实现保存操作的内容</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Theaters</span><span class="token keyword">const</span> Theaters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../model/Theaters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> Theaters<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token operator">:</span> item<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            rating<span class="token operator">:</span> item<span class="token punctuation">.</span>rating<span class="token punctuation">,</span>            runtime<span class="token operator">:</span> item<span class="token punctuation">.</span>runtime<span class="token punctuation">,</span>            directors<span class="token operator">:</span> item<span class="token punctuation">.</span>directors<span class="token punctuation">,</span>            casts<span class="token operator">:</span> item<span class="token punctuation">.</span>casts<span class="token punctuation">,</span>            image<span class="token operator">:</span> item<span class="token punctuation">.</span>image<span class="token punctuation">,</span>            doubanId<span class="token operator">:</span> item<span class="token punctuation">.</span>doubanId<span class="token punctuation">,</span>            genre<span class="token operator">:</span> item<span class="token punctuation">.</span>genre<span class="token punctuation">,</span>            summary<span class="token operator">:</span> item<span class="token punctuation">.</span>summary<span class="token punctuation">,</span>            releaseDate<span class="token operator">:</span> item<span class="token punctuation">.</span>releaseDate<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据保存成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在关闭浏览器后将数据返回出去:在theatersCrawler.js中关闭浏览器代码后添加<code>return result;</code></p><p>修改server文件夹下面的index文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> theatersCrawler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./crawler/theatersCrawler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> saveTheaters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./save/saveTheaters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//连接数据库</span>    <span class="token keyword">await</span> db<span class="token punctuation">;</span>    <span class="token comment">//爬取数据</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">theatersCrawler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将爬取的数据保存到数据库中</span>    <span class="token keyword">await</span> <span class="token function">saveTheaters</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在数据库中执行:<code>db.theaters.find({})</code> 查看数据保存情况</p><h3 id="回复用户热门电影数据"><a href="#回复用户热门电影数据" class="headerlink" title="回复用户热门电影数据"></a>回复用户热门电影数据</h3><p>修改reply下的reply.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Theaters</span><span class="token keyword">const</span> Theaters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/Theaters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入config</span><span class="token keyword">const</span> <span class="token punctuation">{</span>url<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要将该函数改为async函数</span><span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content <span class="token operator">===</span> <span class="token string">'热门'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//全匹配</span>            <span class="token comment">//回复用户热门电影数据</span>            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> Theaters<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> summary<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> image<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> doubanId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> _id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将回复内容改为空数组</span>            content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            options<span class="token punctuation">.</span>msgType <span class="token operator">=</span> <span class="token string">'news'</span><span class="token punctuation">;</span>            <span class="token comment">//通过变量将数据添加进去</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> item <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                content<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    title<span class="token operator">:</span> item<span class="token punctuation">.</span>title<span class="token punctuation">,</span>                    description<span class="token operator">:</span> item<span class="token punctuation">.</span>summary<span class="token punctuation">,</span>                    picUrl<span class="token operator">:</span> item<span class="token punctuation">.</span>image<span class="token punctuation">,</span>                    url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/detail/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>doubanId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将reply下的index.js文件中的<code>const options = reply(message);</code>改为</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//将reply改为了async函数,返回值变为了promise对象</span><span class="token comment">//必须用await关键字才能拿到最终的返回值</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">reply</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="电影详情页面"><a href="#电影详情页面" class="headerlink" title="电影详情页面"></a>电影详情页面</h3><p>router的index.js中,在搜索页面路由下添加电影详情页面路由</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Theaters</span><span class="token keyword">const</span> Theaters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/Theaters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//详情页面路由</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/detail/:id'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//获取占位符id的值</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">;</span>    <span class="token comment">//判断id值是否存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//去数据库中找到对应id值的所有数据</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> Theaters<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>doubanId<span class="token operator">:</span> id<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>_id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> __v<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> createTime<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> doubanId<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//渲染到页面上</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'detail'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>电影详情页</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>movie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header_title<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/movie<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header_search<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/search<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>评分：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>rating </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ratingNum<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>98375人评价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>meta<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>runtime </span><span class="token delimiter punctuation">%&gt;</span></span> /                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>genre<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> item </span><span class="token delimiter punctuation">%&gt;</span></span> /                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>directors </span><span class="token delimiter punctuation">%&gt;</span></span>(导演) / <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>casts </span><span class="token delimiter punctuation">%&gt;</span></span> / <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>releaseDate </span><span class="token delimiter punctuation">%&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>image </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>intro<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%&gt;</span></span>的简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> data<span class="token punctuation">.</span>summary </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文本搜索电影"><a href="#文本搜索电影" class="headerlink" title="文本搜索电影"></a>文本搜索电影</h3><p>在匹配的最后加一个else判断,用来搜索用户输入指定电影信息</p><p>reply.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入rp</span><span class="token keyword">const</span> rp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request-promise-native'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">//搜索用户输入指定电影信息</span>    <span class="token comment">//定义请求地址</span>    <span class="token comment">//这种写法会导致message.Content变为一些%之类的码</span>    <span class="token comment">//const url = `https://api.douban.com/v2/movie/search?q=${message.Content}&amp;count=8`;</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://api.douban.com/v2/movie/search'</span><span class="token punctuation">;</span>    <span class="token comment">//发送请求</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>subjects<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> qs<span class="token operator">:</span> <span class="token punctuation">{</span>q<span class="token operator">:</span> message<span class="token punctuation">.</span>Content<span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断subjects是否有值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subjects <span class="token operator">&amp;&amp;</span> subjects<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//有数据,返回一个图文消息给用户</span>        <span class="token comment">//将回复内容改为空数组</span>        content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span>msgType <span class="token operator">=</span> <span class="token string">'news'</span><span class="token punctuation">;</span>        <span class="token comment">//通过变量将数据添加进去</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> subjects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> item <span class="token operator">=</span> subjects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            content<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                title<span class="token operator">:</span> item<span class="token punctuation">.</span>title<span class="token punctuation">,</span>                description<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">电影评分为:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>rating<span class="token punctuation">.</span>average<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>                picUrl<span class="token operator">:</span> item<span class="token punctuation">.</span>image<span class="token punctuation">.</span>small<span class="token punctuation">,</span>                url<span class="token operator">:</span> item<span class="token punctuation">.</span>alt            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">//无数据</span>        content <span class="token operator">=</span> <span class="token string">"暂时没有电影信息"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上传图片到七牛"><a href="#上传图片到七牛" class="headerlink" title="上传图片到七牛"></a>上传图片到七牛</h3><p><a href="https://www.qiniu.com/?utm_source=%E7%99%BE%E5%BA%A6%E5%93%81%E4%B8%93&amp;utm_medium=CPM&amp;utm_term=logo&amp;utm_content=%E5%B7%A6%E4%BE%A7logo&amp;utm_campaign=%E7%99%BE%E5%BA%A6%E5%93%81%E4%B8%93">七牛官网</a></p><p>注册并登录</p><p>点击控制台-&gt;资源管理下的存储空间-&gt;新建存储空间(填写信息后确认创建)</p><p>我们上传成功之后,只需复制外链使用即可</p><p>文档:文档中心-&gt;SDK&amp;工具-&gt;官方SDK-&gt;Node.js 服务器</p><p>安装依赖: <code>npm i qiniu -D</code></p><p>在server文件夹下新建qiniu文件夹,并在其中新建upload.js、index.js文件</p><p>upload.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入qiniu</span><span class="token keyword">const</span> qiniu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'qiniu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//个人中心-&gt;秘钥管理</span><span class="token keyword">var</span> accessKey <span class="token operator">=</span> <span class="token string">'your access key'</span><span class="token punctuation">;</span><span class="token keyword">var</span> secretKey <span class="token operator">=</span> <span class="token string">'your secret key'</span><span class="token comment">//定义鉴权对象</span><span class="token keyword">var</span> mac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>digest<span class="token punctuation">.</span>Mac</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义配置对象</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储区域   z0 -- 华东  z1 -- 华北  z2 -- 华南</span>config<span class="token punctuation">.</span>zone <span class="token operator">=</span> qiniu<span class="token punctuation">.</span>zone<span class="token punctuation">.</span>Zone_z2<span class="token punctuation">;</span><span class="token comment">//bucketManager对象上就有所有方法</span><span class="token keyword">var</span> bucketManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>BucketManager</span><span class="token punctuation">(</span>mac<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">resUrl<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">/*    resUrl  网络资源地址    bucket  存储空间名称     */</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        bucketManager<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>resUrl<span class="token punctuation">,</span> bucket<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> respBody<span class="token punctuation">,</span> respInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//throw err;</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'上传图片方法出了问题'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>respInfo<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件上传成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*将数据库中的图片上传到七牛 */</span><span class="token comment">//模型对象</span><span class="token keyword">const</span> Theaters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../model/Theaters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上传图片到七牛方法</span><span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成唯一的key值</span><span class="token keyword">const</span> nanoid <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'nanoid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">/*    1.获取数据库中的图片链接    2.上传到七牛    3.保存key值到数据库中     */</span>    <span class="token comment">//去数据库中所有没有上传图片的文档对象</span>    <span class="token comment">//const movies = await Theaters.find({posterKey: {$in: ['', null, {$exists: false}]}})</span>    <span class="token keyword">const</span> movies <span class="token operator">=</span> <span class="token keyword">await</span> Theaters<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        $or<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>posterKey<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>posterKey<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>posterKey<span class="token operator">:</span> <span class="token punctuation">{</span>$exists<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//遍历每一条数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> movies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取每一个文档对象</span>        <span class="token keyword">let</span> movie <span class="token operator">=</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//上传到七牛中</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> movie<span class="token punctuation">.</span>image<span class="token punctuation">;</span>        <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">nanoid</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.jpg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">upload</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存key值到数据库中</span>        movie<span class="token punctuation">.</span>posterKey <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">await</span> movie<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改server文件夹下的index.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> theatersCrawler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./crawler/theatersCrawler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> saveTheaters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./save/saveTheaters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> uploadToQiniu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./qiniu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//连接数据库</span>    <span class="token keyword">await</span> db<span class="token punctuation">;</span>    <span class="token comment">//爬取数据</span>    <span class="token comment">//const data = await theatersCrawler();</span>    <span class="token comment">//将爬取的数据保存到数据库中</span>    <span class="token comment">//await saveTheaters(data);</span>    <span class="token comment">//上传图片到七牛中</span>    <span class="token keyword">await</span> <span class="token function">uploadToQiniu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行server文件夹下的index.js文件</p><p>nanoid库:生成唯一key值<br>下载: <code>npm i nanoid -D</code></p><p>修改reply.js回复热门下面的picUrl为:</p><p>picUrl: <code>http://r6v3vcdm2.hn-bkt.clouddn.com/${item.posterKey}</code>,</p><h3 id="爬取预告片电影数据"><a href="#爬取预告片电影数据" class="headerlink" title="爬取预告片电影数据"></a>爬取预告片电影数据</h3><p>跟之前爬取热门电影一样,我们先在server文件夹下的crawler文件夹下新建trailersCrawler.js文件用来爬取预告片电影数据</p><p>trailersCrawler.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span><span class="token comment">//爬取热门电影信息</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/coming'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//1.打开浏览器</span>    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment">// args: ['--no-sandbox'],</span>        headless<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">//以无头浏览器形式打开浏览器,没有界面显示,在后台运行的8</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.创建tab标签页</span>    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.跳转到指定网址</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>        waitUntil<span class="token operator">:</span> <span class="token string">'networkidle2'</span> <span class="token comment">//等待网络空闲时再跳转加载页面</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.等待网址加载完成,开始爬取数据</span>    <span class="token comment">//开启延时器,延时2秒钟开始爬取数据</span>    <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//一、爬取所有预告片详情页面网址</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//对加载好的页面进行dom操作</span>        <span class="token comment">//所有爬取的数据数组</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//获取所有即将上映电影</span>        <span class="token keyword">const</span> $trs <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.coming_list&gt;tbody&gt;tr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> $trs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> trDom <span class="token operator">=</span> $trs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//获取想看的人数</span>            <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>trDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断num大小</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//想看人数大于1000才叫好</span>                <span class="token comment">//电影详情页面</span>                <span class="token keyword">let</span> href <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>trDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//将爬取的数据返回出去</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//console.log(result);</span>    <span class="token comment">//所有电影数据的数组</span>    <span class="token keyword">let</span> moviesData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//二、爬取主要的数据</span>    <span class="token comment">//遍历爬取到的数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取电影详情网址</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//跳转到电影详情页</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>            waitUntil<span class="token operator">:</span> <span class="token string">'networkidle2'</span> <span class="token comment">//等待网络空闲时再跳转加载页面</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//爬取其他数据</span>        <span class="token keyword">let</span> itemResult <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//预告片电影网址</span>            <span class="token keyword">const</span> href <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.related-pic-video'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>href<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//标题</span>            <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[property="v:itemreviewed"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//导演</span>            <span class="token keyword">let</span> directors <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="v:directedBy"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//海报图</span>            <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="v:image"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//豆瓣id</span>            <span class="token keyword">let</span> doubanId <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.lnk-sharing'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'share-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//演员</span>            <span class="token keyword">let</span> casts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> $star <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="v:starring"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> length <span class="token operator">=</span> $star<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> $star<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                casts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>$star<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//类型</span>            <span class="token keyword">let</span> genre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> $genre <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[property="v:genre"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> $genre<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                genre<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>$genre<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//简介</span>            <span class="token keyword">const</span> summary <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[property="v:summary"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//上映日期</span>            <span class="token keyword">const</span> releaseDate <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[property="v:initialReleaseDate"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>            <span class="token comment">//片长</span>            <span class="token keyword">const</span> runTime <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[property="v:runtime"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//封面图片</span>            <span class="token keyword">const</span> cover <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.related-pic-video'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//给单个对象添加3个属性</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                title<span class="token punctuation">,</span>                directors<span class="token punctuation">,</span>                casts<span class="token punctuation">,</span>                genre<span class="token punctuation">,</span>                image<span class="token punctuation">,</span>                summary<span class="token punctuation">,</span>                releaseDate<span class="token punctuation">,</span>                doubanId<span class="token punctuation">,</span>                runTime<span class="token punctuation">,</span>                href<span class="token punctuation">,</span>                cover            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>itemResult<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            moviesData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>itemResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//console.log(moviesData);</span>    <span class="token comment">//三、爬取预告片电影链接</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> moviesData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> moviesData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> item<span class="token punctuation">.</span>href<span class="token punctuation">;</span>        <span class="token comment">//跳转到电影详情页</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>            waitUntil<span class="token operator">:</span> <span class="token string">'networkidle2'</span> <span class="token comment">//等待网络空闲时再跳转加载页面</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//爬取其他数据</span>        item<span class="token punctuation">.</span>link <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//电影链接</span>            <span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'video&gt;source'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moviesData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.关闭浏览器</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> moviesData<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改server文件夹下的index.js文件并运行测试是否爬取到数据</p><p>index.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> theatersCrawler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./crawler/theatersCrawler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> trailersCrawler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./crawler/trailersCrawler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> saveTheaters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./save/saveTheaters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> uploadToQiniu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./qiniu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//连接数据库</span>    <span class="token comment">//await db;</span>    <span class="token comment">//爬取数据</span>    <span class="token comment">//const data = await theatersCrawler();</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trailersCrawler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将爬取的数据保存到数据库中</span>    <span class="token comment">//await saveTheaters(data);</span>    <span class="token comment">//上传图片到七牛中</span>    <span class="token comment">//await uploadToQiniu();</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们同样在server文件夹下的save文件夹下新建saveTrailers.js用来将爬取到的数据保存到数据库</p><p>saveTrailers.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Trailers</span><span class="token keyword">const</span> Trailers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../model/Trailers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> Trailers<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token operator">:</span> item<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            runtime<span class="token operator">:</span> item<span class="token punctuation">.</span>runtime<span class="token punctuation">,</span>            directors<span class="token operator">:</span> item<span class="token punctuation">.</span>directors<span class="token punctuation">,</span>            casts<span class="token operator">:</span> item<span class="token punctuation">.</span>casts<span class="token punctuation">,</span>            image<span class="token operator">:</span> item<span class="token punctuation">.</span>image<span class="token punctuation">,</span>            doubanId<span class="token operator">:</span> item<span class="token punctuation">.</span>doubanId<span class="token punctuation">,</span>            cover<span class="token operator">:</span> item<span class="token punctuation">.</span>cover<span class="token punctuation">,</span>            genre<span class="token operator">:</span> item<span class="token punctuation">.</span>genre<span class="token punctuation">,</span>            summary<span class="token operator">:</span> item<span class="token punctuation">.</span>summary<span class="token punctuation">,</span>            releaseDate<span class="token operator">:</span> item<span class="token punctuation">.</span>releaseDate<span class="token punctuation">,</span>            link<span class="token operator">:</span> item<span class="token punctuation">.</span>link<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据保存成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Trailers.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入mongoose</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Schema</span><span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token comment">//创建约束对象</span><span class="token keyword">const</span> trailersSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token operator">:</span> String<span class="token punctuation">,</span>    runtime<span class="token operator">:</span> String<span class="token punctuation">,</span>    directors<span class="token operator">:</span> String<span class="token punctuation">,</span>    casts<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span>    image<span class="token operator">:</span> String<span class="token punctuation">,</span>    doubanId<span class="token operator">:</span> <span class="token punctuation">{</span>        type<span class="token operator">:</span> Number<span class="token punctuation">,</span>        unique<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    genre<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span>    cover<span class="token operator">:</span> String<span class="token punctuation">,</span>    summary<span class="token operator">:</span> String<span class="token punctuation">,</span>    releaseDate<span class="token operator">:</span> String<span class="token punctuation">,</span>    link<span class="token operator">:</span>String<span class="token punctuation">,</span>    posterKey<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token comment">//图片上传到七牛中返回的key值</span>    coverKey<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token comment">//视频封面图</span>    videoKey<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token comment">//预告片</span>    createTime<span class="token operator">:</span> <span class="token punctuation">{</span>        type<span class="token operator">:</span> Date<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//创建模型对象</span><span class="token keyword">const</span> Trailers <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Trailers'</span><span class="token punctuation">,</span> trailersSchema<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//暴露出去</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Trailers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改server文件夹下的index.js文件并运行测试保存数据是否成功</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> theatersCrawler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./crawler/theatersCrawler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> trailersCrawler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./crawler/trailersCrawler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> saveTheaters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./save/saveTheaters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> saveTrailers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./save/saveTrailers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> uploadToQiniu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./qiniu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//连接数据库</span>    <span class="token keyword">await</span> db<span class="token punctuation">;</span>    <span class="token comment">//爬取数据</span>    <span class="token comment">//const data = await theatersCrawler();</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trailersCrawler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将爬取的数据保存到数据库中</span>    <span class="token comment">//await saveTheaters(data);</span>    <span class="token keyword">await</span> <span class="token function">saveTrailers</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//上传图片到七牛中</span>    <span class="token comment">//await uploadToQiniu();</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开数据库即可查看</p><h3 id="重新定义上传七牛的方法"><a href="#重新定义上传七牛的方法" class="headerlink" title="重新定义上传七牛的方法"></a>重新定义上传七牛的方法</h3><p>修改server文件夹下的qiniu文件夹下的index.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*将数据库中的图片上传到七牛 */</span><span class="token comment">//上传图片到七牛方法</span><span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成唯一的key值</span><span class="token keyword">const</span> <span class="token punctuation">{</span>nanoid<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'nanoid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> Model</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">/*    1.获取数据库中的图片链接    2.上传到七牛    3.保存key值到数据库中     */</span>    <span class="token comment">//去数据库中所有没有上传图片的文档对象</span>    <span class="token comment">//const movies = await Model.find({posterKey: {$in: ['', null, {$exists: false}]}})</span>    <span class="token keyword">const</span> movies <span class="token operator">=</span> <span class="token keyword">await</span> Model<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        $or<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>$exists<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//遍历每一条数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> movies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取每一个文档对象</span>        <span class="token keyword">let</span> movie <span class="token operator">=</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//初始化</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> movie<span class="token punctuation">.</span>image<span class="token punctuation">;</span>        <span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token string">'.jpg'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'coverKey'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            url <span class="token operator">=</span> movie<span class="token punctuation">.</span>cover<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'videoKey'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            url <span class="token operator">=</span> movie<span class="token punctuation">.</span>link<span class="token punctuation">;</span>            filename <span class="token operator">=</span> <span class="token string">'.mp4'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//文件名</span>        filename <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">nanoid</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token comment">//上传到七牛中</span>        <span class="token keyword">await</span> <span class="token function">upload</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存key值到数据库中</span>        movie<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> filename<span class="token punctuation">;</span>        <span class="token keyword">await</span> movie<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改server文件夹下的index.js文件并运行测试上传七牛是否成功</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> theatersCrawler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./crawler/theatersCrawler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> trailersCrawler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./crawler/trailersCrawler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> saveTheaters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./save/saveTheaters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> saveTrailers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./save/saveTrailers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> uploadToQiniu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./qiniu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Theaters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/Theaters'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Trailers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/Trailers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//连接数据库</span>    <span class="token keyword">await</span> db<span class="token punctuation">;</span>    <span class="token comment">//爬取数据</span>    <span class="token comment">//const data = await theatersCrawler();</span>    <span class="token comment">//const data = await trailersCrawler();</span>    <span class="token comment">//将爬取的数据保存到数据库中</span>    <span class="token comment">//await saveTheaters(data);</span>    <span class="token comment">//await saveTrailers(data);</span>    <span class="token comment">//上传图片到七牛中</span>    <span class="token comment">//await uploadToQiniu('posterKey', Theaters);</span>    <span class="token keyword">await</span> <span class="token function">uploadToQiniu</span><span class="token punctuation">(</span><span class="token string">'coverKey'</span><span class="token punctuation">,</span> Trailers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">uploadToQiniu</span><span class="token punctuation">(</span><span class="token string">'posterKey'</span><span class="token punctuation">,</span> Trailers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">uploadToQiniu</span><span class="token punctuation">(</span><span class="token string">'videoKey'</span><span class="token punctuation">,</span> Trailers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搭建预告片静态页面"><a href="#搭建预告片静态页面" class="headerlink" title="搭建预告片静态页面"></a>搭建预告片静态页面</h3><p>可自行搭建movie.html</p><h3 id="搭建预告片ejs页面"><a href="#搭建预告片ejs页面" class="headerlink" title="搭建预告片ejs页面"></a>搭建预告片ejs页面</h3><p>在router文件夹的index.js中添加电影预告片路由</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> Trailers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/Trailers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//预告片页面路由</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/movie'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//去数据库中找到所有预告片电影数据</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> Trailers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>_id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> __v<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>cover<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>link<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>image<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//渲染到页面上</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'movie'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改movie.html为movie.ejs,同之前的search.ejs修改即可</p><h3 id="预告片视频功能"><a href="#预告片视频功能" class="headerlink" title="预告片视频功能"></a>预告片视频功能</h3><p>可以使用一个叫DPlayer的库,可以去<a href="https://github.com/DIYgod/DPlayer">github</a>查看一下<br><a href="http://dplayer.js.org/guide.html#quick-start">文档</a></p><p><a href="https://www.bootcdn.cn/dplayer/">bootcdn地址</a></p><h3 id="获取media-id"><a href="#获取media-id" class="headerlink" title="获取media-id"></a>获取media-id</h3><p>我们在项目下新建media文件夹来存放素材</p><p>在utils文件夹中的api.js新增接口</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">temporary<span class="token operator">:</span> <span class="token punctuation">{</span>    upload<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">media/upload?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    get<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">media/get?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>permanent<span class="token operator">:</span> <span class="token punctuation">{</span>    uploadNews<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">material/add_news?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    uploadImg<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">media/uploadimg?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    uploadOthers<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">material/add_material?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    get<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">material/get_material?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="上传临时素材"><a href="#上传临时素材" class="headerlink" title="上传临时素材"></a>上传临时素材</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Asset_Management/New_temporary_materials.html">官方文档</a></p><p>我们在wechat.js添加方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//fs模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>createReadStream<span class="token punctuation">}</span><span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//path 模块</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span><span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上传临时素材</span><span class="token function">uploadTemporaryMaterial</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取文件绝对路径</span>    <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../media'</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//获取access_token</span>            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//定义请求地址</span>            <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>temporary<span class="token punctuation">.</span>upload<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token punctuation">{</span>                media<span class="token operator">:</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment">//form表单方式发送请求</span>            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> formData<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将数据返回给用户</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'uploadTemporaryMaterial方法出了问题'</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取临时素材"><a href="#获取临时素材" class="headerlink" title="获取临时素材"></a>获取临时素材</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Asset_Management/Get_temporary_materials.html">官方文档</a></p><p>wechat.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//以流的方式接收</span><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fs模块 增加可写流</span><span class="token keyword">const</span> <span class="token punctuation">{</span>createReadStream<span class="token punctuation">,</span>createWriteStream<span class="token punctuation">}</span><span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取临时素材</span><span class="token function">getTemporaryMaterial</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> mediaId<span class="token punctuation">,</span> fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取文件绝对路径</span>    <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../media'</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//获取access_token</span>            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//定义请求地址</span>            <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>temporary<span class="token punctuation">.</span>get<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;media_id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mediaId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token comment">//判断是否为视频文件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'video'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//视频文件只支持http协议</span>                url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">,</span> <span class="token string">'http://'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//发送请求</span>                <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//其他类型</span>                <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span> <span class="token comment">//当文件读取完毕时 可读流自动关闭 一旦关闭触发close事件 从而调用resolve方法通知外部文件读取完毕</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'getTemporaryMaterial方法出了问题'</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="上传永久素材"><a href="#上传永久素材" class="headerlink" title="上传永久素材"></a>上传永久素材</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Asset_Management/Adding_Permanent_Assets.html">官方文档</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//path 模块 添加join方法</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">,</span>join<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上传永久素材</span><span class="token function">uploadPermanentMaterial</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> material<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//获取access_token</span>            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//请求的配置对象</span>            <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>                method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>                json<span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>            <span class="token comment">//定义请求地址</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'news'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//上传图文消息</span>                options<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>permanent<span class="token punctuation">.</span>uploadNews<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                options<span class="token punctuation">.</span>body <span class="token operator">=</span> material<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'pic'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//上传图片</span>                options<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>permanent<span class="token punctuation">.</span>uploadImg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                options<span class="token punctuation">.</span>formData <span class="token operator">=</span> <span class="token punctuation">{</span>                    media<span class="token operator">:</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../media'</span><span class="token punctuation">,</span> material<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//其他媒体素材</span>                options<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>permanent<span class="token punctuation">.</span>uploadOthers<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;type=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                options<span class="token punctuation">.</span>formData <span class="token operator">=</span> <span class="token punctuation">{</span>                    media<span class="token operator">:</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../media'</span><span class="token punctuation">,</span> material<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token comment">//视频素材</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'video'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    options<span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//发送请求</span>            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rp</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将返回值返回出去</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'uploadPermanentMaterial方法出了问题'</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取永久素材"><a href="#获取永久素材" class="headerlink" title="获取永久素材"></a>获取永久素材</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Asset_Management/Getting_Permanent_Assets.html">官方文档</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//获取永久素材</span><span class="token function">getPermanentMaterial</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> mediaId<span class="token punctuation">,</span> fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//获取access_token</span>            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//定义请求地址</span>            <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>permanent<span class="token punctuation">.</span>get<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>body<span class="token operator">:</span><span class="token punctuation">{</span>media_id<span class="token operator">:</span>mediaId<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'video'</span><span class="token operator">||</span><span class="token string">'news'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//发送请求</span>                <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rp</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>__filename<span class="token punctuation">,</span><span class="token string">'../media'</span><span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'getPermanentMaterial方法出了问题'</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="封装上传素材函数"><a href="#封装上传素材函数" class="headerlink" title="封装上传素材函数"></a>封装上传素材函数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//上传素材</span><span class="token function">uploadMaterial</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> material<span class="token punctuation">,</span> body<span class="token punctuation">,</span> isPermanent <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//获取access_token</span>            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//请求的配置对象</span>            <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>                method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>                json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                formData <span class="token operator">:</span> <span class="token punctuation">{</span>                    media<span class="token operator">:</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../media'</span><span class="token punctuation">,</span> material<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPermanent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//永久素材</span>                <span class="token comment">//定义请求地址</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'news'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//上传图文消息</span>                    options<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>permanent<span class="token punctuation">.</span>uploadNews<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                    options<span class="token punctuation">.</span>body <span class="token operator">=</span> material<span class="token punctuation">;</span>                    options<span class="token punctuation">.</span>formData <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'pic'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//上传图片</span>                    options<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>permanent<span class="token punctuation">.</span>uploadImg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//其他媒体素材</span>                    options<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>permanent<span class="token punctuation">.</span>uploadOthers<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;type=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                    <span class="token comment">//视频素材</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'video'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        options<span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment">//临时素材</span>                <span class="token comment">//定义请求地址</span>                options<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>api<span class="token punctuation">.</span>temporary<span class="token punctuation">.</span>upload<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//发送请求</span>            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rp</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将返回值返回出去</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'uploadPermanentMaterial方法出了问题'</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模</title>
      <link href="/liaojie.github.io/2022/01/21/shu-xue-jian-mo/"/>
      <url>/liaojie.github.io/2022/01/21/shu-xue-jian-mo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/liaojie.github.io/2022/01/20/html/"/>
      <url>/liaojie.github.io/2022/01/20/html/</url>
      
        <content type="html"><![CDATA[<h1 id="认识Web"><a href="#认识Web" class="headerlink" title="认识Web"></a>认识Web</h1><h2 id="1-网页"><a href="#1-网页" class="headerlink" title="1 网页"></a>1 网页</h2><p>网页主要由文字、图像和超链接等元素构成。当然,除了这些元素,网页中还可以包含音频、视频以及Flash等。</p><p>那么网页是如何形成的呢？</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/web.png"></p><h2 id="2-浏览器"><a href="#2-浏览器" class="headerlink" title="2 浏览器"></a>2 浏览器</h2><blockquote><p>浏览器是网页显示、运行的平台,常用的浏览器有IE、火狐(Firefox)、谷歌(Chrome)、Safari和Opera等。我们平时称为五大浏览器。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/b.png"></p><h5 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h5><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td><td>IE、猎豹安全、360极速浏览器、百度浏览器</td></tr><tr><td>firefox</td><td>Gecko</td><td>可惜这几年已经没落了,打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td></tr><tr><td>Safari</td><td>webkit</td><td>现在很多人错误地把 webkit 叫做 chrome内核(即使 chrome内核已经是 blink 了)。苹果感觉像被别人抢了媳妇,都哭晕再厕所里面了。</td></tr><tr><td>chrome</td><td>Chromium/Blink</td><td>在 Chromium 项目中研发 Blink 渲染引擎(即浏览器核心),内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td></tr><tr><td>Opera</td><td>blink</td><td>现在跟随chrome用blink内核。</td></tr></tbody></table><h2 id="3-Web标准-重点"><a href="#3-Web标准-重点" class="headerlink" title="3 Web标准(重点)"></a>3 Web标准(重点)</h2><p>目标</p><ul><li>记忆<ul><li>能说出网页 中 web 标准三层组成</li></ul></li><li>理解<ul><li>能结合人来表述web标准三层</li></ul></li></ul><p>Web标准不是某一个标准,而是由W3C组织和其他标准化组织制定的一系列标准的集合。</p><p>W3C 万维网联盟是国际最著名的标准化组织。1994年成立后,至今已发布近百项相关万维网的标准,对万维网发展做出了杰出的贡献。</p><h3 id="3-1-Web-标准的好处"><a href="#3-1-Web-标准的好处" class="headerlink" title="3.1 Web 标准的好处"></a>3.1 Web 标准的好处</h3><p>遵循web标准可以让不同我们写的页面更标准更统一外,还有许多优点</p><p><em>1</em>、让Web的发展前景更广阔<br><em>2</em>、内容能被更广泛的设备访问<br><em>3</em>、更容易被搜寻引擎搜索<br><em>4</em>、降低网站流量费用<br><em>5</em>、使网站更易于维护<br><em>6</em>、提高页面浏览速度</p><h3 id="3-2-Web-标准构成"><a href="#3-2-Web-标准构成" class="headerlink" title="3.2 Web 标准构成"></a>3.2 Web 标准构成</h3><p><strong>构成：</strong> 主要包括结构(Structure)、表现(Presentation)和行为(Behavior)三个方面。</p><table><thead><tr><th align="left">标准</th><th align="left">说明</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">结构</td><td align="left">结构用于对<strong>网页元素</strong>进行整理和分类,咱们主要学的是HTML。</td><td align="left"><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/htmll.jpg"></td></tr><tr><td align="left">表现</td><td align="left">表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>,主要指的是CSS</td><td align="left"><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/css.jpg"></td></tr><tr><td align="left">行为</td><td align="left">行为是指网页模型的定义及<strong>交互</strong>的编写,咱们主要学的是 Javascript</td><td align="left"><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/search.gif"></td></tr></tbody></table><p> 理想状态我们的源码： .HTML .css .js </p><h5 id="web标准小结"><a href="#web标准小结" class="headerlink" title="web标准小结"></a>web标准小结</h5><ul><li>web标准有三层结构,分别是结构(html)、表现(css)和行为(javascript)  </li><li>结构类似人的身体, 表现类似人的着装, 行为类似人的行为动作</li><li>理想状态下,他们三层都是独立的, 放到不同的文件里面</li></ul><h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><h2 id="1-HTML标签"><a href="#1-HTML标签" class="headerlink" title="1 HTML标签"></a>1 HTML标签</h2><h3 id="1-1-HTML语法规范"><a href="#1-1-HTML语法规范" class="headerlink" title="1.1 HTML语法规范"></a>1.1 HTML语法规范</h3><ul><li>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)是用来描述网页的一种语言。</li><li>HTML 不是一种编程语言,而是一种标记语言 (markup language)</li><li>标记语言是一套标记标签 (markup tag)</li></ul><blockquote><p>网页是由网页元素组成的 , 这些元素是利用html标签描述出来,然后通过浏览器解析,就可以显示给用户了。</p></blockquote><p><strong>所谓超文本,有2层含义：</strong> </p><ol><li>因为它可以加入图片、声音、动画、多媒体等内容(<strong>超越文本限制</strong>)</li><li>不仅如此,它还可以从一个文件跳转到另一个文件,与世界各地主机的文件连接(<strong>超级链接文本</strong>)。</li></ol><p>HTML 骨架格式：(要遵循,要专业) 要求务必非常流畅的默写下来。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="html骨架标签总结"><a href="#html骨架标签总结" class="headerlink" title="html骨架标签总结"></a>html骨架标签总结</h5><table><thead><tr><th>标签名</th><th align="center">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><code>&lt;html&gt;&lt;/html&gt;</code></td><td align="center">HTML标签</td><td align="left">页面中最大的标签,我们成为  根标签</td></tr><tr><td><code>&lt;head&gt;&lt;/head&gt;</code></td><td align="center">文档的头部</td><td align="left">注意在head标签中我们必须要设置的标签是title</td></tr><tr><td><code>&lt;title&gt;&lt;/title&gt;</code></td><td align="center">文档的标题</td><td align="left">让页面拥有一个属于自己的网页标题</td></tr><tr><td><code>&lt;body&gt;&lt;/body&gt;</code></td><td align="center">文档的主体</td><td align="left">元素包含文档的所有内容,页面内容 基本都是放到body里面的</td></tr></tbody></table><blockquote><p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p></blockquote><h3 id="1-2-HTML元素标签分类"><a href="#1-2-HTML元素标签分类" class="headerlink" title="1.2 HTML元素标签分类"></a>1.2 HTML元素标签分类</h3><p><strong>标签：</strong></p><p>在HTML页面中,带有”&lt; &gt;”符号的元素被称为HTML标签,如上面提到的 &lt;html&gt;、&lt;head&gt;、&lt;body&gt;都是HTML骨架结构标签。</p><p><strong>分类：</strong></p><p>1.常规元素(双标签)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span><span class="token punctuation">&gt;</span></span> 内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">&gt;</span></span>   比如 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  我是文字  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>该语法中”&lt;标签名&gt;”表示该标签的作用开始,一般称为”开始标签(start tag)”,”&lt;/标签名&gt;” 表示该标签的作用结束,一般称为”结束标签(end tag)”。</li><li>和开始标签相比,结束标签只是在前面加了一个关闭符”/“。</li><li>我们以后接触的基本都是双标签</li></ul><p>2.空元素(单标签)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span> <span class="token punctuation">/&gt;</span></span>  比如  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>空元素 用单标签来表示, 简单点说,就是里面不需要包含内容, 只有一个开始标签不需要关闭。</li><li>这种单身狗标签非常少,一共没多少,我们多记忆就好</li></ul><h3 id="1-3-HTML标签关系"><a href="#1-3-HTML标签关系" class="headerlink" title="1.3 HTML标签关系"></a>1.3 HTML标签关系</h3><p>主要针对于<strong>双标签</strong> 的相互关系分为两种：  </p><p>1.嵌套关系</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.并列关系</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-4-代码开发工具"><a href="#1-4-代码开发工具" class="headerlink" title="1.4 代码开发工具"></a>1.4 代码开发工具</h3><ul><li>为了提高我们的开发效率</li><li>减少代码的出错我们不提倡用记事本开发</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/s.png"></p><ul><li>Dreamweaver</li><li>SublimeText</li><li>WebStorm</li><li>HBuilder</li><li>VScode</li></ul><p>推荐使用VScode</p><p>新建文件(Ctrl+N)后,保存(Ctrl+S)为.html为后缀名的文件(网页文件)</p><p>生成html骨架:输入一个<code>!</code>号,按下Tab键</p><p>利用插件在浏览器中预览页面:单击鼠标右键,在弹出的窗口中选择”Open In Default Browser”</p><h5 id="VScode插件推荐"><a href="#VScode插件推荐" class="headerlink" title="VScode插件推荐"></a>VScode插件推荐</h5><ul><li>open in browser</li><li>Chinese(simplified)</li><li>CSS Peek</li><li>Auto Rename Tag</li><li>JS-CSS-HTML Formatter</li></ul><p>点击拓展安装:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%89%A9%E5%B1%95.png"></p><p>在里面搜索想要安装的插件,点击<code>install</code>,安装后记得重启VScode</p><h3 id="1-5-文档类型-lt-DOCTYPE-gt"><a href="#1-5-文档类型-lt-DOCTYPE-gt" class="headerlink" title="1.5 文档类型<!DOCTYPE>"></a>1.5 文档类型&lt;!DOCTYPE&gt;</h3><p><strong>用法：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>作用：</strong></p><p><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面的位置,处于 <code>&lt;html&gt;</code> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。</p><p>   <code>&lt;!DOCTYPE html&gt;</code>  就是告诉浏览器按照HTML5 规范解析页面.</p><blockquote><pre class="line-numbers language-none"><code class="language-none">HTML文件必须加上 DOCTYPE 声明,并统一使用 HTML5 的文档声明<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="1-6-页面语言lang"><a href="#1-6-页面语言lang" class="headerlink" title="1.6 页面语言lang"></a>1.6 页面语言lang</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  指定html 语言种类<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最常见的2个：</p><ol><li><code>en</code>定义语言为英语</li><li><code>zh-CN</code>定义语言为中文</li></ol><blockquote><p><code>&lt;html lang="zh-CN"&gt;</code>  指定该html标签 内容 所用的语言为中文<br>考虑浏览器和操作系统的兼容性,目前仍然使用 zh-CN 属性值</p></blockquote><p>简单来说,可能对于程序来说没有太大的作用,但是它可以告诉浏览器,搜索引擎,一些处理Html的程序对页面语言内容来做一些对应的处理或者事情。<br>比如可以</p><ul><li>根据根据lang属性来设定不同语言的css样式,或者字体</li><li>告诉搜索引擎做精确的识别</li><li>让语法检查程序做语言识别</li><li>帮助翻译工具做识别</li><li>帮助网页阅读程序做识别<br>等等</li></ul><h3 id="1-7-字符集"><a href="#1-7-字符集" class="headerlink" title="1.7 字符集"></a>1.7 字符集</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">字符集(Character set)是多个字符的集合。计算机要准确的处理各种字符集文字,需要进行字符编码,以便计算机能够识别和存储各种文字。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>utf-8是目前最常用的字符集编码方式,常用的字符集编码方式还有gbk和gb2312。</p><ul><li>gb2312 简单中文  包括6763个汉字  GUO BIAO</li><li>BIG5   繁体中文 港澳台等用</li><li>GBK包含全部中文字符    是GB2312的扩展,加入对繁体字的支持,兼容GB2312</li><li>UTF-8则基本包含全世界所有国家需要用到的字符</li><li><strong>这句代码非常关键, 是必须要写的代码,否则可能引起乱码的情况。</strong></li></ul><blockquote><p>这句话是让 html 文件是以 UTF-8 编码保存的, 浏览器根据编码去解码对应的html内容。</p></blockquote><blockquote><pre class="line-numbers language-none"><code class="language-none">一般情况下统一使用 "UTF-8" 编码, 请尽量统一写成标准的 "UTF-8",不要写成 "utf-8" 或 "utf8" 或 "UTF8"。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="1-8-HTML常用标签"><a href="#1-8-HTML常用标签" class="headerlink" title="1.8 HTML常用标签"></a>1.8 HTML常用标签</h3><h4 id="1-8-1-排版标签"><a href="#1-8-1-排版标签" class="headerlink" title="1.8.1 排版标签"></a>1.8.1 排版标签</h4><p>排版标签主要和css搭配使用,显示网页结构的标签,是网页布局最常用的标签。</p><h5 id="1-标题标签h-熟记"><a href="#1-标题标签h-熟记" class="headerlink" title="1) 标题标签h (熟记)"></a>1) 标题标签h (熟记)</h5><p> 单词缩写：  head   头部. 标题       title  文档标题</p><p>为了使网页更具有语义化,我们经常会在页面中用到标题标签,HTML提供了6个等级的标题,即</p><p><strong>标题标签语义：</strong>  作为标题使用,并且依据重要性递减</p><p>其基本语法格式如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果如下：</p><p> <img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/h.png"></p><p><strong>小结 :</strong></p><ul><li>加了标题的文字会变的加粗,字号也会依次变大</li><li>一行是只能放一个标题的</li></ul><h5 id="2-段落标签p-熟记"><a href="#2-段落标签p-熟记" class="headerlink" title="2) 段落标签p (熟记)"></a>2) 段落标签p (熟记)</h5><p>单词缩写：  paragraph  段落</p><p><strong>作用语义：</strong></p><p>可以把 HTML 文档分割为若干段落</p><p> 在网页中要把文字有条理地显示出来,离不开段落标签,就如同我们平常写文章一样,整个网页也可以分为若干个段落,而段落的标签就是</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>  文本内容  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是HTML文档中最常见的标签,默认情况下,文本在一个段落中会根据浏览器窗口的大小自动换行。</p><h5 id="3-水平线标签hr-认识"><a href="#3-水平线标签hr-认识" class="headerlink" title="3) 水平线标签hr (认识)"></a>3) 水平线标签hr (认识)</h5><p>单词缩写：  horizontal  横线</p><p>在网页中常常看到一些水平线将段落与段落之间隔开,使得文档结构清晰,层次分明。这些水平线可以通过插入图片实现,也可以简单地通过标签来完成,<code>&lt;hr /&gt;</code>就是创建横跨网页水平线的标签。其基本语法格式如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span>是单标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在网页中显示默认样式的水平线。</p><h5 id="4-换行标签br-熟记"><a href="#4-换行标签br-熟记" class="headerlink" title="4)换行标签br (熟记)"></a>4)换行标签br (熟记)</h5><p>单词缩写：  break   打断 ,换行</p><p>在HTML中,一个段落中的文字会从左到右依次排列,直到浏览器窗口的右端,然后自动换行。如果希望某段文本强制换行显示,就需要使用换行标签</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5-div-和-span标签-重点"><a href="#5-div-和-span标签-重点" class="headerlink" title="5) div 和 span标签(重点)"></a>5) div 和 span标签(重点)</h5><p>div span 是没有语义的 是我们网页布局主要的2个盒子 想必你听过 css+div</p><p>div 就是 division 的缩写 分割,分区的意思  其实有很多div 来组合网页。</p><p>span 跨度,跨距;范围    </p><p>语法格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 这是头部 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>今日价格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>他们两个都是盒子,用来装我们网页元素的, 只不过他们有区别,现在我们主要记住使用方法和特点就好了</p><ul><li>div标签  用来布局的,但是现在一行只能放一个div</li><li>span标签  用来布局的,一行上可以放好多个span</li></ul><h5 id="排版标签总结"><a href="#排版标签总结" class="headerlink" title="排版标签总结"></a>排版标签总结</h5><table><thead><tr><th>标签名</th><th align="left">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><code>&lt;hx&gt;&lt;/hx&gt;</code></td><td align="left">标题标签</td><td align="left">作为标题使用,并且依据重要性递减</td></tr><tr><td><code>&lt;p&gt;&lt;/p&gt;</code></td><td align="left">段落标签</td><td align="left">可以把 HTML 文档分割为若干段落</td></tr><tr><td><code>&lt;hr /&gt;</code></td><td align="left">水平线标签</td><td align="left">没啥可说的,就是一条线</td></tr><tr><td><code>&lt;br /&gt;</code></td><td align="left">换行标签</td><td align="left"></td></tr><tr><td><code>&lt;div&gt;&lt;/div&gt;</code></td><td align="left">div标签</td><td align="left">用来布局的,但是现在一行只能放一个div</td></tr><tr><td><code>&lt;span&gt;&lt;/span&gt;</code></td><td align="left">span标签</td><td align="left">用来布局的,一行上可以放好多个span</td></tr></tbody></table><h4 id="1-8-2-文本格式化标签-熟记"><a href="#1-8-2-文本格式化标签-熟记" class="headerlink" title="1.8.2 文本格式化标签(熟记)"></a>1.8.2 文本格式化标签(熟记)</h4><p>在网页中,有时需要为文字设置粗体、斜体或下划线效果,这时就需要用到HTML中的文本格式化标签,使文字以特殊的方式显示。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/tab.png"></p><h4 id="1-8-3-标签属性"><a href="#1-8-3-标签属性" class="headerlink" title="1.8.3 标签属性"></a>1.8.3 标签属性</h4><p>使用HTML制作网页时,如果想让HTML标签提供更多的信息,可以使用HTML标签的属性加以设置。其基本语法格式如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span> <span class="token attr-name">属性1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值1<span class="token punctuation">"</span></span> <span class="token attr-name">属性2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值2<span class="token punctuation">"</span></span> <span class="token attr-name">…</span><span class="token punctuation">&gt;</span></span> 内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>手机</span> <span class="token attr-name">颜色</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>红色<span class="token punctuation">"</span></span> <span class="token attr-name">大小</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5寸<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>手机</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-8-4-图像标签img-重点"><a href="#1-8-4-图像标签img-重点" class="headerlink" title="1.8.4 图像标签img (重点)"></a>1.8.4 图像标签img (重点)</h4><p>单词缩写： image  图像</p><p>要想在网页中显示图像就需要使用图像标签,接下来将详细介绍图像标签<code>&lt;img /&gt;</code>以及和他相关的属性。</p><p>语法如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图像URL<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该语法中src属性用于指定图像文件的路径和文件名,他是img标签的必需属性。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/img.png"></p><p>border 后面我们会用css来做</p><p><strong>注意:</strong></p><ol><li>标签可以拥有多个属性,必须写在开始标签中,位于标签名后面。</li><li>属性之间不分先后顺序,标签名与属性、属性与属性之间均以空格分开。</li><li>采取  键值对 的格式   key=”value”  的格式  </li></ol><p>比如:  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html">正常的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cz.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>   带有边框的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cz.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>有提示文本的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cz.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这是个小蒲公英<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>有替换文本的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cz.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片不存在<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重点掌握点：</strong></p><ul><li><input disabled="" type="checkbox"> 请说出 图像标签那个属性是必须要写的？</li><li><input disabled="" type="checkbox"> 请说出 图像标签中 alt 和  title 属性区别？ </li></ul><h4 id="1-8-5-链接标签-重点"><a href="#1-8-5-链接标签-重点" class="headerlink" title="1.8.5 链接标签(重点)"></a>1.8.5 链接标签(重点)</h4><p>单词缩写：  anchor 的缩写</p><p>在HTML中创建超链接非常简单,只需用标签把文字包括起来就好。</p><p>语法格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文本或图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>href</td><td align="left">用于指定链接目标的url地址,(必须属性)当为标签应用href属性时,它就具有了超链接的功能</td></tr><tr><td>target</td><td align="left">用于指定链接页面的打开方式,其取值有_self和_blank两种,其中_self为默认值,__blank为在新窗口中打开方式。</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li>外部链接 需要添加 http:// <a href="http://www.baidu.com/">www.baidu.com</a></li><li>内部链接 直接链接内部页面名称即可 比如 <code>&lt; a href="index.html"&gt; 首页 &lt;/a &gt;</code></li><li>如果当时没有确定链接目标时,通常将链接标签的href属性值定义为”#”(即href=”#”),表示该链接暂时为一个空链接。</li><li>不仅可以创建文本超链接,在网页中各种网页元素,如图像、表格、音频、视频等都可以添加超链接。</li></ol><p><strong>重点掌握点：</strong></p><ul><li><input disabled="" type="checkbox"> 请说出 链接标签那个属性是必须要写的？  </li><li><input disabled="" type="checkbox"> 请说出 如何新窗口打开这个一个链接网页的？ </li></ul><h4 id="1-8-6-注释标签"><a href="#1-8-6-注释标签" class="headerlink" title="1.8.6 注释标签"></a>1.8.6 注释标签</h4><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字,就需要使用注释标签。</p><p>简单解释：</p><p>注释内容不会显示在浏览器窗口中,但是作为HTML文档内容的一部分,也会被下载到用户的计算机上,查看源代码时就可以看到。</p><p>语法格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 注释语句 --&gt;</span>     快捷键是：    ctrl + /       或者 ctrl +shift + / <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释重要性：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/zs.png"></p><blockquote><p>注释是给人看的,目的是为了更好的解释这部分代码是干啥的, 程序是不执行这个代码的</p></blockquote><p>一般用于简单的描述,如某些状态描述、属性描述等</p><p>注释内容前后各一个空格字符,注释位于要注释代码的上面,单独占一行</p><p><em>推荐：</em></p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- Comment Text --&gt;&lt;div&gt;...&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>不推荐：</em></p><pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;...&lt;/div&gt;&lt;!-- Comment Text --&gt;&lt;div&gt;&lt;!-- Comment Text --&gt;    ...&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-9-路径-重点、难点"><a href="#1-9-路径-重点、难点" class="headerlink" title="1.9 路径(重点、难点)"></a>1.9 路径(重点、难点)</h3><p>实际工作中,我们的文件不能随便乱放,否则用起来很难快速的找到他们,因此我们需要一个文件夹来管理他们。</p><p><strong>目录文件夹：</strong></p><p>就是普通文件夹,里面只不过存放了我们做页面所需要的 相关素材,比如 html文件, 图片 等等。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/g.png"></p><p><strong>根目录</strong>  </p><p>打开目录文件夹的第一层  就是 根目录 </p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/gg.png"></p><p>页面中的图片会非常多, 通常我们再新建一个文件夹专门用于存放图像文件(images),这时再插入图像,就需要采用”路径”的方式来指定图像文件的位置。路径可以分为： 相对路径和绝对路径</p><h5 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h5><p>以引用文件之网页所在位置为参考基础,而建立出的目录路径。因此,当保存于不同目录的网页引用同一个文件时,所使用的路径将不相同,故称之为相对路径。</p><table><thead><tr><th>路径分类</th><th align="center">符号</th><th align="left">说明</th></tr></thead><tbody><tr><td>同一级路径</td><td align="center"></td><td align="left">只需输入图像文件的名称即可,如&lt;img src=”baidu.gif” /&gt;。<img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/04%E8%B7%AF%E5%BE%84%E5%90%8C%E7%9B%AE%E5%BD%95.jpg"></td></tr><tr><td>下一级路径</td><td align="center">“/“</td><td align="left">图像文件位于HTML文件同级文件夹下(例如文件夹名称为：images)                         如&lt;img src=”images/baidu.gif” /&gt;。  <img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/05%E8%B7%AF%E5%BE%84%E4%B8%8D%E5%90%8C.jpg"></td></tr><tr><td>上一级路径</td><td align="center">“../“</td><td align="left">在文件名之前加入”../“ ,如果是上两级,则需要使用 “../ ../“,以此类推,                    如&lt;img src=”../baidu.gif” /&gt;。 <img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/06%E8%B7%AF%E5%BE%84%E4%B8%8D%E5%90%8C.jpg"></td></tr></tbody></table><blockquote><p>相对路径,是从代码所在的这个文件出发, 去寻找我们的目标文件的,而 我们所说的 上一级 下一级 同一级  简单说,就是 图片 位于 HTML 页面的位置</p></blockquote><h5 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h5><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对,意指当所有网页引用同一个文件时,所使用的路径都是一样的。</p><p>“D:\web\img\logo.gif”,或完整的网络地址,例如”<a href="http://www.baidu.cn/images/logo.gif&quot;%E3%80%82">http://www.baidu.cn/images/logo.gif"。</a></p><p><strong>注意：</strong></p><p>绝对路径用的较少,我们理解下就可以了。 但是要注意它的写法 特别是符号 \ 并不是相对路径的  /</p><h3 id="1-10-扩展阅读"><a href="#1-10-扩展阅读" class="headerlink" title="1.10 扩展阅读"></a>1.10 扩展阅读</h3><h4 id="1-10-1-锚点定位-难点"><a href="#1-10-1-锚点定位-难点" class="headerlink" title="1.10.1 锚点定位 (难点)"></a>1.10.1 锚点定位 (难点)</h4><p>通过创建锚点链接,用户能够快速定位到目标内容。</p><p>创建锚点链接分为两步：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">1. 使用相应的id名标注跳转目标的位置。 (找目标)  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>第2集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span> 2. 使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#id名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>链接文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>创建链接文本(被点击的) (拉关系)  我也有一个姓毕的姥爷..  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#two<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-10-2-base-标签"><a href="#1-10-2-base-标签" class="headerlink" title="1.10.2 base 标签"></a>1.10.2 base 标签</h4><p><strong>语法：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>总结：</strong></p><ol><li>base 可以设置整体链接的打开状态   </li><li>base 写到  <code>&lt;head&gt;  &lt;/head&gt;</code>  之间</li><li>把所有的连接 都默认添加 <code>target="_blank"</code></li></ol><h4 id="1-10-3-预格式化文本pre标签"><a href="#1-10-3-预格式化文本pre标签" class="headerlink" title="1.10.3 预格式化文本pre标签"></a>1.10.3 预格式化文本pre标签</h4><blockquote><p><code>&lt;pre&gt;</code> 标签可定义预格式化的文本。<br>被包围在 <code>&lt;pre&gt;</code> 标签 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>  此例演示如何使用 pre 标签  对空行和 空格  进行控制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>所谓的预格式化文本就是 ,按照我们预先写好的文字格式来显示页面, 保留空格和换行等。 </p></blockquote><p>有了这个标签,里面的文字,会按照我们书写的模式显示,不需要段落和换行标签了。但是,比较少用,因为不好整体控制。</p><h4 id="1-10-4-特殊字符-理解"><a href="#1-10-4-特殊字符-理解" class="headerlink" title="1.10.4 特殊字符 (理解)"></a>1.10.4 特殊字符 (理解)</h4><p> 一些特殊的符号,我们再html 里面很难或者 不方便直接 使用, 我们此时可以使用下面的替代代码。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/zifu.png"></p><p><strong>虽然有很多,但是我们平时用的比较较少, 大家重点记住 空格 大于号 小于号   就可以了,剩下的回来查阅。</strong></p><p><strong>总结：</strong></p><ol><li>是以<strong>运算符</strong><code>&amp;</code>开头,以<strong>分号运算符</strong><code>;</code>结尾。</li><li>他们不是标签,而是符号。</li><li>HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符,浏览器会将它们作为标签解析,若要正确显示,在 HTML 源代码中使用字符实体</li></ol><p> <em>推荐：</em></p><pre class="line-numbers language-none"><code class="language-none">&lt;a href="#"&gt;more &gt;&gt;&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <em>不推荐：</em></p><pre class="line-numbers language-none"><code class="language-none">&lt;a href="#"&gt;more &gt;&gt; &lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-10-5-什么是XHTML"><a href="#1-10-5-什么是XHTML" class="headerlink" title="1.10.5 什么是XHTML"></a>1.10.5 什么是XHTML</h4><p>XHTML 是更严格更纯净的 HTML 代码。</p><ul><li>XHTML 指<strong>可扩展超文本标签语言</strong>(EXtensible HyperText Markup Language)。</li><li>XHTML 的目标是取代 HTML。</li><li>XHTML 与 HTML 4.01 几乎是相同的。</li><li>XHTML 是更严格更纯净的 HTML 版本。</li><li>XHTML 是作为一种 XML 应用被重新定义的 HTML。</li><li>XHTML 是一个 W3C 标准。</li></ul><h4 id="1-10-6-HTML和-XHTML之间有什么区别"><a href="#1-10-6-HTML和-XHTML之间有什么区别" class="headerlink" title="1.10.6 HTML和 XHTML之间有什么区别?"></a>1.10.6 HTML和 XHTML之间有什么区别?</h4><ul><li>XHTML 指的是可扩展超文本标记语言</li><li>XHTML 与 HTML 4.01 几乎是相同的</li><li>XHTML 是更严格更纯净的 HTML 版本</li><li>XHTML 是以 XML 应用的方式定义的 HTML</li><li>XHTML 是 2001 年 1 月发布的 W3C 推荐标准</li><li>XHTML 得到所有主流浏览器的支持</li><li>XHTML 元素是以 XML 格式编写的 HTML 元素。XHTML是严格版本的HTML,例如它要求标签必须小写,标签必须被正确关闭,标签顺序必须正确排列,对于属性都必须使用双引号等。</li></ul><h1 id="表格-table"><a href="#表格-table" class="headerlink" title="表格(table)"></a>表格(table)</h1><h2 id="1-创建表格"><a href="#1-创建表格" class="headerlink" title="1 创建表格"></a>1 创建表格</h2><p>在HTML网页中,要想创建表格,就需要使用表格相关的标签。</p><p><strong>创建表格的基本语法：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要深刻体会表格、行、单元格他们的构成。</p><p>在上面的语法中包含基本的三对HTML标签,分别为 table、tr、td,他们是创建表格的基本标签,缺一不可,下面对他们进行具体地解释</p><ol><li>table用于定义一个表格标签。</li><li>tr标签 用于定义表格中的行,必须嵌套在 table标签中。</li><li>td 用于定义表格中的单元格,必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中。</li><li>字母 td 指表格数据(table data),即数据单元格的内容,现在我们明白,表格最合适的地方就是用来存储数据的。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/07table%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.jpg"></p><p><strong>总结：</strong></p><ul><li><p>表格的主要目的是用来显示特殊数据的</p></li><li><p>一个完整的表格有表格标签(table),行标签(tr),单元格标签(td)组成,没有列的标签</p></li><li><p><code>&lt;tr&gt;&lt;/tr&gt;</code>中只能嵌套<code>&lt;td&gt;&lt;/td&gt;</code> 类的单元格</p></li><li><p><code>&lt;td&gt;&lt;/td&gt;</code>标签,他就像一个容器,可以容纳所有的元素</p></li></ul><h2 id="2-表格属性"><a href="#2-表格属性" class="headerlink" title="2 表格属性"></a>2 表格属性</h2><p>表格有部分属性我们不常用,这里重点记住 cellspacing 、 cellpadding。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/tt.png"></p><p>我们经常有个说法,是三参为0,平时开发的我们这三个参数 border cellpadding cellspacing为 0</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/07table%E8%A1%A8%E6%A0%BC%E5%B1%9E%E6%80%A7.jpg"></p><p><strong>案例1：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E8%A1%A8%E6%A0%BC%E6%95%88%E6%9E%9C01.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>刘德华<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>55<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>郭富城<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>52<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>张学友<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>58<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>黎明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>刘晓庆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>63<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-表头单元格标签th"><a href="#3-表头单元格标签th" class="headerlink" title="3 表头单元格标签th"></a>3 表头单元格标签th</h2><ul><li>作用：<ul><li>一般表头单元格位于表格的第一行或第一列,并且文本加粗居中</li></ul></li><li>语法：<ul><li>只需用表头标签<code>&lt;th&gt;&lt;/th&gt;</code>替代相应的单元格标签<code>&lt;td&gt;&lt;/td&gt;</code>即可。 </li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/th.png"></p><p><strong>案例2：</strong></p><p>效果图</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/tht.png"></p><p>代码：</p><hr><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>电话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>小王<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>110<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>小明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>120<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>th 也是一个单元格 只不过和普通的 td单元格不一样,它会让自己里面的文字居中且加粗</p></blockquote><h2 id="4-表格标题caption"><a href="#4-表格标题caption" class="headerlink" title="4 表格标题caption"></a>4 表格标题caption</h2><p><strong>定义和用法</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span>我是表格标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>caption 元素定义<strong>表格标题</strong>,通常这个标题会被居中且显示于表格之上。</li><li>caption 标签必须紧随 table 标签之后。</li><li>这个标签只存在 表格里面才有意义。</li></ol><p><strong>案例3：</strong></p><p>根据要求完成以下案例：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/pa.png"></p><h2 id="5-合并单元格-难点"><a href="#5-合并单元格-难点" class="headerlink" title="5 合并单元格(难点)"></a>5 合并单元格(难点)</h2><p>合并单元格是我们比较常用的一个操作,但是不会合并的很复杂。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/he.jpg"></p><h3 id="5-1-合并单元格2种方式"><a href="#5-1-合并单元格2种方式" class="headerlink" title="5.1 合并单元格2种方式"></a>5.1 合并单元格2种方式</h3><ul><li>跨行合并：rowspan=”合并单元格的个数”      </li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/08table%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC.jpg"></p><h3 id="5-2-合并单元格顺序"><a href="#5-2-合并单元格顺序" class="headerlink" title="5.2 合并单元格顺序"></a>5.2 合并单元格顺序</h3><blockquote><p><strong>合并的顺序我们按照先上后下先左后右的顺序</strong></p></blockquote><h3 id="5-3-合并单元格三步曲"><a href="#5-3-合并单元格三步曲" class="headerlink" title="5.3 合并单元格三步曲"></a>5.3 合并单元格三步曲</h3><pre class="line-numbers language-none"><code class="language-none">1. 先确定是跨行还是跨列合并2. 根据先上后下先左后右的原则找到目标单元格然后写上合并方式还有要合并的单元格数量  比如 ： &lt;td colspan="3"&gt;   &lt;/td&gt;3. 删除多余的单元格 单元格      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-总结表格"><a href="#6-总结表格" class="headerlink" title="6 总结表格"></a>6 总结表格</h2><table><thead><tr><th>标签名</th><th align="left">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><code>&lt;table&gt;&lt;/table&gt;</code></td><td align="left">表格标签</td><td align="left">就是一个四方的盒子</td></tr><tr><td><code>&lt;tr&gt;&lt;/tr&gt;</code></td><td align="left">表格行标签</td><td align="left">行标签要再table标签内部才有意义</td></tr><tr><td><code>&lt;td&gt;&lt;/td&gt;</code></td><td align="left">单元格标签</td><td align="left">单元格标签是个容器级元素,可以放任何东西</td></tr><tr><td><code>&lt;th&gt;&lt;/th&gt;</code></td><td align="left">表头单元格标签</td><td align="left">它还是一个单元格,但是里面的文字会居中且加粗</td></tr><tr><td><code>&lt;caption&gt;&lt;/caption&gt;</code></td><td align="left">表格标题标签</td><td align="left">表格的标题,跟着表格一起走,和表格居中对齐</td></tr><tr><td>clospan 和 rowspan</td><td align="left">合并属性</td><td align="left">用来合并单元格的</td></tr></tbody></table><ol><li>表格提供了HTML 中定义表格式数据的方法。</li><li>表格中由行中的单元格组成。</li><li>表格中没有列元素,列的个数取决于行的单元格个数。</li><li>表格不要纠结于外观,那是CSS 的作用。</li><li>表格的学习要求：  能手写表格结构,并且能简单合并单元格。</li></ol><h5 id="表格划分结构-了解"><a href="#表格划分结构-了解" class="headerlink" title="表格划分结构(了解)"></a>表格划分结构(了解)</h5><pre class="line-numbers language-none"><code class="language-none">对于比较复杂的表格,表格的结构也就相对的复杂了,所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注, 这样更好的分清表格结构<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/thead.png"></p><p><strong>注意：</strong></p><ol><li><code>&lt;thead&gt;&lt;/thead&gt;</code>：用于定义表格的头部。用来放标题之类的东西。<code>&lt;thead&gt; 内部必须拥有 &lt;tr&gt; 标签！</code></li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>：用于定义表格的主体。放数据本体 。</li><li><code>&lt;tfoot&gt;&lt;/tfoot&gt;</code>放表格的脚注之类。</li><li>以上标签都是放到table标签中。</li></ol><h1 id="列表和表单"><a href="#列表和表单" class="headerlink" title="列表和表单"></a>列表和表单</h1><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1 列表"></a>1 列表</h2><h3 id="1-1-无序列表-ul-重点"><a href="#1-1-无序列表-ul-重点" class="headerlink" title="1.1 无序列表 ul (重点)"></a>1.1 无序列表 ul (重点)</h3><p>无序列表的各个列表项之间没有顺序级别之分,是并列的。其基本语法格式如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;,直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。2. &lt;li&gt;与&lt;/li&gt;之间相当于一个容器,可以容纳所有元素。3. 无序列表会带有自己样式属性,放下那个样式,一会让CSS来！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-有序列表-ol-了解"><a href="#1-2-有序列表-ol-了解" class="headerlink" title="1.2  有序列表 ol (了解)"></a>1.2  有序列表 ol (了解)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/gold.png"></p><p>有序列表即为有排列顺序的列表,其各个列表项按照一定的顺序排列定义,有序列表的基本语法格式如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  所有特性基本与ul 一致。  但是实际中比 无序列表 用的少很多。</p><h3 id="1-3-自定义列表-理解"><a href="#1-3-自定义列表-理解" class="headerlink" title="1.3 自定义列表(理解)"></a>1.3 自定义列表(理解)</h3><p>定义列表常用于对术语或名词进行解释和描述,定义列表的列表项前没有任何项目符号。其基本语法如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>名词1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>名词1解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>名词1解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>  ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>名词2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>名词2解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>名词2解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/09%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8.jpg"></p><h3 id="1-4-列表总结"><a href="#1-4-列表总结" class="headerlink" title="1.4 列表总结"></a>1.4 列表总结</h3><table><thead><tr><th>标签名</th><th align="center">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><code>&lt;ul&gt;&lt;/ul&gt;</code></td><td align="center"><strong>无序标签</strong></td><td align="left">里面只能包含li    没有顺序,我们以后布局中最常用的列表</td></tr><tr><td><code>&lt;ol&gt;&lt;/ol&gt;</code></td><td align="center">有序标签</td><td align="left">里面只能包含li    有顺序, 使用情况较少</td></tr><tr><td><code>&lt;dl&gt;&lt;/dl&gt;</code></td><td align="center">自定义列表</td><td align="left">里面有2个兄弟, dt 和 dd</td></tr></tbody></table><p>我们现在还没有学布局,现在只要保证2个点：</p><ol><li>学会什么时候用无序列表, 学会什么时候用自定义列表</li><li>无序列表和自定义列表代码怎么写？</li><li>具体的我们刚才看的布局,等我们学了css 在来全面布局。</li></ol><h2 id="2-表单标签-掌握"><a href="#2-表单标签-掌握" class="headerlink" title="2 表单标签(掌握)"></a>2 表单标签(掌握)</h2><p>目标：</p><ul><li>能写出最常用的注册类表单</li><li>能说出input表单常见属性</li></ul><p><strong>作用：</strong></p><p>表单目的是为了收集用户信息。</p><p>在我们网页中, 我们也需要跟用户进行交互,收集用户资料,此时也需要表单。</p><blockquote><p>在HTML中,一个完整的表单通常由表单控件(也称为表单元素)、提示信息和表单域3个部分构成。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/bd.png"></p><p><strong>表单控件：</strong></p><p>包含了具体的表单功能项,如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p><strong>提示信息：</strong></p><p>一个表单中通常还需要包含一些说明性的文字,提示用户进行填写和操作。</p><p><strong>表单域：</strong>  </p><p>他相当于一个容器,用来容纳所有的表单控件和提示信息,可以通过他定义处理表单数据所用程序的url地址,以及数据提交到服务器的方法。如果不定义表单域,表单中的数据就无法传送到后台服务器。</p><p>表单域是一个包含表单元素的区域</p><h3 id="2-1-input-控件-重点"><a href="#2-1-input-控件-重点" class="headerlink" title="2.1 input 控件(重点)"></a>2.1 input 控件(重点)</h3><ul><li>语法：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你好<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>input 输入的意思 </p></li><li><p><code>&lt;input&gt;</code>标签为单标签</p></li><li><p>type属性设置不同的属性值用来指定不同的控件类型</p></li><li><p>除了type属性还有别的属性</p></li><li><p>常用属性：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/input.png"></p><h4 id="1-type-属性"><a href="#1-type-属性" class="headerlink" title="1 type 属性"></a>1 type 属性</h4><ul><li>这个属性通过改变值,可以决定了你属于那种input表单。</li><li>比如 type = ‘text’  就表示 文本框 可以做 用户名, 昵称等。</li><li>比如 type = ‘password’  就是表示密码框   用户输入的内容 是不可见的。</li><li>比如 type=”radio” 表示单选按钮</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">用户名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> 密  码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>性  别: 男 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-value属性-值"><a href="#2-value属性-值" class="headerlink" title="2 value属性 值"></a>2 value属性 值</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>value 默认的文本值。 有些表单想刚打开页面就默认显示几个文字,就可以通过这个value 来设置。</li></ul><h4 id="3-name属性"><a href="#3-name属性" class="headerlink" title="3 name属性"></a>3 name属性</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>name表单的名字, 这样,后台可以通过这个name属性找到这个表单。  页面中的表单很多,name主要作用就是用于区别不同的表单。</p><ul><li><p>name属性后面的值,是我们自己定义的。</p></li><li><p>radio  如果是一组,我们必须给他们命名相同的名字 name   这样就可以多个选其中的一个啦</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>女<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>name属性,我们现在用的较少, 但是,当我们学ajax 和后台的时候,是必须的。</li></ul><h4 id="4-checked属性"><a href="#4-checked属性" class="headerlink" title="4 checked属性"></a>4 checked属性</h4><ul><li>表示默认选中状态。  较常见于 单选按钮和复选按钮。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">性    别:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>女 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这个,表示就默认选中了 男 这个单选按钮</p><h4 id="5-input-属性小结"><a href="#5-input-属性小结" class="headerlink" title="5 input 属性小结"></a>5 input 属性小结</h4><table><thead><tr><th>属性</th><th align="left">说明</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td align="left">表单类型</td><td>用来指定不同的控件类型</td></tr><tr><td>value</td><td align="left">表单值</td><td>表单里面默认显示的文本</td></tr><tr><td>name</td><td align="left">表单名字</td><td>页面中的表单很多,name主要作用就是用于区别不同的表单。</td></tr><tr><td>checked</td><td align="left">默认选中</td><td>表示那个单选或者复选按钮一开始就被选中了</td></tr></tbody></table><h3 id="2-2-label标签-理解"><a href="#2-2-label标签-理解" class="headerlink" title="2.2 label标签(理解)"></a>2.2 label标签(理解)</h3><p><strong>目标：</strong></p><p>label标签主要目的是为了提高用户体验。 为用户提高最优秀的服务。</p><p><strong>概念：</strong></p><p>label 标签为 input 元素定义标注(标签)。</p><p><strong>作用：</strong> </p><p> 用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。</p><p><strong>如何绑定元素呢？</strong></p><ol><li>第一种用法就是用label直接包括input表单。</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span> 用户名： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   适合单个表单选择</p><ol start="2"><li>第二种用法 for 属性规定 label 与哪个表单元素绑定。</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>当我们鼠标点击 label标签里面的文字时, 光标会定位到指定的表单里面</p></blockquote><h3 id="2-3-textarea控件-文本域"><a href="#2-3-textarea控件-文本域" class="headerlink" title="2.3 textarea控件(文本域)"></a>2.3 textarea控件(文本域)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/textarea.png"></p><ul><li>语法：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token punctuation">&gt;</span></span>  文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>作用：</p><p>通过textarea控件可以轻松地创建多行文本输入框.</p><p>cols=”每行中的字符数” rows=”显示的行数”  我们实际开发不用</p></li></ul><h5 id="文本框和文本域区别"><a href="#文本框和文本域区别" class="headerlink" title="文本框和文本域区别"></a>文本框和文本域区别</h5><table><thead><tr><th align="left">表单</th><th align="center">名称</th><th align="center">区别</th><th align="right">默认值显示</th><th align="right">用于场景</th></tr></thead><tbody><tr><td align="left">input type=”text”</td><td align="center">文本框</td><td align="center">只能显示一行文本</td><td align="right">单标签,通过value显示默认值</td><td align="right">用户名、昵称、密码等</td></tr><tr><td align="left">textarea</td><td align="center">文本域</td><td align="center">可以显示多行文本</td><td align="right">双标签,默认值写到标签中间</td><td align="right">留言板</td></tr></tbody></table><h3 id="2-4-select下拉列表"><a href="#2-4-select下拉列表" class="headerlink" title="2.4 select下拉列表"></a>2.4 select下拉列表</h3><p><strong>目的：</strong></p><p>如果有多个选项让用户选择,为了节约空间,我们可以使用select控件定义下拉列表.</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/sele.png"></p><p><strong>语法：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：</li></ul><ol><li><code>&lt;select&gt;</code>  中至少包含一对 option </li><li>在option 中定义selected =” selected “时,当前项即为默认选中项。</li><li>但是我们实际开发会用的比较少</li></ol><h2 id="3-form表单域"><a href="#3-form表单域" class="headerlink" title="3 form表单域"></a>3 form表单域</h2><ul><li><p>收集的用户信息怎么传递给服务器？</p><p>通过form表单域</p></li><li><p>目的：</p><p>在HTML中,form标签被用于定义表单域,以实现用户信息的收集和传递,form中的所有内容都会被提交给服务器。</p></li></ul><p><strong>语法:</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url地址<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交方式<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表单名称<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  各种表单控件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>常用属性：</strong></p><table><thead><tr><th>属性</th><th align="left">属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td align="left">url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址。</td></tr><tr><td>method</td><td align="left">get/post</td><td>用于设置表单数据的提交方式,其取值为get或post。</td></tr><tr><td>name</td><td align="left">名称</td><td>用于指定表单的名称,以区分同一个页面中的多个表单。</td></tr></tbody></table><p><strong>注意:</strong>  </p><p>每个表单都应该有自己表单域。我们现在做页面,不写看不到效果,但是 如果后面学 ajax 后台交互的时候,必须需要 form表单域。</p><h5 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h5><ul><li>元素属性值使用双引号语法</li><li>元素属性值可以写上的都写上</li></ul><p><em>推荐：</em></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>不推荐：</em></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>text</span>  <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-综合案例-注册页面"><a href="#4-综合案例-注册页面" class="headerlink" title="4 综合案例(注册页面)"></a>4 综合案例(注册页面)</h2><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/bdd.png"></p><h2 id="5-查文档"><a href="#5-查文档" class="headerlink" title="5 查文档"></a>5 查文档</h2><p>经常查阅文档是一个非常好的学习习惯。</p><p>百度 : <a href="http://www.baidu.com/">http://www.baidu.com</a></p><p>W3C :  <a href="http://www.w3school.com.cn/">http://www.w3school.com.cn/</a></p><p>MDN: <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/guifan.png"></p><p><a href="https://github.com/liaojie1314/web">代码</a>,仅供参考</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/liaojie.github.io/2022/01/19/git/"/>
      <url>/liaojie.github.io/2022/01/19/git/</url>
      
        <content type="html"><![CDATA[<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="什么是版本控制"><a href="#什么是版本控制" class="headerlink" title="什么是版本控制"></a>什么是版本控制</h3><p>版本控制(Revision control)是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li><p>实现跨区域多人协同开发</p></li><li><p>追踪和记载一个或者多个文件的历史记录</p></li><li><p>组织和保护你的源代码和文档</p></li><li><p>统计工作量</p></li><li><p>并行开发、提高开发效率</p></li><li><p>跟踪记录整个软件的开发过程</p></li><li><p>减轻开发人员的负担，节省时间，同时降低人为错误</p></li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！</p><h3 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h3><p>我们学习的东西，一定是当下最流行的！</p><p>主流的版本控制器有如下这些：</p><ul><li><p>Git</p></li><li><p>SVN(Subversion)</p></li><li><p>CVS(Concurrent Versions System)</p></li><li><p>VSS(Micorosoft Visual SourceSafe)</p></li><li><p>TFS(Team Foundation Server)</p></li><li><p>Visual Studio Online</p></li></ul><p>版本控制产品非常的多(Perforce、Rational ClearCase、RCS(GNU Revision Control System)、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault)，现在影响力最大且使用最广泛的是Git与SVN</p><h3 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h3><p>1、本地版本控制</p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p>2、集中版本控制  SVN</p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p><p>3、分布式版本控制     Git</p><p>每个人都拥有全部的代码！安全隐患！</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p><p><strong>Git与SVN的主要区别</strong></p><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p><p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p><h2 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h2><h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><p>打开<a href="https://git-scm.com/">git官网</a>，下载git对应操作系统的版本。</p><p>所有东西下载慢的话就可以去找镜像！</p><p>官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><p>下载对应的版本即可安装！</p><p>安装：无脑下一步即可！安装完毕就可以使用了！</p><h3 id="启动Git"><a href="#启动Git" class="headerlink" title="启动Git"></a>启动Git</h3><p>安装成功后在开始菜单中会有Git项，菜单下有2个程序：任意文件夹下右键也可以看到对应的程序！</p><ul><li><p>Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多</p></li><li><p>Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p></li></ul><h3 id="常用的Linux命令"><a href="#常用的Linux命令" class="headerlink" title="常用的Linux命令"></a>常用的Linux命令</h3><p>1)cd : 改变目录。</p><p>2)cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3)pwd : 显示当前所在的目录路径。</p><p>4)ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p><p>5)touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p><p>6)rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7)mkdir:  新建一个目录,就是新建一个文件夹。</p><p>8)rm -r :  删除一个文件夹, rm -r src 删除src目录</p><blockquote><p>rm -rf / 切勿在Linux中尝试！会删除电脑中全部文件！</p></blockquote><p>9)mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p><p>10)reset 重新初始化终端/清屏。</p><p>11)clear 清屏。</p><p>12)history 查看命令历史。</p><p>13)help 帮助。</p><p>14)exit 退出。</p><p>15)#表示注释</p><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><p>所有的配置文件，其实都保存在本地！</p><p>查看配置 <code>git config -l</code></p><p>查看不同级别的配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看系统config</span><span class="token function">git</span> config --system --list　　<span class="token comment">#查看当前用户(global)配置</span><span class="token function">git</span> config --global  --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Git相关的配置文件：</p><p>1)Git\etc\gitconfig  ：Git 安装目录下的 gitconfig     –system 系统级</p><p>2)C:\Users\Administrator\ .gitconfig    只适用于当前登录用户的配置  –global 全局</p><h3 id="设置用户名与邮箱-用户标识，必要"><a href="#设置用户名与邮箱-用户标识，必要" class="headerlink" title="设置用户名与邮箱(用户标识，必要)"></a>设置用户名与邮箱(用户标识，必要)</h3><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your name"</span>  <span class="token comment">#名称</span><span class="token function">git</span> config --global user.email <span class="token string">"Your email"</span>   <span class="token comment">#邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p><h2 id="Git基本理论-重要"><a href="#Git基本理论-重要" class="headerlink" title="Git基本理论(重要)"></a>Git基本理论(重要)</h2><h3 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h3><p>Git本地有三个工作区域：工作目录(Working Directory)、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="/liaojie.github.io/medias/git%E4%B8%89%E4%B8%AA%E5%8C%BA%E5%9F%9F.png"></p><ul><li><p>Workspace：工作区，就是你平时存放项目代码的地方</p></li><li><p>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p></li><li><p>Repository：仓库区(或本地仓库)，就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p></li><li><p>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p></li></ul><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img src="/liaojie.github.io/medias/%E4%B8%89%E4%B8%AA%E5%8C%BA%E5%9F%9F.png"></p><ul><li><p>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</p></li><li><p>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</p></li><li><p>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</p></li><li><p>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</p></li><li><p>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支(branch)。</p></li><li><p>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</p></li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>git的工作流程一般是这样的：</p><p>１.在工作目录中添加、修改文件；</p><p>２.将需要进行版本管理的文件放入暂存区域；</p><p>３.将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改(modified),已暂存(staged),已提交(committed)</p><p><img src="/liaojie.github.io/medias/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p><h2 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h2><h3 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h3><p>工作目录(WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住6个命令：</p><h4 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h4><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p>1.创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录新建一个Git代码库</span><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><p>1.另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 克隆一个项目和它的整个代码历史(版本信息)</span><span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span>  <span class="token comment"># https://gitee.com/xxx/xxx.git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.去 gitee 或者 github 上克隆一个</p><h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><h3 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li><p>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p></li><li><p>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p></li><li><p>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</p></li><li><p>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</p></li></ul><h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看指定文件状态</span><span class="token function">git</span> status <span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment">#查看所有文件状态</span><span class="token function">git</span> status<span class="token comment"># git add .                  添加所有文件到暂存区</span><span class="token comment"># git commit -m "消息内容"    提交暂存区中的内容到本地仓库 -m 提交信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><p>1.忽略文件中的空行或以井号(#)开始的行将会被忽略。</p><p>2.可以使用Linux通配符。例如：星号( * )代表任意多个字符，问号(？)代表一个字符，方括号([abc])代表可选字符范围，大括号({string1,string2,…})代表可选的字符串等。</p><p>3.如果名称的最前面有一个感叹号(!)，表示例外规则，将不被忽略。</p><p>4.如果名称的最前面是一个路径分隔符(/)，表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p><p>5.如果名称的最后面是一个路径分隔符(/)，表示要忽略的是此目录下该名称的子目录，而非文件(默认文件或目录都忽略)。</p><pre class="line-numbers language-gitignore" data-language="gitignore"><code class="language-gitignore">#为注释*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！!lib.txt     #但lib.txt除外/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录tempbuild/       #忽略build/目录下的所有文件doc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h3><h3 id="github-是有墙的，比较慢，在国内的话，我们一般使用-gitee-，公司中有时候会搭建自己的gitlab服务器"><a href="#github-是有墙的，比较慢，在国内的话，我们一般使用-gitee-，公司中有时候会搭建自己的gitlab服务器" class="headerlink" title="github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器"></a>github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器</h3><p>1.注册登录码云，完善个人信息</p><p>2.设置本机绑定SSH公钥，实现免密码登录！(免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！)</p><pre class="line-numbers language-none"><code class="language-none"># 进入 C:\Users\Administrator\.ssh 目录# 生成公钥ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.将公钥信息public key 添加到码云账户中即可！</p><p>4.使用码云创建一个自己的仓库！</p><h2 id="IDEA中集成Git"><a href="#IDEA中集成Git" class="headerlink" title="IDEA中集成Git"></a>IDEA中集成Git</h2><p>1.新建项目，绑定git。</p><p>2.修改文件，使用IDEA操作git。</p><ul><li><p>添加到暂存区</p></li><li><p>commit 提交</p></li><li><p>push到远程仓库</p></li></ul><p>3.提交测试</p><h2 id="GIT分支"><a href="#GIT分支" class="headerlink" title="GIT分支"></a>GIT分支</h2><p><img src="/liaojie.github.io/medias/git%E5%88%86%E6%94%AF.png"></p><p><img src="/liaojie.github.io/medias/git%E4%B8%8D%E5%90%8C%E5%88%86%E6%94%AF.png"></p><p>git分支中常用指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有本地分支</span><span class="token function">git</span> branch<span class="token comment"># 列出所有远程分支</span><span class="token function">git</span> branch -r<span class="token comment"># 新建一个分支，但依然停留在当前分支</span><span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，并切换到该分支</span><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 合并指定分支到当前分支</span><span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 删除分支</span><span class="token function">git</span> branch -d <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 删除远程分支</span><span class="token function">git</span> push origin --delete <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token function">git</span> branch -dr <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p><p><strong>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</strong></p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push -u origin masterTo https://github.com/xxx/xxx.git <span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        master -<span class="token operator">&gt;</span> master <span class="token punctuation">(</span>non-fast-forward<span class="token punctuation">)</span>error: failed to push some refs to <span class="token string">'https://github.com/xxx/xxx.git'</span>hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes <span class="token punctuation">(</span>e.g.hint: <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again.hint: See the <span class="token string">'Note about fast-forwards'</span> <span class="token keyword">in</span> <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因:<br>这是因为github中有文件没有存在本地git中</p><p>解决方法:<br>执行<code>git pull --rebase origin master</code></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin</title>
      <link href="/liaojie.github.io/2022/01/19/kotlin/"/>
      <url>/liaojie.github.io/2022/01/19/kotlin/</url>
      
        <content type="html"><![CDATA[<h3 id="Kotlin语言声明变量与内置数据类型"><a href="#Kotlin语言声明变量与内置数据类型" class="headerlink" title="Kotlin语言声明变量与内置数据类型"></a>Kotlin语言声明变量与内置数据类型</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//Kotlin 语言声明变量与内置数据类型</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"Derry"</span>    <span class="token comment">/*        可读可改    变量名     类型      值        var        name  :  String = "Derry"     */</span>    name <span class="token operator">=</span> <span class="token string">"Lance"</span>    <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment">//内置数据类型</span>    <span class="token comment">/*        String  字符串        Char    单字符        Boolean true/false        Int     整型        Double  小数        List    集合        Set     无重复的元素集合        Map     键值对集合     */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的只读变量"><a href="#Kotlin语言的只读变量" class="headerlink" title="Kotlin语言的只读变量"></a>Kotlin语言的只读变量</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//只读变量</span>    <span class="token comment">//变量永远不会被修改,建议修改为 val == 不可修改的(只读)</span>    <span class="token keyword">val</span> info <span class="token operator">:</span>String <span class="token operator">=</span><span class="token string">"MyInfo"</span>    <span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的类型判断"><a href="#Kotlin语言的类型判断" class="headerlink" title="Kotlin语言的类型判断"></a>Kotlin语言的类型判断</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//类型判断</span>    <span class="token comment">//提示:Explicitly given type is redundant here</span>    <span class="token comment">//给定的类型在这里是多于的</span>    <span class="token keyword">val</span> info <span class="token operator">:</span>String <span class="token operator">=</span> <span class="token string">"Derry is Success"</span>    <span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token number">98</span>    <span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的编译时常量"><a href="#Kotlin语言的编译时常量" class="headerlink" title="Kotlin语言的编译时常量"></a>Kotlin语言的编译时常量</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">const</span> <span class="token keyword">val</span> PI<span class="token operator">=</span><span class="token number">3.14</span> <span class="token comment">//定义编译时常量</span><span class="token comment">//编译时常量只能在函数之外定义,因为如果在函数之内定义,就必须在运行时才能调用函数赋值,何来编译时常量一说</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//编译时常量 只能是常用的基本数据类型 (String,Double,Int,Float,Long,Short,Byte,Char,Boolean)</span>    <span class="token comment">//修饰符const不适用于局部变量</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看kotlin反编译字节码"><a href="#查看kotlin反编译字节码" class="headerlink" title="查看kotlin反编译字节码"></a>查看kotlin反编译字节码</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">const</span> <span class="token keyword">val</span> PI1 <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token keyword">const</span> <span class="token keyword">val</span> PI2 <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token keyword">const</span> <span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token number">99</span><span class="token comment">//查看kotlin反编译字节码</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">"Derry"</span>    <span class="token keyword">val</span> sex <span class="token operator">=</span> <span class="token string">'男'</span>    <span class="token keyword">val</span> number <span class="token operator">=</span> <span class="token number">108</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tools-&gt;Kotlin-&gt;Show Kotlin Bytecode</p><h3 id="kotlin引用类型学习"><a href="#kotlin引用类型学习" class="headerlink" title="kotlin引用类型学习"></a>kotlin引用类型学习</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//kotlin引用类型学习</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">99</span><span class="token comment">//引用类型</span>    <span class="token keyword">val</span> pi<span class="token operator">:</span> Float <span class="token operator">=</span> <span class="token number">3.1415f</span>    <span class="token keyword">val</span> pi2<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">3.1415</span>    <span class="token keyword">val</span> isOk<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="range表达式"><a href="#range表达式" class="headerlink" title="range表达式"></a>range表达式</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//kotlin range表达式</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> number <span class="token operator">=</span> <span class="token number">148</span>    <span class="token comment">//range 范围 从哪里 到哪里</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">in</span> <span class="token number">10</span><span class="token operator">..</span><span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"建议remake"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">in</span> <span class="token number">60</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">!</span><span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不正确"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="when表达式"><a href="#when表达式" class="headerlink" title="when表达式"></a>when表达式</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//kotlin when表达式</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> week <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">val</span> info <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>week<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token string">"星期一"</span>        <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token string">"星期二"</span>        <span class="token number">3</span> <span class="token operator">-&gt;</span> <span class="token string">"星期三"</span>        <span class="token number">4</span> <span class="token operator">-&gt;</span> <span class="token string">"星期四"</span>        <span class="token number">5</span> <span class="token operator">-&gt;</span> <span class="token string">"星期五"</span>        <span class="token number">6</span> <span class="token operator">-&gt;</span> <span class="token string">"星期六"</span>        <span class="token number">7</span> <span class="token operator">-&gt;</span> <span class="token string">"星期天"</span>        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token string">"错误天数"</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="String模版"><a href="#String模版" class="headerlink" title="String模版"></a>String模版</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//kotlin String模版</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> garden <span class="token operator">=</span> <span class="token string">"黄石公园"</span>    <span class="token keyword">val</span> time <span class="token operator">=</span> <span class="token number">6</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天天气很晴朗,去<span class="token interpolation"><span class="token delimiter variable">${</span>garden<span class="token delimiter variable">}</span></span>玩,玩了<span class="token interpolation variable">$time</span> 小时"</span><span class="token punctuation">)</span>    <span class="token comment">//kt的if是表达式,所以更灵活</span>    <span class="token keyword">val</span> isLogin <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server response result: ${if (isLogin) "</span>恭喜你登录成功<span class="token string">" else "</span>登录失败<span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin语言函数头学习"><a href="#kotlin语言函数头学习" class="headerlink" title="kotlin语言函数头学习"></a>kotlin语言函数头学习</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//kotlin语言函数头学习</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">method01</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//函数默认为public</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">method01</span><span class="token punctuation">(</span>age<span class="token operator">:</span>Int<span class="token punctuation">,</span>name<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>Int<span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的姓名是<span class="token interpolation variable">$name</span>,你的年龄是<span class="token interpolation variable">$age</span>"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin函数参数的默认参数"><a href="#kotlin函数参数的默认参数" class="headerlink" title="kotlin函数参数的默认参数"></a>kotlin函数参数的默认参数</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">method01</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span>    <span class="token function">method02</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span>    <span class="token function">method03</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">method03</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//函数默认为public</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">method01</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的姓名是<span class="token interpolation variable">$name</span>,你的年龄是<span class="token interpolation variable">$age</span>"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">method02</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的姓名是<span class="token interpolation variable">$name</span>,你的年龄是<span class="token interpolation variable">$age</span>"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">method03</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token operator">=</span><span class="token string">"王五"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的姓名是<span class="token interpolation variable">$name</span>,你的年龄是<span class="token interpolation variable">$age</span>"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin语言的具名函数参数"><a href="#kotlin语言的具名函数参数" class="headerlink" title="kotlin语言的具名函数参数"></a>kotlin语言的具名函数参数</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//kotlin语言具名函数参数</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">loginAction</span><span class="token punctuation">(</span>age <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">,</span>userPassword <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">,</span>userName <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>phoneNumber <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">loginAction</span><span class="token punctuation">(</span>userName<span class="token operator">:</span>String<span class="token punctuation">,</span>userPassword<span class="token operator">:</span>String<span class="token punctuation">,</span>phoneNumber<span class="token operator">:</span>String<span class="token punctuation">,</span>age<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userName:<span class="token interpolation variable">$userName</span>,userPassword:<span class="token interpolation variable">$userPassword</span>,phoneNumber:<span class="token interpolation variable">$phoneNumber</span>,age:<span class="token interpolation variable">$age</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin语言Unit函数特点"><a href="#kotlin语言Unit函数特点" class="headerlink" title="kotlin语言Unit函数特点"></a>kotlin语言Unit函数特点</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//:Unit 默认有 </span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">doWork1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">doWork2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面三个是等效的</p><h3 id="kotlin语言的Nothing类型特点"><a href="#kotlin语言的Nothing类型特点" class="headerlink" title="kotlin语言的Nothing类型特点"></a>kotlin语言的Nothing类型特点</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span>number<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">when</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"没有该分数"</span><span class="token punctuation">)</span>        <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">59</span> <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span>        <span class="token keyword">in</span> <span class="token number">60</span><span class="token operator">..</span><span class="token number">70</span> <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一般"</span><span class="token punctuation">)</span>        <span class="token keyword">in</span> <span class="token number">71</span><span class="token operator">..</span><span class="token number">80</span> <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"良好"</span><span class="token punctuation">)</span>        <span class="token keyword">in</span> <span class="token number">81</span><span class="token operator">..</span><span class="token number">100</span> <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"优秀"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> A<span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> AImpl<span class="token operator">:</span>A<span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//下面这句话不是注释提示,会终止程序的</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"Not yet implemented"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin语言的反引号中函数名特点"><a href="#kotlin语言的反引号中函数名特点" class="headerlink" title="kotlin语言的反引号中函数名特点"></a>kotlin语言的反引号中函数名特点</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//第一种情况:</span>    <span class="token function">`登录功能 2022年1月22号`</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span>    <span class="token comment">//第二种情况 in is</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">`登录功能 2022年1月22号`</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token punctuation">,</span>pwd<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试:姓名:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" 密码:"</span><span class="token operator">+</span>pwd<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">`7626837269`</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//加密: 7626837269</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> len <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span>    <span class="token keyword">val</span> count <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        it <span class="token operator">==</span> <span class="token string">'c'</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数类型和隐式返回"><a href="#函数类型和隐式返回" class="headerlink" title="函数类型和隐式返回"></a>函数类型和隐式返回</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//1.函数输入输出的声明</span>    <span class="token keyword">val</span> methodAction<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String    <span class="token comment">//2.实现函数</span>    methodAction <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> inputValue <span class="token operator">=</span> <span class="token number">999999</span>        <span class="token string">"<span class="token interpolation variable">$inputValue</span> Jack"</span>        <span class="token comment">//匿名函数不用写return,最后一行就是返回值</span>    <span class="token punctuation">}</span>    <span class="token comment">//3.调用函数</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">methodAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/*fun methodAction():String{    return "Jack"} */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>代码:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//1.函数声明和实现</span>    <span class="token keyword">val</span> methAction<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Int<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String <span class="token operator">=</span> <span class="token punctuation">{</span> number1<span class="token punctuation">,</span> number2<span class="token punctuation">,</span> number3 <span class="token operator">-&gt;</span>        <span class="token keyword">val</span> inputValue <span class="token operator">=</span> <span class="token number">999999</span>        <span class="token string">"<span class="token interpolation variable">$inputValue</span> Jack 参数1:<span class="token interpolation variable">$number1</span>,参数2<span class="token interpolation variable">$number2</span>,参数3:<span class="token interpolation variable">$number3</span>"</span>    <span class="token punctuation">}</span>    <span class="token comment">//2.调用函数</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">methAction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/*fun methAction(number1:Int,number2: Int,number3: Int):String{    val inputValue = 999999    return "$inputValue Jack 参数1:$number1,参数2$number2,参数3:$number3"} */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="it关键字特点"><a href="#it关键字特点" class="headerlink" title="it关键字特点"></a>it关键字特点</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> methodAction <span class="token operator">:</span><span class="token punctuation">(</span>Int<span class="token punctuation">,</span>Int<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token operator">-&gt;</span>String <span class="token operator">=</span><span class="token punctuation">{</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3<span class="token operator">-&gt;</span>        <span class="token keyword">val</span> number <span class="token operator">=</span><span class="token number">673</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$number</span> n1:<span class="token interpolation variable">$n1</span>,n2:<span class="token interpolation variable">$n2</span>,n3:<span class="token interpolation variable">$n3</span>"</span><span class="token punctuation">)</span>        <span class="token string">"<span class="token interpolation variable">$number</span> n1:<span class="token interpolation variable">$n1</span>,n2:<span class="token interpolation variable">$n2</span>,n3:<span class="token interpolation variable">$n3</span>"</span>    <span class="token punctuation">}</span>    <span class="token comment">//methodAction.invoke(1,2,3)</span>    <span class="token function">methodAction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> methodAction2<span class="token operator">:</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token operator">-&gt;</span>String<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"<span class="token interpolation variable">$it</span> xxx"</span><span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">methodAction2</span><span class="token punctuation">(</span><span class="token string">"AAAA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> methodAction3<span class="token operator">:</span><span class="token punctuation">(</span>Double<span class="token punctuation">)</span><span class="token operator">-&gt;</span>String <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"<span class="token interpolation variable">$it</span> xxx"</span><span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">methodAction3</span><span class="token punctuation">(</span><span class="token number">678.67</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名函数的类型推断"><a href="#匿名函数的类型推断" class="headerlink" title="匿名函数的类型推断"></a>匿名函数的类型推断</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//匿名函数 类型推断为String</span>    <span class="token comment">//方法名:必须指定 参数类型和返回类型</span>    <span class="token comment">//方法名 = 类型推断返回类型</span>    <span class="token keyword">val</span> method1<span class="token operator">=</span><span class="token punctuation">{</span>v1<span class="token operator">:</span>Double<span class="token punctuation">,</span>v2<span class="token operator">:</span>Float<span class="token punctuation">,</span>v3<span class="token operator">:</span>Int<span class="token operator">-&gt;</span>        <span class="token string">"v1:<span class="token interpolation variable">$v1</span>,v2:<span class="token interpolation variable">$v2</span>,v3:<span class="token interpolation variable">$v3</span>"</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token number">5687.78</span><span class="token punctuation">,</span> <span class="token number">798.3f</span><span class="token punctuation">,</span> <span class="token number">909</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lambda学习"><a href="#lambda学习" class="headerlink" title="lambda学习"></a>lambda学习</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//匿名函数 == lambda表达式</span>    <span class="token keyword">val</span> addResultMethod <span class="token operator">=</span> <span class="token punctuation">{</span> number1<span class="token operator">:</span> Int<span class="token punctuation">,</span> number2<span class="token operator">:</span> Int <span class="token operator">-&gt;</span>        <span class="token string">"俩数相加的结果是:<span class="token interpolation"><span class="token delimiter variable">${</span>number1 <span class="token operator">+</span> number2<span class="token delimiter variable">}</span></span>"</span>    <span class="token punctuation">}</span><span class="token comment">//addResultMethod  (Int,Int)-&gt;String</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">addResultMethod</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> weekResultMethod<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token operator">:</span>Int<span class="token operator">-&gt;</span>        <span class="token keyword">when</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token number">1</span><span class="token operator">-&gt;</span><span class="token string">"星期一"</span>            <span class="token number">2</span><span class="token operator">-&gt;</span><span class="token string">"星期二"</span>            <span class="token number">3</span><span class="token operator">-&gt;</span><span class="token string">"星期三"</span>            <span class="token number">4</span><span class="token operator">-&gt;</span><span class="token string">"星期四"</span>            <span class="token number">5</span><span class="token operator">-&gt;</span><span class="token string">"星期五"</span>            <span class="token number">6</span><span class="token operator">-&gt;</span><span class="token string">"星期六"</span>            <span class="token number">7</span><span class="token operator">-&gt;</span><span class="token string">"星期天"</span>            <span class="token keyword">else</span> <span class="token operator">-&gt;</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token comment">//weekResultMethod  函数: (Int)-&gt;Any</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">weekResultMethod</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//匿名函数属于lambda</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在函数中定义参数是函数的函数"><a href="#在函数中定义参数是函数的函数" class="headerlink" title="在函数中定义参数是函数的函数"></a>在函数中定义参数是函数的函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">loginAPI</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> msg<span class="token operator">:</span> String<span class="token punctuation">,</span> code<span class="token operator">:</span> Int <span class="token operator">-&gt;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终登录情况:msg:<span class="token interpolation variable">$msg</span>,code:<span class="token interpolation variable">$code</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//模拟数据库sql</span><span class="token keyword">const</span> <span class="token keyword">val</span> USER_NAME_SAVE_DB <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token keyword">const</span> <span class="token keyword">val</span> USER_PWD_SAVE_DB <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token comment">//登录API</span><span class="token keyword">fun</span> <span class="token function">loginAPI</span><span class="token punctuation">(</span>username<span class="token operator">:</span> String<span class="token punctuation">,</span> userpwd<span class="token operator">:</span> String<span class="token punctuation">,</span> responseResult<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> userpwd <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"用户名或密码为空"</span><span class="token punctuation">)</span><span class="token comment">//出现问题,终止程序</span>    <span class="token punctuation">}</span>    <span class="token comment">//校验</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> userpwd<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">webServiceLoginAPI</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> userpwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//登录成功</span>            <span class="token function">responseResult</span><span class="token punctuation">(</span><span class="token string">"login success"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//登录失败</span>            <span class="token function">responseResult</span><span class="token punctuation">(</span><span class="token string">"login error"</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"用户名和密码不合格"</span><span class="token punctuation">)</span><span class="token comment">//出现问题,终止程序</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">webServiceLoginAPI</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> pwd<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>    <span class="token comment">//kotlin中if为表达式</span>    <span class="token keyword">return</span> name <span class="token operator">==</span> USER_NAME_SAVE_DB <span class="token operator">&amp;&amp;</span> pwd <span class="token operator">==</span> USER_PWD_SAVE_DB<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//第一种方式</span>    <span class="token function">loginAPI2</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> msg<span class="token operator">:</span> String<span class="token punctuation">,</span> code<span class="token operator">:</span> Int <span class="token operator">-&gt;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终登录情况:msg:<span class="token interpolation variable">$msg</span>,code:<span class="token interpolation variable">$code</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//第二种方式</span>    <span class="token function">loginAPI2</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">,</span> responseResult <span class="token operator">=</span> <span class="token punctuation">{</span> msg<span class="token operator">:</span> String<span class="token punctuation">,</span> code<span class="token operator">:</span> Int <span class="token operator">-&gt;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终登录情况:msg:<span class="token interpolation variable">$msg</span>,code:<span class="token interpolation variable">$code</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//第三种方式(推荐)</span>    <span class="token function">loginAPI2</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> msg<span class="token operator">:</span> String<span class="token punctuation">,</span> code<span class="token operator">:</span> Int <span class="token operator">-&gt;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终登录情况:msg:<span class="token interpolation variable">$msg</span>,code:<span class="token interpolation variable">$code</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//模拟数据库sql</span><span class="token keyword">const</span> <span class="token keyword">val</span> USER_NAME_SAVE_DB2 <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token keyword">const</span> <span class="token keyword">val</span> USER_PWD_SAVE_DB2 <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token comment">//登录API</span><span class="token keyword">fun</span> <span class="token function">loginAPI2</span><span class="token punctuation">(</span>username<span class="token operator">:</span> String<span class="token punctuation">,</span> userpwd<span class="token operator">:</span> String<span class="token punctuation">,</span> responseResult<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> userpwd <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"用户名或密码为空"</span><span class="token punctuation">)</span><span class="token comment">//出现问题,终止程序</span>    <span class="token punctuation">}</span>    <span class="token comment">//校验</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> userpwd<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">webServiceLoginAPI</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> userpwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//登录成功</span>            <span class="token function">responseResult</span><span class="token punctuation">(</span><span class="token string">"login success"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//登录失败</span>            <span class="token function">responseResult</span><span class="token punctuation">(</span><span class="token string">"login error"</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"用户名和密码不合格"</span><span class="token punctuation">)</span><span class="token comment">//出现问题,终止程序</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">webServiceLoginAPI</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> pwd<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>    <span class="token comment">//kotlin中if为表达式</span>    <span class="token keyword">return</span> name <span class="token operator">==</span> USER_NAME_SAVE_DB2 <span class="token operator">&amp;&amp;</span> pwd <span class="token operator">==</span> USER_PWD_SAVE_DB2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin语言的函数内联"><a href="#kotlin语言的函数内联" class="headerlink" title="kotlin语言的函数内联"></a>kotlin语言的函数内联</h3><p>函数中使用lambda就应该使用内联 inline关键字,若函数没用使用lambda,就不需要声明成内联</p><p>如果此函数不使用内联,在调用端会生成多个对象来完成lambda的调用(性能损耗)</p><p>使用内联相当于C++ 中 #define 宏定义 宏替换 会把代码替换到调用处,调用处没有任何函数开辟,对象开辟的损耗</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> derry<span class="token punctuation">.</span>s1<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">loginAPI3</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> msg<span class="token operator">:</span> String<span class="token punctuation">,</span> code<span class="token operator">:</span> Int <span class="token operator">-&gt;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终登录情况:msg:<span class="token interpolation variable">$msg</span>,code:<span class="token interpolation variable">$code</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//模拟数据库sql</span><span class="token keyword">const</span> <span class="token keyword">val</span> USER_NAME_SAVE_DB3 <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token keyword">const</span> <span class="token keyword">val</span> USER_PWD_SAVE_DB3 <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token comment">//登录API</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">loginAPI3</span><span class="token punctuation">(</span>username<span class="token operator">:</span> String<span class="token punctuation">,</span> userpwd<span class="token operator">:</span> String<span class="token punctuation">,</span> responseResult<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> userpwd <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"用户名或密码为空"</span><span class="token punctuation">)</span><span class="token comment">//出现问题,终止程序</span>    <span class="token punctuation">}</span>    <span class="token comment">//校验</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> userpwd<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">webServiceLoginAPI3</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> userpwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//登录成功</span>            <span class="token function">responseResult</span><span class="token punctuation">(</span><span class="token string">"login success"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//登录失败</span>            <span class="token function">responseResult</span><span class="token punctuation">(</span><span class="token string">"login error"</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"用户名和密码不合格"</span><span class="token punctuation">)</span><span class="token comment">//出现问题,终止程序</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">webServiceLoginAPI3</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> pwd<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>    <span class="token comment">//kotlin中if为表达式</span>    <span class="token keyword">return</span> name <span class="token operator">==</span> USER_NAME_SAVE_DB3 <span class="token operator">&amp;&amp;</span> pwd <span class="token operator">==</span> USER_PWD_SAVE_DB3<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//函数调用</span>    <span class="token comment">//lambda属于函数类型的对象,需要将methodResponseResult普通函数变成函数类型的对象   函数引用(::)</span><span class="token comment">//    login("admin", "12345",::methodResponseResult)</span>    <span class="token keyword">val</span> obj <span class="token operator">=</span> <span class="token operator">::</span>methodResponseResult    <span class="token keyword">val</span> obj1 <span class="token operator">=</span> obj    <span class="token keyword">val</span> obj2 <span class="token operator">=</span>obj1    <span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"12345"</span><span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">methodResponseResult</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token punctuation">,</span> code<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终登录情况:msg:<span class="token interpolation variable">$msg</span>,code:<span class="token interpolation variable">$code</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//模拟数据库sql</span><span class="token keyword">const</span> <span class="token keyword">val</span> USER_NAME_SAVE_DB4 <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token keyword">const</span> <span class="token keyword">val</span> USER_PWD_SAVE_DB4 <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token comment">//登录API</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">login</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> pwd<span class="token operator">:</span> String<span class="token punctuation">,</span> responseResult<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>USER_NAME_SAVE_DB4 <span class="token operator">==</span> name <span class="token operator">&amp;&amp;</span> USER_PWD_SAVE_DB4 <span class="token operator">==</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//登录成功</span>        <span class="token function">responseResult</span><span class="token punctuation">(</span><span class="token string">"login success"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">//登录失败</span>        <span class="token function">responseResult</span><span class="token punctuation">(</span><span class="token string">"login error"</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数类型作为返回类型"><a href="#函数类型作为返回类型" class="headerlink" title="函数类型作为返回类型"></a>函数类型作为返回类型</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> r <span class="token operator">=</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"kotlin"</span><span class="token punctuation">)</span>    <span class="token comment">//r 是 show 函数的返回值</span>    <span class="token keyword">val</span> showMethod_niming <span class="token operator">=</span> <span class="token function">showMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token comment">//返回匿名函数</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">showMethod_niming</span><span class="token punctuation">(</span><span class="token string">"程序员"</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span>info<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>Boolean<span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是show函数 info:<span class="token interpolation variable">$info</span>"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">show2</span><span class="token punctuation">(</span>info<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>String<span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是show函数 info:<span class="token interpolation variable">$info</span>"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"XXX"</span><span class="token punctuation">}</span><span class="token comment">//showMethod函数 返回一个匿名函数</span><span class="token keyword">fun</span> <span class="token function">showMethod</span><span class="token punctuation">(</span>info<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span>Int<span class="token punctuation">)</span><span class="token operator">-&gt;</span>String<span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是show函数 info:<span class="token interpolation variable">$info</span>"</span><span class="token punctuation">)</span>    <span class="token comment">//return 一个函数 匿名函数</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>name<span class="token operator">:</span>String<span class="token punctuation">,</span>age<span class="token operator">:</span>Int <span class="token operator">-&gt;</span>        <span class="token string">"匿名函数 name:<span class="token interpolation variable">$name</span>, age:<span class="token interpolation variable">$age</span>"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名函数与具名函数"><a href="#匿名函数与具名函数" class="headerlink" title="匿名函数与具名函数"></a>匿名函数与具名函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//匿名函数</span>    <span class="token function">showPersonInfo</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">"学习kotlin语言"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示结果:<span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//具名函数</span>    <span class="token function">showPersonInfo</span><span class="token punctuation">(</span><span class="token string">"liSi"</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">"学习Java语言"</span><span class="token punctuation">,</span> <span class="token operator">::</span>showResultImpl<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">showResultImpl</span><span class="token punctuation">(</span>result<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示结果:<span class="token interpolation variable">$result</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">showPersonInfo</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> sex<span class="token operator">:</span> Char<span class="token punctuation">,</span> study<span class="token operator">:</span> String<span class="token punctuation">,</span> showResult<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"name:<span class="token interpolation variable">$name</span>,age:<span class="token interpolation variable">$age</span>,sex:<span class="token interpolation variable">$sex</span>,study:<span class="token interpolation variable">$study</span>"</span>    <span class="token function">showResult</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的可空性特点"><a href="#Kotlin语言的可空性特点" class="headerlink" title="Kotlin语言的可空性特点"></a>Kotlin语言的可空性特点</h3><p>不会出现空指针异常</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//第一种情况:默认是不可空类型,不能随意给null</span>    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"zhangSan"</span>    <span class="token comment">//name = null 不能给空</span>    <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment">//第二种情况:声明时指定为可空类型</span>    <span class="token keyword">var</span> name2<span class="token operator">:</span> String<span class="token operator">?</span>    name2 <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token function">println</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的安全调用操作符"><a href="#Kotlin语言的安全调用操作符" class="headerlink" title="Kotlin语言的安全调用操作符"></a>Kotlin语言的安全调用操作符</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token operator">:</span>String<span class="token operator">?</span><span class="token operator">=</span><span class="token string">"zhangSan"</span>    name <span class="token operator">=</span><span class="token keyword">null</span>    <span class="token comment">//name.capitalize() //name 是可空类型 可能是null,想要使用name必须给出补救措施  capitalize() 首字母大写</span>    <span class="token keyword">val</span> r <span class="token operator">=</span> name<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//name 如果是null,?后面代码不执行,不会引发空指针异常</span>    <span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在Kotlin语言中使用带let的安全调用"><a href="#在Kotlin语言中使用带let的安全调用" class="headerlink" title="在Kotlin语言中使用带let的安全调用"></a>在Kotlin语言中使用带let的安全调用</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> name <span class="token operator">:</span>String <span class="token operator">?</span><span class="token operator">=</span><span class="token keyword">null</span>    name <span class="token operator">=</span> <span class="token string">"zhangSan"</span>    <span class="token comment">//name是可空类型,如果是null,?后面的代码不执行,不会发生空指针异常</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> name<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">{</span>        <span class="token comment">//it == name 本身</span>        <span class="token comment">//如果能够执行到这里,it一定不为null</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果name是空值 "" 没有内容</span>            <span class="token string">"Default"</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token string">"[<span class="token interpolation variable">$it</span>]"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言中的非空断言操作符特点"><a href="#Kotlin语言中的非空断言操作符特点" class="headerlink" title="Kotlin语言中的非空断言操作符特点"></a>Kotlin语言中的非空断言操作符特点</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token operator">:</span>String<span class="token operator">?</span><span class="token operator">=</span><span class="token keyword">null</span>    <span class="token comment">//name.capitalize() //name 是可空类型 可能是null,想要使用name必须给出补救措施  capitalize() 首字母大写</span>    name <span class="token operator">=</span> <span class="token string">"zhangSan"</span>    <span class="token comment">//补救措施 ?</span>    <span class="token keyword">val</span> r <span class="token operator">=</span> name<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//!!不管name是不是null都执行,和java一样</span>    <span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token comment">//结论:如果100%保证name有值,那么才能使用断言!!,否则有空指针异常的风险</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言中对比使用if判断null值情况"><a href="#Kotlin语言中对比使用if判断null值情况" class="headerlink" title="Kotlin语言中对比使用if判断null值情况"></a>Kotlin语言中对比使用if判断null值情况</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    name <span class="token operator">=</span> <span class="token string">"zhangSan"</span>    <span class="token comment">//name.capitalize() //name 是可空类型 可能是null,想要使用name必须给出补救措施  capitalize() 首字母大写</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//if也算是一种补救措施</span>        <span class="token keyword">val</span> r <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name is null"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言空合并操作符"><a href="#Kotlin语言空合并操作符" class="headerlink" title="Kotlin语言空合并操作符"></a>Kotlin语言空合并操作符</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> info<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"李小龙"</span>    <span class="token comment">//info = null</span>    <span class="token comment">//空合并操作符 xxx?:"xxx"  如果xxx为null,执行?:后面的</span>    <span class="token function">println</span><span class="token punctuation">(</span>info <span class="token operator">?:</span> <span class="token string">"info is null"</span><span class="token punctuation">)</span>    <span class="token comment">//let函数+空合并操作符</span>    <span class="token function">println</span><span class="token punctuation">(</span>info<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> <span class="token string">"[<span class="token interpolation variable">$it</span>]"</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token string">"info is null"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言中异常处理和自定义异常特点"><a href="#Kotlin语言中异常处理和自定义异常特点" class="headerlink" title="Kotlin语言中异常处理和自定义异常特点"></a>Kotlin语言中异常处理和自定义异常特点</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> info<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token function">checkException</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span>info<span class="token operator">!!</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">checkException</span><span class="token punctuation">(</span>info<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    info <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">CustomException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> CustomException <span class="token operator">:</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"你的代码出现了问题"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言先决条件函数"><a href="#Kotlin语言先决条件函数" class="headerlink" title="Kotlin语言先决条件函数"></a>Kotlin语言先决条件函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> value1<span class="token operator">:</span>String <span class="token operator">?</span><span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">var</span> value2<span class="token operator">:</span>Boolean <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">//checkNotNull(value1) //java.lang.IllegalStateException: Required value was null.</span>    <span class="token comment">//requireNotNull(value1)//java.lang.IllegalArgumentException: Required value was null.</span>    <span class="token comment">//require(value2)//java.lang.IllegalArgumentException: Failed requirement.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">const</span> <span class="token keyword">val</span> INFO <span class="token operator">=</span> <span class="token string">"Good good study,day day up!"</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> indexOf <span class="token operator">=</span> INFO<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>INFO<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> indexOf<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>INFO<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span> until indexOf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//0 until indexOf(kotlin使用此方式) 等价于 0, indexOf</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> jsonText <span class="token operator">=</span> <span class="token string">"zhangSan,liSi,wangWu"</span>    <span class="token comment">//list 自动类型推断成 list == List&lt;String&gt;</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> jsonText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    <span class="token comment">//不解构 直接输出</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分割后list集合里面的元素有<span class="token interpolation variable">$list</span>"</span><span class="token punctuation">)</span>    <span class="token comment">//C++有解构 kt也有解构</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">)</span> <span class="token operator">=</span> list    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解构3个只读变量的值为:v1:<span class="token interpolation variable">$v1</span>,v2:<span class="token interpolation variable">$v2</span>,v3:<span class="token interpolation variable">$v3</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的replace完成加密解密操作"><a href="#Kotlin语言的replace完成加密解密操作" class="headerlink" title="Kotlin语言的replace完成加密解密操作"></a>Kotlin语言的replace完成加密解密操作</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> sourcePwd <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始密码:<span class="token interpolation variable">$sourcePwd</span>"</span><span class="token punctuation">)</span>    <span class="token comment">//加密:就是把字符替换成数字 打乱 就属于加密了</span>    <span class="token keyword">val</span> newPwd <span class="token operator">=</span> sourcePwd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">Regex</span><span class="token punctuation">(</span><span class="token string">"[AKMNO]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//it.value //完全没有做任何事情</span>        <span class="token keyword">when</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// A B C D ...</span>            <span class="token string">"A"</span><span class="token operator">-&gt;</span><span class="token string">"9"</span>            <span class="token string">"K"</span><span class="token operator">-&gt;</span><span class="token string">"3"</span>            <span class="token string">"M"</span><span class="token operator">-&gt;</span><span class="token string">"5"</span>            <span class="token string">"N"</span><span class="token operator">-&gt;</span><span class="token string">"1"</span>            <span class="token string">"O"</span><span class="token operator">-&gt;</span><span class="token string">"4"</span>            <span class="token keyword">else</span> <span class="token operator">-&gt;</span>it<span class="token punctuation">.</span>value<span class="token comment">//返回字符本身</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密后:<span class="token interpolation variable">$newPwd</span>"</span><span class="token punctuation">)</span>    <span class="token comment">//解密</span>    <span class="token keyword">val</span> sourcePwdNew <span class="token operator">=</span> newPwd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">Regex</span><span class="token punctuation">(</span><span class="token string">"[93514]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">when</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// A B C D ...</span>            <span class="token string">"9"</span><span class="token operator">-&gt;</span><span class="token string">"A"</span>            <span class="token string">"3"</span><span class="token operator">-&gt;</span><span class="token string">"K"</span>            <span class="token string">"5"</span><span class="token operator">-&gt;</span><span class="token string">"M"</span>            <span class="token string">"1"</span><span class="token operator">-&gt;</span><span class="token string">"N"</span>            <span class="token string">"4"</span><span class="token operator">-&gt;</span><span class="token string">"O"</span>            <span class="token keyword">else</span> <span class="token operator">-&gt;</span>it<span class="token punctuation">.</span>value<span class="token comment">//返回字符本身</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后:<span class="token interpolation variable">$sourcePwdNew</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="与-比较操作"><a href="#与-比较操作" class="headerlink" title="==与===比较操作"></a>==与===比较操作</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//== 值 内容的比较 相当于java中的equals</span>    <span class="token comment">//=== 引用的比较</span>    <span class="token keyword">val</span> name1 <span class="token operator">=</span> <span class="token string">"Jack"</span>    <span class="token keyword">val</span> name2 <span class="token operator">=</span> <span class="token string">"Jack"</span>    <span class="token keyword">val</span> name3 <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Jack</span>    <span class="token comment">//name1.equals(name2) 等价于 name1==name2 都是 值 内容的比较</span>    <span class="token function">println</span><span class="token punctuation">(</span>name1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//java写法</span>    <span class="token function">println</span><span class="token punctuation">(</span>name1 <span class="token operator">==</span> name2<span class="token punctuation">)</span><span class="token comment">//kt写法</span>    <span class="token function">println</span><span class="token punctuation">(</span>name1 <span class="token operator">===</span> name2<span class="token punctuation">)</span><span class="token comment">//true</span>    <span class="token function">println</span><span class="token punctuation">(</span>name1 <span class="token operator">==</span> name3<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>name1 <span class="token operator">===</span> name3<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的字符串遍历操作"><a href="#Kotlin语言的字符串遍历操作" class="headerlink" title="Kotlin语言的字符串遍历操作"></a>Kotlin语言的字符串遍历操作</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>    str<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>        <span class="token comment">//it == str 的每一个字符 A B C D ...</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$it</span> "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    str<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> c <span class="token operator">-&gt;</span><span class="token comment">//覆盖默认的it参数名,相当于修改参数名为c</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$c</span> "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言中数字类型的安全转换函数"><a href="#Kotlin语言中数字类型的安全转换函数" class="headerlink" title="Kotlin语言中数字类型的安全转换函数"></a>Kotlin语言中数字类型的安全转换函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> number<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token string">"666"</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>    <span class="token keyword">val</span> number2<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"666.6"</span><span class="token punctuation">.</span><span class="token function">toIntOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>number2<span class="token punctuation">)</span>    <span class="token keyword">val</span> number3<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"666"</span><span class="token punctuation">.</span><span class="token function">toIntOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>number3<span class="token punctuation">)</span>    <span class="token keyword">val</span> number4<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"666.6"</span><span class="token punctuation">.</span><span class="token function">toIntOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>number4 <span class="token operator">?:</span> <span class="token string">"无法转换,输出为null"</span><span class="token punctuation">)</span>    <span class="token comment">//字符串转换为整型时建议使用 toIntOrNull 方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言中Double转Int与类型格式化"><a href="#Kotlin语言中Double转Int与类型格式化" class="headerlink" title="Kotlin语言中Double转Int与类型格式化"></a>Kotlin语言中Double转Int与类型格式化</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>math<span class="token punctuation">.</span>roundToInt<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token number">65.124543625</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//65</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token number">65.972674328</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//65</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token number">65.124654243</span><span class="token punctuation">.</span><span class="token function">roundToInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//65</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token number">65.678937455</span><span class="token punctuation">.</span><span class="token function">roundToInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//66</span>    <span class="token comment">//toInt 直接去除小数部分</span>    <span class="token comment">//roundToInt 四舍五入</span>    <span class="token comment">//r 类型为 字符串 保留3位</span>    <span class="token keyword">val</span> r <span class="token operator">=</span> <span class="token string">"%.3f"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">65.678937455</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的apply内置函数"><a href="#Kotlin语言的apply内置函数" class="headerlink" title="Kotlin语言的apply内置函数"></a>Kotlin语言的apply内置函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> info <span class="token operator">=</span> <span class="token string">"Welcome To My Class"</span>    <span class="token comment">//普通的方式</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"info字符串的长度为:<span class="token interpolation"><span class="token delimiter variable">${</span>info<span class="token punctuation">.</span>length<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"info最后一个字符为:<span class="token interpolation"><span class="token delimiter variable">${</span>info<span class="token punctuation">[</span>info<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"info全部转化小写为:<span class="token interpolation"><span class="token delimiter variable">${</span>info<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//apply 内置函数</span>    <span class="token comment">//info.apply返回值为info本身</span>    <span class="token keyword">val</span> infoNew <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"apply匿名函数内:<span class="token interpolation"><span class="token delimiter variable">${</span><span class="token keyword">this</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"info字符串的长度为:<span class="token interpolation"><span class="token delimiter variable">${</span>length<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"info最后一个字符为:<span class="token interpolation"><span class="token delimiter variable">${</span>info<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"info全部转化小写为:<span class="token interpolation"><span class="token delimiter variable">${</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"apply返回值:<span class="token interpolation"><span class="token delimiter variable">${</span>infoNew<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token comment">//apply函数真正写法:</span>    info<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"info字符串的长度为:<span class="token interpolation"><span class="token delimiter variable">${</span>length<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"info最后一个字符为:<span class="token interpolation"><span class="token delimiter variable">${</span>info<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"info全部转化小写为:<span class="token interpolation"><span class="token delimiter variable">${</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//普通写法</span>    <span class="token keyword">val</span> file <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"E:\\test.txt"</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span><span class="token function">setExecutable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span><span class="token function">setReadable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//apply写法</span>    file<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">setExecutable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">setReadable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">readLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>apply: .apply<br>1.apply函数返回类型由调用对象本身决定<br>2.apply函数的匿名函数里面持有的是this == 调用对象本身</p><h3 id="Kotlin语言的let内置函数"><a href="#Kotlin语言的let内置函数" class="headerlink" title="Kotlin语言的let内置函数"></a>Kotlin语言的let内置函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//普通方式 对集合第一个元素相加</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> value1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> result1 <span class="token operator">=</span> value1 <span class="token operator">+</span> value1    <span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>    <span class="token comment">//let方式 对集合第一个元素相加</span>    <span class="token keyword">val</span> result2 <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>        <span class="token comment">//it == list 集合</span>        it<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> it<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//匿名函数最后一行作为返回值 apply永远返回调用对象本身</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getMethod1</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getMethod2</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getMethod3</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getMethod4</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//普通函数判断null 并返回</span><span class="token keyword">fun</span> <span class="token function">getMethod1</span><span class="token punctuation">(</span>value<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token string">"你传递的内容为null"</span> <span class="token keyword">else</span> <span class="token string">"欢迎<span class="token interpolation"><span class="token delimiter variable">${</span>value<span class="token delimiter variable">}</span></span>登录"</span><span class="token punctuation">}</span><span class="token comment">//简写</span><span class="token keyword">fun</span> <span class="token function">getMethod2</span><span class="token punctuation">(</span>value<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token string">"你传递的内容为null"</span> <span class="token keyword">else</span> <span class="token string">"欢迎<span class="token interpolation"><span class="token delimiter variable">${</span>value<span class="token delimiter variable">}</span></span>登录"</span><span class="token comment">//let 方法+ 空合并操作符判断null 并返回</span><span class="token keyword">fun</span> <span class="token function">getMethod3</span><span class="token punctuation">(</span>value<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>        <span class="token string">"欢迎<span class="token interpolation"><span class="token delimiter variable">${</span>value<span class="token delimiter variable">}</span></span>登录"</span>    <span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token string">"你传递的内容为null"</span><span class="token punctuation">}</span><span class="token comment">//简写</span><span class="token keyword">fun</span> <span class="token function">getMethod4</span><span class="token punctuation">(</span>value<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">=</span> value<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>    <span class="token string">"欢迎<span class="token interpolation"><span class="token delimiter variable">${</span>value<span class="token delimiter variable">}</span></span>登录"</span><span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token string">"你传递的内容为null"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>let: .let<br>1.let函数返回类型是根据匿名函数最后一行变化而变化<br>2.let函数的匿名函数里面持有的是it == 调用对象本身</p><h3 id="Kotlin语言的run内置函数"><a href="#Kotlin语言的run内置函数" class="headerlink" title="Kotlin语言的run内置函数"></a>Kotlin语言的run内置函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//run函数特点 字符串延时</span>    <span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"My name is zhangSan"</span>    <span class="token keyword">val</span> r1<span class="token operator">:</span> Float <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>        <span class="token comment">//this == str</span>        <span class="token number">5435.5f</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>    <span class="token comment">//具名函数配合run函数</span>    <span class="token comment">//具名函数判断长度 isLong</span>    str<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">//具名函数</span>    str        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">::</span>isLong<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">::</span>showText<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">::</span>mapText<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">::</span>println<span class="token punctuation">)</span>    <span class="token comment">//let写法</span>    str        <span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span><span class="token operator">::</span>isLong<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span><span class="token operator">::</span>showText<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span><span class="token operator">::</span>mapText<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span><span class="token operator">::</span>println<span class="token punctuation">)</span>    <span class="token comment">//匿名函数</span>    str<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>        length <span class="token operator">&gt;</span> <span class="token number">5</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token string">"字符串长度大于5"</span> <span class="token keyword">else</span> <span class="token string">"字符串长度不大于5"</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>        <span class="token string">"[<span class="token interpolation variable">$this</span>]"</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">isLong</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token keyword">fun</span> <span class="token function">showText</span><span class="token punctuation">(</span>isLong<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLong<span class="token punctuation">)</span> <span class="token string">"字符串长度大于5"</span> <span class="token keyword">else</span> <span class="token string">"字符串长度不大于5"</span><span class="token keyword">fun</span> <span class="token function">mapText</span><span class="token punctuation">(</span>getShow<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"[<span class="token interpolation variable">$getShow</span>]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>run: .run<br>1.run函数返回类型是根据匿名函数最后一行变化而变化<br>2.run函数的匿名函数里面持有的是this == 调用对象本身</p><h3 id="Kotlin语言的with内置函数"><a href="#Kotlin语言的with内置函数" class="headerlink" title="Kotlin语言的with内置函数"></a>Kotlin语言的with内置函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"zhangSan"</span>    <span class="token comment">//具名操作</span>    <span class="token keyword">val</span> len <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token operator">::</span>getStrLen<span class="token punctuation">)</span>    <span class="token keyword">val</span> info <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token operator">::</span>getLenInfo<span class="token punctuation">)</span>    <span class="token keyword">val</span> map <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token operator">::</span>getInfoMap<span class="token punctuation">)</span>    <span class="token function">with</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token operator">::</span>showM<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//匿名操作</span>    <span class="token function">with</span><span class="token punctuation">(</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token function">with</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        length    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token string">"字符串长度为:<span class="token interpolation variable">$this</span>"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token string">"[<span class="token interpolation variable">$this</span>]"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">getStrLen</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token keyword">fun</span> <span class="token function">getLenInfo</span><span class="token punctuation">(</span>len<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"字符串长度为:<span class="token interpolation variable">$len</span>"</span><span class="token keyword">fun</span> <span class="token function">getInfoMap</span><span class="token punctuation">(</span>info<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"[<span class="token interpolation variable">$info</span>]"</span><span class="token keyword">fun</span> <span class="token function">showM</span><span class="token punctuation">(</span>content<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>with: with()<br>1.with函数返回类型是根据匿名函数最后一行变化而变化<br>2.with函数的匿名函数里面持有的是this == 调用对象本身</p><h3 id="Kotlin语言的also内置函数"><a href="#Kotlin语言的also内置函数" class="headerlink" title="Kotlin语言的also内置函数"></a>Kotlin语言的also内置函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> str<span class="token operator">=</span><span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>    <span class="token comment">//可以链式调用</span>    str<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str:<span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str装化为小写:<span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度为:<span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span>length<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">val</span> file <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"E:\\test.txt"</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>        it<span class="token punctuation">.</span><span class="token function">setExecutable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>        it<span class="token punctuation">.</span><span class="token function">setReadable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>also: .also<br>1.also函数返回类型由调用对象本身决定<br>2.also函数的匿名函数里面持有的是it == 调用对象本身</p><h3 id="Kotlin语言的takeIf内置函数"><a href="#Kotlin语言的takeIf内置函数" class="headerlink" title="Kotlin语言的takeIf内置函数"></a>Kotlin语言的takeIf内置函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//真正用途</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">checkPermission2</span><span class="token punctuation">(</span><span class="token string">"zhangSanSan"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//name.takeIf{ true/false }</span><span class="token comment">//true: 返回name</span><span class="token comment">//false: 返回null</span><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">checkPermission</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> pwd<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">takeIf</span> <span class="token punctuation">{</span> <span class="token function">permissionSystem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//takeIf + 空合并操作符</span><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">checkPermission2</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> pwd<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">takeIf</span> <span class="token punctuation">{</span> <span class="token function">permissionSystem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token string">"error"</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">permissionSystem</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> pwd<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>    <span class="token keyword">return</span> name <span class="token operator">==</span> <span class="token string">"zhangSan"</span> <span class="token operator">&amp;&amp;</span> pwd <span class="token operator">==</span> <span class="token string">"12345"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>name.takeIf{ true/false }</p><ul><li>true: 返回name</li><li>false: 返回null</li></ul><p>大多情况下都是 <code>takeIf + 空合并操作符</code> 一起使用</p><h3 id="Kotlin语言的takeUnless内置函数"><a href="#Kotlin语言的takeUnless内置函数" class="headerlink" title="Kotlin语言的takeUnless内置函数"></a>Kotlin语言的takeUnless内置函数</h3><p>与takeIf功能是相反的</p><p>name.takeUnless{ true/false }</p><ul><li>true: 返回null</li><li>false: 返回name</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Manager <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> infoValue<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">fun</span> <span class="token function">getInfoValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> infoValue    <span class="token keyword">fun</span> <span class="token function">setInfoValue</span><span class="token punctuation">(</span>infoValue<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>infoValue <span class="token operator">=</span> infoValue    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> manager <span class="token operator">=</span> <span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    manager<span class="token punctuation">.</span><span class="token function">setInfoValue</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">)</span>    <span class="token comment">//小结:takeUnless + it.isNullOrBlank()一起使用可以验证字符串有没有初始化</span>    <span class="token keyword">val</span> r <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getInfoValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takeUnless</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">isNullOrBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token string">"未经过任何初始化"</span>    <span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List创建与元素获取"><a href="#List创建与元素获取" class="headerlink" title="List创建与元素获取"></a>List创建与元素获取</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token string">"liSi"</span><span class="token punctuation">,</span> <span class="token string">"wangWu"</span><span class="token punctuation">,</span> <span class="token string">"zhaoLiu"</span><span class="token punctuation">)</span>    <span class="token comment">//普通取值 索引 运算符重载</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">//防止崩溃取值方式  getOrElse getOrNull</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">"越界"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">"越界"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//一般 getOrNull+空合并操作符</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string">"越界"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变List集合"><a href="#可变List集合" class="headerlink" title="可变List集合"></a>可变List集合</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token string">"liSi"</span><span class="token punctuation">,</span> <span class="token string">"wangWu"</span><span class="token punctuation">)</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zhaoLiu"</span><span class="token punctuation">)</span>    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"wangWu"</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment">//可变集合 to 不可变集合</span>    <span class="token keyword">val</span> list1<span class="token operator">:</span>List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token comment">//不可变集合 to 可变集合</span>    <span class="token keyword">val</span> list2 <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> list3<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">toMutableList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">890</span><span class="token punctuation">)</span>    list3<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的mutator函数"><a href="#Kotlin语言的mutator函数" class="headerlink" title="Kotlin语言的mutator函数"></a>Kotlin语言的mutator函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> list<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token string">"liSi"</span><span class="token punctuation">,</span> <span class="token string">"wangWu"</span><span class="token punctuation">)</span>    list <span class="token operator">+=</span> <span class="token string">"张三"</span><span class="token comment">//mutator的特性 += -= 就是运算符的重载</span>    list <span class="token operator">+=</span> <span class="token string">"李四"</span>    list <span class="token operator">-=</span> <span class="token string">"zhangSan"</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment">//removeIf</span>    <span class="token comment">//list.removeIf{true}//true:自动遍历整个集合,进行一个一个元素的输出</span>    list<span class="token punctuation">.</span><span class="token function">removeIf</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment">//过滤所有的元素 只要包含有li的元素就是true、</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List集合编历"><a href="#List集合编历" class="headerlink" title="List集合编历"></a>List集合编历</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token comment">//1.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"元素:<span class="token interpolation variable">$i</span> "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//2.</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>        <span class="token comment">//it = 每一个元素</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"元素:<span class="token interpolation variable">$it</span> "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//3.</span>    list<span class="token punctuation">.</span><span class="token function">forEachIndexed</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> item <span class="token operator">-&gt;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"下标:<span class="token interpolation variable">$index</span>,元素:<span class="token interpolation variable">$item</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的解构语法过滤元素"><a href="#Kotlin语言的解构语法过滤元素" class="headerlink" title="Kotlin语言的解构语法过滤元素"></a>Kotlin语言的解构语法过滤元素</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> list<span class="token operator">:</span> List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token string">"liSi"</span><span class="token punctuation">,</span> <span class="token string">"wangWu"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">)</span> <span class="token operator">=</span> list    <span class="token function">print</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//使用_内部可以不接收赋值,可以节约一点性能</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">=</span> list<span class="token comment">//_用来过滤解构赋值,不接收赋值</span>    <span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set创建与元素获取"><a href="#Set创建与元素获取" class="headerlink" title="Set创建与元素获取"></a>Set创建与元素获取</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token keyword">set</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token string">"liSi"</span><span class="token punctuation">,</span> <span class="token string">"zhaoLiu"</span><span class="token punctuation">,</span> <span class="token string">"zhangSan"</span><span class="token punctuation">)</span><span class="token comment">//set集合不会输出重复元素</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span>    <span class="token comment">//set[0] set集合无[]使用方法</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//println(set.elementAt(3)) 崩溃 重复元素不算</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">elementAtOrElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">"越界"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">elementAtOrElse</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">"越界"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">elementAtOrNull</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">elementAtOrNull</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//elementAtOrNull+空合并操作符</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">elementAtOrNull</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string">"越界"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变Set集合"><a href="#可变Set集合" class="headerlink" title="可变Set集合"></a>可变Set集合</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token keyword">set</span><span class="token operator">:</span> MutableSet<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">mutableSetOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token string">"liSi"</span><span class="token punctuation">,</span> <span class="token string">"zhaoLiu"</span><span class="token punctuation">)</span>    <span class="token keyword">set</span> <span class="token operator">+=</span> <span class="token string">"张三"</span>    <span class="token keyword">set</span> <span class="token operator">-=</span> <span class="token string">"zhangSan"</span>    <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span>    <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"liSi"</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的集合转换与快捷函数"><a href="#Kotlin语言的集合转换与快捷函数" class="headerlink" title="Kotlin语言的集合转换与快捷函数"></a>Kotlin语言的集合转换与快捷函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> list <span class="token operator">:</span>MutableList<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span><span class="token string">"liSi"</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token string">"zhangSan"</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment">//List 转 Set 集合 去重</span>    <span class="token keyword">val</span> <span class="token keyword">set</span><span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span>    <span class="token comment">//List 转 Set  再转 List 集合 去重</span>    <span class="token keyword">val</span> list2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>    <span class="token comment">//快捷函数去重 distinct</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//等价写法</span>    <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">toMutableSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin中的数组类型"><a href="#Kotlin中的数组类型" class="headerlink" title="Kotlin中的数组类型"></a>Kotlin中的数组类型</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> intArray <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//    println(intArray[5]) 越界</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//elementAtOrElse  elementAtOrNull</span>    <span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">.</span><span class="token function">elementAtOrElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">.</span><span class="token function">elementAtOrElse</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">.</span><span class="token function">elementAtOrNull</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">.</span><span class="token function">elementAtOrNull</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//elementAtOrNull+ 空合并操作符</span>    <span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">.</span><span class="token function">elementAtOrNull</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string">"越界"</span><span class="token punctuation">)</span>    <span class="token comment">//List集合转数组</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> charArray <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span>    <span class="token comment">//arrayOf Array&lt;File&gt;</span>    <span class="token keyword">val</span> objArray <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map创建"><a href="#map创建" class="headerlink" title="map创建"></a>map创建</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> map1 <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span> <span class="token keyword">to</span> <span class="token punctuation">(</span><span class="token number">687.90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"liSi"</span> <span class="token keyword">to</span> <span class="token number">7868.90</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> map2 <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token number">5676.78</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"liSi"</span><span class="token punctuation">,</span> <span class="token number">6768.66</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取map值"><a href="#读取map值" class="headerlink" title="读取map值"></a>读取map值</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> map1 <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span> <span class="token keyword">to</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"liSi"</span> <span class="token keyword">to</span> <span class="token number">566</span><span class="token punctuation">)</span>    <span class="token comment">//1.重载[]运算符</span>    <span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">[</span><span class="token string">"zhangSan"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">[</span><span class="token string">"xxx"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//找不到返回null</span>    <span class="token comment">//2.getOrDefault 推荐</span>    <span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//3.getOrElse 推荐</span>    <span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//4.get 与 [] 等价</span>    <span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//5.getValue 建议不要使用</span>    <span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//println(map1.getValue("xxx"))//崩溃</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历map"><a href="#遍历map" class="headerlink" title="遍历map"></a>遍历map</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> map1 <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span> <span class="token keyword">to</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"liSi"</span> <span class="token keyword">to</span> <span class="token number">566</span><span class="token punctuation">,</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//1.</span>    map1<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k:<span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span>key<span class="token delimiter variable">}</span></span>, v:<span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span>value<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//2.</span>    map1<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token operator">-&gt;</span><span class="token comment">//覆盖it</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k:<span class="token interpolation variable">$key</span>, v:<span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//3.</span>    map1<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k:<span class="token interpolation variable">$k</span>, v:<span class="token interpolation variable">$v</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//4.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> map1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k:<span class="token interpolation"><span class="token delimiter variable">${</span>item<span class="token punctuation">.</span>key<span class="token delimiter variable">}</span></span>, v:<span class="token interpolation"><span class="token delimiter variable">${</span>item<span class="token punctuation">.</span>value<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变Map集合"><a href="#可变Map集合" class="headerlink" title="可变Map集合"></a>可变Map集合</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//1.可变集合操作+= [] put</span>    <span class="token keyword">val</span> map <span class="token operator">=</span> <span class="token function">mutableMapOf</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span> <span class="token keyword">to</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"liSi"</span> <span class="token keyword">to</span> <span class="token number">566</span><span class="token punctuation">,</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    map <span class="token operator">+=</span> <span class="token string">"AAA"</span> <span class="token keyword">to</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    map <span class="token operator">+=</span> <span class="token string">"BBB"</span> <span class="token keyword">to</span> <span class="token number">123</span>    map <span class="token operator">-=</span> <span class="token string">"zhangSan"</span>    map<span class="token punctuation">[</span><span class="token string">"CCC"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">345</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"DDD"</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">)</span><span class="token comment">//put 和 []等价</span>    <span class="token comment">//2.getOrPut 如果没有key值,就添加 有就不添加</span>    <span class="token keyword">val</span> r1 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrPut</span><span class="token punctuation">(</span><span class="token string">"FFF"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">4654</span><span class="token punctuation">}</span><span class="token comment">//返回添加的value</span>    <span class="token keyword">val</span> r2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrPut</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">4654</span><span class="token punctuation">}</span><span class="token comment">//返回原来key值对应的value</span>    <span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的定义类与field关键字"><a href="#Kotlin语言的定义类与field关键字" class="headerlink" title="Kotlin语言的定义类与field关键字"></a>Kotlin语言的定义类与field关键字</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Person <span class="token punctuation">{</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Tom"</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">"ABCD"</span>    <span class="token comment">/*默认存在    get() = field    set(value) {        field = value    }    */</span>    <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">"Tom and Jerry"</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            field <span class="token operator">=</span> <span class="token string">"**[<span class="token interpolation variable">$value</span>]**"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Jerry"</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">)</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token string">"liSi"</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的计算属性和防范竞态条件"><a href="#Kotlin语言的计算属性和防范竞态条件" class="headerlink" title="Kotlin语言的计算属性和防范竞态条件"></a>Kotlin语言的计算属性和防范竞态条件</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Person <span class="token punctuation">{</span>    <span class="token keyword">val</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">//val 只有getXXX 没有setXXX</span>    <span class="token comment">//计算属性</span>    <span class="token keyword">val</span> number2<span class="token operator">:</span> Int        <span class="token comment">//从1 到 1000取出一个值返回给get函数</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> info<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">//防范竞态条件 当调用成员(可能为null或者""),必须采用</span>    <span class="token keyword">fun</span> <span class="token function">getShowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>        <span class="token keyword">return</span> info<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token string">"空值"</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token string">"info:<span class="token interpolation variable">$it</span>"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token string">"null"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>number2<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getShowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的主构造函数"><a href="#Kotlin语言的主构造函数" class="headerlink" title="Kotlin语言的主构造函数"></a>Kotlin语言的主构造函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span>_name<span class="token operator">:</span> String<span class="token punctuation">,</span> _sex<span class="token operator">:</span> Char<span class="token punctuation">,</span> _age<span class="token operator">:</span> Int<span class="token punctuation">,</span> _info<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//主构造函数:规范 _xxx 临时输入类型 不能直接使用 需要接收成变量才能使用</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> _name        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> field<span class="token comment">//get不允许私有化</span>        <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            field <span class="token operator">=</span> value        <span class="token punctuation">}</span>    <span class="token keyword">val</span> sex <span class="token operator">=</span> _sex    <span class="token keyword">val</span> age <span class="token operator">=</span> _age        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>field <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> field    <span class="token keyword">val</span> info <span class="token operator">=</span> _info        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"[<span class="token interpolation variable">$field</span>]"</span>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span>_name <span class="token operator">=</span> <span class="token string">"zhangSan"</span><span class="token punctuation">,</span> _sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">,</span> _age <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">,</span> _info <span class="token operator">=</span> <span class="token string">"study"</span><span class="token punctuation">)</span>    <span class="token comment">//println(p.name)</span>    p<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的主构造函数里定义属性"><a href="#Kotlin语言的主构造函数里定义属性" class="headerlink" title="Kotlin语言的主构造函数里定义属性"></a>Kotlin语言的主构造函数里定义属性</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> sex<span class="token operator">:</span> Char<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> info<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"zhangSan"</span><span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">,</span> info <span class="token operator">=</span> <span class="token string">"study"</span><span class="token punctuation">)</span>    <span class="token comment">//println(p.name)</span>    p<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin次构造函数"><a href="#Kotlin次构造函数" class="headerlink" title="Kotlin次构造函数"></a>Kotlin次构造函数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Example</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token comment">//主构造</span><span class="token punctuation">{</span>    <span class="token comment">//次构造函数 必须要调用主构造函数</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token punctuation">,</span>sex<span class="token operator">:</span>Char<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:<span class="token interpolation variable">$name</span>,sex:<span class="token interpolation variable">$sex</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//次构造函数 必须要调用主构造函数</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token punctuation">,</span>sex<span class="token operator">:</span>Char<span class="token punctuation">,</span>info<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:<span class="token interpolation variable">$name</span>,sex:<span class="token interpolation variable">$sex</span>,info:<span class="token interpolation variable">$info</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> p <span class="token operator">=</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">)</span>    <span class="token function">Example</span><span class="token punctuation">(</span><span class="token string">"liSi"</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span>    <span class="token function">Example</span><span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token string">"like Jack"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的构造函数中的默认参数"><a href="#Kotlin语言的构造函数中的默认参数" class="headerlink" title="Kotlin语言的构造函数中的默认参数"></a>Kotlin语言的构造函数中的默认参数</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Example</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token operator">=</span><span class="token string">"zhangSan"</span><span class="token punctuation">)</span><span class="token comment">//主构造</span><span class="token punctuation">{</span>    <span class="token comment">//次构造函数 必须要调用主构造函数</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token operator">=</span><span class="token string">"zhangLi"</span><span class="token punctuation">,</span>sex<span class="token operator">:</span>Char<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:<span class="token interpolation variable">$name</span>,sex:<span class="token interpolation variable">$sex</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//次构造函数 必须要调用主构造函数</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token operator">=</span><span class="token string">"zhangSui"</span><span class="token punctuation">,</span>sex<span class="token operator">:</span>Char<span class="token punctuation">,</span>info<span class="token operator">:</span>String<span class="token operator">=</span><span class="token string">"like marry"</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:<span class="token interpolation variable">$name</span>,sex:<span class="token interpolation variable">$sex</span>,info:<span class="token interpolation variable">$info</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//优先调用主构造</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的初始化块"><a href="#Kotlin语言的初始化块" class="headerlink" title="Kotlin语言的初始化块"></a>Kotlin语言的初始化块</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Test</span><span class="token punctuation">(</span>username<span class="token operator">:</span>String<span class="token punctuation">,</span>userage<span class="token operator">:</span>Int<span class="token punctuation">,</span>usersex<span class="token operator">:</span>Char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//初始化块 init代码块</span>    <span class="token keyword">init</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主构造函数 <span class="token interpolation variable">$username</span> <span class="token interpolation variable">$userage</span> <span class="token interpolation variable">$usersex</span>"</span><span class="token punctuation">)</span>        <span class="token comment">//第一个参数false就会调用第二个参数lambda</span>        <span class="token comment">//判断name是不是空值 isNotBlank</span>        <span class="token function">require</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token string">"username is null"</span>        <span class="token punctuation">}</span>        <span class="token function">require</span><span class="token punctuation">(</span>userage<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"userage does not true"</span><span class="token punctuation">}</span>        <span class="token function">require</span><span class="token punctuation">(</span>usersex<span class="token operator">==</span><span class="token string">'男'</span><span class="token operator">||</span>usersex<span class="token operator">==</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"sex error"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>username<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"次构造函数 <span class="token interpolation variable">$username</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> userage <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">,</span> usersex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token comment">//调用主构造</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"liSi"</span><span class="token punctuation">)</span><span class="token comment">//调用次构造</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//username is null</span>    <span class="token comment">//Test("")</span>    <span class="token comment">//println()</span>    <span class="token comment">//userage does not true</span>    <span class="token comment">//Test("Jack", userage = -1, usersex = '女')</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的构造初始化顺序"><a href="#Kotlin语言的构造初始化顺序" class="headerlink" title="Kotlin语言的构造初始化顺序"></a>Kotlin语言的构造初始化顺序</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">A</span><span class="token punctuation">(</span>_name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> sex<span class="token operator">:</span> Char<span class="token punctuation">)</span><span class="token comment">//主构造</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> mName <span class="token operator">=</span> _name    <span class="token keyword">init</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> nameValue <span class="token operator">=</span> _name        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init代码块 name:<span class="token interpolation variable">$nameValue</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> sex<span class="token operator">:</span> Char<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"次构造 name:<span class="token interpolation variable">$name</span>,sex:<span class="token interpolation variable">$sex</span>,age:<span class="token interpolation variable">$age</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token comment">//调用次构造</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的延迟初始化lateinit"><a href="#Kotlin语言的延迟初始化lateinit" class="headerlink" title="Kotlin语言的延迟初始化lateinit"></a>Kotlin语言的延迟初始化lateinit</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A<span class="token punctuation">{</span>    <span class="token comment">//lateinit 使用时手动加载的懒加载</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> responseInfo<span class="token operator">:</span>String    <span class="token comment">//模拟服务器请求</span>    <span class="token keyword">fun</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//延时初始化 属于懒加载 当使用时才加载</span>        responseInfo <span class="token operator">=</span> <span class="token string">"加载成功"</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">showResponseResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//println("responseInfo:$responseInfo")</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">::</span>responseInfo<span class="token punctuation">.</span>isInitialized<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"responseInfo:<span class="token interpolation variable">$responseInfo</span>"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有初始化加载"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> r <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//使用时才加载</span>    <span class="token comment">//r.load()</span>    <span class="token comment">//使用</span>    r<span class="token punctuation">.</span><span class="token function">showResponseResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kotlin语言的惰性初始化by-lazy"><a href="#Kotlin语言的惰性初始化by-lazy" class="headerlink" title="Kotlin语言的惰性初始化by lazy"></a>Kotlin语言的惰性初始化by lazy</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//惰性初始化 by lazy 使用时自动加载的懒加载方式</span><span class="token keyword">class</span> KtBase <span class="token punctuation">{</span>    <span class="token comment">//普通方式</span>    <span class="token comment">//val databaseData1:String=readSQLServerDatabaseAction()</span>    <span class="token comment">//by lazy 懒加载</span>    <span class="token keyword">val</span> databaseData2 <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>        <span class="token function">readSQLServerDatabaseAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">readSQLServerDatabaseAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"loading..."</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"loading..."</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"loading..."</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"loading..."</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"loading..."</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"database load success."</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> p <span class="token operator">=</span> <span class="token function">KtBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果:<span class="token interpolation"><span class="token delimiter variable">${</span>p<span class="token punctuation">.</span>databaseData2<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>harmonyos</title>
      <link href="/liaojie.github.io/2022/01/19/harmonyos/"/>
      <url>/liaojie.github.io/2022/01/19/harmonyos/</url>
      
        <content type="html"><![CDATA[<h2 id="注册"><a href="#注册" class="headerlink" title="注册:"></a>注册:</h2><p>进入官网: <a href="http://www.harmonyos.com/">www.harmonyos.com</a><br>建议手机号注册,注册完后登录账号进行实名认证,根据需求选择个人开发者或者企业开发者,在弹出界面(请问你是否有以下敏感应用上架到应用市场)选择是(建议),接下来按照流程完成认证即可</p><h2 id="下载开发者工具"><a href="#下载开发者工具" class="headerlink" title="下载开发者工具:"></a>下载开发者工具:</h2><p>进入官网-&gt;点击开发-&gt;下拉找到<code>开发HarmonyOS引用</code>,点击HUAWEI DevEco Studio 下载-&gt;选择版本和自己电脑对应系统下载</p><p>双击安装包进行安装</p><p>自定义安装路径:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/os%E8%B7%AF%E5%BE%84.png"></p><p>Installation Options:(建议全选:Create Desktop Shortcut-桌面快捷方式;Update PATH Variable-添加环境变量;Update Context Menu-右键)<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/osoptions.png"></p><p>其他无脑点击next、Finish就行。</p><p>双击DevEco Studio运行:<br><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/environment_config-0000001052902427#section11105193853519">配置开发环境,参考官方文档</a></p><h2 id="DevEco-Studio常见设置"><a href="#DevEco-Studio常见设置" class="headerlink" title="DevEco Studio常见设置"></a>DevEco Studio常见设置</h2><ul><li>修改主题</li><li>设置字体大小</li><li>取消注释斜体并修改注释的颜色</li><li>自动导包</li><li>提示忽略大小写</li><li>修改自动提示的快捷键</li></ul><p>File-&gt;settings</p><ul><li>Appearance:Theme(主题)</li><li>Font:Font(字体:Consolas)、Size(大小:20)、Line spacing(行间距:1.2)</li><li>Language Defaults:Comments(注释)-Block comment(多行)、Line comment(单行):去掉Italic(斜体)</li><li>Code Completion:去掉Match case前的勾</li><li>Auto Import:勾上Add unambiguous imports on the fly和Optimize imports on the fly</li><li>Keymap(快捷键):Main menu-&gt;Code-&gt;Code Completion-&gt;Basic(自动提示)(改为ALT+/)</li></ul><h2 id="项目-跳转页面"><a href="#项目-跳转页面" class="headerlink" title="项目: 跳转页面"></a>项目: 跳转页面</h2><p>我们实际开发一般只会用到entry下的文件夹</p><ul><li>java 存放代码</li><li>resources 存放资源</li><li>config.json 配置信息</li></ul><p>运行项目:</p><ul><li>登录账号<ul><li>Tools-&gt;Device Manager</li><li>右上角用户头像</li></ul></li><li>选择并开启模拟器</li><li>运行项目<ul><li>点击小三角</li></ul></li></ul><p>页面包含关系:<br>外面是Ability,Ability中是一个或多个子页面AbilitySlice,子页面中有要展示的内容:图片、文本等信息</p><p>结论:</p><ul><li>在以后开发中,一个单独的功能(能力),对应着一个Ability</li><li>如果这个能力需要进行切换,那么就可以在Ability中写多个子页面AbilitySlice进行切换 </li></ul><p>config.json:<br>项目配置:<br>app:</p><ul><li>bundleName:包名</li><li>vendor:开发厂商描述,公司</li><li>version:版本号<ul><li>code:公司内部人员看到的版本号</li><li>name:用户看到的版本号<br>应用在设备上的配置信息:<br>deviceConfig:</li></ul></li><li>权限<br>代码中的配置:<br>module:</li><li>package:包名</li><li>device:表示当前可以运行在哪些设备上</li><li>distro:hap包描述</li><li>abilities:每一个ability的配置信息</li></ul><p>程序运行过程:</p><p>解析config.json-&gt;初始化-&gt;获取入口Ability的全类名-&gt;找到Ability,并运行-&gt;运行Ability中的子界面-&gt;加载xml文件,展示内容</p><p>页面跳转:<br>1.编写第一个页面(文本+按钮)<br>2.编写第二个页面(文本)<br>3.给按钮添加一个跳转</p><p>鸿蒙UI中,提供了俩种编写布局的方式:</p><ul><li>XML文件 标签表示要展示的不同内容</li></ul><p>代码:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;DirectionalLayout    xmlns:ohos="http://schemas.huawei.com/res/ohos"    ohos:height="match_parent"    ohos:width="match_parent"    ohos:alignment="center"    ohos:orientation="vertical"&gt;    &lt;Text        ohos:id="$+id:text_helloworld"        ohos:height="match_content"        ohos:width="match_content"        ohos:background_element="$graphic:background_ability_main"        ohos:layout_alignment="horizontal_center"        ohos:text="第一个页面"        ohos:text_size="40vp"        /&gt;    &lt;Button        ohos:height="match_content"        ohos:width="match_content"        ohos:background_element="red"        ohos:text_size="40fp"        ohos:text="点我"        ohos:id="$+id:but1"/&gt;&lt;/DirectionalLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>java代码 对象表示要展示的不同内容</li></ul><p>代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">Color</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//super.setUIContent(ResourceTable.Layout_ability_second);</span>        <span class="token comment">//1.创建一个布局对象</span>        <span class="token class-name">DirectionalLayout</span> dl<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DirectionalLayout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建文本对象</span>        <span class="token class-name">Text</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置内容</span>        t<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"第二个页面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置文字大小</span>        t<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置文字颜色</span>        t<span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.将文本对象添加到布局中、</span>        dl<span class="token punctuation">.</span><span class="token function">addComponent</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.把布局添加到子界面中</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Operation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>    <span class="token class-name">Button</span> btn<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.找到按钮 id</span>        btn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_but1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.给按钮添加一个点击事件</span>        <span class="token comment">//如果没有添加点击事件,用鼠标点击按钮之后是没有任何反应的</span>        <span class="token comment">//如果我们给按钮添加了一个点击事件,那么鼠标点击按钮之后,就可以执行对应的代码</span>        btn<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//鼠标点击按钮之后,执行对应的代码</span>        <span class="token comment">//跳转到第二个页面中</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>component<span class="token operator">==</span>btn<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//跳转到哪个页面中(意图)</span>            <span class="token class-name">Intent</span> intent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//包含要跳转页面的信息</span>            <span class="token class-name">Operation</span> operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent<span class="token punctuation">.</span>OperationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withDeviceId</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">//要跳转到哪个设备上,如果传递一个没有内容的字符串,表示跳转本机</span>                    <span class="token punctuation">.</span><span class="token function">withBundleName</span><span class="token punctuation">(</span><span class="token string">"com.example.myapplication"</span><span class="token punctuation">)</span><span class="token comment">//表示要跳转到哪个应用上,小括号里可以写包名</span>                    <span class="token punctuation">.</span><span class="token function">withAbilityName</span><span class="token punctuation">(</span><span class="token string">"com.example.myapplication.SecondAbility"</span><span class="token punctuation">)</span><span class="token comment">//设置要跳转的页面</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表示将上面的三个信息进行打包</span>            <span class="token comment">//将打包之后的operation对象设置到意图当中</span>            intent<span class="token punctuation">.</span><span class="token function">setOperation</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//跳转页面</span>            <span class="token function">startAbility</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建页面:右键<code>com.example.myapplication</code>-&gt;new-&gt;Ability-&gt;Empty Page Ability(java)</p><h2 id="组件、布局、事件"><a href="#组件、布局、事件" class="headerlink" title="组件、布局、事件"></a>组件、布局、事件</h2><p>1.屏幕展示出来的元素,都称之为组件<br>2.多个组件的摆放方式就是布局,组件必须添加到布局中才能显示出来</p><p>事件:就是可以被文本、按钮、图片等组件识别的操作<br>常见事件:单击、双击、长按、滑动事件</p><h3 id="单击事件"><a href="#单击事件" class="headerlink" title="单击事件"></a>单击事件</h3><p>布局:</p><p>ability_main.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:btn1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四种写法:<br>1.定义实现类</p><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.找到按钮</span>        <span class="token comment">//1.找到按钮</span>        <span class="token comment">//完整代码</span>        <span class="token comment">//this.findComponentById(ResourceTable.Id_btn1);</span>        <span class="token comment">//this:本类的对象(子界面对象)</span>        <span class="token comment">//子界面中通过id找到对应的组件</span>        <span class="token comment">//用this去调用方法可以省略不写</span>        <span class="token comment">//返回一个组件对象(所有组件的父类对象)</span>        <span class="token comment">//需要向下转型</span>        <span class="token class-name">Button</span> btn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_btn1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.给按钮绑定一个单击事件</span>        btn1<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//Component:所有组件的父类</span>        <span class="token comment">//参数:被点击的组件对象</span>        <span class="token class-name">Button</span> btn<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> component<span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.当前类作为实现类(能在被点击时使用其他组件对象)(重点)</p><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.找到按钮</span>        <span class="token class-name">Button</span> btn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_btn1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.给按钮绑定一个单击事件</span>        btn1<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Button</span> btn<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> component<span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.匿名内部类<br>弊端:只能使用一次</p><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.找到按钮</span>        <span class="token class-name">Button</span> btn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_btn1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.给按钮绑定一个单击事件</span>        btn1<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Button</span> btn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> component<span class="token punctuation">;</span>                btn<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.方法引用(重点)</p><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.找到按钮</span>        <span class="token class-name">Button</span> btn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_btn1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.给按钮绑定一个单击事件</span>        btn1<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">onClick</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Button</span> btn<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> component<span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双击事件"><a href="#双击事件" class="headerlink" title="双击事件"></a>双击事件</h3><p>步骤:<br>1.通过id找到组件<br>2.给按钮组件设置双击事件<br>3.本类实现DoubleClickedListener接口<br>4.重写onDoubleClick方法</p><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Text<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:btn1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication2<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication2<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">Color</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>DoubleClickedListener</span> <span class="token punctuation">{</span>    <span class="token class-name">Text</span> text1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.找到文本框组件和按钮组件</span>        <span class="token class-name">Button</span> btn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_btn1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.绑定事件</span>        btn1<span class="token punctuation">.</span><span class="token function">setDoubleClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDoubleClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//点击之后改变文本框内容</span>        text1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"双击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text1<span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="长按事件"><a href="#长按事件" class="headerlink" title="长按事件"></a>长按事件</h3><p>步骤:<br>1.通过id找到组件<br>2.给按钮组件设置长按事件<br>3.本类实现LongClickedListener接口<br>4.重写onLongClick方法</p><p>布局跟双击事件一样</p><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication2<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication2<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">Color</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>LongClickedListener</span> <span class="token punctuation">{</span>    <span class="token class-name">Text</span> text1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.找到文本框组件和按钮组件</span>        <span class="token class-name">Button</span> btn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_btn1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.绑定事件</span>        btn1<span class="token punctuation">.</span><span class="token function">setLongClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//点击之后改变文本框内容</span>        text1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"双击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text1<span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="滑动事件"><a href="#滑动事件" class="headerlink" title="滑动事件"></a>滑动事件</h3><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:dl<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Text<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication2<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>listenerapplication2<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>multimodalinput<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">MmiPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>multimodalinput<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">TouchEvent</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>TouchEventListener</span> <span class="token punctuation">{</span>    <span class="token class-name">Text</span> text1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.先找到整个布局对象</span>        <span class="token class-name">DirectionalLayout</span> dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_dl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.给整个布局添加滑动事件</span>        dl<span class="token punctuation">.</span><span class="token function">setTouchEventListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//记录按下时手指的位置</span>    <span class="token keyword">double</span> startX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> startY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">,</span> <span class="token class-name">TouchEvent</span> touchEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//component:滑动的组件-&gt;DirectionalLayout</span>        <span class="token comment">//touchEvent 动作对象</span>        <span class="token comment">//获取当前手指对屏幕进行的操作(按下、滑动、抬起)</span>        <span class="token keyword">int</span> action <span class="token operator">=</span> touchEvent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1 按下TouchEvent.PRIMARY_POINT_DOWN</span>        <span class="token comment">//2 松开TouchEvent.PRIMARY_POINT_UP</span>        <span class="token comment">//3 滑动/移动手指TouchEvent.POINT_MOVE</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">TouchEvent</span><span class="token punctuation">.</span>PRIMARY_POINT_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MmiPoint</span> point <span class="token operator">=</span> touchEvent<span class="token punctuation">.</span><span class="token function">getPointerPosition</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            startX <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            startY <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            text1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>startX <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> startY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">TouchEvent</span><span class="token punctuation">.</span>POINT_MOVE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">TouchEvent</span><span class="token punctuation">.</span>PRIMARY_POINT_UP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MmiPoint</span> point <span class="token operator">=</span> touchEvent<span class="token punctuation">.</span><span class="token function">getPointerPosition</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> endX <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> endY <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            text1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>endX <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> endY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>endX <span class="token operator">&gt;</span> startX <span class="token operator">&amp;&amp;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> startY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                text1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"右滑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>endX <span class="token operator">&lt;</span> startX <span class="token operator">&amp;&amp;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> startY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                text1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"左滑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>endY <span class="token operator">&lt;</span> startY <span class="token operator">&amp;&amp;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> startX<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                text1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"上滑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>endY <span class="token operator">&gt;</span> startY <span class="token operator">&amp;&amp;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> startX<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                text1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"下滑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//返回值:true:表示所有的动作都会触发当前方法并执行对应代码</span>        <span class="token comment">//false:表示只有第一个动作会触发当前方法并执行代码,后续的动作不会触发当前方法</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-双击点赞双击取消"><a href="#案例-双击点赞双击取消" class="headerlink" title="案例: 双击点赞双击取消"></a>案例: 双击点赞双击取消</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:dl<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pink<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:image<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>image_src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:heart_white<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>doubleclickheartapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>doubleclickheartapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Image</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>media<span class="token punctuation">.</span>photokit<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span></span><span class="token class-name">AVStorage</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>DoubleClickedListener</span> <span class="token punctuation">{</span>    <span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        image <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Image</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_image</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DirectionalLayout</span> dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_dl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dl<span class="token punctuation">.</span><span class="token function">setDoubleClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        image<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    image<span class="token punctuation">.</span><span class="token function">setImageAndDecodeBounds</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_heart_white</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    image<span class="token punctuation">.</span><span class="token function">setImageAndDecodeBounds</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_heart_red</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDoubleClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            image<span class="token punctuation">.</span><span class="token function">setImageAndDecodeBounds</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_heart_white</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            image<span class="token punctuation">.</span><span class="token function">setImageAndDecodeBounds</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_heart_red</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>layout:存放布局文件<br>media:存放图片<br>profile:存放文本等其他文件</p><h5 id="案例-获取随机段子"><a href="#案例-获取随机段子" class="headerlink" title="案例: 获取随机段子"></a>案例: 获取随机段子</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:background_ability_main<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$string:mainability_HelloWorld<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>multiple_lines</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20vp<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:btn1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>切换<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gray<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jokeapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jokeapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>global<span class="token punctuation">.</span>resource<span class="token punctuation">.</span></span><span class="token class-name">NotExistException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>global<span class="token punctuation">.</span>resource<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jokes<span class="token punctuation">;</span>    <span class="token class-name">Text</span> text1<span class="token punctuation">;</span>    <span class="token class-name">Button</span> btn1<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.资源管理器</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment">//用来拼接读取到的所有数据</span>            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResourceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Profile_joke</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//resource是一个字节流,利用字节流可以读取文件中的内容</span>            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//释放资源</span>            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//利用---将所有数据进行切割,分段</span>            jokes <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//当我们点击按钮后给文本框设置一个随机的笑话</span>            <span class="token comment">//找到相关组件</span>            text1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            btn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_btn1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//给按钮添加一个单击事件</span>            btn1<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotExistException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Random</span> r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取随机索引</span>        <span class="token keyword">int</span> index<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>jokes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过随机索引获取joke</span>        <span class="token class-name">String</span> randomJoke <span class="token operator">=</span> jokes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//设置到文本中</span>        text1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>randomJoke<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取随机图片类似,因为获取图片通过<code>ResourceTable.Media_heart_white</code>,所以只需要用一个ArrayList数组存储图片即可。</p><h5 id="案例-统计10s点击次数"><a href="#案例-统计10s点击次数" class="headerlink" title="案例: 统计10s点击次数"></a>案例: 统计10s点击次数</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:background_ability_main<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$string:mainability_HelloWorld<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40vp<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>开始<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skyblue<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>countapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>countapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>    <span class="token class-name">Button</span> btn<span class="token punctuation">;</span>    <span class="token class-name">Text</span> text<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_btn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果flag为true表示当前按钮第一次点击</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//记录点击次数</span>    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//第一次点击按钮</span>            <span class="token comment">//记录当前时间</span>            startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            btn<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"请疯狂点我!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                btn<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//取消按钮点击事件</span>                btn<span class="token punctuation">.</span><span class="token function">setClickable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h4 id="1-常见布局和常见组件"><a href="#1-常见布局和常见组件" class="headerlink" title="1.常见布局和常见组件"></a>1.常见布局和常见组件</h4><p>组件:<br>屏幕展示出来的元素,都称之为组件。比如华为已经提供的:文本,图片,进度条,输入框等。<br>顶级父类:Component。<br>布局:<br>组件的展示方式。比如:线性布局,相对布局,绝对布局,格子布局等。<br>顶级父类:ComponentContainer。理解为组件容器。<br>布局一般以”Layout”结尾,如DirectionalLayout、DependentLayout等。不同的布局中,组件的展示方式是不一<br>样的,比如线性布局,就是从上往下,或者从左往右依次摆放内部组件的。比如格子布局,就是n行n列的格子。<br>注意点:<br>组件在未被添加到布局中时,既无法显示也无法交互,因此一个用户界面至少包含一个布局。</p><h4 id="2-常见组件"><a href="#2-常见组件" class="headerlink" title="2.常见组件"></a>2.常见组件</h4><p>组件分类:<br>显示类组件<br>只负责数据展示的,无法跟用户交互,比如展示文本的组件,展示图片的组件。<br>交互类组件<br>可以跟用户交互的,比如用户可以点击的按钮组件,用户可以输入的文本框组件。<br>布局类组件<br>刚刚讲解的布局其实也是一种比较特殊的组件。</p><h4 id="3-显示类组件"><a href="#3-显示类组件" class="headerlink" title="3.显示类组件"></a>3.显示类组件</h4><p>文本Text、图片Image、CommonDialog普通弹框组件、ToastDialog信息提示组件、时钟Clock、定时器<br>TickTimer、进度条ProgressBar<br>3.1Text文本组件<br>概述:<br>文本(Text)是用来显示字符串的组件,在界面上显示为一块文本区域。仅仅作为展示数据使用,用户不能在App<br>中修改文本组件中的内容。</p><p>Text组件是最基本的组件,后面还会学习他的子类组件,比如Button,TextField都是从这个类衍生而来的。</p><p>常见的属性:<br><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ui-java-component-text-0000001050729534">官方文档</a></p><table><thead><tr><th>功能说明</th><th>属性名称</th></tr></thead><tbody><tr><td>id属性,唯一</td><td>id</td></tr><tr><td>组件宽</td><td>width</td></tr><tr><td>组件高</td><td>height</td></tr><tr><td>文本内容</td><td>text</td></tr><tr><td>背景,可以设颜色值或xml背景</td><td>background_element</td></tr><tr><td>文字颜色</td><td>text_color</td></tr><tr><td>文字粗细</td><td>text_weight</td></tr><tr><td>斜体</td><td>italic</td></tr><tr><td>文字尺寸单位: fp</td><td>text_size</td></tr><tr><td>字体。如: Microsoft YaHei黑体、SimSun宋体、 KaiTi楷体</td><td>text_font</td></tr><tr><td>文字内容对齐方式</td><td>text_alignment</td></tr><tr><td>左/右外间距</td><td>left_margin / right_margin</td></tr><tr><td>上下外间距</td><td>top_magin / bottom_margin</td></tr><tr><td>左/右内间距</td><td>left_padding / right_padding</td></tr><tr><td>上下内间距</td><td>top_padding/ bottom_padding</td></tr><tr><td>文本内容换行</td><td>multiple_lines</td></tr><tr><td>最大文本显示行数</td><td>max_text_lines</td></tr><tr><td>自动调节文字大小</td><td>auto_font_size</td></tr></tbody></table><p>单独讲解的基本属性:<br>宽高大小 match_parent<br>match_content<br>具体的长度单位:px,vp,fp。<br>dp(安卓里面的单位,跟鸿蒙中的vp是一样的)<br>vp(虚拟像素)长度单位。<br>fp字体大小单位。不缩放的情况下fp=vp<br>(扩展点)如果有缩放。 1fp = 1vp * 缩放比例。<br>如果不写单位,默认单位是px<br>颜色属性:RGB光学三原色<br>书写形式:可以直接写单词。red<br>可以写十六进制的三原色。 #112233<br>可以写透明度。 #FF112233<br>可以写简写 #123(简写的时候不能加透明度)<br>其他写法(不利于阅读): #5901(前面补0,满足6位,不利于阅读)<br>间距:内边距,外边距。</p><p>vp = (px * 160)/PPI</p><p>PPI:屏幕像素点密度=对角线像素点个数/屏幕尺寸(每英寸中有多少个像素点)</p><h5 id="案例-登录布局"><a href="#案例-登录布局" class="headerlink" title="案例: 登录布局"></a>案例: 登录布局</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#f2f2f2<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fff<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入手机号<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#999<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fff<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#999<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>right_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>忘记密码?<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#979797<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>47vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8fd<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fefefe<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>77vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>47vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8fd<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fefefe<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-修改密码布局"><a href="#案例-修改密码布局" class="headerlink" title="案例: 修改密码布局"></a>案例: 修改密码布局</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#f2f2f2<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入新密码<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#999<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fff<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请确认密码<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#999<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fff<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>47vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>完成<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fefefe<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8fd<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-文本框展示大段文字"><a href="#案例-文本框展示大段文字" class="headerlink" title="案例: 文本框展示大段文字"></a>案例: 文本框展示大段文字</h5><p>省略文字和跑马灯效果</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#55121212<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>小明:你说我这穷日子啥时候是个头啊?小红:那得看你能活多久。<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>truncation_mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto_scrolling<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>auto_scrolling_count</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unlimited<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>auto_scrolling_duration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>loginapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>loginapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_sample_text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.获取组件</span>        <span class="token class-name">Text</span> text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.给text文本框添加事件</span>        <span class="token comment">//当我们点击时开启跑马灯效果</span>        text<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//开启跑马灯效果</span>        <span class="token comment">//俩种方式获取文本对象</span>        <span class="token comment">//1.方法的参数,参数表示被点击的组件对象</span>        <span class="token comment">//2.可以把onStart方法中的text对象,挪到成员位置</span>        <span class="token class-name">Text</span> t<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> component<span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">startAutoScrolling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>截取模式<br>ellipsis_at_start:前面内容省略<br>ellipsis_at_end:后面内容省略<br>ellipsis_at_middle:中间内容省略,但是需要组件足够宽<br>none:不做任何处理<br>auto_scrolling:滚动处理,(需要开启滚动)<br>ohos:truncation_mode=”none”<br>滚动次数<br>整数表示滚动次数<br>unlimited:没有次数限制<br>ohos:auto_scrolling_count=”unlimited”<br>滚动持续时间:单位是毫秒<br>auto_scrolling_duration=”1000”</p><h3 id="Image图片组件"><a href="#Image图片组件" class="headerlink" title="Image图片组件"></a>Image图片组件</h3><p>概述:<br>图片(Image)是用来显示图片的组件。<br>常见的属性:<br>当然也有id,长、宽、高等。<br>具体可以参考华为开发手册(组件的通用属性):<br><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ui-java-component-common-xml-0000001138483639">https://developer.harmonyos.com/cn/docs/documentation/doc-guides/ui-java-component-common-xml-0000001138483639</a></p><p>比较重要的属性</p><table><thead><tr><th>属性名称</th><th>功能说明</th></tr></thead><tbody><tr><td>background_element (通用属性)</td><td>图片背景</td></tr><tr><td>image_src</td><td>图像</td></tr><tr><td>clip_alignment</td><td>图像裁剪对齐方式</td></tr><tr><td>scale_mode</td><td>图像缩放类型</td></tr></tbody></table><p>单独讲解的基本属性:</p><blockquote><p>image_src:如何在xml中使用本地资源文件。</p></blockquote><p>顺便讲一下如何在代码中使用本地资源文件。</p><p>基本用法:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>image_src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:all<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00ff00<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关方法:</p><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>setClipGravity</td><td>设置剪切对齐模式</td></tr><tr><td>setScaleMode</td><td>当图像和组件的大小不同时,此方法可以缩放或者剪切图像</td></tr></tbody></table><p>图片剪切显示:</p><ul><li>代码中:可以用setClipGravity方法</li><li>xml文件中:可以用clip_alignment属性<ul><li>上、下、左、右、居中</li><li>表示分别按照上、下、左、右、中间部位进行剪切。</li></ul></li></ul><p>图片缩放显示:</p><ul><li>代码中:可以用setScaleMode方法</li><li>xml文件中:可以用scale_mode属性<ul><li>inside:表示将原图按比例缩放到与Image相同或更小的尺寸,并居中显示。 有可能不会填充组件</li><li>center:表示不缩放,按Image大小显示原图中间部分。</li><li>stretch:表示将原图缩放到与Image大小一致。 拉伸。将组件填充。</li><li>clip_center:表示将原图按比例缩放到与Image相同或更大的尺寸,并居中显示。超过组件的部分被剪<br>切掉。</li><li>zoom_center:表示原图按照比例缩放到与Image最窄边一致,并居中显示。</li><li>zoom_end:表示原图按照比例缩放到与Image最窄边一致,并靠结束端显示。</li><li>zoom_start:表示原图按照比例缩放到与Image最窄边一致,并靠起始端显示。</li></ul></li></ul><p>注意:<br>一般来讲在设置的时候会跟图片保持一致,否则图片会失真。如果业务需求要调整图片大小,那么我们是找美工重<br>新做一张图,而不是代码拉伸或者剪切。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>image_src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:all<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00ff00<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>scale_mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom_center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>clip_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-点击按钮随机出现妹子的信息和介绍"><a href="#案例-点击按钮随机出现妹子的信息和介绍" class="headerlink" title="案例: 点击按钮随机出现妹子的信息和介绍"></a>案例: 点击按钮随机出现妹子的信息和介绍</h5><p>在项目下新建domain包,并新建GirlFriend.java文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>imageapplication<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GirlFriend</span> <span class="token punctuation">{</span>    <span class="token comment">//照片</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> photoID<span class="token punctuation">;</span>    <span class="token comment">//姓名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//年龄</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//地址</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token comment">//空参+全参</span>    <span class="token comment">//快捷键:alt + insert</span>    <span class="token comment">//空参:Constructor-&gt;select none</span>    <span class="token comment">//全参:Constructor-&gt;全选</span>    <span class="token keyword">public</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token keyword">int</span> photoID<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>photoID <span class="token operator">=</span> photoID<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//get set</span>    <span class="token comment">//getter and setter</span>    <span class="token comment">//按住shift不松,点击最后一条,即可以全选</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPhotoID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> photoID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhotoID</span><span class="token punctuation">(</span><span class="token keyword">int</span> photoID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>photoID <span class="token operator">=</span> photoID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:img<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>image_src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:girl1<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>姓名: 王美花1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:age<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>年龄: 29<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:address<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>地址: 南京<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:next<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#92d050<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>下一个<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fff<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:get<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#92d050<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>获取联系方式<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fff<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>imageapplication<span class="token punctuation">.</span>slice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>imageapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>imageapplication<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">GirlFriend</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>ability<span class="token punctuation">.</span></span><span class="token class-name">AbilitySlice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>aafwk<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Image</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>    <span class="token class-name">Image</span> img<span class="token punctuation">;</span>    <span class="token class-name">Text</span> name<span class="token punctuation">;</span>    <span class="token class-name">Text</span> age<span class="token punctuation">;</span>    <span class="token class-name">Text</span> address<span class="token punctuation">;</span>    <span class="token class-name">Button</span> next<span class="token punctuation">;</span>    <span class="token class-name">Button</span> get<span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GirlFriend</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.找到组件对象</span>        img <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Image</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_address</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_next</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        get <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_get</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建一个集合装9个女朋友对象</span>        <span class="token comment">//添加9个对象</span>        <span class="token comment">//ctrl + p 显示形参</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_girl1</span><span class="token punctuation">,</span> <span class="token string">"王美花1"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_girl2</span><span class="token punctuation">,</span> <span class="token string">"王美花2"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_girl3</span><span class="token punctuation">,</span> <span class="token string">"王美花3"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_girl4</span><span class="token punctuation">,</span> <span class="token string">"王美花4"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_girl5</span><span class="token punctuation">,</span> <span class="token string">"王美花5"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_girl6</span><span class="token punctuation">,</span> <span class="token string">"王美花6"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_girl7</span><span class="token punctuation">,</span> <span class="token string">"王美花7"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_girl8</span><span class="token punctuation">,</span> <span class="token string">"王美花8"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_girl9</span><span class="token punctuation">,</span> <span class="token string">"王美花9"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.给按钮添加点击事件</span>        next<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        get<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">==</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//下一个</span>            <span class="token comment">//获取随机索引</span>            <span class="token keyword">int</span> randomIndex <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">GirlFriend</span> gf <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>randomIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将随机出来的信息设置到页面中</span>            img<span class="token punctuation">.</span><span class="token function">setImageAndDecodeBounds</span><span class="token punctuation">(</span>gf<span class="token punctuation">.</span><span class="token function">getPhotoID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"姓名: "</span> <span class="token operator">+</span> gf<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            age<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"年龄: "</span> <span class="token operator">+</span> gf<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            address<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"地址: "</span> <span class="token operator">+</span> gf<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">==</span> get<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//获取联系方式</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CommonDialog普通弹框组件"><a href="#CommonDialog普通弹框组件" class="headerlink" title="CommonDialog普通弹框组件"></a>CommonDialog普通弹框组件</h3><h4 id="使用默认布局的基本用法"><a href="#使用默认布局的基本用法" class="headerlink" title="使用默认布局的基本用法"></a>使用默认布局的基本用法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//把普通弹框弹出来就可以了 </span><span class="token comment">//1.创建弹框的对象 </span><span class="token comment">//this:当前弹框是哪展示在当前的界面中的。 </span><span class="token class-name">CommonDialog</span> cd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2.因为弹框里面是有默认布局的 </span><span class="token comment">//设置标题</span>cd<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span><span class="token string">"系统定位服务已关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置内容</span>cd<span class="token punctuation">.</span><span class="token function">setContentText</span><span class="token punctuation">(</span><span class="token string">"请打开定位服务,以便司机师傅能够准确接您上车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//自动关闭</span>cd<span class="token punctuation">.</span><span class="token function">setAutoClosable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置按钮 </span><span class="token comment">//参数一:按钮的索引 0 1 2 </span><span class="token comment">//参数二:按钮上的文字 </span><span class="token comment">//参数三:点击了按钮之后能做什么</span>cd<span class="token punctuation">.</span><span class="token function">setButton</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"设置"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IDialog<span class="token punctuation">.</span>ClickedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">IDialog</span> iDialog<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//写上点击了设置之后,要做的事情。 //如果点击之后我不需要做任何事情,在第三个参数中传递null就可以了。 </span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cd<span class="token punctuation">.</span><span class="token function">setButton</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"取消"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IDialog<span class="token punctuation">.</span>ClickedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">IDialog</span> iDialog<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//销毁弹框</span>    cd<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把弹框显示出来</span>cd<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义弹框布局"><a href="#自定义弹框布局" class="headerlink" title="自定义弹框布局"></a>自定义弹框布局</h4><p>编写思路:<br>弹框里面也是可以展示各种内容的,所以可以给弹框写一个xml布局文件:<br>文件名: <code>toast_layout_confirm.xml</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:message<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:submit<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a896<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>确定<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:cancel<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0021D9<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>取消<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//把弹框展示出来 </span><span class="token comment">//创建一个弹框对象 </span><span class="token class-name">CommonDialog</span> cd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//大小是默认包裹内容的。 </span><span class="token comment">//弹框默认是居中放置 </span><span class="token comment">//弹框默认是透明的 </span><span class="token comment">//弹框默认是直角,可以把直角设置为圆角</span>cd<span class="token punctuation">.</span><span class="token function">setCornerRadius</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把messagedislog的xml文件加载到内存当中。交给弹框并展示出来。 </span><span class="token comment">//加载xml文件并获得一个布局对象 </span><span class="token comment">//parse方法:加载一个xml文件,返回一个布局对象。 </span><span class="token comment">//参数一:要加载的xml文件 </span><span class="token comment">//参数二:该xml文件是否跟其他xml文件有关。如果无关是独立的,就写null就可以了 </span><span class="token comment">//参数三:如果文件是独立的,那么直接写false </span><span class="token class-name">DirectionalLayout</span> dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span> <span class="token class-name">LayoutScatter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_messagedialog</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//要给布局里面的文本和按钮设置事件或者修改内容 </span><span class="token comment">//此时需要用dl去调用,表示获取的是dl这个布局里面的组件。 </span><span class="token class-name">Text</span> title <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_message</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Button</span> submit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_submit</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Button</span> cancel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_cancel</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//title给标题设置内容 </span>title<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//还需要给两个按钮添加单击事件 </span>submit<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>     title<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"点击了确定按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取消按钮也要添加点击事件</span>cancel<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//当点击了取消按钮之后,把弹框给关闭</span>    cd<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时布局对象跟弹框还没有任何关系 </span><span class="token comment">//我还需要把布局对象交给弹框才可以</span>cd<span class="token punctuation">.</span><span class="token function">setContentCustomComponent</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//让弹框展示出来</span>cd<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意点:<br>如果需要更复杂的弹框,只要丰富xml文件中的组件即可。</p><h4 id="抽取工具类"><a href="#抽取工具类" class="headerlink" title="抽取工具类"></a>抽取工具类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDialog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//把弹框展示出来 </span>    <span class="token comment">//创建一个弹框对象 </span>    <span class="token class-name">CommonDialog</span> cd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonDialog</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//大小是默认包裹内容的。 </span>    <span class="token comment">//弹框默认是居中放置 </span>    <span class="token comment">//弹框默认是透明的 </span>    <span class="token comment">//弹框默认是直角,可以把直角设置为圆角</span>    cd<span class="token punctuation">.</span><span class="token function">setCornerRadius</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//把messagedislog的xml文件加载到内存当中。交给弹框并展示出来。 //加载xml文件并获得一个布局对象 </span>    <span class="token comment">//parse方法:加载一个xml文件,返回一个布局对象。 </span>    <span class="token comment">//参数一:要加载的xml文件 </span>    <span class="token comment">//参数二:该xml文件是否跟其他xml文件有关。如果无关是独立的,就写null就可以了 </span>    <span class="token comment">//参数三:如果文件是独立的,那么直接写false </span>    <span class="token class-name">DirectionalLayout</span> dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span> <span class="token class-name">LayoutScatter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_messagedialog</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//要给布局里面的文本和按钮设置事件或者修改内容 </span>    <span class="token comment">//此时需要用dl去调用,表示获取的是dl这个布局里面的组件。 </span>    <span class="token class-name">Text</span> title <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Button</span> submit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_submit</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Button</span> cancel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_cancel</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//title给标题设置内容 </span>    title<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//还需要给两个按钮添加单击事件 </span>    submit<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>             title<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"点击了确定按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//取消按钮也要添加点击事件</span>    cancel<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//当点击了取消按钮之后,把弹框给关闭</span>            cd<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//此时布局对象跟弹框还没有任何关系 </span>    <span class="token comment">//我还需要把布局对象交给弹框才可以</span>    cd<span class="token punctuation">.</span><span class="token function">setContentCustomComponent</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//让弹框展示出来</span>    cd<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ToastDialog信息提示组件"><a href="#ToastDialog信息提示组件" class="headerlink" title="ToastDialog信息提示组件"></a>ToastDialog信息提示组件</h3><p>也叫做吐司弹框。其实就是一个小提示而已。<br>ToastDialog是CommonDialog的子类,所以具备CommonDialog相关的特性。<br>也包含了标题,内容还有选择按钮。<br>但是一般来讲,吐司弹框我们只用中间的内容部分,因为他出现的意义就是为了提示信息的。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ToastDialog</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToastDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"要显示的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">LayoutAlignment</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>相关设置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ToastDialog</span> toastDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToastDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置的大小 </span><span class="token comment">//如果不写,默认包裹内容 </span>toastDialog<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token class-name">DirectionalLayout<span class="token punctuation">.</span>LayoutConfig</span><span class="token punctuation">.</span>MATCH_CONTENT<span class="token punctuation">,</span> <span class="token class-name">DirectionalLayout<span class="token punctuation">.</span>LayoutConfig</span><span class="token punctuation">.</span>MATCH_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置持续时间 </span><span class="token comment">//如果不写,默认2秒</span>toastDialog<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置自动关闭 </span><span class="token comment">//如果不写,就是自动关闭 </span>toastDialog<span class="token punctuation">.</span><span class="token function">setAutoClosable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置位置 </span><span class="token comment">//如果不写,默认居中 </span>toastDialog<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">LayoutAlignment</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置提示信息内容 </span>toastDialog<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"要显示的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//让吐司展示出来 </span>toastDialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义布局和抽取工具类"><a href="#自定义布局和抽取工具类" class="headerlink" title="自定义布局和抽取工具类"></a>自定义布局和抽取工具类</h4><p>一般会把吐司提示信息封装成一个工具类,用到的时候再调用,这样可以自定义吐司里面的文本的样式。<br>在后面我们会学习美化组件,让吐司跟咱们在玩app的时候看到的弹框保持一致。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyToastUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//1.加载xml布局文件 </span>    <span class="token class-name">DirectionalLayout</span> dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span> <span class="token class-name">LayoutScatter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_mytoast</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//创建吐司弹框的对象 </span>    <span class="token class-name">ToastDialog</span> td <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToastDialog</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置吐司的大小 </span>    td<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token class-name">DirectionalLayout<span class="token punctuation">.</span>LayoutConfig</span><span class="token punctuation">.</span>MATCH_CONTENT<span class="token punctuation">,</span><span class="token class-name">DirectionalLayout<span class="token punctuation">.</span>LayoutConfig</span><span class="token punctuation">.</span>MATCH_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置出现的时间 </span>    td<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置自动关闭 </span>    td<span class="token punctuation">.</span><span class="token function">setAutoClosable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置对齐方式 </span>    td<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">LayoutAlignment</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//给吐司弹框设置要展示的文本内容 </span>    td<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//让吐司弹框出现 </span>    td<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽取工具类</p><p>布局</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:msg<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fff<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#464343<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ToastUtils.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>imageapplication<span class="token punctuation">.</span></span><span class="token class-name">ResourceTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">LayoutScatter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>components<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">LayoutAlignment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>agp<span class="token punctuation">.</span>window<span class="token punctuation">.</span>dialog<span class="token punctuation">.</span></span><span class="token class-name">ToastDialog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ohos<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToastUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.把xml加载到内存当中</span>        <span class="token class-name">DirectionalLayout</span> dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span> <span class="token class-name">LayoutScatter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_mytoast</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取到当前布局对象中文本组件</span>        <span class="token class-name">Text</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.把需要提示的信息设置到文本中</span>        msg<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.创建一个吐司对象</span>        <span class="token class-name">ToastDialog</span> td <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToastDialog</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置吐司的大小</span>        td<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token class-name">DirectionalLayout<span class="token punctuation">.</span>LayoutConfig</span><span class="token punctuation">.</span>MATCH_CONTENT<span class="token punctuation">,</span> <span class="token class-name">DirectionalLayout<span class="token punctuation">.</span>LayoutConfig</span><span class="token punctuation">.</span>MATCH_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置出现时间</span>        td<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置对齐方式</span>        td<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">LayoutAlignment</span><span class="token punctuation">.</span>BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把xml中的布局对象交给吐司</span>        td<span class="token punctuation">.</span><span class="token function">setContentCustomComponent</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让吐司做一个偏移</span>        td<span class="token punctuation">.</span><span class="token function">setOffset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让吐司出现</span>        td<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Clock时钟组件"><a href="#Clock时钟组件" class="headerlink" title="Clock时钟组件"></a>Clock时钟组件</h3><h4 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h4><p>是Text的子类,所以可以使用Text的一些属性。</p><p>常用属性:</p><table><thead><tr><th>属性名称</th><th>功能说明</th></tr></thead><tbody><tr><td>time</td><td>设置开始时间(值为毫秒值) 如果写0,表示从1970年1月1日 0:0:0开始计时 该属性不写。默认是从当前时间开始计时</td></tr><tr><td>time_zoom</td><td>时区 包括: GMT(格林威治标准时间)</td></tr><tr><td>UTC(世界标准时间)</td><td></td></tr><tr><td>CST(美国、澳大利亚、古巴或中国的标准时间)</td><td></td></tr><tr><td>DST(夏令时)</td><td></td></tr><tr><td>PDT(太平洋夏季时间)</td><td></td></tr><tr><td>mode_24_hour</td><td>按照24小时显示的格式。值为指定的格式。</td></tr><tr><td>mode_12_hour</td><td>按照12小时显示的格式。值为指定的格式。</td></tr></tbody></table><p>常见方法:</p><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>setTime(long time)</td><td>传入时间的毫秒值</td></tr><tr><td>setTimeZoon(String timeZone)</td><td>传入时区</td></tr><tr><td>set24HourModeEnabled(boolean format24Hour)</td><td>设置是否按照24小时制进行显示</td></tr><tr><td>参数:false:不按24小时 true:按24小时</td><td></td></tr><tr><td>默认:true</td><td></td></tr></tbody></table><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将字符串表示的时间(2021-01-01 11:11:11)转成毫秒值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">dateToTimeStamp</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span><span class="token punctuation">{</span>     <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Date</span> date <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">long</span> ts <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//将时间的毫秒值转换为时间</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">timeStampToDate</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">long</span> lt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>lt<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> res <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>展示12小时</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.找到时钟组件</span><span class="token class-name">Clock</span> clock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Clock</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_clock</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.修改时钟组件展示的方式</span><span class="token comment">//默认是24小时</span><span class="token comment">//如果我们要按照12小时进行展示,需要把24小时的展示方式关闭</span>clock<span class="token punctuation">.</span><span class="token function">set24HourModeEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.指定12小时的展示格式</span>clock<span class="token punctuation">.</span><span class="token function">setFormatIn12HourMode</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 hh:mm:ss a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-12、24小时转换"><a href="#案例-12、24小时转换" class="headerlink" title="案例: 12、24小时转换"></a>案例: 12、24小时转换</h5><p>案例描述:<br>通过点击按钮,将时钟组件中的显示方式在24小时制和12小时制之间切换。</p><p>分析:<br>页面上有时钟组件和一个按钮组件。<br>时钟组件默认是按照24小时制显示时间。<br>点击按钮可以切换到12小时制显示时间。<br>再次点击按钮可以切换到24小时制显示时间。</p><p>布局:<br>ohos:time=”1861931471” 时钟时间戳 2029年1月1日11时11分11秒开始</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:clock<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>time</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1861931471<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>multiple_lines</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>mode_24_hour</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyy年MM月dd日 HH:mm:ss<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:but<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>改为12小时制<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#92D050<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>     <span class="token class-name">Clock</span> clock<span class="token punctuation">;</span>     <span class="token class-name">Button</span> but<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1.找到时钟组件</span>        clock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Clock</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_clock</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//找到按钮组件</span>        but <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_but</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.给按钮添加一个单击事件</span>        but<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果为0,表示24小时制 </span>    <span class="token comment">//如果为1,表示12小时制 </span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//表示当前为24小时,改为12小时 </span>            <span class="token comment">//默认是24小时的。 </span>            <span class="token comment">//如果我们要按照12小时进行展示,需要把24小时的展示方式给关闭</span>            clock<span class="token punctuation">.</span><span class="token function">set24HourModeEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//3.指定12小时的展示格式</span>            clock<span class="token punctuation">.</span><span class="token function">setFormatIn12HourMode</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 hh:mm:ss a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//修改按钮上的文字提示</span>            but<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"改为24小时制"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//修改标记 </span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//当前是12小时制,要改为24小时制</span>            clock<span class="token punctuation">.</span><span class="token function">set24HourModeEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//修改展示格式</span>            clock<span class="token punctuation">.</span><span class="token function">setFormatIn24HourMode</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//修改按钮上的文字提示</span>            but<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"改为12小时制"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//修改标记 </span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TickTimer定时器组件"><a href="#TickTimer定时器组件" class="headerlink" title="TickTimer定时器组件"></a>TickTimer定时器组件</h3><h4 id="组件说明-1"><a href="#组件说明-1" class="headerlink" title="组件说明"></a>组件说明</h4><p>是Text的子类,所以可以使用Text的一些属性。<br>该组件目前有一些bug。这些bug黑马程序员已经反馈至鸿蒙官方,后续版本中会修复这些bug。</p><p>bug汇总:</p><p>1.不要用setBaseTime去设置基准时间。<br>2.停止之后不用重新开始。</p><h4 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h4><table><thead><tr><th>属性名</th><th>功能说明</th></tr></thead><tbody><tr><td>format</td><td>设置显示的格式</td></tr><tr><td>count_down</td><td>true倒着计时</td></tr><tr><td>false正着计时</td><td></td></tr></tbody></table><h4 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h4><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>start()</td><td>启动计时器</td></tr><tr><td>stop()</td><td>暂停计时器</td></tr><tr><td>setBaseTime(long base)</td><td>设置基准时间,有bug</td></tr><tr><td>setCountDown(boolean countDown)</td><td>true:倒着计时,false:顺着计时</td></tr><tr><td>setFormat(String format)</td><td>设置显示格式。默认格式为:分钟::秒钟</td></tr><tr><td>setTickListener</td><td>计时监听</td></tr></tbody></table><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TickTimer</span>     <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:ticktimer<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>250vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ffffff<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0000ff<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有设置时间,默认是从1970年1月1日开始。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TickTimer</span> tickTimer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TickTimer</span><span class="token punctuation">)</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_ticktimer</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可能有bug,里边的事件,时间戳,绝对时间值,测试都不对 </span><span class="token comment">//没有设置时间,默认是从1970年1月1日开始。 </span><span class="token comment">//设置为0,是从当前时间开始。</span><span class="token comment">//非0:正数减时间,负数加时间,实际写代码测试一下,是否修改了这个bug </span><span class="token comment">//tickTimer.setBaseTime(时间的毫秒值); </span><span class="token comment">//设置是正着计时还是倒着计时。</span>tickTimer<span class="token punctuation">.</span><span class="token function">setCountDown</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正</span><span class="token comment">//设置格式 </span>tickTimer<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token string">"mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对时间进行监听 </span>tickTimer<span class="token punctuation">.</span><span class="token function">setTickListener</span><span class="token punctuation">(</span>监听回调<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开始计时 </span>tickTimer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可能有bug,执行后,后台没停止 </span>tickTimer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//纯Java实现 </span><span class="token comment">//每隔1秒就执行run里面的代码 </span><span class="token comment">//只不过没有页面显示而已。 </span><span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//...在这里写定时任务 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> timer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//停止计时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议:<br>1.不要使用setBaseTime去时钟基准时间<br>2.计时器一旦结束后就不要重新开始了(每一个计时器只使用一次)</p><h5 id="案例-统计10s点击次数-1"><a href="#案例-统计10s点击次数-1" class="headerlink" title="案例: 统计10s点击次数"></a>案例: 统计10s点击次数</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TickTimer</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:ticktimer<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0000FF<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:count<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0次<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:but<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>开始计时<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span><span class="token punctuation">,</span> <span class="token class-name">TickTimer<span class="token punctuation">.</span>TickListener</span> <span class="token punctuation">{</span>     <span class="token class-name">TickTimer</span> tickTimer<span class="token punctuation">;</span>     <span class="token class-name">Text</span> text<span class="token punctuation">;</span>     <span class="token class-name">Button</span> but<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1.找到三个组件对象 </span>        tickTimer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TickTimer</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_ticktimer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_count</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_but</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.给按钮绑定一个单击事件</span>        but<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//3.给定时器做一些基本设置 </span>        <span class="token comment">//false 正向计时 1 2 3 ...</span>        <span class="token comment">//true 反向计时 10 9 8 7 ....</span>        tickTimer<span class="token punctuation">.</span><span class="token function">setCountDown</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置计时格式 </span>        tickTimer<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token string">"mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//4.给定时器去绑定定时事件 </span>        tickTimer<span class="token punctuation">.</span><span class="token function">setTickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//是否第一次被点击。 </span>    <span class="token comment">//true:表示是第一次点击 </span>    <span class="token comment">//false:表示不是第一次点击。</span>    <span class="token keyword">boolean</span> first <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token comment">//定义变量用来统计点击的次数 </span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//记录游戏开始时间 </span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//当该方法被调用,证明按钮被点击了一次</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token comment">//判断当前是否第一次点击 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//第一次点击了 </span>            <span class="token comment">//记录游戏开始的时间 </span>            <span class="token comment">//要获取定时器中现在的时间 </span>            startTime <span class="token operator">=</span> <span class="token class-name">String2Long</span><span class="token punctuation">(</span>tickTimer<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//修改按钮里面的文本</span>            but<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"请疯狂点我"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//修改标记 </span>            first <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token comment">//开启定时器 </span>            tickTimer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment">//如果不是第一次点击 </span>        <span class="token comment">//那么就不需要做上面的事情,直接修改文本的内容就可以了 </span>        text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//当定时器开始计时的时候,就会不断的去调用onTickTimerUpdate这个方法 </span>    <span class="token comment">//tickTimer表示计时器的对象。 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTickTimerUpdate</span><span class="token punctuation">(</span><span class="token class-name">TickTimer</span> tickTimer<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//1.获取当前定时器的时间,并把该时间变成毫秒值 </span>        <span class="token keyword">long</span> nowTime <span class="token operator">=</span> <span class="token class-name">String2Long</span><span class="token punctuation">(</span>tickTimer<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.判断nowTime跟startTime之间的差有没有超过10秒 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nowTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             tickTimer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"最终成绩为:"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            but<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"游戏结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//取消按钮的点击事件</span>            but<span class="token punctuation">.</span><span class="token function">setClickable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token comment">//作用:就是把字符串类型的时间,变成毫秒值(long)</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token class-name">String2Long</span><span class="token punctuation">(</span><span class="token class-name">String</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> result<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ProgressBar进度条组件"><a href="#ProgressBar进度条组件" class="headerlink" title="ProgressBar进度条组件"></a>ProgressBar进度条组件</h3><h4 id="组件说明-2"><a href="#组件说明-2" class="headerlink" title="组件说明"></a>组件说明</h4><p>常见app中,下载进度条,完成任务的进度条等都会用到。</p><h4 id="常见属性-1"><a href="#常见属性-1" class="headerlink" title="常见属性"></a>常见属性</h4><table><thead><tr><th>属性名称</th><th>功能说明</th></tr></thead><tbody><tr><td>orientation</td><td>进度条的摆放</td></tr><tr><td>horizontal:水平</td><td></td></tr><tr><td>vertical:垂直</td><td></td></tr><tr><td>progress_color</td><td>进度条颜色</td></tr><tr><td>progress_width</td><td>进度条粗细</td></tr><tr><td>progress</td><td>当前的进度值</td></tr><tr><td>max</td><td>进度最大值</td></tr><tr><td>min</td><td>进度最小值</td></tr><tr><td>progress_hint_text</td><td>进度条文字</td></tr><tr><td>progress_hint_text_size</td><td>进度条文字大小</td></tr><tr><td>progress_hint_text_color</td><td>进度条文字颜色</td></tr><tr><td>progress_hint_text_alignment</td><td>进度条文字对齐方式</td></tr></tbody></table><h4 id="常见方法-1"><a href="#常见方法-1" class="headerlink" title="常见方法"></a>常见方法</h4><p>|方法名 |功能说明|<br>|setOrientation(int orientation) |方向|<br>|setProgressWidth(int progressWidth) |进度条的粗细|<br>|setMaxValue(int max) |最大进度值|<br>|setMinValue(int min) |最小进度值|<br>|setProgressValue(int progress) |当前的进度值|<br>|setViceProgress(int progress)|次一级进度值<br>(看电影时有个进度,电影的提前缓冲也有个进度。)|</p><h5 id="案例-点击一次进度加百分之5"><a href="#案例-点击一次进度加百分之5" class="headerlink" title="案例: 点击一次进度加百分之5"></a>案例: 点击一次进度加百分之5</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProgressBar</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:pb<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress_hint_text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0%<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress_hint_text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0000<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1.找到进度条组件 </span>        <span class="token class-name">ProgressBar</span> pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProgressBar</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_pb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.给进度条绑定一个单击事件</span>        pb<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//两种获取进度条组件的方式: </span>        <span class="token comment">//1.把onStart方法中的pb移动到成员位置 </span>        <span class="token comment">//2.onClick方法的形参,也表示被点击的组件对象 </span>        <span class="token comment">//强转 </span>        <span class="token class-name">ProgressBar</span> pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProgressBar</span><span class="token punctuation">)</span> component<span class="token punctuation">;</span>         <span class="token comment">//获取进度条里面原本的值 </span>        <span class="token keyword">int</span> progress <span class="token operator">=</span> pb<span class="token punctuation">.</span><span class="token function">getProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>progress <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//如果进度大于等于100,那么对进度条不会有任何的修改了。 </span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment">//把进度条里面的值 + 5</span>        progress <span class="token operator">=</span> progress <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>         <span class="token comment">//再给进度条设置进度</span>        pb<span class="token punctuation">.</span><span class="token function">setProgressValue</span><span class="token punctuation">(</span>progress<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//再修改一下提示文字</span>        pb<span class="token punctuation">.</span><span class="token function">setProgressHintText</span><span class="token punctuation">(</span>progress <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RoundProgressBar"><a href="#RoundProgressBar" class="headerlink" title="RoundProgressBar"></a>RoundProgressBar</h3><h4 id="组件说明-3"><a href="#组件说明-3" class="headerlink" title="组件说明"></a>组件说明</h4><p>是ProgressBar的子类,用法跟ProgressBar一模一样,只是显示的方式不一样。</p><h4 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h4><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RoundProgressBar</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress_hint_text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80%<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress_hint_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress_hint_text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0000<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">ohos:</span>min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交互类组件"><a href="#交互类组件" class="headerlink" title="交互类组件"></a>交互类组件</h2><p>可以跟用户进行交互的组件:<br>比如:</p><ul><li>文本输入框TextField<br>用户可以输入内容</li><li>按钮Button<br>用户可以点击</li><li>多选框Checkbox<br>用户可以选择</li><li>单选框RadioButton<br>用户可以选择</li><li>滑块Slider<br>用户可以滑动</li><li>可滚动的视图ScrollView<br>用户可以滚动阅读内容</li><li>列表容器ListContainer<br>以列表的形式展示数据</li><li>搜索框SeachBar<br>用来搜索的</li><li>页面切换PageSlider<br>多页面之间切换的组件<br>等等…</li></ul><h3 id="TextField文本输入框组件"><a href="#TextField文本输入框组件" class="headerlink" title="TextField文本输入框组件"></a>TextField文本输入框组件</h3><h4 id="组件说明-4"><a href="#组件说明-4" class="headerlink" title="组件说明"></a>组件说明</h4><p>是Text的子类,用来进行用户输入数据的。</p><h4 id="常见属性-2"><a href="#常见属性-2" class="headerlink" title="常见属性"></a>常见属性</h4><table><thead><tr><th>属性名称</th><th>功能说明</th></tr></thead><tbody><tr><td>hint</td><td>提示文字</td></tr><tr><td>basement</td><td>输入框基线的颜色</td></tr><tr><td>element_cursor_bubble</td><td>设置提示气泡</td></tr><tr><td>selection_color</td><td>选中文字的颜色</td></tr><tr><td>element_selection_left_bubble</td><td>设置选中之后左边的气泡</td></tr><tr><td>element_selection_right_bubble</td><td>设置选中之后右边的气泡</td></tr><tr><td>text_input_type</td><td>输入框中的输入类型(pattern_password密文展示)</td></tr></tbody></table><h5 id="案例-获取文本输入框中的内容并进行吐司提示"><a href="#案例-获取文本输入框中的内容并进行吐司提示" class="headerlink" title="案例: 获取文本输入框中的内容并进行吐司提示"></a>案例: 获取文本输入框中的内容并进行吐司提示</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#F2F2F2<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextField</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入信息<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#999999<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:but<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>47vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8FD<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>获取信息<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FEFEFE<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>77vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>     <span class="token class-name">TextField</span> tf<span class="token punctuation">;</span>     <span class="token class-name">Button</span> but<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1.找到文本输入框组件对象 </span>        tf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextField</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//找到按钮组件对象</span>        but <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_but</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.给按钮绑定一个点击事件 </span>        <span class="token comment">//当点击了按钮之后,就要获取文本输入框中的内容</span>        but<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//当点击了按钮之后,获取文本输入框中的内容 </span>        <span class="token class-name">String</span> message <span class="token operator">=</span> tf<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//利用一个吐司将信息弹出 </span>        <span class="token class-name">ToastDialog</span> td <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToastDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//大小不用设置,默认就是包裹内容的</span>        <span class="token comment">//自动关闭不用设置,默认到了时间之后就自动关闭 </span>        <span class="token comment">//持续时间可以不用设置,默认2秒 </span>        <span class="token comment">//设置吐司的背景。 </span>        td<span class="token punctuation">.</span><span class="token function">setTransparent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//位置(默认居中) </span>        td<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">LayoutAlignment</span><span class="token punctuation">.</span>BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置一个偏移 </span>        td<span class="token punctuation">.</span><span class="token function">setOffset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置吐司的内容 </span>        td<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//让吐司出现 </span>        td<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-明文与暗文切换"><a href="#案例-明文与暗文切换" class="headerlink" title="案例: 明文与暗文切换"></a>案例: 明文与暗文切换</h5><p>案例描述:<br>按住按钮不松,将输入框中的密码变成明文。<br>松开按钮之后,输入框中的密码变回密文。</p><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#F2F2F2<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextField</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>hint_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#999999<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_input_type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pattern_password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:but<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>47vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>查看密码<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FEFEFE<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8FD<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>77vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>TouchEventListener</span> <span class="token punctuation">{</span>     <span class="token class-name">TextField</span> tf<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.找到两个组件对象 </span>        tf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextField</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Button</span> but <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_but</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.要给按钮绑定一个触摸事件 </span>        <span class="token comment">//因为在触摸事件中,才可以获取到按下不松,松开 </span>        <span class="token comment">//单击事件 --- 只能捕获到点击了一下。</span>        but<span class="token punctuation">.</span><span class="token function">setTouchEventListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">//参数一:现在触摸的按钮。 </span>    <span class="token comment">//参数二:动作对象。</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">,</span> <span class="token class-name">TouchEvent</span> touchEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> action <span class="token operator">=</span> touchEvent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">TouchEvent</span><span class="token punctuation">.</span>PRIMARY_POINT_DOWN<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//当按下不松的时候,将文本框中的密码变成明文。 </span>            tf<span class="token punctuation">.</span><span class="token function">setTextInputType</span><span class="token punctuation">(</span><span class="token class-name">InputAttribute</span><span class="token punctuation">.</span>PATTERN_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">TouchEvent</span><span class="token punctuation">.</span>PRIMARY_POINT_UP<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//当松开的时候,将文本框中的密码变回密文。 </span>            tf<span class="token punctuation">.</span><span class="token function">setTextInputType</span><span class="token punctuation">(</span><span class="token class-name">InputAttribute</span><span class="token punctuation">.</span>PATTERN_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment">//true:表示触摸事件的后续动作还会进行触发 //false:表示触摸事件只触发第一个按下不松的动作。 </span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-搭建登录页面"><a href="#案例-搭建登录页面" class="headerlink" title="案例: 搭建登录页面"></a>案例: 搭建登录页面</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#F2F2F2<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextField</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:username<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#999999<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextField</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:password<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#999999<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_input_type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pattern_password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:forgetpassword<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>忘记密码了?<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#979797<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>right_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:login<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>47vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FEFEFE<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8FD<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>77vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:register<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>47vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FEFEFE<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8FD<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Button按钮组件"><a href="#Button按钮组件" class="headerlink" title="Button按钮组件"></a>Button按钮组件</h3><h4 id="组件说明-5"><a href="#组件说明-5" class="headerlink" title="组件说明"></a>组件说明</h4><p>这个组件之前我们经常使用,可以给他设置宽高,设置提示文字,设置背景色,还可以给他添加各种各样的事件。</p><h5 id="案例-文本当我女朋友好吗？"><a href="#案例-文本当我女朋友好吗？" class="headerlink" title="案例: 文本当我女朋友好吗？"></a>案例: 文本当我女朋友好吗？</h5><p>案例描述:点击按钮之后,按钮的位置随机变化。</p><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#d9d9d9<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>image_src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:photo<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>320vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:message<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>当我女朋友好吗?<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>320vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:submit<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>好的<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fefefe<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#92d050<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>320vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:cancel<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>不好<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fefefe<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#92d050<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>    <span class="token class-name">Text</span> message<span class="token punctuation">;</span>    <span class="token class-name">Button</span> submit<span class="token punctuation">;</span>    <span class="token class-name">Button</span> cancel<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.找到组件</span>        message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        submit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_submit</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cancel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_cancel</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.给两个按钮添加单击事件</span>        submit<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cancel<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//表示记录了点击不好的次数</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//判断当前点击的是好的,还是不好</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">==</span> submit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"恭喜你！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//与此同时,app在后台发送一个确认消息。</span>            <span class="token comment">// 取消两个按钮的点击事件。</span>            submit<span class="token punctuation">.</span><span class="token function">setClickable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cancel<span class="token punctuation">.</span><span class="token function">setClickable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">==</span> cancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//不好这个按钮被点击了一次</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//表示妹子是第一次点击不好</span>                message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"手滑了吧,再点一次吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//用代码设置大小,单位是像素px</span>                message<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//还需要把不好按钮的位置进行随机摆放</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> y <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cancel<span class="token punctuation">.</span><span class="token function">setTranslation</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//表示妹子不是第一次点击不好</span>                message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"我是你永远得不到的男人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//取消两个按钮的点击事件。</span>                submit<span class="token punctuation">.</span><span class="token function">setClickable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cancel<span class="token punctuation">.</span><span class="token function">setClickable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-用户登录界面"><a href="#案例-用户登录界面" class="headerlink" title="案例: 用户登录界面"></a>案例: 用户登录界面</h5><p>案例描述:<br>点击登录,验证用户名和密码。<br>成功,跳转主页面。<br>失败,提示用户输入错误。<br>点击注册,跳转注册页面。</p><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#F2F2F2<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextField</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:username<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#999999<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextField</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:password<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>hint_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#999999<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_input_type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pattern_password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:forgetpassword<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>忘记密码了?<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#979797<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>right_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:login<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>47vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FEFEFE<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8FD<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>77vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:register<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>47vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>319vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FEFEFE<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8FD<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>     <span class="token class-name">TextField</span> username<span class="token punctuation">;</span>     <span class="token class-name">TextField</span> password<span class="token punctuation">;</span>     <span class="token class-name">Text</span> forgetPassword<span class="token punctuation">;</span>     <span class="token class-name">Button</span> login<span class="token punctuation">;</span>     <span class="token class-name">Button</span> register<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1.找到5个组件对象 </span>        username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextField</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        password <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextField</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         forgetPassword <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_forgetpassword</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         login <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_login</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         register <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_register</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.给三个组件添加事件 </span>        forgetPassword<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         login<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         register<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>component <span class="token operator">==</span> forgetPassword<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//跳转到忘记密码页面 </span>            <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"用户点击了忘记密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>component <span class="token operator">==</span> login<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//比较用户输入的用户名和密码是否正确 </span>            <span class="token class-name">String</span> usernameInput <span class="token operator">=</span> username<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">String</span> passwordInput <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//拿着用户输入的用户名和密码进行比较 </span>            <span class="token comment">//在实际开发中,我们是把用户名和密码传递给服务器进行比较的。 </span>            <span class="token comment">//因为我们还没有学习如何跟服务器交互,所以此时我们先暂时写死 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>usernameInput<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>passwordInput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token comment">//如果用户名和密码有一个为空,那么都不能登录 </span>                <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"用户名或密码不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>usernameInput<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>passwordInput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token comment">//如果正确了,则跳转到app的主页面 </span>                <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                 <span class="token comment">//表示只要有一个错误了,都不能登录 </span>                <span class="token comment">//需要给用户一个提示 </span>                <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"用户名或密码错误了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>component <span class="token operator">==</span> register<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//跳转到注册页面 </span>            <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"用户点击了注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Checkbox多选框组件"><a href="#Checkbox多选框组件" class="headerlink" title="Checkbox多选框组件"></a>Checkbox多选框组件</h3><h4 id="组件说明-6"><a href="#组件说明-6" class="headerlink" title="组件说明"></a>组件说明</h4><p>父类是AbsButton,而AbsButton的父类是Button。<br>当我们需要同时选择多个元素的时候就需要用到多选框组件。<br>比如:发送图片的时候需要多选,注册的时候选择爱好也需要多选等。</p><h4 id="常见属性-3"><a href="#常见属性-3" class="headerlink" title="常见属性"></a>常见属性</h4><table><thead><tr><th>属性名称</th><th>功能说明</th></tr></thead><tbody><tr><td>marked</td><td>多选框的选中状态。true为选中,false为没有选中。</td></tr><tr><td>check_element</td><td>自定义选择框的样式。样式需要跟marked的值对应。</td></tr></tbody></table><h4 id="常见方法-2"><a href="#常见方法-2" class="headerlink" title="常见方法"></a>常见方法</h4><table><thead><tr><th>方法名称</th><th>功能说明</th></tr></thead><tbody><tr><td>setChecked</td><td>设置多选框的选中状态。true为选中,false为没有选中。</td></tr><tr><td>isChecked</td><td>判断多选框的选中状态。true为选中,false为没有选中。</td></tr><tr><td>setCheckedStateChangedListener</td><td>添加一个状态监听事件</td></tr></tbody></table><h5 id="案例-当多选框状态改变时-出现对应的吐司提示"><a href="#案例-当多选框状态改变时-出现对应的吐司提示" class="headerlink" title="案例: 当多选框状态改变时,出现对应的吐司提示"></a>案例: 当多选框状态改变时,出现对应的吐司提示</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Checkbox</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:cb<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>玩游戏<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8FD<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span>  吐司布局:<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:msg<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#464343<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">AbsButton<span class="token punctuation">.</span>CheckedStateChangedListener</span><span class="token comment">/*,Component.ClickedListener*/</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1.找到多选框组件 </span>        <span class="token class-name">Checkbox</span> cb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Checkbox</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_cb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.设置多选框的选中状态 </span>        <span class="token comment">//true表示选中 </span>        <span class="token comment">//false表示未选中</span>        cb<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//判断当前的多选框是否被选中 </span>        <span class="token comment">/*boolean checked = cb.isChecked();         if(checked){             ToastUtils.showDialog(this,"被选中了");         }else{             ToastUtils.showDialog(this,"没有被选中");         }*/</span>        <span class="token comment">//可以给多选框添加一个状态监听事件</span>        cb<span class="token punctuation">.</span><span class="token function">setCheckedStateChangedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// cb.setClickedListener(this); </span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//当多选框的状态被改变之后,就会调用这个方法 //参数一:absButton就表示状态被改变的那个多选框 </span>    <span class="token comment">//参数二:表示当前多选框的状态,true选中 false 未选中 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">AbsButton</span> absButton<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"未被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token comment">//小结: </span>    <span class="token comment">//当多选框绑定单击事件的时候,在onClick方法当中,获取的是点击之前的状态 </span>    <span class="token comment">//(建议)当多选框绑定状态改变事件的时候,在onCheckedChanged方法中,获取的是点击之后的状态 </span>    <span class="token comment">/* @Override    public void onClick(Component component) {        //参数:表示被点击的那个组件         Checkbox cb = (Checkbox) component;         if(cb.isChecked()){             ToastUtils.showDialog(this,"被选中");         }else{             ToastUtils.showDialog(this,"未被选中");         }     }*/</span><span class="token punctuation">}</span>吐司工具类代码<span class="token operator">:</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToastUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">//1.把xml文件加载到内存当中。 </span>        <span class="token class-name">DirectionalLayout</span> dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span> <span class="token class-name">LayoutScatter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_mytoast</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.获取到当前布局对象中文本组件 </span>        <span class="token class-name">Text</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//3.把需要提示的信息设置到文本组件中</span>        msg<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//4.创建一个吐司对象 </span>        <span class="token class-name">ToastDialog</span> td <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToastDialog</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置吐司的大小。--- 默认是包裹内容 </span>        td<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token class-name">DirectionalLayout<span class="token punctuation">.</span>LayoutConfig</span><span class="token punctuation">.</span>MATCH_CONTENT<span class="token punctuation">,</span><span class="token class-name">DirectionalLayout<span class="token punctuation">.</span>LayoutConfig</span><span class="token punctuation">.</span>MATCH_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置出现的时间 </span>        td<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置对齐方式 </span>        td<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">LayoutAlignment</span><span class="token punctuation">.</span>BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//把xml中的布局对象交给吐司 </span>        td<span class="token punctuation">.</span><span class="token function">setContentCustomComponent</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//把吐司做一个偏移 </span>        <span class="token comment">//偏移是以吐司弹框的基准位置进行偏移的 </span>        <span class="token comment">//如果是正数,就默认往屏幕中央去偏移 </span>        <span class="token comment">//如果是负数,就往屏幕中央的反方向去偏移 </span>        td<span class="token punctuation">.</span><span class="token function">setOffset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//让吐司出现 </span>        td<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-自定义时间显示格式"><a href="#案例-自定义时间显示格式" class="headerlink" title="案例: 自定义时间显示格式"></a>案例: 自定义时间显示格式</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:clock<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#778495<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>mode_24_hour</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyy年MM月dd日 HH:mm:ss<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Checkbox</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:year<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>年<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#5E5CA2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Checkbox</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:month<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>月<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#5E5CA2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Checkbox</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:day<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>日<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#5E5CA2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Checkbox</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:hour<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>时<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#5E5CA2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Checkbox</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:minutes<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>分<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#5E5CA2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Checkbox</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:second<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>秒<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#5E5CA2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:submit<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>确定<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>     <span class="token class-name">Clock</span> clock<span class="token punctuation">;</span>     <span class="token class-name">Button</span> but<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1.找到组件</span>        clock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Clock</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_clock</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_submit</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.给按钮去绑定单击事件</span>        but<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//最简单的实现方式 </span>        <span class="token comment">//判断6个多选框是否被选中,如果被选中,再拼接时间格式就可以了 </span>        <span class="token class-name">String</span> year <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_year</span><span class="token punctuation">,</span><span class="token string">"yyyy年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> month <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_month</span><span class="token punctuation">,</span><span class="token string">"MM月"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> day <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_day</span><span class="token punctuation">,</span><span class="token string">"dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> hour <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_hour</span><span class="token punctuation">,</span><span class="token string">"HH:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> minutes <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_minutes</span><span class="token punctuation">,</span><span class="token string">"mm:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> second <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_second</span><span class="token punctuation">,</span><span class="token string">"ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//拼接操作 </span>        <span class="token class-name">String</span> result <span class="token operator">=</span> year <span class="token operator">+</span> month <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> hour <span class="token operator">+</span> minutes <span class="token operator">+</span> second<span class="token punctuation">;</span>         <span class="token comment">// " " </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//表示所有的多选框都没有选择 </span>            <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"不能一个都不选"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//细节:表示当代码弹出吐司之后,方法就执行完毕,下面的代码不会执行了。 </span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment">//把时间展示的格式交给Clock组件</span>        clock<span class="token punctuation">.</span><span class="token function">setFormatIn24HourMode</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//定义一个方法 </span>    <span class="token comment">//作用:判断多选框有没有被选中 </span>    <span class="token comment">//如果被选中了,则返回字符串 </span>    <span class="token comment">//如果没有被选中,则返回一个长度为0的字符串</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token class-name">String</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">//根据传递过来的id找到对应的多选框 </span>        <span class="token class-name">Checkbox</span> cb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Checkbox</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//判断当前的多选框有没有被选中 </span>        <span class="token comment">//如果被选中,就返回result </span>        <span class="token comment">//如果没有被选中,就返回"" </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> result<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RadioButton单选框组件"><a href="#RadioButton单选框组件" class="headerlink" title="RadioButton单选框组件"></a>RadioButton单选框组件</h3><h4 id="组件说明-7"><a href="#组件说明-7" class="headerlink" title="组件说明"></a>组件说明</h4><p>父类是AbsButton,而AbsButton的父类是Button。在使用的时候需要用到单选按钮的按钮组。<br>RadioContainer,在一组内多选按钮只能选择其中一个。<br>当需要监听单选框的状态时,不要用AbsButton里面的CheckedStateChangedListener。而是给按钮组<br>RadioContainer添加事件。用RadioContainer里面的CheckedStateChangedListener。</p><h4 id="常见属性-4"><a href="#常见属性-4" class="headerlink" title="常见属性"></a>常见属性</h4><table><thead><tr><th>属性名称</th><th>功能说明</th></tr></thead><tbody><tr><td>marked</td><td>单选按钮的选中状态。true为选中,false为没有选中。</td></tr><tr><td>check_element</td><td>自定义选择框的样式。样式需要跟marked的值对应。</td></tr></tbody></table><h4 id="常见方法-3"><a href="#常见方法-3" class="headerlink" title="常见方法"></a>常见方法</h4><table><thead><tr><th>方法名称</th><th>功能说明</th></tr></thead><tbody><tr><td>setChecked</td><td>设置多选框的选中状态。true为选中,false为没有选中。</td></tr><tr><td>isChecked</td><td>判断多选框的选中状态。true为选中,false为没有选中。</td></tr><tr><td>setCheckedStateChangedListener</td><td>添加一个状态监听事件(一般不用)</td></tr></tbody></table><h4 id="按钮组RadioContainer常见方法"><a href="#按钮组RadioContainer常见方法" class="headerlink" title="按钮组RadioContainer常见方法"></a>按钮组RadioContainer常见方法</h4><table><thead><tr><th>方法名称</th><th>功能说明</th></tr></thead><tbody><tr><td>setMarkChangedListener</td><td>添加状态监听事件,可以监听按钮组里面单选按钮的状态是否改变</td></tr></tbody></table><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioContainer</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:rc<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioButton</span>             <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:boy<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>marked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8fd<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioButton</span>             <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:girl<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30fp<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>marked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8fd<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RadioContainer</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- &lt;RadioContainer         ohos:height="match_content"         ohos:width="match_content"&gt;        &lt;RadioButton             ohos:height="match_content"             ohos:width="match_content"             ohos:text="篮球"             ohos:text_size="30fp"             ohos:text_alignment="center"             ohos:marked="false"             ohos:background_element="#21a8fd"/&gt;         &lt;RadioButton             ohos:height="match_content"             ohos:width="match_content"             ohos:text="足球"             ohos:text_size="30fp"             ohos:text_alignment="center"             ohos:marked="false"             ohos:background_element="#21a8fd"            ohos:top_margin="10vp"/&gt;         &lt;RadioButton             ohos:height="match_content"             ohos:width="match_content"             ohos:text="排球"             ohos:text_size="30fp"             ohos:text_alignment="center"             ohos:marked="false"             ohos:background_element="#21a8fd"            ohos:top_margin="10vp"/&gt;     &lt;/RadioContainer&gt;--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">RadioContainer<span class="token punctuation">.</span>CheckedStateChangedListener</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//找到单选框按钮对象 </span>        <span class="token class-name">RadioButton</span> rb1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RadioButton</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_boy</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RadioButton</span> rb2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RadioButton</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_girl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">RadioContainer</span> rc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RadioContainer</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_rc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//rb1.setChecked(true); </span>        <span class="token comment">//rb1.setCheckedStateChangedListener(this); </span>        <span class="token comment">//rb2.setCheckedStateChangedListener(this); </span>        rc<span class="token punctuation">.</span><span class="token function">setMarkChangedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">/*     //参数一:状态改变的那个单选按钮     //参数二:单选按钮的状态     @Override    public void onCheckedChanged(AbsButton absButton, boolean b) {         String text = absButton.getText();         if(b){             ToastUtils.showDialog(this,text + "被选中了");         }else{             ToastUtils.showDialog(this,text + "被取消选中了");         }     }*/</span>    <span class="token comment">//当按钮组里面的按钮状态发生改变的时候,就会触发下面的方法 </span>    <span class="token comment">//参数一:单选框按钮组的对象 </span>    <span class="token comment">//参数二:索引,表示当前状态改变的是该按钮组中第几个按钮 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">RadioContainer</span> radioContainer<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">RadioButton</span> rb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RadioButton</span><span class="token punctuation">)</span> radioContainer<span class="token punctuation">.</span><span class="token function">getComponentAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> text <span class="token operator">=</span> rb<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>text <span class="token operator">+</span> <span class="token string">"被选中了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>text <span class="token operator">+</span> <span class="token string">"被取消选中了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Switch组件"><a href="#Switch组件" class="headerlink" title="Switch组件"></a>Switch组件</h3><p>实际开发中一般作为某些功能的开关。<br>一般开关的文字是不显示的。<br>一般只设置滑块和滑轨的颜色和样式。</p><pre class="line-numbers language-none"><code class="language-none">滑道背景 ohos:track_element="#FF0000" 滑块颜色 ohos:thumb_element="#07C160"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/liaojie.github.io/medias/%E6%BB%91%E5%9D%97.jpg"></p><h5 id="案例-改变状态弹出吐司"><a href="#案例-改变状态弹出吐司" class="headerlink" title="案例: 改变状态弹出吐司"></a>案例: 改变状态弹出吐司</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span>    <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:choose<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>text_state_on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>开<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>text_state_off</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>关<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20vp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">AbsButton<span class="token punctuation">.</span>CheckedStateChangedListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//找到开关组件 </span>        <span class="token class-name">Switch</span> choose <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Switch</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_choose</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//给开关组件绑定事件 </span>        <span class="token comment">//单击事件 </span>        <span class="token comment">//状态改变事件</span>        choose<span class="token punctuation">.</span><span class="token function">setCheckedStateChangedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//当开关组件状态发生改变的时候,那么就会调用这个方法 </span>    <span class="token comment">//参数一:表示状态改变的那个开关组件 </span>    <span class="token comment">//参数二:表示组件当前的状态 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">AbsButton</span> absButton<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//ToastUtils.showDialog(this,"开关开启了"); </span>            <span class="token comment">//可以打开某个设置 </span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token comment">//ToastUtils.showDialog(this,"开关关闭了"); </span>            <span class="token comment">//可以关闭某个设置 </span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开发中的switch"><a href="#开发中的switch" class="headerlink" title="开发中的switch"></a>开发中的switch</h4><p>开发中,switch一般是在设置中,作为开关使用的。</p><p>开启或者关闭之后,会把设置保存到本地或者上传给服务器进行保存。下一次打开APP的时候就不需要再次设置,使用上一次的设置记录即可。一般情况下,会在本地和服务器都保存一下。程序刚启动的时候,会读取本地的保存的设置,如果没有再访问服务器获取默认设置信息。或者每次修改完本地配置文件的时候,都会对文件进行一个算法加密,将计算出来的结果保存到服务器中,每次打开app的时候对比一下服务器和本地记录的是否一致,如果不一致,证明用户在没有联网的时候重新设置过了,会重新上传文件信息,如果一致就不上传。这些实际开发的经验</p><h3 id="Slider滑块组件"><a href="#Slider滑块组件" class="headerlink" title="Slider滑块组件"></a>Slider滑块组件</h3><h4 id="基本用法-3"><a href="#基本用法-3" class="headerlink" title="基本用法"></a>基本用法</h4><p>布局:</p><pre class="line-numbers language-none"><code class="language-none">&lt;Slider     ohos:height="50vp"     ohos:width="300vp"     进度颜色,左边的     ohos:progress_color="#FF0000"     滑块颜色     ohos:thumb_element="#00FF00"     未完成进度颜色    ohos:background_instruct_element="#0000FF"     次一级的进度值     ohos:vice_progress="80"     次一级的进度颜色    ohos:vice_progress_element="#923456"     是否允许用户操作滑块     ohos:enabled="true"    max = "100"    min = "0" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关事件:<br>ValueChangedListener(值改变事件)</p><p>接口中的方法:<br>①:onProgressUpdated(参数一,参数二,参数三)<br>当滑块组件中的值改变的时候,调用该方法。<br>参数一:滑块对象<br>参数二:当前进度值<br>参数三:当前滑块组件是否可以调节进度<br>②:onTouchStart<br>按上滑块的时候触发<br>③:onTouchend<br>离开滑块的时候触发</p><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Slider</span> <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:slider<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_instruct_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0000FF<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>progress_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0000<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>thumb_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00FF00<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>vice_progress</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>vice_progress_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#923456<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Slider<span class="token punctuation">.</span>ValueChangedListener</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//找到滑块组件 </span>        <span class="token class-name">Slider</span> slider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Slider</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_slider</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//给滑块组件绑定一个事件 </span>        <span class="token comment">//进度值改变事件 </span>        slider<span class="token punctuation">.</span><span class="token function">setValueChangedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//当滑块组件中的进度值改变的时候,就会调用这个方法 </span>    <span class="token comment">//参数一:滑块组件对象 </span>    <span class="token comment">//参数二:当前的进度值 </span>    <span class="token comment">//参数三:当前滑块是否可以被滑动 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onProgressUpdated</span><span class="token punctuation">(</span><span class="token class-name">Slider</span> slider<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"当前的进度值为:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//当用户用鼠标或者用手指 </span>    <span class="token comment">//按下滑块不松的时候,会调用该方法 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTouchStart</span><span class="token punctuation">(</span><span class="token class-name">Slider</span> slider<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"按下不松"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//松开滑块的时候,会调用该方法。 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTouchEnd</span><span class="token punctuation">(</span><span class="token class-name">Slider</span> slider<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">ToastUtils</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"松开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-相亲APP"><a href="#案例-相亲APP" class="headerlink" title="案例: 相亲APP"></a>案例: 相亲APP</h5><p>需求1:拖动滑块的同时放大或者缩小图片<br>需求2:移动图片</p><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:img<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>image_src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:girl1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Slider</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:slider<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>background_instruct_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0000FF<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Slider<span class="token punctuation">.</span>ValueChangedListener</span><span class="token punctuation">,</span> <span class="token class-name">Component<span class="token punctuation">.</span>TouchEventListener</span> <span class="token punctuation">{</span>     <span class="token class-name">Image</span> img<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//业务逻辑 </span>        <span class="token comment">//1.滑动滑块之后,需要放大或者缩小妹子的照片 </span>        <span class="token comment">//2.可以拖动妹子的放大之后的照片 </span>        <span class="token comment">//找到图片组件还有滑块组件 </span>        img <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Image</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Slider</span> slider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Slider</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_slider</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//给滑块组件绑定事情 </span>        slider<span class="token punctuation">.</span><span class="token function">setValueChangedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//给图片绑定一个滑动事件(触摸事件) </span>        img<span class="token punctuation">.</span><span class="token function">setTouchEventListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//参数一:表示进度值变化的那个滑块组件对象 </span>    <span class="token comment">//参数二:表示当前进度值 </span>    <span class="token comment">//参数三:表示当前滑块是否可以被滑动 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onProgressUpdated</span><span class="token punctuation">(</span><span class="token class-name">Slider</span> slider<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//根据进度值i来放大或者缩小图片即可 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">float</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         img<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//因为当我们按下滑块或者松开滑块的时候,暂时不需要做什么事情 </span>    <span class="token comment">//所以,下面的两个方法,在本案例中,暂时用不到 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTouchStart</span><span class="token punctuation">(</span><span class="token class-name">Slider</span> slider<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//记录用户看美女的开始时间 </span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTouchEnd</span><span class="token punctuation">(</span><span class="token class-name">Slider</span> slider<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment">//x1和y1表示手指按下不松的位置 </span>    <span class="token keyword">float</span> x1<span class="token punctuation">;</span>     <span class="token keyword">float</span> y1<span class="token punctuation">;</span>     <span class="token keyword">float</span> imgX<span class="token punctuation">;</span>     <span class="token keyword">float</span> imgY<span class="token punctuation">;</span>     <span class="token comment">//参数一:表示当前操作的组件对象。(图片) </span>    <span class="token comment">//参数二:动作对象 </span>    <span class="token comment">//返回值:true 可以触发后续操作 false 只能触发第一个操作(按下不松) </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">,</span> <span class="token class-name">TouchEvent</span> touchEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">MmiPoint</span> position <span class="token operator">=</span> touchEvent<span class="token punctuation">.</span><span class="token function">getPointerPosition</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> action <span class="token operator">=</span> touchEvent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">TouchEvent</span><span class="token punctuation">.</span>PRIMARY_POINT_DOWN<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">// 按下不松 获取手指的位置 </span>            x1 <span class="token operator">=</span> position<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             y1 <span class="token operator">=</span> position<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//获取图片的位置 </span>            imgX <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getTranslationX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             imgY <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getTranslationY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">TouchEvent</span><span class="token punctuation">.</span>POINT_MOVE<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//移动手指 </span>            <span class="token comment">//获取的就是手指当前的位置 </span>            <span class="token keyword">float</span> moveX <span class="token operator">=</span> position<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">float</span> moveY <span class="token operator">=</span> position<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 拿着手指当前的位置,跟x1和y1相减,就可以得到手指移动的距离 </span>            <span class="token comment">//x和y表示手指分别在x轴和y轴移动了多少距离 </span>            <span class="token keyword">float</span> x <span class="token operator">=</span> moveX <span class="token operator">-</span> x1<span class="token punctuation">;</span>             <span class="token keyword">float</span> y <span class="token operator">=</span> moveY <span class="token operator">-</span> y1<span class="token punctuation">;</span>             <span class="token comment">//把图片也移动这么多距离就可以 </span>            <span class="token comment">//是在图片原有位置的基础上,再移动x和y的距离 </span>            img<span class="token punctuation">.</span><span class="token function">setTranslation</span><span class="token punctuation">(</span>imgX <span class="token operator">+</span> x <span class="token punctuation">,</span> imgY <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">TouchEvent</span><span class="token punctuation">.</span>PRIMARY_POINT_UP<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//松开手指 </span>            <span class="token comment">//统计用户看美女的结束时间 </span>            <span class="token comment">//得到用户观看美女的总时间 </span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ListContainer"><a href="#ListContainer" class="headerlink" title="ListContainer"></a>ListContainer</h3><p>ListContainer是一个列表容器类组件。在这里的每一行,我们都可以看做是一个item。包裹了所有item的容器,就是ListContainer。</p><h4 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h4><p>① 每一行其实就是一个独立的item。<br>② 在屏幕的上面和下面,还有很多没有展示出来的item。 当我们用手指往上滑动的时候,就可以到下面的item。当我们用手指往下滑动的时候,就可以到上面的item。 只不过划出屏幕的item会被销毁,而没有划入屏幕的item还没有创建出来。<br>③ 如果item过多,在内存会有垃圾。这个问题下面学习。</p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li>给item去指定一个布局xml文件</li><li>书写一个javabean类表示item</li><li>写一个适配器类去管理item</li><li>将适配器交给ListContainer</li></ol><p>子界面中的xml布局</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListContainer</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:listcontainer<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>item的xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>00:00<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Javabean类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>     <span class="token comment">//记录的值就是赋值给item里面的text</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> text<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适配器类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemProvider</span> <span class="token keyword">extends</span> <span class="token class-name">BaseItemProvider</span> <span class="token punctuation">{</span>     <span class="token comment">//集合 </span>    <span class="token comment">//集合中就装了所有的item的对象。</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AbilitySlice</span> as<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ItemProvider</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">AbilitySlice</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>as <span class="token operator">=</span> as<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> list<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">AbilitySlice</span> <span class="token function">getAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> as<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAs</span><span class="token punctuation">(</span><span class="token class-name">AbilitySlice</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>as <span class="token operator">=</span> as<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//总数据的个数 </span>    <span class="token comment">//多少个item</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//i 表示索引 </span>    <span class="token comment">//根据索引返回数据 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//返回某一项的id </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> i<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//结论: </span>    <span class="token comment">//1.加载一个item,就需要调用一次getComponent方法 </span>    <span class="token comment">//2.虽然索引为13的item还没有在界面中显示出来。</span>    <span class="token comment">//3.当item划出屏幕的时候,item就会被销毁。 </span>    <span class="token comment">//如果页面再次往下滑动的时候,会再次调用getComponent方法。 </span>    <span class="token comment">//但是ListContainer也会进行预加载。 </span>    <span class="token comment">//返回item中要加载的布局对象 </span>    <span class="token comment">//参数一:当前要加载哪一行item (item的索引) </span>    <span class="token comment">//参数二:表示要销毁的item的布局对象 </span>    <span class="token comment">//参数三:优化 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Component</span> <span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Component</span> component<span class="token punctuation">,</span> <span class="token class-name">ComponentContainer</span> componentContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">DirectionalLayout</span> dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span> <span class="token class-name">LayoutScatter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_itemview</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//获取每一个item里面的数据 </span>        <span class="token class-name">Item</span> item <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//把数据加载到布局里面的Text中 </span>        <span class="token class-name">Text</span> text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_itemtext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//当上面的四行代码执行完毕之后,我就获取到了一个有数据的布局对象 </span>        <span class="token comment">//此时我们只要把布局对象dl返回出去就可以了 </span>        <span class="token comment">//其实就是因为在Item当中,最外层的就是这个dl布局对象 </span>        <span class="token keyword">return</span> dl<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AbilitySlice类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//找到ListContainer </span>        <span class="token class-name">ListContainer</span> listContainer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ListContainer</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_listcontainer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//创建集合并给集合添加数据 </span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> datasList <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//创建一个Item的管理员对象(适配器对象) </span>        <span class="token comment">//并把要展示的所有数据和要加载的页面传递过去 </span>        <span class="token class-name">ItemProvider</span> itemProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemProvider</span><span class="token punctuation">(</span>datasList<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//把适配器交给列表容器组件 </span>        listContainer<span class="token punctuation">.</span><span class="token function">setItemProvider</span><span class="token punctuation">(</span>itemProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//以后这些数据,并不是我们在app中写的。 </span>    <span class="token comment">//都是服务器传递过来的。</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//访问服务器获取要展示的数据。 </span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//给集合添加数据 </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"item"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h4><ol><li>加载一个item,getComponent方法就要被调用一次。</li><li>假设屏幕中最多显示12个item,此时第13个item还没有在界面中显示出来。但是,ListContainer也会进行预加载。预加载的好处:避免卡顿。</li><li>当item划出屏幕的时候,就会被销毁。当页面再次往下滑动的时候,会再次调用getComponent方法,加载本地xml文件,创建一个新的item布局对象。当item加载过多,内存中的垃圾就会过多,所以我们要优化。</li><li>优化的核心:让划出屏幕的item不销毁,而是继续复用</li></ol><p>代码实例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//但是ListContainer也会进行预加载。 </span><span class="token comment">//返回item中要加载的布局对象 </span><span class="token comment">//参数一:当前要加载哪一行item (item的索引) </span><span class="token comment">//参数二:表示要销毁的item的布局对象 </span><span class="token comment">//参数三:优化</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Component</span> <span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Component</span> component<span class="token punctuation">,</span> <span class="token class-name">ComponentContainer</span> componentContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">DirectionalLayout</span> dl<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>component <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span>component<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token comment">//获取每一个item里面的布局对象</span>        dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span> <span class="token class-name">LayoutScatter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_itemview</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//获取每一个item里面的数据 </span>    <span class="token class-name">Item</span> item <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//把数据加载到布局里面的Text中 </span>    <span class="token class-name">Text</span> text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_itemtext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//当上面的四行代码执行完毕之后,我就获取到了一个有数据的布局对象 </span>    <span class="token comment">//此时我们只要把布局对象dl返回出去就可以了 </span>    <span class="token comment">//其实就是因为在Item当中,最外层的就是这个dl布局对象 </span>    <span class="token keyword">return</span> dl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-搭建微信页面"><a href="#案例-搭建微信页面" class="headerlink" title="案例: 搭建微信页面"></a>案例: 搭建微信页面</h5><p>xml文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListContainer</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:listcontainer<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>item的xml文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span> <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:img<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>image_src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:photo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>240vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:title<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20vp<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>240vp<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5vp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>             <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:itemtext<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15vp<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>240vp<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>消息<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15fp<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5vp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:time<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>00:00<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Javabean类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>     <span class="token comment">//记录的值就是赋值给item里面的text</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> img<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> time<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token keyword">int</span> img<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>img <span class="token operator">=</span> img<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> img<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setImg</span><span class="token punctuation">(</span><span class="token keyword">int</span> img<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>img <span class="token operator">=</span> img<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> title<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> text<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> time<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适配器类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemProvider</span> <span class="token keyword">extends</span> <span class="token class-name">BaseItemProvider</span> <span class="token punctuation">{</span>     <span class="token comment">//集合</span>    <span class="token comment">//集合中就装了所有的item的对象。</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AbilitySlice</span> as<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ItemProvider</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">AbilitySlice</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>as <span class="token operator">=</span> as<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> list<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">AbilitySlice</span> <span class="token function">getAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> as<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAs</span><span class="token punctuation">(</span><span class="token class-name">AbilitySlice</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>as <span class="token operator">=</span> as<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//总数据的个数 </span>    <span class="token comment">//多少个item </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//i 表示索引 </span>    <span class="token comment">//根据索引返回数据 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//返回某一项的id </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> i<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//结论: </span>    <span class="token comment">//1.加载一个item,就需要调用一次getComponent方法 </span>    <span class="token comment">//2.虽然索引为13的item还没有在界面中显示出来。 </span>    <span class="token comment">//3.当item划出屏幕的时候,item就会被销毁。 </span>    <span class="token comment">//如果页面再次往下滑动的时候,会再次调用getComponent方法。</span>    <span class="token comment">//但是ListContainer也会进行预加载。 </span>    <span class="token comment">//返回item中要加载的布局对象 </span>    <span class="token comment">//参数一:当前要加载哪一行item (item的索引) </span>    <span class="token comment">//参数二:表示要销毁的item的布局对象 </span>    <span class="token comment">//参数三:优化 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Component</span> <span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Component</span> component<span class="token punctuation">,</span> <span class="token class-name">ComponentContainer</span> componentContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">DirectionalLayout</span> dl<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>component <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span>component<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token comment">//获取每一个item里面的布局对象</span>            dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DirectionalLayout</span><span class="token punctuation">)</span> <span class="token class-name">LayoutScatter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_itemview</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment">//获取每一个item里面的数据 </span>        <span class="token class-name">Item</span> item <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//把数据加载到布局里面的Text中 </span>        <span class="token class-name">Text</span> text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> dl<span class="token punctuation">.</span><span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_itemtext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//当上面的四行代码执行完毕之后,我就获取到了一个有数据的布局对象 </span>        <span class="token comment">//此时我们只要把布局对象dl返回出去就可以了 </span>        <span class="token comment">//其实就是因为在Item当中,最外层的就是这个dl布局对象 </span>        <span class="token keyword">return</span> dl<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AbilitySlice类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//找到ListContainer </span>        <span class="token class-name">ListContainer</span> listContainer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ListContainer</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_listcontainer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//创建集合并给集合添加数据 </span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> datasList <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//创建一个Item的管理员对象(适配器对象) </span>        <span class="token comment">//并把要展示的所有数据和要加载的页面传递过去 </span>        <span class="token class-name">ItemProvider</span> itemProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemProvider</span><span class="token punctuation">(</span>datasList<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//把适配器交给列表容器组件 </span>        listContainer<span class="token punctuation">.</span><span class="token function">setItemProvider</span><span class="token punctuation">(</span>itemProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//以后这些数据,并不是我们在app中写的。 </span>    <span class="token comment">//都是服务器传递过来的。</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">//访问服务器获取要展示的数据。 </span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//给集合添加数据 </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Media_photo</span><span class="token punctuation">,</span><span class="token string">"标题"</span><span class="token punctuation">,</span><span class="token string">"item"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span><span class="token string">"00:00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h3><h4 id="基本用法-4"><a href="#基本用法-4" class="headerlink" title="基本用法"></a>基本用法</h4><p>picker是滑动选择器组件。在一些app中选择地址的时候会用到,但是一般是三个picker选择器组合在一起使用。</p><p>代码示例:</p><p>xml文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Picker</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:picker<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>normal_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>selected_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>normal_text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8fd<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>selected_text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0000<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>max_value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>min_value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//星期一 ~ 星期日 </span>        <span class="token comment">//1.找到滑动选择器Picker的对象 </span>        <span class="token class-name">Picker</span> picker <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Picker</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_picker</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//把要展示的内容全部放在集合中 </span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"星期日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">/*        //2.给滑动选择器设置展示的内容        picker.setFormatter(             new Picker.Formatter() {                 @Override                public String format(int i) {                     //参数i表示当前选择的数字                     //返回值就是要展示的内容。                     //return i + "";                     return list.get(i);                 }             }         );*/</span>        <span class="token comment">//优化 </span>        <span class="token comment">/* picker.setFormatter(            (int i)-&gt;{                 return list.get(i);             }         );*/</span>        <span class="token comment">// picker.setFormatter(i-&gt;list.get(i)); </span>        <span class="token comment">//还可以用方法引用去优化代码</span>        picker<span class="token punctuation">.</span><span class="token function">setFormatter</span><span class="token punctuation">(</span>list<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-省市区三级联动"><a href="#案例-省市区三级联动" class="headerlink" title="案例: 省市区三级联动"></a>案例: 省市区三级联动</h5><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Picker</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:province<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>normal_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>selected_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Picker</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:city<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>normal_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>selected_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Picker</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:district<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>normal_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>selected_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bean类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Province</span> <span class="token punctuation">{</span>     <span class="token comment">//1.表示省份的名字</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>     <span class="token comment">//2.集合,记录省份里面所有城市的名字</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Province</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Province</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> name<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> list<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Picker<span class="token punctuation">.</span>ValueChangedListener</span> <span class="token punctuation">{</span>     <span class="token class-name">Picker</span> province<span class="token punctuation">;</span>     <span class="token class-name">Picker</span> city<span class="token punctuation">;</span>     <span class="token class-name">Picker</span> district<span class="token punctuation">;</span>     <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Province</span><span class="token punctuation">&gt;</span></span> provinceList<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1.找到三个滑动选择器组件</span>        province <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Picker</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_province</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        city <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Picker</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_city</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        district <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Picker</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_district</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.创建集合,用来存储,省,市,区的信息。</span>        <span class="token comment">//省市的联动 和 市区的联动是一样的。</span>        provinceList <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//3.给三个滑动选择器组件设置默认显示数据 </span>        <span class="token comment">//要告诉滑动选择器,最大值展示到多少</span>        province<span class="token punctuation">.</span><span class="token function">setMaxValue</span><span class="token punctuation">(</span>provinceList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//暂时只给前面的省和市进行设置</span>        province<span class="token punctuation">.</span><span class="token function">setFormatter</span><span class="token punctuation">(</span>i<span class="token operator">-&gt;</span>provinceList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//要告诉滑动选择器,最大值展示到多少</span>        city<span class="token punctuation">.</span><span class="token function">setMaxValue</span><span class="token punctuation">(</span>provinceList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        city<span class="token punctuation">.</span><span class="token function">setFormatter</span><span class="token punctuation">(</span>i<span class="token operator">-&gt;</span>provinceList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//给Picker滑动选择器绑定监听</span>        province<span class="token punctuation">.</span><span class="token function">setValueChangedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//参数一:表示当前数据变动的那个滑动选择器对象 </span>    <span class="token comment">//参数二:表示旧值 (原来选中的值) </span>    <span class="token comment">//参数三:表示新值(现在选中的值) </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onValueChanged</span><span class="token punctuation">(</span><span class="token class-name">Picker</span> picker<span class="token punctuation">,</span> <span class="token keyword">int</span> oldValue<span class="token punctuation">,</span> <span class="token keyword">int</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>picker <span class="token operator">==</span> province<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//判断当前选择的是哪个省 </span>            <span class="token comment">//选择哪个省,就可以把当前省对应的市设置到第二个滑动选择器中。 </span>            <span class="token comment">//获取到当前省份的对象 </span>            <span class="token class-name">Province</span> chooseProvince <span class="token operator">=</span> provinceList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//设置城市的滑动选择器</span>            city<span class="token punctuation">.</span><span class="token function">setMaxValue</span><span class="token punctuation">(</span>chooseProvince<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            city<span class="token punctuation">.</span><span class="token function">setFormatter</span><span class="token punctuation">(</span>i<span class="token operator">-&gt;</span>chooseProvince<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//当前面更换省份的时候,中间的城市需要从第一个开始展示</span>            city<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token comment">//在以后实际工作中 </span>    <span class="token comment">//这些数据,是不需要我们自己在app里面手动书写的 </span>    <span class="token comment">//一般是服务器给我们传递过来的。</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Province</span><span class="token punctuation">&gt;</span></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">//创建一个集合用来存储所有的省份 </span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Province</span><span class="token punctuation">&gt;</span></span> provinceList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//创建一个江苏省的集合,用来存储所有的城市</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> jiangSuCitys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         jiangSuCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"南京市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         jiangSuCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"苏州市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         jiangSuCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"无锡市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         jiangSuCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"扬州市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         jiangSuCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"徐州市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         jiangSuCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"泰州市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> zheJiangCitys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         zheJiangCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"杭州市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         zheJiangCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"宁波市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         zheJiangCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"温州市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         zheJiangCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"绍兴市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         zheJiangCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"嘉兴市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         zheJiangCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"舟山市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fuJianCitys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         fuJianCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"福州市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         fuJianCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"厦门市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         fuJianCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"泉州市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         fuJianCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"莆田市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         fuJianCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"宁德市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         fuJianCitys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"龙岩市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//把省份的对象添加到provinceList集合中</span>        provinceList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Province</span><span class="token punctuation">(</span><span class="token string">"江苏省"</span><span class="token punctuation">,</span>jiangSuCitys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        provinceList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Province</span><span class="token punctuation">(</span><span class="token string">"浙江省"</span><span class="token punctuation">,</span>zheJiangCitys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        provinceList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Province</span><span class="token punctuation">(</span><span class="token string">"福建省"</span><span class="token punctuation">,</span>fuJianCitys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//把存储所有省份的集合返回即可 </span>        <span class="token keyword">return</span> provinceList<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DatePicker和TimePicker"><a href="#DatePicker和TimePicker" class="headerlink" title="DatePicker和TimePicker"></a>DatePicker和TimePicker</h3><p>DatePicker和TimePicker都是时间选择器。</p><ul><li>DatePicker:表示年月日</li><li>TimePicker:表示时分秒</li></ul><p>代码示例:</p><p>布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DatePicker</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:datepicker<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>normal_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>selected_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimePicker</span>         <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:timepicker<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300vp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>normal_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">ohos:</span>selected_text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainAbilitySlice.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">DatePicker<span class="token punctuation">.</span>ValueChangedListener</span> <span class="token punctuation">{</span>     <span class="token class-name">Text</span> text<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//1.找到两个组件 </span>        <span class="token class-name">DatePicker</span> datePicker <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DatePicker</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_datepicker</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">TimePicker</span> timePicker <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TimePicker</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_timepicker</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2.给时间滑动选择器设置事件(监听)</span>        datePicker<span class="token punctuation">.</span><span class="token function">setValueChangedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         timePicker<span class="token punctuation">.</span><span class="token function">setTimeChangedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimePicker<span class="token punctuation">.</span>TimeChangedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTimeChanged</span><span class="token punctuation">(</span><span class="token class-name">TimePicker</span> timePicker<span class="token punctuation">,</span> <span class="token keyword">int</span> hour<span class="token punctuation">,</span> <span class="token keyword">int</span> minutes<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"时间为:"</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">"时"</span> <span class="token operator">+</span> minutes <span class="token operator">+</span> <span class="token string">"分"</span> <span class="token operator">+</span> second <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">//每当datePicker里面的值发生改变的时候,系统都会自动的调用下面的方法 </span>    <span class="token comment">//参数一:表示值发生变动的DatePicker </span>    <span class="token comment">//参数二:参数四:年、月、日</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onValueChanged</span><span class="token punctuation">(</span><span class="token class-name">DatePicker</span> datePicker<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>         text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//最简单,最不会出错的字符串和变量的拼接方法: </span>        <span class="token comment">//先把最终的结果写在字符串中 </span>        <span class="token comment">//把其中有可能发生变化的值用变量替代 </span>        <span class="token comment">//再把变量挪到外面去 </span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="美化组件"><a href="#美化组件" class="headerlink" title="美化组件"></a>美化组件</h2><h3 id="美化组件分类"><a href="#美化组件分类" class="headerlink" title="美化组件分类"></a>美化组件分类</h3><ul><li>美化外形<ul><li>组件外形(方形,圆角,胶囊形,圆形)</li><li>组件边框(颜色,粗细)</li><li>背景颜色(有色号就行)</li><li>背景渐变(线形或者辐射形)</li></ul></li><li>美化状态<br>组件在不同状态时显示不同的样式。<br>暂时掌握三中状态:<ul><li>默认状态 (所有组件都有默认状态)</li><li>按下状态 (组件按下不松时的状态)</li><li>选中状态 (开关组件,多选按钮,单选按钮的开启状态)</li></ul></li></ul><h3 id="graphic包中的shape标签"><a href="#graphic包中的shape标签" class="headerlink" title="graphic包中的shape标签"></a>graphic包中的shape标签</h3><p>在graphic包中新建xml,根标签为:shape就可以自定义组件的形状。</p><p><strong>根标签:shape</strong><br><strong>根标签包含一个属性:shape</strong></p><p>可以取以下5个值,但我们一般只使用下面2个:</p><ul><li>rectangle:长方形</li><li>oval:椭圆 </li></ul><p><strong>根标签包含五个子标签</strong>:</p><p>① <strong>stroke:绘制边框</strong><br>属性:</p><ul><li>宽度,颜色</li></ul><p>② <strong>corners:圆角</strong><br>属性:</p><ul><li>radius半径</li><li>left_top_x、left_top_y 左上</li><li>right_top_x、right_top_y 右上</li><li>left_bottom_x、left_bottom_y 左下</li><li>right_bottom_x、right_bottom_y 右下</li></ul><p>③ <strong>solid:背景填充</strong><br>属性:</p><ul><li>color 只能指定一个颜色</li><li>colors 可以指定多个颜色,渐变。</li></ul><p>④ <strong>bounds:边框</strong><br>可以单独设置上下左右的边框。</p><p>⑤ <strong>gradient:渐变</strong><br>属性:</p><ul><li>shader_type:类型 — radial(辐射) linear(线性)</li></ul><h3 id="graphic包中的state-container标签"><a href="#graphic包中的state-container标签" class="headerlink" title="graphic包中的state-container标签"></a>graphic包中的state-container标签</h3><p>在graphic包中新建xml,根标签为:state-container就可以在不同状态下美化组件</p><ul><li>默认状态:<br>component_state_empty</li><li>按下不松的状态:<br>component_state_pressed</li><li>打开状态:<br>component_state_checked</li></ul><p>细节:</p><ol><li>component_state_empty必须要写在最下面。否则其他状态的设置不起作用。</li><li>element中可以写指定的色号,也可以指定根标签为shape的xml文件。</li><li>element中可以指定固定的图片。</li></ol><p>布局:</p><pre class="line-numbers language-none"><code class="language-none">&lt;state-container//按下&lt;item ohos:state="component_state_pressed" ohos:element="#000000"/&gt; //打开状态 &lt;item ohos:state="component_state_checked" ohos:element="#FF0000"/&gt; //默认状态:要写在最下面 &lt;item ohos:state="component_state_empty" ohos:element="#21a8f6"/&gt; &lt;/state-container&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实际开发中的美化组件"><a href="#实际开发中的美化组件" class="headerlink" title="实际开发中的美化组件"></a>实际开发中的美化组件</h3><h4 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h4><p>美工已经把图片给你做好。<br>这种情况最简单,我们只要在state-container里面指定状态并关联图片即可。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>     <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>86vp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:press2<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">ohos:</span>clickable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">ohos:</span>state</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component_state_pressed<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">ohos:</span>element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:registerpress<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">ohos:</span>state</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component_state_empty<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">ohos:</span>element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:register<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h4><p>美工没有把图片给你做好。<br>这种情况稍显复杂,你可以给美工提出需求。如果人家不鸟咱,咱就要自己写。<br>写法如下:<br>核心:针对于每一种状态都要写对应的xml文件。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">针对于两种状态关联对应的xml文件 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">ohos:</span>state</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component_state_pressed<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">ohos:</span>element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:registerpress<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">ohos:</span>state</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component_state_empty<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">ohos:</span>element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:register<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> 正常状态: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span>     <span class="token attr-name"><span class="token namespace">ohos:</span>radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15vp<span class="token punctuation">"</span></span>     <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span>     <span class="token attr-name"><span class="token namespace">ohos:</span>colors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21a8fd<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> 按下不松时的状态: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span>     <span class="token attr-name"><span class="token namespace">ohos:</span>radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15vp<span class="token punctuation">"</span></span>     <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span>     <span class="token attr-name"><span class="token namespace">ohos:</span>colors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0177BE<span class="token punctuation">"</span></span>     <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见布局"><a href="#常见布局" class="headerlink" title="常见布局"></a>常见布局</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>每种布局都根据自身特点提供LayoutConfig供子Component设定布局属性和参数,通过指定布局属性可以对子Component在布局中的显示效果进行约束。例如:”width”、”height”是最基本的布局属性,它们指定了组件的大小。</p><h3 id="布局分类"><a href="#布局分类" class="headerlink" title="布局分类"></a>布局分类</h3><h4 id="线性布局-DirectionalLayout"><a href="#线性布局-DirectionalLayout" class="headerlink" title="线性布局:DirectionalLayout"></a>线性布局:DirectionalLayout</h4><p>权重:也是一种百分比布局。</p><p>先计算父布局中,可利用空间之和:父布局可分配区域=父布局宽度-所有固定长度或者宽度大小;再计算百分比</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21A8FD<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>image_src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$media:girl<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-电话拨号界面"><a href="#案例-电话拨号界面" class="headerlink" title="案例: 电话拨号界面"></a>案例: 电话拨号界面</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:text_empty<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30vp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>9<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DirectionalLayout</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10vp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70vp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:button_state<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CALL<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>top_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$graphic:text_empty<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>layout_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal_center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DirectionalLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相对布局-DependentLayout"><a href="#相对布局-DependentLayout" class="headerlink" title="相对布局:DependentLayout"></a>相对布局:DependentLayout</h4><p>核心:</p><ul><li>找基准位置</li><li>在相对布局中,组件的位置是相对其他组件而言的</li></ul><p>代码示例:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DependentLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TEXT1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#21A8FD<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$+id:text2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TEXT2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>right_of</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$id:text1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TEXT3<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00FF00<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$id:text2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100vp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DependentLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="格子布局-TableLayout"><a href="#格子布局-TableLayout" class="headerlink" title="格子布局:TableLayout"></a>格子布局:TableLayout</h4><p>行数和列数两个属性。<br>如果塞入元素过多,行数自动失效,再加一行。<br>对齐方式:<code>alignment_type</code><br>值:</p><ul><li><code>align_contents(页边距对齐)(Margin alignment)</code></li><li><code>align_edges(边界对齐)(boundary alignment)</code></li></ul><p>页边距对齐,是按照上一个组件的相对边界<br>边界对齐,是跟上一个组件对齐</p><p>其他布局:StackLayout(堆叠布局)、 AdaptiveBoxLayout(自适应盒子布局)</p><p>代码示例:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>ohos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.huawei.com/res/ohos<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>row_count</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>column_count</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">ohos:</span>alignment_type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>align_edges<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>left_margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00FF00<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0000FF<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFF00<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF00FF<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FF0000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00FF00<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0000FF<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFF00<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>9<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span>        <span class="token attr-name"><span class="token namespace">ohos:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50vp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>background_element</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0000FF<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35fp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">ohos:</span>text_alignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TableLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绝对布局-PositionLayout"><a href="#绝对布局-PositionLayout" class="headerlink" title="绝对布局:PositionLayout"></a>绝对布局:PositionLayout</h4><p>可以指定组件的具体位置。</p><h4 id="自适应布局-AdaptiveBoxLayout"><a href="#自适应布局-AdaptiveBoxLayout" class="headerlink" title="自适应布局:AdaptiveBoxLayout"></a>自适应布局:AdaptiveBoxLayout</h4><p>指定一行的范围。<br>屏幕范围小,每行就展示一个,屏幕范围大,就展示多个<br>底层还不是太稳定。</p><h4 id="组件和布局的包含关系"><a href="#组件和布局的包含关系" class="headerlink" title="组件和布局的包含关系"></a>组件和布局的包含关系</h4><p>布局可以理解为是一个容器,可以容纳组件和其他布局,并规定他们如何进行显示。组件在未被添加到布局中时,既无法显示也无法交互,因此一个用户界面至少包含一个布局。</p><p>Java UI框架提供了一些标准布局功能的容器,它们继承自ComponentContainer,一般以”Layout”结尾,如DirectionalLayout、DependentLayout等。</p><h4 id="组件树"><a href="#组件树" class="headerlink" title="组件树"></a>组件树</h4><p>在一个界面中,最外层是一定是布局,在布局里面可以有组件,也可以有其他布局。所以布局可以理解为是多个组件形成的那个整体。</p><p><img src="/liaojie.github.io/medias/%E7%BB%84%E4%BB%B6%E6%A0%91.png"></p><h2 id="Ability"><a href="#Ability" class="headerlink" title="Ability"></a>Ability</h2><h3 id="1-Ability"><a href="#1-Ability" class="headerlink" title="1.Ability"></a>1.Ability</h3><h4 id="Ability概述"><a href="#Ability概述" class="headerlink" title="Ability概述"></a>Ability概述</h4><p>Ability是应用所具备能力的抽象,也是应用程序的重要组成部分。一个应用可以具备多种能力(即可以包含多个Ability),HarmonyOS支持应用以Ability为单位进行部署。</p><h4 id="Ability分类"><a href="#Ability分类" class="headerlink" title="Ability分类"></a>Ability分类</h4><ul><li>FA(Feature Ability)</li><li>PA(Particle Ability)</li></ul><p>每种类型为开发者提供了不同的模板,以便实现不同的业务功能。</p><p>Feature Ability(FA)</p><blockquote><p>FA支持Page Ability,简单理解就是手机应用中的一个界面。一个界面就是一个FA。<br>Page模板是FA唯一支持的模板,用于提供与用户交互的能力。一个Page实例可以包含一组相关页面,每个页面用一个AbilitySlice实例表示。</p></blockquote><p>Particle Ability(PA)</p><blockquote><p>FA是有有界面的,而Particle Ability(PA)是无界面的,简单理解就是可以运行在后台的一个服务。<br>PA支持Service Ability和Data Ability:<br>1)Service模板<br>用于提供后台运行任务的能力。<br>2)Data模板<br>用于对外部提供统一的数据访问抽象。一般是跟数据相关的,比如:如果我们要运行访问数据库。那么就可以用PA中的Data模板。</p></blockquote><h3 id="2-Feature-Ability-FA"><a href="#2-Feature-Ability-FA" class="headerlink" title="2.Feature Ability(FA)"></a>2.Feature Ability(FA)</h3><ul><li>页面FA和切片之间的关系</li><li>页面中如何添加多个切片</li><li>页面之间的跳转</li></ul><p>想要学习跳转,首先要知道一个知识点就是意图,表示我跳转的时候,跳到哪里以及携带什么参数进行跳转？</p><h3 id="3-Intent"><a href="#3-Intent" class="headerlink" title="3.Intent"></a>3.Intent</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>Intent是对象之间传递信息的载体。</p><p>例如,当一个Ability需要启动另一个Ability时,或者一个AbilitySlice需要导航到另一个AbilitySlice时,可以通过Intent指定启动的目标同时携带相关数据。Intent的构成元素包括Operation与Parameters:</p><ul><li>Operation<br>表示要跳转的目的地</li><li>Parameters<br>跳转时所携带的数据</li></ul><h4 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h4><table><thead><tr><th>属性</th><th>子属性</th><th>描述</th></tr></thead><tbody><tr><td>Operation</td><td>Action</td><td>表示跳转的时候做什么动作,做什么行为。通常使用系统预置Action,应用也可以自定义Action。</td></tr><tr><td></td><td>Entity</td><td>表示类别,通常使用系统预置Entity,应用也可以自定义Entity。</td></tr><tr><td></td><td>Uri</td><td>表示Uri描述。</td></tr><tr><td></td><td>Flags</td><td>表示处理Intent的方式。</td></tr><tr><td>如Intent.FLAG_ABILITY_CONTINUATION标记在本地Ability是否可以迁移到远端设备继续运行。</td><td></td><td></td></tr><tr><td></td><td>BundleName</td><td>表示包描述。(跳转到哪个包中)</td></tr><tr><td></td><td>AbilityName</td><td>表示待启动的Ability名称。(跳转到哪个界面中)</td></tr><tr><td></td><td>DeviceId</td><td>表示运行指定Ability的设备ID。(跳转到哪台设备中)</td></tr><tr><td>Parameters</td><td>无</td><td>开发者可以通过Parameters传递某些请求所需的额外信息。</td></tr><tr><td>一般是通过键值对的形式保存参数。</td><td></td><td></td></tr></tbody></table><h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><p>在第一个界面中给Intent添加用户名:zhangsan和用户等级:V8。<br>在第二个界面中通过Intent中的键,获取到对应的值。</p><p>代码示例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一个界面中的代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>    <span class="token class-name">Button</span> button<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text_button</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>component <span class="token operator">==</span> button<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//跳转页面</span>            <span class="token comment">//明确要跳转的页面</span>            <span class="token class-name">Intent</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Operation</span> operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent<span class="token punctuation">.</span>OperationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDeviceId</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">//本机</span>                <span class="token punctuation">.</span><span class="token function">withBundleName</span><span class="token punctuation">(</span><span class="token string">"com.example.myapplication"</span><span class="token punctuation">)</span><span class="token comment">//哪个应用</span>                <span class="token punctuation">.</span><span class="token function">withAbilityName</span><span class="token punctuation">(</span><span class="token string">"com.example.myapplication.Second_Ability"</span><span class="token punctuation">)</span><span class="token comment">//哪个界面</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">setOperation</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">setParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">setParam</span><span class="token punctuation">(</span><span class="token string">"userLevel"</span><span class="token punctuation">,</span><span class="token string">"V8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">startAbility</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//第二个界面中的代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Second_AbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_second_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Text</span> text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_text_helloworld</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过键获取对应的值</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userLevel <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringParam</span><span class="token punctuation">(</span><span class="token string">"userLevel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//并把值设置到文本中</span>        text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> userLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-页面跳转的所有情况"><a href="#4-页面跳转的所有情况" class="headerlink" title="4.页面跳转的所有情况"></a>4.页面跳转的所有情况</h3><ul><li>同一个页面中,不同切片之间的跳转(无参,有参,有返回结果)</li><li>不同页面中,主切片跟主切片之间的跳转(无参,有参,有返回结果)</li><li>不同页面中,主切片跟非主切片之间的跳转(无参,有参,有返回结果)</li></ul><p>代码示例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//同一个页面中,不同切片之间的跳转(无参,有参,有返回结果)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token punctuation">{</span>    <span class="token class-name">Button</span> but1<span class="token punctuation">;</span>    <span class="token class-name">Button</span> but2<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_but1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_but2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but1<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">onClick</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but2<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">onClick</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onForeground</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onForeground</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">==</span> but1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//跳转页面</span>            <span class="token comment">//创建一个意图对象。</span>            <span class="token class-name">Intent</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建意图的参数对象。</span>            <span class="token class-name">Operation</span> operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent<span class="token punctuation">.</span>OperationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDeviceId</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">//本机</span>                <span class="token punctuation">.</span><span class="token function">withBundleName</span><span class="token punctuation">(</span><span class="token string">"com.example.myapplication5"</span><span class="token punctuation">)</span><span class="token comment">//哪个应用</span>                <span class="token punctuation">.</span><span class="token function">withAbilityName</span><span class="token punctuation">(</span><span class="token string">"com.example.myapplication5.MainAbilitySecond"</span><span class="token punctuation">)</span><span class="token comment">//哪个界面</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">setOperation</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">startAbility</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>component <span class="token operator">==</span> but2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//跳转页面</span>            <span class="token comment">//创建一个意图对象。</span>            <span class="token class-name">Intent</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建意图的参数对象。</span>            <span class="token class-name">Operation</span> operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent<span class="token punctuation">.</span>OperationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withAction</span><span class="token punctuation">(</span><span class="token string">"abilitysecond"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">setOperation</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">startAbility</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//不同页面的跳转</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAbilitySlice</span> <span class="token keyword">extends</span> <span class="token class-name">AbilitySlice</span> <span class="token keyword">implements</span> <span class="token class-name">Component<span class="token punctuation">.</span>ClickedListener</span> <span class="token punctuation">{</span>    <span class="token class-name">Button</span> but1<span class="token punctuation">;</span>    <span class="token class-name">Button</span> but2<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUIContent</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Layout_ability_main</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_but1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findComponentById</span><span class="token punctuation">(</span><span class="token class-name">ResourceTable<span class="token punctuation">.</span>Id_but2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but1<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        but2<span class="token punctuation">.</span><span class="token function">setClickedListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>component <span class="token operator">==</span> but1<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//就要跳转到第二个页面中的主要子界面中</span>            <span class="token comment">//创建意图对象</span>            <span class="token class-name">Intent</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Operation</span> operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent<span class="token punctuation">.</span>OperationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDeviceId</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">//本机</span>                <span class="token punctuation">.</span><span class="token function">withBundleName</span><span class="token punctuation">(</span><span class="token string">"com.example.jumpapplication6"</span><span class="token punctuation">)</span><span class="token comment">//跳转到哪个应用上</span>                <span class="token punctuation">.</span><span class="token function">withAbilityName</span><span class="token punctuation">(</span><span class="token string">"com.example.jumpapplication6.SecondAbility"</span><span class="token punctuation">)</span><span class="token comment">//哪个页面</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">setOperation</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">startAbility</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>component <span class="token operator">==</span> but2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//就要跳转到第二个页面中的其他子界面中</span>            <span class="token comment">//创建意图对象</span>            <span class="token class-name">Intent</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Operation</span> operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent<span class="token punctuation">.</span>OperationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withAction</span><span class="token punctuation">(</span><span class="token string">"secondabilityslicenomain"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">setOperation</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">startAbility</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> harmonyos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> harmonyos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmd命令大全</title>
      <link href="/liaojie.github.io/2022/01/18/cmd/"/>
      <url>/liaojie.github.io/2022/01/18/cmd/</url>
      
        <content type="html"><![CDATA[<p>WIN+R输入CMD进入命令行界面</p><p>1.shutdown -s -t 60 一分钟后关机<br>2.Shutdown -a 取消关机计划<br>3.Shutdown -l 注销计算机<br>4.Tasklist 列出正在运行的进程<br>5.Command MMc 启动计算机管理<br>6.chkdsk 检查磁盘,默认为C盘<br>7.taskmgr 启动任务管理器<br>8.tsshutdn 60秒后关机<br>9.rononce -p 15秒后关机</p><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><p>1.ipconfig<br>功能:查询本机ip信息<br>格式:ipconfig/XX</p><p>例:<br>(1)ipconfig/release:释放本机现有ip<br>(2)ipconfig/renew:向DHCP服务器重新申请一个ip<br>(3)ipconfig/all:显示完整版的ip</p><p>2.nslookup<br>功能:查询网站ip地址<br>格式:nslookup 网站域名</p><p>3.Ping<br>功能:测试网络连通性<br>格式:ping 域名/ip地址(参数)</p><p>4.netstat<br>功能:查询网络状态</p><p>例:<br>netstat -a :查看开启了哪些端口,常用netstat -an<br>netstat -n :查看端口的网络连通情况,常用netstat -an<br>netstat -v :查看正在进行的工作<br>netstat -p 协议名 :查看某协议使用情况<br>  例:<br>    netstat -p tcq/ip 查看tcq/ip使用情况<br>netstat -s:查看正在使用的所有协议的使用情况</p><p>5.tracert<br>功能:跟踪路由信息<br>查出数据从本地机器传输到目标机器经过的所有途径<br>格式:tracert -参数 ip(或计算机名) 跟踪路由 (数据包)<br>参数:”-w数字”用于设置超时间隔<br>例:<br>  tracert <a href="http://www.baidu.com/">www.baidu.com</a></p><p>6.net<br>功能:网络命令中最重要的<br>net start: 查看开启了哪些服务<br>net start 服务名:开启服务<br>net stop 服务名:停止某服务<br>net config:显示系统网络设置<br>net logoff:断开连接的共享<br>net pause 服务名:暂停某服务<br>net send ip: “文本信息” 向对方发信息<br>net ver:局域网内正在使用的网络连接类型和信息<br>net share:查看本地开启的共享<br>net user 用户名 密码: 将用户登录后将密码改为12345<br>net password 密码: 更改系统登录密码</p><p>7.telnet<br>功能:功能强大的远程登录命令<br>格式:telnet 远程机器地址<br>open ip:连接到ip(属telnet登录后的命令)</p><p>8.ftp<br>功能:任何人都可以登录上去<br>如果你扫描到一台开放的ftp服务主机,你想干啥干啥。</p>]]></content>
      
      
      <categories>
          
          <category> cmd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/liaojie.github.io/2022/01/16/javascript/"/>
      <url>/liaojie.github.io/2022/01/16/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h1 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h1><h2 id="1-编程语言"><a href="#1-编程语言" class="headerlink" title="1 编程语言"></a>1 编程语言</h2><h3 id="1-1-编程"><a href="#1-1-编程" class="headerlink" title="1.1 编程"></a>1.1 编程</h3><ul><li>编程：<ul><li>就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</li></ul></li><li>计算机程序：<ul><li>就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算机一定要通过计算机语言向计算机发出命令。</li></ul></li></ul><h3 id="1-2-计算机语言"><a href="#1-2-计算机语言" class="headerlink" title="1.2 计算机语言"></a>1.2 计算机语言</h3><ul><li><p>计算机语言指用于人与计算机之间通讯的语言，它是人与计算机之间传递信息的媒介。</p></li><li><p>计算机语言的种类非常的多，总的来说可以分成机器语言，汇编语言和高级语言三大类。</p></li><li><p>实际上计算机最终所执行的都是 机器语言，它是由“0”和“1”组成的二进制数，二进制是计算机语言的基础。</p></li></ul><h3 id="1-3-编程语言"><a href="#1-3-编程语言" class="headerlink" title="1.3 编程语言"></a>1.3 编程语言</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">编程语言：可以通过类似于人类语言的“语言”来控制计算机，让计算机为我们做事情，这样的语言就叫做编程语言（Programming Language）。编程语言是用来控制计算机的一系列指令，它有固定的格式和词汇（不同编程语言的格式和词汇不一样），必须遵守。如今通用的编程语言有两种形式：汇编语言和高级语言。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>语言类型</th><th align="center">说明</th></tr></thead><tbody><tr><td><strong>汇编语言</strong></td><td align="center">汇编语言和机器语言实质是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆。</td></tr><tr><td><strong>高级语言</strong></td><td align="center">高级语言主要是相对于低级语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，常用的有C语言、C++、Java、C#、Python、PHP、JavaScript、Go语言、Objective-C、Swift等。</td></tr></tbody></table><h3 id="1-4-翻译器"><a href="#1-4-翻译器" class="headerlink" title="1.4 翻译器"></a>1.4 翻译器</h3><pre class="line-numbers language-none"><code class="language-none">高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，为此，我们需要一个翻译器。翻译器可以将我们所编写的源代码转换为机器语言，这也被称为二进制化。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%873.png"></p><h3 id="1-5-编程语言和标记语言区别"><a href="#1-5-编程语言和标记语言区别" class="headerlink" title="1.5 编程语言和标记语言区别"></a>1.5 编程语言和标记语言区别</h3><table><thead><tr><th>语言</th><th>说明</th></tr></thead><tbody><tr><td>编程语言</td><td>编程语言有很强的逻辑和行为能力。在编程语言里, 你会看到很多 if else 、for 、while等具有逻辑性和行为能力的指令，这是主动的。</td></tr><tr><td>标记语言</td><td>标记语言（html）不用于向计算机发出指令，常用于格式化和链接。标记语言的存在是用来被读取的, 他是被动的。</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>计算机可以帮助人类解决某些问题</li><li>程序员利用编程语言编写程序发出指令控制计算机来实现这些任务</li><li>编程语言有机器语言、汇编语言、高级语言</li><li>高级语言需要一个翻译器转换为计算机识别的机器语言</li><li>编程语言是主动的有很强的逻辑性</li></ol><h2 id="2-计算机基础"><a href="#2-计算机基础" class="headerlink" title="2 计算机基础"></a>2 计算机基础</h2><h3 id="2-1-计算机组成"><a href="#2-1-计算机组成" class="headerlink" title="2.1 计算机组成"></a>2.1 计算机组成</h3><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%874.png"></p><h3 id="2-2-数据存储"><a href="#2-2-数据存储" class="headerlink" title="2.2 数据存储"></a>2.2 数据存储</h3><ol><li>计算机内部使用二进制 0 和 1来表示数据。</li><li>所有数据，包括文件、图片等最终都是以二进制数据（0 和 1）的形式存放在硬盘中的。</li><li>所有程序，包括操作系统，本质都是各种数据，也以二进制数据的形式存放在硬盘中。平时我们所说的安装软件，其实就是把程序文件复制到硬盘中。</li><li>硬盘、内存都是保存的二进制数据。</li></ol><h3 id="2-3-数据存储单位"><a href="#2-3-数据存储单位" class="headerlink" title="2.3 数据存储单位"></a>2.3 数据存储单位</h3><pre class="line-numbers language-none"><code class="language-none">大小关系：bit &lt; byte &lt; kb &lt; GB &lt; TB&lt;.....<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>位(bit)：   1bit 可以保存一个 0 或者 1 （最小的存储单位）</li><li>字节(Byte)：1B = 8b</li><li>千字节(KB)：1KB = 1024B</li><li>兆字节(MB)：1MB = 1024KB</li><li>吉字节(GB):  1GB = 1024MB</li><li>太字节(TB):  1TB = 1024GB</li></ul><h3 id="2-4-程序运行"><a href="#2-4-程序运行" class="headerlink" title="2.4 程序运行"></a>2.4 程序运行</h3><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%876.png"></p><pre class="line-numbers language-none"><code class="language-none">计算机运行软件的过程：1. 打开某个程序时，先从硬盘中把程序的代码加载到内存中2. CPU执行内存中的代码   注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-初始JavaScript"><a href="#3-初始JavaScript" class="headerlink" title="3 初始JavaScript"></a>3 初始JavaScript</h2><h3 id="3-1-JavaScript-是什么"><a href="#3-1-JavaScript-是什么" class="headerlink" title="3.1 JavaScript 是什么"></a>3.1 JavaScript 是什么</h3><ul><li><p>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</p></li><li><p>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</p></li><li><p>现在也可以基于 Node.js 技术进行服务器端编程</p></li></ul><h3 id="3-2-JavaScript的作用"><a href="#3-2-JavaScript的作用" class="headerlink" title="3.2 JavaScript的作用"></a>3.2 JavaScript的作用</h3><ul><li>表单动态校验（密码强度检测）  （ JS 产生最初的目的 ）</li><li>网页特效</li><li>服务端开发(Node.js)</li><li>桌面程序(Electron)</li><li>App(Cordova) </li><li>控制硬件-物联网(Ruff)</li><li>游戏开发(cocos2d-js)</li></ul><h3 id="3-3-HTML-CSS-JS-的关系"><a href="#3-3-HTML-CSS-JS-的关系" class="headerlink" title="3.3 HTML/CSS/JS 的关系"></a>3.3 HTML/CSS/JS 的关系</h3><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%879.png"></p><h3 id="3-4-浏览器执行-JS-简介"><a href="#3-4-浏览器执行-JS-简介" class="headerlink" title="3.4 浏览器执行 JS 简介"></a>3.4 浏览器执行 JS 简介</h3><p><strong>浏览器分成两部分：渲染引擎和 JS 引擎</strong></p><p><img src="/liaojie.github.io/medias/javascript/neihe.png"></p><pre class="line-numbers language-none"><code class="language-none">浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-5-JS-的组成"><a href="#3-5-JS-的组成" class="headerlink" title="3.5 JS 的组成"></a>3.5 JS 的组成</h3><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%8711.png"></p><ol><li><p><strong>ECMAScript</strong></p><p> ECMAScript 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%8712.png"></p><p> ECMAScript：规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p><p>更多参看MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview">MDN手册</a></p></li><li><p><strong>DOM——文档对象模型</strong></p><pre><code>**文档对象模型**（DocumentObject Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）</code></pre></li><li><p><strong>BOM——浏览器对象模型</strong></p><p> <strong>浏览器对象模型</strong>(Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p></li></ol><h3 id="3-6-JS-初体验"><a href="#3-6-JS-初体验" class="headerlink" title="3.6 JS 初体验"></a>3.6 JS 初体验</h3><pre class="line-numbers language-none"><code class="language-none">JS 有3种书写位置，分别为行内、内嵌和外部。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>行内式</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我试试<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li><li>注意单双引号的使用：在HTML中我们推荐使用双引号, JS 中我们推荐使用单引号</li><li>可读性差， 在html中编写JS大量代码时，不方便阅读；</li><li>引号易错，引号多层嵌套匹配时，非常容易弄混；</li><li>特殊情况下使用</li></ul><ol><li><p>内嵌式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello  World~!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>可以将多行JS代码写到 script 标签中</li><li>内嵌 JS 是学习时常用的方式</li></ul></li><li><p>外部JS文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>利于HTML页面代码结构化，把大段 JS代码独立到 HTML 页面之外，既美观，也方便文件级别的复用</li><li>引用外部 JS文件的 script 标签中间不可以写代码</li><li>适合于JS 代码量比较大的情况</li></ul></li></ol><h2 id="4-JavaScript注释"><a href="#4-JavaScript注释" class="headerlink" title="4 JavaScript注释"></a>4 JavaScript注释</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="4-1-单行注释"><a href="#4-1-单行注释" class="headerlink" title="4.1  单行注释"></a>4.1  单行注释</h3><pre class="line-numbers language-none"><code class="language-none">为了提高代码的可读性，JS与CSS一样，也提供了注释功能。JS中的注释主要有两种，分别是 单行注释 和 多行注释。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>单行注释的注释方式如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">// 我是一行文字，不想被 JS引擎 执行，所以 注释起来<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">// 用来注释单行文字（  快捷键   ctrl  +  /   ）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-多行注释"><a href="#4-2-多行注释" class="headerlink" title="4.2 多行注释"></a>4.2 多行注释</h3><p>多行注释的注释方式如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/*  获取用户年龄和姓名  并通过提示框显示出来*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/* */  用来注释多行文字（ 默认快捷键  alt +  shift  + a ） <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>快捷键修改为：   ctrl + shift  +  /</p><p>vscode → 首选项按钮 → 键盘快捷方式 → 查找 原来的快捷键 → 修改为新的快捷键 → 回车确认</p><h2 id="5-JavaScript输入输出语句"><a href="#5-JavaScript输入输出语句" class="headerlink" title="5 JavaScript输入输出语句"></a>5 JavaScript输入输出语句</h2><p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下：</p><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><ul><li>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</li></ul><h2 id="6-变量的概念"><a href="#6-变量的概念" class="headerlink" title="6 变量的概念"></a>6 变量的概念</h2><h3 id="6-1-什么是变量"><a href="#6-1-什么是变量" class="headerlink" title="6.1 什么是变量"></a>6.1 什么是变量</h3><p>白话：变量就是一个装东西的盒子。</p><p>通俗：变量是用于存放数据的容器。 我们通过 变量名 获取数据，甚至数据可以修改。</p><h3 id="6-2-变量在内存中的存储"><a href="#6-2-变量在内存中的存储" class="headerlink" title="6.2 变量在内存中的存储"></a>6.2 变量在内存中的存储</h3><pre class="line-numbers language-none"><code class="language-none">本质：变量是程序在内存中申请的一块用来存放数据的空间。类似我们酒店的房间，一个房间就可以看做是一个变量。  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-变量的使用"><a href="#7-变量的使用" class="headerlink" title="7 变量的使用"></a>7 变量的使用</h2><ul><li>变量的声明   </li><li>变量的赋值 </li></ul><h3 id="7-1-声明变量"><a href="#7-1-声明变量" class="headerlink" title="7.1 声明变量"></a>7.1 声明变量</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//  声明变量  </span><span class="token keyword">var</span> age<span class="token punctuation">;</span> <span class="token comment">//  声明一个 名称为age 的变量     </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>var 是一个 JS关键字，用来声明变量( variable 变量的意思 )。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</li><li>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</li></ul><h3 id="7-2-赋值"><a href="#7-2-赋值" class="headerlink" title="7.2 赋值"></a>7.2 赋值</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 给 age  这个变量赋值为 10          </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>= 用来把右边的值赋给左边的变量空间中   此处代表赋值的意思</li><li>变量值是程序员保存到变量空间里的值</li></ul><h3 id="7-3-变量的初始化"><a href="#7-3-变量的初始化" class="headerlink" title="7.3 变量的初始化"></a>7.3 变量的初始化</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age  <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>  <span class="token comment">// 声明变量同时赋值为 18</span><span class="token comment">// 声明一个变量并赋值， 我们称之为变量的初始化。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-4-变量语法扩展"><a href="#7-4-变量语法扩展" class="headerlink" title="7.4 变量语法扩展"></a>7.4 变量语法扩展</h3><ul><li><p>更新变量</p><p>  一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>age <span class="token operator">=</span> <span class="token number">81</span><span class="token punctuation">;</span>   <span class="token comment">// 最后的结果就是81因为18 被覆盖掉了          </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>同时声明多个变量</p><pre><code>同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>  name <span class="token operator">=</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>声明变量特殊情况</p><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var  age ; console.log (age);</td><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值  直接使用</td><td>报错</td></tr><tr><td>age   = 10; console.log (age);</td><td>不声明   只赋值</td><td>10</td></tr></tbody></table></li></ul><h3 id="7-5-变量命名规范"><a href="#7-5-变量命名规范" class="headerlink" title="7.5 变量命名规范"></a>7.5 变量命名规范</h3><p>规则：</p><ul><li>由字母(A-Za-z)、数字(0-9)、下划线(_)、美元符号( $ )组成，如：usrAge, num01, _name</li><li>严格区分大小写。var app; 和 var App; 是两个变量</li><li>不能 以数字开头。  18age   是错误的</li><li>不能 是关键字、保留字。例如：var、for、while</li><li>变量名必须有意义。 MMD   BBD        nl   →     age  </li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。myFirstName</li></ul><p>推荐翻译网站： 有道    爱词霸</p><h2 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8 数据类型"></a>8 数据类型</h2><h3 id="8-1-数据类型简介"><a href="#8-1-数据类型简介" class="headerlink" title="8.1 数据类型简介"></a>8.1 数据类型简介</h3><ul><li><p>为什么需要数据类型</p><pre><code>在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。     简单来说，数据类型就是数据的类别型号。比如姓名“张三”，年龄18，这些数据的类型是不一样的。</code></pre></li><li><p>变量的数据类型</p><pre><code>变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定：</code></pre></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 这是一个数字型</span><span class="token keyword">var</span> areYouOk <span class="token operator">=</span> <span class="token string">'是的'</span><span class="token punctuation">;</span>   <span class="token comment">// 这是一个字符串     </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>           <span class="token comment">// x 为数字</span>  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"Bill"</span><span class="token punctuation">;</span>      <span class="token comment">// x 为字符串    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>数据类型的分类</p><p>JS 把数据类型分为两类：</p></li><li><p>简单数据类型 （Number,String,Boolean,Undefined,Null）</p><ul><li>复杂数据类型 （object)    </li></ul></li></ul><h3 id="8-2-简单数据类型"><a href="#8-2-简单数据类型" class="headerlink" title="8.2 简单数据类型"></a>8.2 简单数据类型</h3><p>简单数据类型（基本数据类型）</p><p>JavaScript 中的简单数据类型及其说明如下：</p><ul><li><p>数字型 Number</p><p>   JavaScript 数字类型既可以保存整数，也可以保存小数(浮点数）。  </p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>       <span class="token comment">// 整数</span><span class="token keyword">var</span> Age <span class="token operator">=</span> <span class="token number">21.3747</span><span class="token punctuation">;</span>  <span class="token comment">// 小数     </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>数字型进制</li></ol><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.八进制数字序列范围：0~7</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">07</span><span class="token punctuation">;</span>   <span class="token comment">// 对应十进制的7</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">019</span><span class="token punctuation">;</span>  <span class="token comment">// 对应十进制的19</span><span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token number">08</span><span class="token punctuation">;</span>   <span class="token comment">// 对应十进制的8</span><span class="token comment">// 2.十六进制数字序列范围：0~9以及A~F</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x  </p><ol start="2"><li>数字型范围</li></ol><p>JavaScript中数值的最大和最小值</p><ul><li>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</li><li>最小值：Number.MIN_VALUE，这个值为：5e-32</li></ul><ol start="3"><li><p>数字型三个特殊值</p><ul><li>Infinity ，代表无穷大，大于任何数值</li><li>-Infinity ，代表无穷小，小于任何数值</li><li>NaN ，Not a number，代表一个非数值</li></ul></li><li><p>isNaN</p><p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p></li></ol><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%8717.png"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> usrAge <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">var</span> isOk <span class="token operator">=</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isNum<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// false ，21 不是一个非数字</span><span class="token keyword">var</span> usrName <span class="token operator">=</span> <span class="token string">"andy"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true ，"andy"是一个非数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串型 String</li></ul><p>字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"我爱北京天安门~"</span><span class="token punctuation">;</span>  <span class="token comment">// 使用双引号表示字符串</span><span class="token keyword">var</span> strMsg2 <span class="token operator">=</span> <span class="token string">'我爱吃猪蹄~'</span><span class="token punctuation">;</span>    <span class="token comment">// 使用单引号表示字符串</span><span class="token comment">// 常见错误</span><span class="token keyword">var</span> strMsg3 <span class="token operator">=</span> 我爱大肘子<span class="token punctuation">;</span>       <span class="token comment">// 报错，没使用引号，会被认为是js代码，但js没有这些语法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐使用单引号。</p><ol><li><p>字符串引号嵌套</p><p> JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)</p></li></ol><pre class="line-numbers language-none"><code class="language-none">var strMsg = '我是"高帅富"程序猿';   // 可以用''包含""var strMsg2 = "我是'高帅富'程序猿";  // 也可以用"" 包含''//  常见错误var badQuotes = 'What on earth?"; // 报错，不能 单双引号搭配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>字符串转义符</li></ol><p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p><p>转义符都是 \ 开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n   是   newline   的意思</td></tr><tr><td>\ \</td><td>斜杠   \</td></tr><tr><td>'</td><td>‘   单引号</td></tr><tr><td>"</td><td>”双引号</td></tr><tr><td>\t</td><td>tab  缩进</td></tr><tr><td>\b</td><td>空格 ，b   是   blank  的意思</td></tr></tbody></table><ol start="3"><li>字符串长度</li></ol><p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"我是的程序猿！"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>strMsg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>字符串拼接</li></ol><ul><li><p>多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串</p></li><li><p>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.1 字符串 "相加"</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world</span><span class="token comment">//1.2 数值字符串 "相加"</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'100'</span> <span class="token operator">+</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100100</span><span class="token comment">//1.3 数值字符串 + 数值</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'11'</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 1112 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><em><strong>+ 号总结口诀：数值相加 ，字符相连</strong></em></li></ul><ol start="5"><li>字符串拼接加强</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'老师'</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 只要有字符就会相连 </span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'老师age岁啦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 这样不行哦</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'老师'</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 老师18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'老师'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁啦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 老师18岁啦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>经常会将字符串和变量来拼接，变量可以很方便地修改里面的值</p></li><li><p>变量是不能添加引号的，因为加引号的变量会变成字符串</p></li><li><p>如果变量两侧都有字符串拼接，口诀“引引加加 ”，删掉数字，变量写加中间</p></li><li><p>布尔型Boolean</p><p>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p><p>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>Undefined和 Null</p><p>一个声明后没有被赋值的变量会有一个默认值undefined ( 如果进行相连或者相加时，注意结果）</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> variable<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span> <span class="token operator">+</span> variable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 你好undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">+</span> variable<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> variable<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> vari <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span> <span class="token operator">+</span> vari<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 你好null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">+</span> vari<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> vari<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-获取变量数据类型"><a href="#8-3-获取变量数据类型" class="headerlink" title="8.3 获取变量数据类型"></a>8.3 获取变量数据类型</h3><ul><li>获取检测变量的数据类型</li></ul><p> typeof 可用来获取检测变量的数据类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span> <span class="token comment">// 结果 number      </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  不同类型的返回值</p><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%8718.png"></p><ul><li><p>字面量</p><p>字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><ul><li>数字字面量：8, 9, 10</li><li>字符串字面量：’黑马程序员’, “大前端”</li><li>布尔字面量：true，false</li></ul></li></ul><h3 id="8-4-数据类型转换"><a href="#8-4-数据类型转换" class="headerlink" title="8.4 数据类型转换"></a>8.4 数据类型转换</h3><p>什么是数据类型转换？</p><p>使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另一种数据类型，通常会实现3种方式的转换：</p><pre class="line-numbers language-none"><code class="language-none">转换为字符串类型转换为数字型转换为布尔型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>转换为字符串</li></ul><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%8719.png"></p><ul><li><p>toString() 和 String()  使用方式不一样。</p></li><li><p>三种转换方式，更多第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。</p></li><li><p>转换为数字型（重点）</p></li></ul><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%8720.png"></p><ul><li><p>注意 parseInt 和 parseFloat 单词的大小写，这2个是重点</p></li><li><p>隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</p></li><li><p>转换为布尔型</p></li></ul><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%8721.png"></p><ul><li><p>代表空、否定的值会被转换为 false  ，如 ‘’、0、NaN、null、undefined  </p></li><li><p>其余值都会被转换为 true</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-解释型语言和编译型语言"><a href="#9-解释型语言和编译型语言" class="headerlink" title="9 解释型语言和编译型语言"></a>9 解释型语言和编译型语言</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><pre class="line-numbers language-none"><code class="language-none">计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>翻译器翻译的方式有两种：一个是编译，另外一个是解释。两种方式之间的区别在于翻译的时间点不同</li><li>编译器是在代码执行之前进行编译，生成中间代码文件</li><li>解释器是在运行时进行及时解释，并立即执行(当编译器以解释方式运行的时候，也称之为解释器)</li></ul><h3 id="9-2-执行过程"><a href="#9-2-执行过程" class="headerlink" title="9.2 执行过程"></a>9.2 执行过程</h3><p><img src="/liaojie.github.io/medias/javascript/%E5%9B%BE%E7%89%8723.png"></p><pre class="line-numbers language-none"><code class="language-none">类似于请客吃饭：编译语言：首先把所有菜做好，才能上桌吃饭解释语言：好比吃火锅，边吃边涮，同时进行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-关键字和保留字"><a href="#10-关键字和保留字" class="headerlink" title="10 关键字和保留字"></a>10 关键字和保留字</h2><h3 id="10-1-标识符"><a href="#10-1-标识符" class="headerlink" title="10.1 标识符"></a>10.1 标识符</h3><pre class="line-numbers language-none"><code class="language-none">标识(zhi)符：就是指开发人员为变量、属性、函数、参数取的名字。标识符不能是关键字或保留字。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10-2-关键字"><a href="#10-2-关键字" class="headerlink" title="10.2 关键字"></a>10.2 关键字</h3><pre class="line-numbers language-none"><code class="language-none">关键字：是指 JS本身已经使用了的字，不能再用它们充当变量名、方法名。包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10-3-保留字"><a href="#10-3-保留字" class="headerlink" title="10.3 保留字"></a>10.3 保留字</h3><pre class="line-numbers language-none"><code class="language-none">保留字：实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h1><h2 id="1-运算符（操作符）"><a href="#1-运算符（操作符）" class="headerlink" title="1 运算符（操作符）"></a>1 运算符（操作符）</h2><h3 id="1-1-运算符的分类"><a href="#1-1-运算符的分类" class="headerlink" title="1.1 运算符的分类"></a>1.1 运算符的分类</h3><p><strong>运算符</strong>（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。</p><pre class="line-numbers language-none"><code class="language-none">JavaScript中常用的运算符有：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><h3 id="1-2-算数运算符"><a href="#1-2-算数运算符" class="headerlink" title="1.2 算数运算符"></a>1.2 算数运算符</h3><ul><li><p>算术运算符概述</p><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p></li></ul><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%871.png"></p><ul><li><p>浮点数的精度问题</p><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span>    <span class="token comment">// 结果不是 0.3，而是：0.30000000000000004</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.07</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 结果不是 7，  而是：7.000000000000001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以：不要直接判断两个浮点数是否相等 ! </p></li><li><p>表达式和返回值</p><p>表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合</p><p>简单理解：是由数字、运算符、变量等组成的式子</p><p>表达式最终都会有一个结果，返回给开发者，称为返回值</p></li></ul><h3 id="1-3-递增和递减运算符"><a href="#1-3-递增和递减运算符" class="headerlink" title="1.3 递增和递减运算符"></a>1.3 递增和递减运算符</h3><ul><li><p>递增和递减运算符概述</p><p>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ – ）运算符来完成。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。  注意：递增和递减运算符必须和变量配合使用。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>递增运算符</p><ul><li><p>前置递增运算符</p><p>++num 前置递增，就是自加1，类似于 num =  num + 1，但是 ++num 写起来更简单。</p><p>使用口诀：先自加，后返回值</p></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span>  num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">++</span>num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>后置递增运算符</p><p>num++ 后置递增，就是自加1，类似于 num =  num + 1 ，但是 num++ 写起来更简单。</p><p>使用口诀：先返回原值，后自加 </p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span>  num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-4-比较运算符"><a href="#1-4-比较运算符" class="headerlink" title="1.4 比较运算符"></a>1.4 比较运算符</h3><ul><li><p>比较运算符概述</p><p>概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。</p></li></ul><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%872.png"></p><ul><li>等号比较</li></ul><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%873.png"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">==</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">===</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-5-逻辑运算符"><a href="#1-5-逻辑运算符" class="headerlink" title="1.5 逻辑运算符"></a>1.5 逻辑运算符</h3><ul><li><p>逻辑运算符概述</p><p>概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断</p></li></ul><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%874.png"></p><ul><li><p>逻辑与&amp;&amp;</p><p>两边都是 true才返回 true，否则返回 false</p></li></ul><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%875.png"></p><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%876.png"></p><ul><li>逻辑或 ||</li></ul><p>两边都是 true才返回 true，否则返回 false</p><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%877.png"></p><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%878.png"></p><ul><li><p>逻辑非 ！</p><p>逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> isOk <span class="token operator">=</span> <span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isOk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>短路运算（逻辑中断）</p><p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p></li><li><p>逻辑与</p><p>语法： 表达式1 &amp;&amp; 表达式2</p></li></ul><pre class="line-numbers language-none"><code class="language-none">- 如果第一个表达式的值为真，则返回表达式2- 如果第一个表达式的值为假，则返回表达式1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 456</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token operator">&amp;&amp;</span> <span class="token number">789</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>逻辑或</p><p>语法： 表达式1 || 表达式2</p></li></ul><pre class="line-numbers language-none"><code class="language-none">- 如果第一个表达式的值为真，则返回表达式1- 如果第一个表达式的值为假，则返回表达式2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//  123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">||</span>  <span class="token number">456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//  456</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">||</span> <span class="token number">789</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-6-赋值运算符"><a href="#1-6-赋值运算符" class="headerlink" title="1.6 赋值运算符"></a>1.6 赋值运算符</h3><pre class="line-numbers language-none"><code class="language-none">概念：用来把数据赋值给变量的运算符。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%879.png"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>age <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 相当于 age = age + 5;</span>age <span class="token operator">-=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 相当于 age = age - 5;</span>age <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 相当于 age = age * 10;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-运算符优先级"><a href="#1-7-运算符优先级" class="headerlink" title="1.7 运算符优先级"></a>1.7 运算符优先级</h3><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%8710.png"></p><ul><li>一元运算符里面的逻辑非优先级很高</li><li>逻辑与比逻辑或优先级高</li></ul><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2 流程控制"></a>2 流程控制</h2><h3 id="2-1-流程控制概念"><a href="#2-1-流程控制概念" class="headerlink" title="2.1 流程控制概念"></a>2.1 流程控制概念</h3><pre class="line-numbers language-none"><code class="language-none">在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。简单理解：**流程控制就是来控制代码按照一定结构顺序来执行**流程控制主要有三种结构，分别是**顺序结构**、**分支结构**和**循环结构**，代表三种代码执行的顺序。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%8711.png"></p><h3 id="2-2-顺序流程控制"><a href="#2-2-顺序流程控制" class="headerlink" title="2.2 顺序流程控制"></a>2.2 顺序流程控制</h3><p>顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%8712.png"></p><h3 id="2-3-分支流程控制"><a href="#2-3-分支流程控制" class="headerlink" title="2.3 分支流程控制"></a>2.3 分支流程控制</h3><ul><li><p>分支结构</p><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p></li></ul><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%8713.png"></p><p>  JS 语言提供了两种分支结构语句：if 语句、switch 语句</p><ul><li><p>if 语句</p><ul><li>语法结构</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 条件成立执行代码，否则什么也不做</span><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 条件成立执行的代码语句</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行流程</li></ul><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%8714.png"></p><ul><li><p>if else语句（双分支语句）</p><ul><li>语法结构</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 条件成立  执行 if 里面代码，否则执行else 里面的代码</span><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// [如果] 条件成立执行的代码</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// [否则] 执行的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行流程</li></ul><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%8715.png"></p><ul><li><p>if else if 语句(多分支语句)</p><ul><li>语法结构</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 适合于检查多重条件。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句<span class="token number">1</span>；<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    语句<span class="token number">2</span>；<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   语句<span class="token number">3</span>； <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 上述条件都不成立执行此处代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行逻辑</li></ul><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%8716.png"></p><h3 id="2-4-三元表达式"><a href="#2-4-三元表达式" class="headerlink" title="2.4 三元表达式"></a>2.4 三元表达式</h3><ul><li>语法结构</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">表达式<span class="token number">1</span> <span class="token operator">?</span> 表达式<span class="token number">2</span> <span class="token operator">:</span> 表达式<span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>执行思路</p><ul><li>如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值</li><li>简单理解： 就类似于  if  else （双分支） 的简写</li></ul></li></ul><h3 id="2-5-switch分支流程控制"><a href="#2-5-switch分支流程控制" class="headerlink" title="2.5 switch分支流程控制"></a>2.5 switch分支流程控制</h3><ul><li><p>语法结构</p><p>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">switch</span><span class="token punctuation">(</span> 表达式 <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">case</span> value1<span class="token operator">:</span>        <span class="token comment">// 表达式 等于 value1 时要执行的代码</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value2<span class="token operator">:</span>        <span class="token comment">// 表达式 等于 value2 时要执行的代码</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token comment">// 表达式 不等于任何一个 value 时要执行的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>switch ：开关 转换  ， case ：小例子   选项</p></li><li><p>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</p></li><li><p>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</p></li><li><p>switch 表达式的值会与结构中的 case 的值做比较 </p></li><li><p>如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</p></li><li><p>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</p><p><strong>注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。</strong></p></li><li><p>switch 语句和 if else if 语句的区别</p><ul><li>一般情况下，它们两个语句可以相互替换</li><li>switch…case 语句通常处理 case为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围)</li><li>switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。</li><li>当分支比较少时，if… else语句的执行效率比 switch语句高。</li><li>当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。 </li></ul></li></ul><h1 id="part-3"><a href="#part-3" class="headerlink" title="part 3"></a>part 3</h1><h2 id="1-循环"><a href="#1-循环" class="headerlink" title="1 循环"></a>1 循环</h2><h3 id="1-1-for循环"><a href="#1-1-for循环" class="headerlink" title="1.1 for循环"></a>1.1 for循环</h3><ul><li>语法结构</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化变量<span class="token punctuation">;</span> 条件表达式<span class="token punctuation">;</span> 操作表达式 <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//循环体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>初始化变量</td><td>通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。</td></tr><tr><td>条件表达式</td><td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td></tr><tr><td>操作表达式</td><td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td></tr></tbody></table><p>执行过程：</p><ol><li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li></ol><ul><li>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</li></ul><ol start="2"><li>执行操作表达式，此时第一轮结束。</li><li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li><li>继续执行操作表达式，第二轮结束。</li><li>后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。</li></ol><p>断点调试：</p><pre class="line-numbers language-none"><code class="language-none">断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。断点调试可以帮助观察程序的运行过程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">断点调试的流程：1、浏览器中按 F12--&gt; sources --&gt;找到需要调试的文件--&gt;在程序的某一行设置断点2、Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。3、摁下F11，程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>for 循环重复相同的代码</p><p>比如输出10句“媳妇我错了”</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//  基本写法</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'媳妇我错了~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 用户输入次数</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入次数:'</span><span class="token punctuation">)</span>；<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'媳妇我错了~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>for 循环重复不相同的代码</p><p>例如，求输出1到100岁：</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//  基本写法</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个人今年'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'岁了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  例如，求输出1到100岁，并提示出生、死亡</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// for 里面是可以添加其他语句的 </span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个人今年1岁了， 它出生了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个人今年100岁了，它死了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个人今年'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'岁了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  for循环因为有了计数器的存在，还可以重复的执行某些操作，比如做一些算术运算。</p><h3 id="1-2-双重for循环"><a href="#1-2-双重for循环" class="headerlink" title="1.2 双重for循环"></a>1.2 双重for循环</h3><ul><li>双重 for 循环概述</li></ul><pre class="line-numbers language-none"><code class="language-none">循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>双重 for 循环语法</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>外循环的初始<span class="token punctuation">;</span> 外循环的条件<span class="token punctuation">;</span> 外循环的操作表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>内循环的初始<span class="token punctuation">;</span> 内循环的条件<span class="token punctuation">;</span> 内循环的操作表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>         需执行的代码<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>内层循环可以看做外层循环的循环体语句</p></li><li><p>内层循环执行的顺序也要遵循 for 循环的执行顺序 </p></li><li><p>外层循环执行一次，内层循环要执行全部次数</p></li><li><p>打印五行五列星星</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      star <span class="token operator">+=</span> <span class="token string">'☆'</span>    <span class="token punctuation">}</span>    <span class="token comment">// 每次满 5个星星 就 加一次换行</span>    star <span class="token operator">+=</span> <span class="token string">'\n'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  核心逻辑：</p><p>  1.内层循环负责一行打印五个星星</p><p>  2.外层循环负责打印五行</p><ul><li><p>for 循环小结</p><ul><li>for 循环可以重复执行某些相同代码</li><li>for 循环可以重复执行些许不同的代码，因为我们有计数器</li><li>for 循环可以重复执行某些操作，比如算术运算符加法操作</li><li>随着需求增加，双重for循环可以做更多、更好看的效果</li><li>双重 for 循环，外层循环一次，内层 for 循环全部执行</li><li>for 循环是循环条件和数字直接相关的循环</li></ul></li></ul><h3 id="1-3-while循环"><a href="#1-3-while循环" class="headerlink" title="1.3 while循环"></a>1.3 while循环</h3><p>while语句的语法结构如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 循环体代码 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行思路：</p><ul><li>1 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li><li>2 执行循环体代码</li><li>3 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li></ul><p>注意：</p><ul><li>使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环</li></ul><h3 id="1-4-do-while循环"><a href="#1-4-do-while循环" class="headerlink" title="1.4 do-while循环"></a>1.4 do-while循环</h3><p>do… while 语句的语法结构如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行思路</p><ul><li><p>1 先执行一次循环体代码 </p><p>2 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码    </p><p>注意：先再执行循环体，再判断，do…while循环语句至少会执行一次循环体代码</p></li></ul><h3 id="1-5-continue、break"><a href="#1-5-continue、break" class="headerlink" title="1.5 continue、break"></a>1.5 continue、break</h3><p>continue 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p><p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子，其代码实现如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个包子有虫子，扔掉'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 跳出本次循环，跳出的是第3次循环 </span>     <span class="token punctuation">}</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我正在吃第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个包子呢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  break 关键字用于立即跳出整个循环（循环结束）。</p><p>  例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的不吃了，其代码实现如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 直接退出整个for 循环，跳到整个for下面的语句</span>   <span class="token punctuation">}</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我正在吃第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个包子呢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-代码规范"><a href="#2-代码规范" class="headerlink" title="2 代码规范"></a>2 代码规范</h2><h3 id="2-1-标识符命名规范"><a href="#2-1-标识符命名规范" class="headerlink" title="2.1 标识符命名规范"></a>2.1 标识符命名规范</h3><ul><li>变量、函数的命名必须要有意义</li><li>变量的名称一般用名词  </li><li>函数的名称一般用动词  </li></ul><h3 id="2-2-操作符规范"><a href="#2-2-操作符规范" class="headerlink" title="2.2 操作符规范"></a>2.2 操作符规范</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 操作符的左右两侧各保留一个空格</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span>   <span class="token punctuation">}</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我正在吃第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个包子呢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-单行注释规范"><a href="#2-3-单行注释规范" class="headerlink" title="2.3 单行注释规范"></a>2.3 单行注释规范</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 单行注释前面注意有个空格</span>   <span class="token punctuation">}</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我正在吃第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个包子呢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-其他规范"><a href="#2-4-其他规范" class="headerlink" title="2.4 其他规范"></a>2.4 其他规范</h3><pre class="line-numbers language-none"><code class="language-none">关键词、操作符之间后加空格<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="part-4"><a href="#part-4" class="headerlink" title="part 4"></a>part 4</h1><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1 数组"></a>1 数组</h2><h3 id="1-1-数组的概念"><a href="#1-1-数组的概念" class="headerlink" title="1.1 数组的概念"></a>1.1 数组的概念</h3><ul><li>数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。</li><li>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。数组是一种将一组数据存储在单个变量名下的优雅方式。</li></ul><h3 id="1-2-创建数组"><a href="#1-2-创建数组" class="headerlink" title="1.2 创建数组"></a>1.2 创建数组</h3><p>JS 中创建数组有两种方式：</p><ul><li>利用  new 创建数组  </li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ；<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建一个新的空数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  注意 Array () ，A 要大写    </p><ul><li>利用数组字面量创建数组</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1. 使用数组字面量方式创建空的数组</span><span class="token keyword">var</span>  数组名 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>；<span class="token comment">//2. 使用数组字面量方式创建带初始值的数组</span><span class="token keyword">var</span>  数组名 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小白'</span><span class="token punctuation">,</span><span class="token string">'小黑'</span><span class="token punctuation">,</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token string">'瑞奇'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>数组的字面量是方括号 [ ] </p></li><li><p>声明数组并赋值称为数组的初始化</p></li><li><p>这种字面量方式也是我们以后最多使用的方式</p></li><li><p>数组元素的类型</p><p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arrStus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小白'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">28.9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-获取数组中的元素"><a href="#1-3-获取数组中的元素" class="headerlink" title="1.3 获取数组中的元素"></a>1.3 获取数组中的元素</h3><p>索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p><p>数组可以通过索引来访问、设置、修改对应的数组元素，可以通过“数组名[索引]”的形式来获取数组中的元素。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 定义数组</span><span class="token keyword">var</span> arrStus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 获取数组中的第2个元素</span><span class="token function">alert</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是undefined</p><h3 id="1-4-遍历数组"><a href="#1-4-遍历数组" class="headerlink" title="1.4 遍历数组"></a>1.4 遍历数组</h3><ul><li><p>数组遍历</p><p>把数组中的每个元素从头到尾都访问一次（类似学生的点名），可以通过 for 循环索引遍历数组中的每一项</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>数组的长度</p><p>数组的长度：默认情况下表示数组中元素的个数</p><p>使用“数组名.length”可以访问数组元素的数量（数组长度）。</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arrStus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ul><li><p>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。</p></li><li><p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p><ul><li>数组的length属性可以被修改：</li></ul></li><li><p>如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素；</p><ul><li>如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除</li></ul></li></ul><h3 id="1-5-数组中新增元素"><a href="#1-5-数组中新增元素" class="headerlink" title="1.5 数组中新增元素"></a>1.5 数组中新增元素</h3><p>数组中可以通过以下方式在数组的末尾插入新元素：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">数组<span class="token punctuation">[</span> 数组<span class="token punctuation">.</span>length <span class="token punctuation">]</span> <span class="token operator">=</span> 新数据<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2 函数"></a>2 函数</h2><h3 id="2-1-函数的概念"><a href="#2-1-函数的概念" class="headerlink" title="2.1 函数的概念"></a>2.1 函数的概念</h3><p>在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p><p>函数：就是<strong>封装了一段可被重复调用执行的代码块</strong>。通过此代码块可以<strong>实现大量代码的重复使用</strong>。  </p><h3 id="2-2-函数的使用"><a href="#2-2-函数的使用" class="headerlink" title="2.2 函数的使用"></a>2.2 函数的使用</h3><h4 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 声明函数</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//函数体代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>function 是声明函数的关键字,必须小写</li><li>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</li></ul><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 调用函数</span><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过调用函数名来执行函数体代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>调用的时候千万不要忘记添加小括号</p></li><li><p>口诀：函数不调用，自己不执行</p><p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p></li></ul><h4 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h4><ul><li><p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p></li><li><p>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）  </p></li></ul><p>例子：封装计算1-100累加和</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*    计算1-100之间值的函数*/</span><span class="token comment">// 声明函数</span><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> sumNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 准备一个变量，保存数字和</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sumNum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token comment">// 把每个数值 都累加 到变量中</span>  <span class="token punctuation">}</span>  <span class="token function">alert</span><span class="token punctuation">(</span>sumNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 调用函数</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-函数的参数"><a href="#2-3-函数的参数" class="headerlink" title="2.3 函数的参数"></a>2.3 函数的参数</h3><h4 id="函数参数语法"><a href="#函数参数语法" class="headerlink" title="函数参数语法"></a>函数参数语法</h4><ul><li><p>形参：函数定义时设置接收调用时传入</p></li><li><p>实参：函数调用时传入小括号内的真实数据</p></li></ul><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%8701.png"></p><p>  参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。</p><p>  函数参数的运用：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 带参数的函数声明</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span> <span class="token punctuation">,</span> 形参<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 可以定义任意多的参数，用逗号分隔</span>  <span class="token comment">// 函数体</span><span class="token punctuation">}</span><span class="token comment">// 带参数的函数调用</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>调用的时候实参值是传递给形参的</li><li>形参简单理解为：不用声明的变量</li><li>实参和形参的多个参数之间用逗号（,）分隔</li></ol><h4 id="函数形参和实参数量不匹配时"><a href="#函数形参和实参数量不匹配时" class="headerlink" title="函数形参和实参数量不匹配时"></a>函数形参和实参数量不匹配时</h4><p><img src="/liaojie.github.io/medias/%E5%9B%BE%E7%89%8702.png"></p><pre class="line-numbers language-none"><code class="language-none">注意：在JavaScript中，形参的默认值是undefined。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>小结：</p><ul><li>函数可以带参数也可以不带参数</li><li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li>调用函数的时候，函数名括号里面的是实参</li><li>多个参数中间用逗号分隔</li><li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li></ul><h3 id="2-4-函数的返回值"><a href="#2-4-函数的返回值" class="headerlink" title="2.4 函数的返回值"></a>2.4 函数的返回值</h3><h4 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h4><pre class="line-numbers language-none"><code class="language-none">返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 声明函数</span><span class="token keyword">function</span> 函数名（）<span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">return</span>  需要返回的值；<span class="token punctuation">}</span><span class="token comment">// 调用函数</span><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 此时调用函数就可以得到函数体内return 后面的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在使用 return 语句时，函数会停止执行，并返回指定的值</li><li>如果函数没有 return ，返回的值是 undefined</li></ul><h4 id="break-continue-return-的区别"><a href="#break-continue-return-的区别" class="headerlink" title="break ,continue ,return 的区别"></a>break ,continue ,return 的区别</h4><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h3 id="2-5-arguments的使用"><a href="#2-5-arguments的使用" class="headerlink" title="2.5 arguments的使用"></a>2.5 arguments的使用</h3><p>当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p><ul><li><p>具有 length 属性</p></li><li><p>按索引方式储存数据</p></li><li><p>不具有数组的 push , pop 等方法</p><p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p></li></ul><h3 id="2-6-函数案例"><a href="#2-6-函数案例" class="headerlink" title="2.6 函数案例"></a>2.6 函数案例</h3><pre class="line-numbers language-none"><code class="language-none">函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-7-函数的两种声明方式"><a href="#2-7-函数的两种声明方式" class="headerlink" title="2.7 函数的两种声明方式"></a>2.7 函数的两种声明方式</h3><ul><li><p>自定义函数方式(命名函数)</p><p>利用函数关键字 function 自定义函数方式</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 声明定义方式</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment">// 调用  </span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>因为有名字，所以也被称为命名函数</p></li><li><p>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</p></li><li><p>函数表达式方式(匿名函数）</p><p>利用函数表达式方式的写法如下： </p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>；<span class="token comment">// 调用的方式，函数调用必须写到函数体下面</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因为函数没有名字，所以也被称为匿名函数</li><li>这个fn 里面存储的是一个函数  </li><li>函数表达式方式原理跟声明变量方式是一致的</li><li>函数调用的代码必须写到函数体后面</li></ul><h1 id="part-5"><a href="#part-5" class="headerlink" title="part 5"></a>part 5</h1><h2 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1 作用域"></a>1 作用域</h2><h3 id="1-1-作用域概述"><a href="#1-1-作用域概述" class="headerlink" title="1.1 作用域概述"></a>1.1 作用域概述</h3><pre class="line-numbers language-none"><code class="language-none">通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。JavaScript（es6前）中的作用域有两种：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>全局作用域<br>局部作用域（函数作用域）    </li></ul><h3 id="1-2-全局作用域"><a href="#1-2-全局作用域" class="headerlink" title="1.2 全局作用域"></a>1.2 全局作用域</h3><pre class="line-numbers language-none"><code class="language-none">作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-局部作用域"><a href="#1-3-局部作用域" class="headerlink" title="1.3 局部作用域"></a>1.3 局部作用域</h3><pre class="line-numbers language-none"><code class="language-none">作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-JS没有块级作用域"><a href="#1-4-JS没有块级作用域" class="headerlink" title="1.4 JS没有块级作用域"></a>1.4 JS没有块级作用域</h3><ul><li><p>块作用域由 { } 包括。</p><p>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：    </p><p>java有块级作用域：</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 123</span><span class="token punctuation">}</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上java代码会报错，是因为代码中 { } 即一块作用域，其中声明的变量 num，在 “{ }” 之外不能使用；</p><p>而与之类似的JavaScript代码，则不会报错：</p><p>  Js中没有块级作用域（在ES6之前）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-变量的作用域"><a href="#2-变量的作用域" class="headerlink" title="2 变量的作用域"></a>2 变量的作用域</h2><pre class="line-numbers language-none"><code class="language-none">在JavaScript中，根据作用域的不同，变量可以分为两种：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>全局变量</li><li>局部变量</li></ul><h3 id="2-1-全局变量"><a href="#2-1-全局变量" class="headerlink" title="2.1 全局变量"></a>2.1 全局变量</h3><pre class="line-numbers language-none"><code class="language-none">在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</li></ul><h3 id="2-2-局部变量"><a href="#2-2-局部变量" class="headerlink" title="2.2 局部变量"></a>2.2 局部变量</h3><pre class="line-numbers language-none"><code class="language-none">在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>局部变量只能在该函数内部使用</li><li>在函数内部 var 声明的变量是局部变量</li><li>函数的形参实际上就是局部变量</li></ul><h3 id="2-3-全局变量和局部变量的区别"><a href="#2-3-全局变量和局部变量的区别" class="headerlink" title="2.3 全局变量和局部变量的区别"></a>2.3 全局变量和局部变量的区别</h3><ul><li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h2 id="3-作用域链"><a href="#3-作用域链" class="headerlink" title="3 作用域链"></a>3 作用域链</h2><pre class="line-numbers language-none"><code class="language-none">只要是代码都一个作用域中，写在函数内部的局部作用域，未写在任何函数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据在**[内部函数可以访问外部函数变量]**的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>案例分析1：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/liaojie.github.io/medias/01.png"></p><pre class="line-numbers language-none"><code class="language-none">作用域链：采取就近原则的方式来查找变量最终的值。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'22'</span><span class="token punctuation">;</span>    <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a的值 ?</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//b的值 ?</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/liaojie.github.io/medias/02.png"></p><h2 id="4-预解析"><a href="#4-预解析" class="headerlink" title="4 预解析"></a>4 预解析</h2><h3 id="4-1-预解析的相关概念"><a href="#4-1-预解析的相关概念" class="headerlink" title="4.1 预解析的相关概念"></a>4.1 预解析的相关概念</h3><pre class="line-numbers language-none"><code class="language-none">JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：预解析和代码执行。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>预解析：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义。</p></li><li><p>代码执行： 从上到下执行JS语句。</p></li></ul><p><strong>预解析会把变量和函数的声明在代码执行之前执行完成。</strong></p><h3 id="4-2-变量预解析"><a href="#4-2-变量预解析" class="headerlink" title="4.2 变量预解析"></a>4.2 变量预解析</h3><pre class="line-numbers language-none"><code class="language-none">预解析也叫做变量、函数提升。变量提升（变量预解析）： 变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结果是多少？</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token comment">// ？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">结果：undefined注意：**变量提升只提升声明，不提升赋值**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-3-函数预解析"><a href="#4-3-函数预解析" class="headerlink" title="4.3 函数预解析"></a>4.3 函数预解析</h3><pre class="line-numbers language-none"><code class="language-none">函数提升： 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'打印'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">结果：控制台打印字符串 --- ”打印“ 注意：函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-4-函数表达式声明函数问题"><a href="#4-4-函数表达式声明函数问题" class="headerlink" title="4.4 函数表达式声明函数问题"></a>4.4 函数表达式声明函数问题</h3><pre class="line-numbers language-none"><code class="language-none">函数表达式创建函数，会执行变量提升，此时接收函数的变量名无法正确的调用：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span>  <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'想不到吧'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">结果：报错提示 ”fn is not a function"解释：该段代码执行之前，会做变量声明提升，fn在提升之后的值是undefined；而fn调用是在fn被赋值为函数体之前，此时fn的值是undefined，所以无法正确调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-对象"><a href="#5-对象" class="headerlink" title="5 对象"></a>5 对象</h2><h3 id="5-1-对象的相关概念"><a href="#5-1-对象的相关概念" class="headerlink" title="5.1 对象的相关概念"></a>5.1 对象的相关概念</h3><ul><li><p>什么是对象？</p><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><pre><code> 对象是由属性和方法组成的。</code></pre></li><li><p>属性：事物的特征，在对象中用属性来表示（常用名词）</p></li><li><p>方法：事物的行为，在对象中用方法来表示（常用动词）</p></li><li><p>为什么需要对象？</p><p>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">如果要保存一个人的完整信息呢？例如，将“张三疯”的个人的信息保存在数组中的方式为：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">var arr = [‘张三疯’, ‘男', 128,154];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述例子中用数组保存数据的缺点是：数据只能通过索引值访问，开发者需要清晰的清除所有的数据的排行才能准确地获取数据，而当数据量庞大时，不可能做到记忆所有数据的索引值。</p><p>为了让更好地存储一组数据，对象应运而生：对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。</p><p>使用对象记录上组数据为：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"张三疯"</span><span class="token punctuation">,</span>    <span class="token string">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">128</span><span class="token punctuation">,</span>    <span class="token string">"height"</span><span class="token operator">:</span><span class="token number">154</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JS中的对象表达结构更清晰，更强大。</p><h3 id="5-2-创建对象的三种方式"><a href="#5-2-创建对象的三种方式" class="headerlink" title="5.2 创建对象的三种方式"></a>5.2 创建对象的三种方式</h3><ul><li>利用字面量创建对象 </li></ul><p><strong>使用对象字面量创建对象</strong>：</p><pre class="line-numbers language-none"><code class="language-none">就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法；{ } 里面采取键值对的形式表示 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>键：相当于属性名</p></li><li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p><p>代码如下：</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token operator">:</span> <span class="token string">'pink'</span><span class="token punctuation">,</span>    age <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    sex <span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    <span class="token function-variable function">sayHi</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'大家好啊~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中 star即是创建的对象。</p><ul><li><p>对象的使用</p><ul><li><p>对象的属性</p><ul><li>对象中存储<strong>具体数据</strong>的 “键值对”中的 “键”称为对象的属性，即对象中存储具体数据的项</li></ul></li><li><p>对象的方法</p><ul><li>对象中存储<strong>函数</strong>的 “键值对”中的 “键”称为对象的方法，即对象中存储函数的项</li></ul></li><li><p>访问对象的属性</p><ul><li><p>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”  </p></li><li><p>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号      </p></li></ul></li></ul></li></ul><p>示例代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">.</span>name<span class="token punctuation">)</span>     <span class="token comment">// 调用名字属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 调用名字属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>调用对象的方法</p><ul><li>对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号 </li></ul></li></ul><p>示例代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">star<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>变量、属性、函数、方法总结</p><p>属性是对象的一部分，而变量不是对象的一部分，变量是单独存储数据的容器</p></li><li><p>变量：单独声明赋值，单独存在</p></li><li><p>属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</p></li></ul><pre class="line-numbers language-none"><code class="language-none">方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器- 函数：单独存在的，通过“函数名()”的方式就可以调用- 方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>利用 new Object 创建对象 </p><ul><li>创建空对象</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> andy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</p><ul><li><p>给空对象添加属性和方法</p><ul><li>通过对象操作属性和方法的方式，来为对象增加属性和方法</li></ul></li></ul><p>示例代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">andy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>andy<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>andy<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>andy<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'大家好啊~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li><p>Object() ：第一个字母大写   </p></li><li><p>new Object() ：需要 new 关键字</p></li><li><p>使用的格式：对象.属性 =  值;     </p></li><li><p>利用构造函数创建对象</p><ul><li><p>构造函数</p><ul><li><p>构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p></li><li><p>构造函数的封装格式：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token punctuation">,</span>形参<span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>属性名<span class="token number">1</span> <span class="token operator">=</span> 参数<span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>属性名<span class="token number">2</span> <span class="token operator">=</span> 参数<span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>属性名<span class="token number">3</span> <span class="token operator">=</span> 参数<span class="token number">3</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>方法名 <span class="token operator">=</span> 函数体<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构造函数的调用格式</p><pre class="line-numbers language-none"><code class="language-none">var obj = new 构造函数名(实参1，实参2，实参3)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上代码中，obj即接收到构造函数创建出来的对象。</p></li><li><p>注意事项</p><ol><li>构造函数约定<strong>首字母大写</strong>。</li><li>函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li><li>构造函数中<strong>不需要 return 返回结果</strong>。</li><li>当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li></ol></li><li><p>其他</p><p>构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）<br>创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</p></li></ul></li></ul></li><li><p>new关键字的作用</p><ol><li>在构造函数代码开始执行之前，创建一个空对象；</li><li>修改this的指向，把this指向创建出来的空对象；</li><li>执行函数的代码</li><li>在函数完成之后，返回this—即创建出来的对象</li></ol></li></ul><h3 id="5-3-遍历对象"><a href="#5-3-遍历对象" class="headerlink" title="5.3 遍历对象"></a>5.3 遍历对象</h3><pre class="line-numbers language-none"><code class="language-none">for...in 语句用于对数组或者对象的属性进行循环操作。其语法如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>变量 <span class="token keyword">in</span> 对象名字<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 在此执行代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 这里的 k 是属性名</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的 obj[k] 是属性值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="part-6"><a href="#part-6" class="headerlink" title="part 6"></a>part 6</h1><h2 id="1-内置对象"><a href="#1-内置对象" class="headerlink" title="1 内置对象"></a>1 内置对象</h2><h3 id="1-1-内置对象"><a href="#1-1-内置对象" class="headerlink" title="1.1 内置对象"></a>1.1 内置对象</h3><p>JavaScript 中的对象分为3种：<strong>自定义对象 、内置对象、 浏览器对象</strong></p><p>前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是<strong>最基本而必要的功能</strong>（属性和方法），内置对象最大的优点就是帮助我们快速开发</p><p>JavaScript 提供了多个内置对象：Math、 Date 、Array、String等    </p><h3 id="1-2-查文档"><a href="#1-2-查文档" class="headerlink" title="1.2 查文档"></a>1.2 查文档</h3><p>查找文档：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN/W3C来查询。</p><p>Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。</p><p>MDN:<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h3 id="1-3-Math对象"><a href="#1-3-Math对象" class="headerlink" title="1.3 Math对象"></a>1.3 Math对象</h3><p>Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p><table><thead><tr><th>属性、方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在[0,1)内的随机值</td></tr></tbody></table><p>注意：上面的方法使用时必须带括号</p><p><strong>获取指定范围内的随机整数</strong>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-4-日期对象"><a href="#1-4-日期对象" class="headerlink" title="1.4 日期对象"></a>1.4 日期对象</h3><p>Date 对象和 Math对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><ul><li><p>使用Date实例化日期对象</p><ul><li>获取当前时间必须实例化：</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取指定时间的日期对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> future <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2019/5/1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p><p> 使用Date实例的方法和属性    </p></li></ul><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%871.png"></p><ul><li><p>通过Date实例获取总毫米数</p><ul><li><p>总毫秒数的含义</p><p>基于1970年1月1日（世界标准时间）起的毫秒数</p></li><li><p>获取总毫秒数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 实例化Date对象</span><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1. 用于获取对象的原始值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 2. 简单写可以这么做</span><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. HTML5中提供的方法，有兼容性问题</span><span class="token keyword">var</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="1-5-数组对象"><a href="#1-5-数组对象" class="headerlink" title="1.5 数组对象"></a>1.5 数组对象</h3><h4 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h4><ul><li><p>字面量方式</p><ul><li><p>示例代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>new Array()</p><ul><li><p>示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">var arr = new Array();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</p><p>参数传递规则如下：</p><ul><li>如果只传入一个参数，则参数规定了数组的长度</li><li>如果传入了多个参数，则参数称为数组的元素</li></ul></li></ul></li></ul><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul><li><p>instanceof 运算符</p><ul><li><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Array.isArray()</p><ul><li><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="添加删除数组元素的方法"><a href="#添加删除数组元素的方法" class="headerlink" title="添加删除数组元素的方法"></a>添加删除数组元素的方法</h4><ul><li>数组中有进行增加、删除元素的方法，部分方法如下表</li></ul><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%872.png"></p><p>  注意：push、unshift为增加元素方法；pop、shift为删除元素的方法</p><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul><li>数组中有对数组本身排序的方法，部分方法如下表</li></ul><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%873.png"></p><p>  注意：sort方法需要传入参数来设置升序、降序排序</p><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul><h4 id="数组索引方法"><a href="#数组索引方法" class="headerlink" title="数组索引方法"></a>数组索引方法</h4><ul><li><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%874.png"></p></li></ul><h4 id="数组转换为字符串"><a href="#数组转换为字符串" class="headerlink" title="数组转换为字符串"></a>数组转换为字符串</h4><ul><li><p>数组中有把数组转化为字符串的方法，部分方法如下表</p><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%875.png"></p><p>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</p></li></ul><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li><p>数组中还有其他操作方法，同学们可以在课下自行查阅学习</p><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%876.png"></p></li></ul><h3 id="1-6-字符串对象"><a href="#1-6-字符串对象" class="headerlink" title="1.6 字符串对象"></a>1.6 字符串对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p><p>基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 下面代码有什么问题？</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'andy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</p><p>js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'andy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 赋值给我们声明的字符变量</span>str <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment">// 3. 销毁临时变量</span>temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h4><p>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><p>当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。</p><p>由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会有效率问题</p><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%877.png"></p><p>案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p><ol><li>先查找第一个o出现的位置</li><li>然后 只要indexOf 返回的结果不是 -1 就继续往后查找<br>. 因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找     </li></ol><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%878.png"></p><p>在上述方法中，charCodeAt方法返回的是指定位置上字符对应的ASCII码，ASCII码对照表如下：</p><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%879.png"></p><p>案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p><ol><li><p>核心算法：利用 charAt(） 遍历这个字符串</p></li><li><p>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</p><p>. 遍历对象，得到最大值和该字符     </p><p>注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p></li></ol><h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%8710.png"></p><h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：  </p><pre class="line-numbers language-none"><code class="language-none">字符串.replace(被替换的字符串， 要替换为的字符串)；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><p>split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><p>其使用格式如下：</p><pre class="line-numbers language-none"><code class="language-none">字符串.split("分割字符")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-简单数据类型和复杂数据类型"><a href="#2-简单数据类型和复杂数据类型" class="headerlink" title="2 简单数据类型和复杂数据类型"></a>2 简单数据类型和复杂数据类型</h2><h3 id="2-1-简单数据类型"><a href="#2-1-简单数据类型" class="headerlink" title="2.1 简单数据类型"></a>2.1 简单数据类型</h3><p><strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p><h3 id="2-2-复杂数据类型"><a href="#2-2-复杂数据类型" class="headerlink" title="2.2 复杂数据类型"></a>2.2 复杂数据类型</h3><p><strong>复杂数据类型（引用类型）</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p><h3 id="2-3-堆栈"><a href="#2-3-堆栈" class="headerlink" title="2.3 堆栈"></a>2.3 堆栈</h3><ul><li>堆栈空间分配区别：</li></ul><p>　　1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p><p>简单数据类型存放到栈里面</p><p>　　2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%8711.png"></p><ul><li>简单数据类型的存储方式</li></ul><p>值类型变量的数据直接存放在变量（栈空间）中</p><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%8712.png"></p><ul><li><p>复杂数据类型的存储方式</p><p>  引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><p><img src="/liaojie.github.io/medias/js%E5%9B%BE%E7%89%8713.png"></p></li></ul><h3 id="2-4-简单类型传参"><a href="#2-4-简单类型传参" class="headerlink" title="2.4 简单类型传参"></a>2.4 简单类型传参</h3><p>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token operator">++</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-复杂数据类型传参"><a href="#2-5-复杂数据类型传参" class="headerlink" title="2.5 复杂数据类型传参"></a>2.5 复杂数据类型传参</h3><p>函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// x = p</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. 这个输出什么 ?    </span>    x<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张学友"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 这个输出什么 ?    </span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"刘德华"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1. 这个输出什么 ?   </span><span class="token function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. 这个输出什么 ?  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/liaojie.github.io/2022/01/16/mysql/"/>
      <url>/liaojie.github.io/2022/01/16/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL基础"><a href="#1-MySQL基础" class="headerlink" title="1 MySQL基础"></a>1 MySQL基础</h2><p>数据库的好处:</p><ul><li>实现数据持久化</li><li>使用完整的管理系统同一管理,易于查询</li></ul><p>数据库概念:</p><ul><li>DB<ul><li>数据库(database):存储数据的”仓库”。它保存了一系列有组织的数据</li></ul></li><li>DBMS<ul><li>数据库管理系统。数据库是通过DBMS创建和操作的容器</li></ul></li><li>SQL<ul><li>结构化查询语言:专门用来与数据库通信的语言。</li></ul></li></ul><p>MySQL优点:</p><ul><li>成本低:开放源代码,一般可以免费试用</li><li>性能高:执行很快</li><li>简单:很容易安装和使用</li></ul><p>DBMS分为俩类:</p><ul><li>基于共享文件系统的DBMS(Access)</li><li>基于客户机——服务器的DBMS(MySQL、Oracle、SqlServer)</li></ul><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载:"></a>1.1 下载:</h3><p>Windows平台下载:<a href="https://www.mysql.com/downloads/">https://www.mysql.com/downloads/</a></p><p>点击:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/mysqlcommunty.png"></p><p>选择<code>MySQL Community Server</code>:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/MySQLCommunityServer.png"></p><p>或可访问网页:<a href="https://dev.mysql.com/downloads/mysql">https://dev.mysql.com/downloads/mysql</a> 直接下载MySQL<br>此时选择MySQL的版本及主机<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/MySQL%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%8A%E4%B8%BB%E6%9C%BA.png"></p><p>点击这里,开始下载<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD.png"></p><p>msi格式下载:<br>解压版的压缩包,可能会存在一些问题,此时可采用msi的安装方式<br>安装版本的网址: <a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a> 点击GO to Download Page<br>选择对应系统及版本进行安装</p><p>双击运行:<br>选择自定义安装(默认也行)<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/custom.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/products.png"></p><p>next之后点击Execute安装,安装完成后点击next直到配置服务器类型与端口号(可自行进行修改)</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%AB%AF%E5%8F%A3%E5%8F%B7.png"></p><p>点击next直到设置 Mysql root用户密码(密码建议设置简单一些,修改密码比较困难)</p><p>点击next,此步是设置Mysql服务器名称以及设置是否开启自启动</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AF%E8%87%AA%E5%90%AF%E5%8A%A8.png"></p><p>点击next,然后点击Execute</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/applyconfiguration.png"></p><p>点击Finish</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/d8c4a68c5a5d429581130d40ae7efe6c.png"></p><p>点击next</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/d03a0787eb7249acb6b0d674a1980c0d.png"></p><p>点击Finish</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/finish.png"></p><p>配置密码,密码需和上面设置的密码一致,点击next</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E9%85%8D%E7%BD%AE%E5%AF%86%E7%A0%81.png"></p><p>最后点击Execute,Finish即可</p><h3 id="1-2-配置MySQL数据库"><a href="#1-2-配置MySQL数据库" class="headerlink" title="1.2 配置MySQL数据库"></a>1.2 配置MySQL数据库</h3><p>不管是哪种下载方式,如果用户没配置直接使用MySQL,会出现错误,所以首先需要先配置环境变量。</p><ul><li>我的电脑-&gt;右键-&gt;属性</li><li>高级系统设置-&gt;环境变量</li><li>选择系统环境中的PATH</li><li>在其里面添加:你的mysql bin文件夹的路径 ,Mysql bin文件夹默认安装路径:C:\Program Files\MySQL\MySQL Server 8.0\bin,依据自己MySQL安装路径来添加</li></ul><p>安装完成后进入MySQL的安装目录,默认安装路径为:C:\Program Files\MySQL\MySQL Server 8.0进入MySQL Sever,其目录下的文件如下</p><p>bin目录下保存了MySQL常用的命令工具以及管理工具、data目录是MySQL默认用来保存数据文件以及日志文件的地方(我的因刚安装还没有data文件夹)、docs目录下是MySQL的帮助文档、include目录和lib目录是MySQL所依赖的头文件以及库文件、share目录下保存目录文件以及日志文件。</p><p>进入bin目录,按住shift键然后点击鼠标右键可以选择在该目录下打开命令窗口,或者win+R打开运行窗口,输入cmd进入命令行窗口。输入<code>mysql -u root</code>-p后回车,然后会提示输入密码,输入密码后就会进入MySQL的操作管理界面。</p><h3 id="1-3-MySQL卸载"><a href="#1-3-MySQL卸载" class="headerlink" title="1.3 MySQL卸载:"></a>1.3 MySQL卸载:</h3><ul><li>首先在控制面板中找到MySQL相关并卸载</li><li>删除MySQL文件夹</li><li>在C盘目录下的隐藏文件中找到ProgramData,同样删除MySQL文件夹</li><li>清理注册表,WIN+R,输入regedit(一般不需要,除非安装时报错)<pre class="line-numbers language-none"><code class="language-none">HKEY_LOCAL_MACHINE/SYSTEM/ControlSet001/Services/Eventlog/Applications/MySQL HKEY_LOCAL_MACHINE/SYSTEM/ControlSet002/Services/Eventlog/Applications/MySQL HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Services/Eventlog/Applications/MySQLHKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Services一般服务会以相同的名字(名字通常是MySQL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>也可以使用MySQL自带的卸载功能</p><h3 id="1-4-MySQL服务启动与停止"><a href="#1-4-MySQL服务启动与停止" class="headerlink" title="1.4 MySQL服务启动与停止"></a>1.4 MySQL服务启动与停止</h3><p>方法1:此电脑右键-&gt;管理-&gt;双击服务和引用程序-&gt;双击服务-&gt;找到你的服务名<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/MySQL%E5%90%AF%E5%8A%A8.png"><br>可以设置为手动</p><p>方法2:WIN+R,输入cmd进入dos窗口(以管理员身份)<br>停止服务:net stop mysql80(服务名)<br>启动服务:net start mysql80(服务名)</p><h3 id="1-5-MySQL服务端的登录与退出"><a href="#1-5-MySQL服务端的登录与退出" class="headerlink" title="1.5 MySQL服务端的登录与退出"></a>1.5 MySQL服务端的登录与退出</h3><p>1(只适用root).通过MySQL自带的客户端MySQL Command Line Client,输入密码登录即可;退出 1)输入exit; 2)Ctrl+C<br>2(推荐).同样进入dos窗口(管理员身份),输入<code>mysql -h localhost -P 3306 -u root -p</code>,然后输入密码或者<code>mysql -h localhost -P 3306 -u root -p密码</code>(-p与密码不能有空格);退出 1)输入exit; 2)Ctrl+C</p><h3 id="1-6-MySQL常见命令"><a href="#1-6-MySQL常见命令" class="headerlink" title="1.6 MySQL常见命令"></a>1.6 MySQL常见命令</h3><ul><li>show databases;//查看当前所有的库</li><li>use 库名;//打开指定的库</li><li>show tables;//查看当前库的所有表</li><li>show tables from 库名;//查看其他库的所有表</li><li>create table 表名(<br>列名 列类型,<br>列名 列类型,<br>…<br>);//创建表</li><li>select database();//当前所在库</li><li>desc 表名;//查看表的结构</li><li>select * from 表名;//查看表中数据</li><li>select version();//查看服务器版本号;没有登录MySQL服务端时:mysql –version或mysql –V</li></ul><h3 id="1-7-MySQL语法规范"><a href="#1-7-MySQL语法规范" class="headerlink" title="1.7 MySQL语法规范"></a>1.7 MySQL语法规范</h3><p>1.不区分大小写,建议关键字大写,表名、列名小写。<br>2.每条命令最好用分号结尾。<br>3.每条命令根据需求可以进行缩进、换行。<br>4.注释:</p><ul><li>单行注释-<code>#注释文字</code>或<code>-- 注释文字</code>(注意–与文字之间有一个空格)</li><li>多行注释-<code>/* 注释文字 */</code></li></ul><h2 id="2-DQL语言"><a href="#2-DQL语言" class="headerlink" title="2 DQL语言"></a>2 DQL语言</h2><h3 id="2-1-基础查询"><a href="#2-1-基础查询" class="headerlink" title="2.1 基础查询"></a>2.1 基础查询</h3><p>先运行以下代码得到myemployees数据库</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">/*SQLyog Ultimate v10.00 Beta1MySQL - 5.5.15 : Database - myemployees**********************************************************************//*!40101 SET NAMES utf8 */;/*!40101 SET SQL_MODE=''*/;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;CREATE DATABASE /*!32312 IF NOT EXISTS*/`myemployees` /*!40100 DEFAULT CHARACTER SET gb2312 */;USE `myemployees`;/*Table structure for table `departments` */DROP TABLE IF EXISTS `departments`;CREATE TABLE `departments` (  `department_id` int(4) NOT NULL AUTO_INCREMENT,  `department_name` varchar(3) DEFAULT NULL,  `manager_id` int(6) DEFAULT NULL,  `location_id` int(4) DEFAULT NULL,  PRIMARY KEY (`department_id`),  KEY `loc_id_fk` (`location_id`),  CONSTRAINT `loc_id_fk` FOREIGN KEY (`location_id`) REFERENCES `locations` (`location_id`)) ENGINE=InnoDB AUTO_INCREMENT=271 DEFAULT CHARSET=gb2312;/*Data for the table `departments` */insert  into `departments`(`department_id`,`department_name`,`manager_id`,`location_id`) values (10,'Adm',200,1700),(20,'Mar',201,1800),(30,'Pur',114,1700),(40,'Hum',203,2400),(50,'Shi',121,1500),(60,'IT',103,1400),(70,'Pub',204,2700),(80,'Sal',145,2500),(90,'Exe',100,1700),(100,'Fin',108,1700),(110,'Acc',205,1700),(120,'Tre',NULL,1700),(130,'Cor',NULL,1700),(140,'Con',NULL,1700),(150,'Sha',NULL,1700),(160,'Ben',NULL,1700),(170,'Man',NULL,1700),(180,'Con',NULL,1700),(190,'Con',NULL,1700),(200,'Ope',NULL,1700),(210,'IT ',NULL,1700),(220,'NOC',NULL,1700),(230,'IT ',NULL,1700),(240,'Gov',NULL,1700),(250,'Ret',NULL,1700),(260,'Rec',NULL,1700),(270,'Pay',NULL,1700);/*Table structure for table `employees` */DROP TABLE IF EXISTS `employees`;CREATE TABLE `employees` (  `employee_id` int(6) NOT NULL AUTO_INCREMENT,  `first_name` varchar(20) DEFAULT NULL,  `last_name` varchar(25) DEFAULT NULL,  `email` varchar(25) DEFAULT NULL,  `phone_number` varchar(20) DEFAULT NULL,  `job_id` varchar(10) DEFAULT NULL,  `salary` double(10,2) DEFAULT NULL,  `commission_pct` double(4,2) DEFAULT NULL,  `manager_id` int(6) DEFAULT NULL,  `department_id` int(4) DEFAULT NULL,  `hiredate` datetime DEFAULT NULL,  PRIMARY KEY (`employee_id`),  KEY `dept_id_fk` (`department_id`),  KEY `job_id_fk` (`job_id`),  CONSTRAINT `dept_id_fk` FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`),  CONSTRAINT `job_id_fk` FOREIGN KEY (`job_id`) REFERENCES `jobs` (`job_id`)) ENGINE=InnoDB AUTO_INCREMENT=207 DEFAULT CHARSET=gb2312;/*Data for the table `employees` */insert  into `employees`(`employee_id`,`first_name`,`last_name`,`email`,`phone_number`,`job_id`,`salary`,`commission_pct`,`manager_id`,`department_id`,`hiredate`) values (100,'Steven','K_ing','SKING','515.123.4567','AD_PRES',24000.00,NULL,NULL,90,'1992-04-03 00:00:00'),(101,'Neena','Kochhar','NKOCHHAR','515.123.4568','AD_VP',17000.00,NULL,100,90,'1992-04-03 00:00:00'),(102,'Lex','De Haan','LDEHAAN','515.123.4569','AD_VP',17000.00,NULL,100,90,'1992-04-03 00:00:00'),(103,'Alexander','Hunold','AHUNOLD','590.423.4567','IT_PROG',9000.00,NULL,102,60,'1992-04-03 00:00:00'),(104,'Bruce','Ernst','BERNST','590.423.4568','IT_PROG',6000.00,NULL,103,60,'1992-04-03 00:00:00'),(105,'David','Austin','DAUSTIN','590.423.4569','IT_PROG',4800.00,NULL,103,60,'1998-03-03 00:00:00'),(106,'Valli','Pataballa','VPATABAL','590.423.4560','IT_PROG',4800.00,NULL,103,60,'1998-03-03 00:00:00'),(107,'Diana','Lorentz','DLORENTZ','590.423.5567','IT_PROG',4200.00,NULL,103,60,'1998-03-03 00:00:00'),(108,'Nancy','Greenberg','NGREENBE','515.124.4569','FI_MGR',12000.00,NULL,101,100,'1998-03-03 00:00:00'),(109,'Daniel','Faviet','DFAVIET','515.124.4169','FI_ACCOUNT',9000.00,NULL,108,100,'1998-03-03 00:00:00'),(110,'John','Chen','JCHEN','515.124.4269','FI_ACCOUNT',8200.00,NULL,108,100,'2000-09-09 00:00:00'),(111,'Ismael','Sciarra','ISCIARRA','515.124.4369','FI_ACCOUNT',7700.00,NULL,108,100,'2000-09-09 00:00:00'),(112,'Jose Manuel','Urman','JMURMAN','515.124.4469','FI_ACCOUNT',7800.00,NULL,108,100,'2000-09-09 00:00:00'),(113,'Luis','Popp','LPOPP','515.124.4567','FI_ACCOUNT',6900.00,NULL,108,100,'2000-09-09 00:00:00'),(114,'Den','Raphaely','DRAPHEAL','515.127.4561','PU_MAN',11000.00,NULL,100,30,'2000-09-09 00:00:00'),(115,'Alexander','Khoo','AKHOO','515.127.4562','PU_CLERK',3100.00,NULL,114,30,'2000-09-09 00:00:00'),(116,'Shelli','Baida','SBAIDA','515.127.4563','PU_CLERK',2900.00,NULL,114,30,'2000-09-09 00:00:00'),(117,'Sigal','Tobias','STOBIAS','515.127.4564','PU_CLERK',2800.00,NULL,114,30,'2000-09-09 00:00:00'),(118,'Guy','Himuro','GHIMURO','515.127.4565','PU_CLERK',2600.00,NULL,114,30,'2000-09-09 00:00:00'),(119,'Karen','Colmenares','KCOLMENA','515.127.4566','PU_CLERK',2500.00,NULL,114,30,'2000-09-09 00:00:00'),(120,'Matthew','Weiss','MWEISS','650.123.1234','ST_MAN',8000.00,NULL,100,50,'2004-02-06 00:00:00'),(121,'Adam','Fripp','AFRIPP','650.123.2234','ST_MAN',8200.00,NULL,100,50,'2004-02-06 00:00:00'),(122,'Payam','Kaufling','PKAUFLIN','650.123.3234','ST_MAN',7900.00,NULL,100,50,'2004-02-06 00:00:00'),(123,'Shanta','Vollman','SVOLLMAN','650.123.4234','ST_MAN',6500.00,NULL,100,50,'2004-02-06 00:00:00'),(124,'Kevin','Mourgos','KMOURGOS','650.123.5234','ST_MAN',5800.00,NULL,100,50,'2004-02-06 00:00:00'),(125,'Julia','Nayer','JNAYER','650.124.1214','ST_CLERK',3200.00,NULL,120,50,'2004-02-06 00:00:00'),(126,'Irene','Mikkilineni','IMIKKILI','650.124.1224','ST_CLERK',2700.00,NULL,120,50,'2004-02-06 00:00:00'),(127,'James','Landry','JLANDRY','650.124.1334','ST_CLERK',2400.00,NULL,120,50,'2004-02-06 00:00:00'),(128,'Steven','Markle','SMARKLE','650.124.1434','ST_CLERK',2200.00,NULL,120,50,'2004-02-06 00:00:00'),(129,'Laura','Bissot','LBISSOT','650.124.5234','ST_CLERK',3300.00,NULL,121,50,'2004-02-06 00:00:00'),(130,'Mozhe','Atkinson','MATKINSO','650.124.6234','ST_CLERK',2800.00,NULL,121,50,'2004-02-06 00:00:00'),(131,'James','Marlow','JAMRLOW','650.124.7234','ST_CLERK',2500.00,NULL,121,50,'2004-02-06 00:00:00'),(132,'TJ','Olson','TJOLSON','650.124.8234','ST_CLERK',2100.00,NULL,121,50,'2004-02-06 00:00:00'),(133,'Jason','Mallin','JMALLIN','650.127.1934','ST_CLERK',3300.00,NULL,122,50,'2004-02-06 00:00:00'),(134,'Michael','Rogers','MROGERS','650.127.1834','ST_CLERK',2900.00,NULL,122,50,'2002-12-23 00:00:00'),(135,'Ki','Gee','KGEE','650.127.1734','ST_CLERK',2400.00,NULL,122,50,'2002-12-23 00:00:00'),(136,'Hazel','Philtanker','HPHILTAN','650.127.1634','ST_CLERK',2200.00,NULL,122,50,'2002-12-23 00:00:00'),(137,'Renske','Ladwig','RLADWIG','650.121.1234','ST_CLERK',3600.00,NULL,123,50,'2002-12-23 00:00:00'),(138,'Stephen','Stiles','SSTILES','650.121.2034','ST_CLERK',3200.00,NULL,123,50,'2002-12-23 00:00:00'),(139,'John','Seo','JSEO','650.121.2019','ST_CLERK',2700.00,NULL,123,50,'2002-12-23 00:00:00'),(140,'Joshua','Patel','JPATEL','650.121.1834','ST_CLERK',2500.00,NULL,123,50,'2002-12-23 00:00:00'),(141,'Trenna','Rajs','TRAJS','650.121.8009','ST_CLERK',3500.00,NULL,124,50,'2002-12-23 00:00:00'),(142,'Curtis','Davies','CDAVIES','650.121.2994','ST_CLERK',3100.00,NULL,124,50,'2002-12-23 00:00:00'),(143,'Randall','Matos','RMATOS','650.121.2874','ST_CLERK',2600.00,NULL,124,50,'2002-12-23 00:00:00'),(144,'Peter','Vargas','PVARGAS','650.121.2004','ST_CLERK',2500.00,NULL,124,50,'2002-12-23 00:00:00'),(145,'John','Russell','JRUSSEL','011.44.1344.429268','SA_MAN',14000.00,0.40,100,80,'2002-12-23 00:00:00'),(146,'Karen','Partners','KPARTNER','011.44.1344.467268','SA_MAN',13500.00,0.30,100,80,'2002-12-23 00:00:00'),(147,'Alberto','Errazuriz','AERRAZUR','011.44.1344.429278','SA_MAN',12000.00,0.30,100,80,'2002-12-23 00:00:00'),(148,'Gerald','Cambrault','GCAMBRAU','011.44.1344.619268','SA_MAN',11000.00,0.30,100,80,'2002-12-23 00:00:00'),(149,'Eleni','Zlotkey','EZLOTKEY','011.44.1344.429018','SA_MAN',10500.00,0.20,100,80,'2002-12-23 00:00:00'),(150,'Peter','Tucker','PTUCKER','011.44.1344.129268','SA_REP',10000.00,0.30,145,80,'2014-03-05 00:00:00'),(151,'David','Bernstein','DBERNSTE','011.44.1344.345268','SA_REP',9500.00,0.25,145,80,'2014-03-05 00:00:00'),(152,'Peter','Hall','PHALL','011.44.1344.478968','SA_REP',9000.00,0.25,145,80,'2014-03-05 00:00:00'),(153,'Christopher','Olsen','COLSEN','011.44.1344.498718','SA_REP',8000.00,0.20,145,80,'2014-03-05 00:00:00'),(154,'Nanette','Cambrault','NCAMBRAU','011.44.1344.987668','SA_REP',7500.00,0.20,145,80,'2014-03-05 00:00:00'),(155,'Oliver','Tuvault','OTUVAULT','011.44.1344.486508','SA_REP',7000.00,0.15,145,80,'2014-03-05 00:00:00'),(156,'Janette','K_ing','JKING','011.44.1345.429268','SA_REP',10000.00,0.35,146,80,'2014-03-05 00:00:00'),(157,'Patrick','Sully','PSULLY','011.44.1345.929268','SA_REP',9500.00,0.35,146,80,'2014-03-05 00:00:00'),(158,'Allan','McEwen','AMCEWEN','011.44.1345.829268','SA_REP',9000.00,0.35,146,80,'2014-03-05 00:00:00'),(159,'Lindsey','Smith','LSMITH','011.44.1345.729268','SA_REP',8000.00,0.30,146,80,'2014-03-05 00:00:00'),(160,'Louise','Doran','LDORAN','011.44.1345.629268','SA_REP',7500.00,0.30,146,80,'2014-03-05 00:00:00'),(161,'Sarath','Sewall','SSEWALL','011.44.1345.529268','SA_REP',7000.00,0.25,146,80,'2014-03-05 00:00:00'),(162,'Clara','Vishney','CVISHNEY','011.44.1346.129268','SA_REP',10500.00,0.25,147,80,'2014-03-05 00:00:00'),(163,'Danielle','Greene','DGREENE','011.44.1346.229268','SA_REP',9500.00,0.15,147,80,'2014-03-05 00:00:00'),(164,'Mattea','Marvins','MMARVINS','011.44.1346.329268','SA_REP',7200.00,0.10,147,80,'2014-03-05 00:00:00'),(165,'David','Lee','DLEE','011.44.1346.529268','SA_REP',6800.00,0.10,147,80,'2014-03-05 00:00:00'),(166,'Sundar','Ande','SANDE','011.44.1346.629268','SA_REP',6400.00,0.10,147,80,'2014-03-05 00:00:00'),(167,'Amit','Banda','ABANDA','011.44.1346.729268','SA_REP',6200.00,0.10,147,80,'2014-03-05 00:00:00'),(168,'Lisa','Ozer','LOZER','011.44.1343.929268','SA_REP',11500.00,0.25,148,80,'2014-03-05 00:00:00'),(169,'Harrison','Bloom','HBLOOM','011.44.1343.829268','SA_REP',10000.00,0.20,148,80,'2014-03-05 00:00:00'),(170,'Tayler','Fox','TFOX','011.44.1343.729268','SA_REP',9600.00,0.20,148,80,'2014-03-05 00:00:00'),(171,'William','Smith','WSMITH','011.44.1343.629268','SA_REP',7400.00,0.15,148,80,'2014-03-05 00:00:00'),(172,'Elizabeth','Bates','EBATES','011.44.1343.529268','SA_REP',7300.00,0.15,148,80,'2014-03-05 00:00:00'),(173,'Sundita','Kumar','SKUMAR','011.44.1343.329268','SA_REP',6100.00,0.10,148,80,'2014-03-05 00:00:00'),(174,'Ellen','Abel','EABEL','011.44.1644.429267','SA_REP',11000.00,0.30,149,80,'2014-03-05 00:00:00'),(175,'Alyssa','Hutton','AHUTTON','011.44.1644.429266','SA_REP',8800.00,0.25,149,80,'2014-03-05 00:00:00'),(176,'Jonathon','Taylor','JTAYLOR','011.44.1644.429265','SA_REP',8600.00,0.20,149,80,'2014-03-05 00:00:00'),(177,'Jack','Livingston','JLIVINGS','011.44.1644.429264','SA_REP',8400.00,0.20,149,80,'2014-03-05 00:00:00'),(178,'Kimberely','Grant','KGRANT','011.44.1644.429263','SA_REP',7000.00,0.15,149,NULL,'2014-03-05 00:00:00'),(179,'Charles','Johnson','CJOHNSON','011.44.1644.429262','SA_REP',6200.00,0.10,149,80,'2014-03-05 00:00:00'),(180,'Winston','Taylor','WTAYLOR','650.507.9876','SH_CLERK',3200.00,NULL,120,50,'2014-03-05 00:00:00'),(181,'Jean','Fleaur','JFLEAUR','650.507.9877','SH_CLERK',3100.00,NULL,120,50,'2014-03-05 00:00:00'),(182,'Martha','Sullivan','MSULLIVA','650.507.9878','SH_CLERK',2500.00,NULL,120,50,'2014-03-05 00:00:00'),(183,'Girard','Geoni','GGEONI','650.507.9879','SH_CLERK',2800.00,NULL,120,50,'2014-03-05 00:00:00'),(184,'Nandita','Sarchand','NSARCHAN','650.509.1876','SH_CLERK',4200.00,NULL,121,50,'2014-03-05 00:00:00'),(185,'Alexis','Bull','ABULL','650.509.2876','SH_CLERK',4100.00,NULL,121,50,'2014-03-05 00:00:00'),(186,'Julia','Dellinger','JDELLING','650.509.3876','SH_CLERK',3400.00,NULL,121,50,'2014-03-05 00:00:00'),(187,'Anthony','Cabrio','ACABRIO','650.509.4876','SH_CLERK',3000.00,NULL,121,50,'2014-03-05 00:00:00'),(188,'Kelly','Chung','KCHUNG','650.505.1876','SH_CLERK',3800.00,NULL,122,50,'2014-03-05 00:00:00'),(189,'Jennifer','Dilly','JDILLY','650.505.2876','SH_CLERK',3600.00,NULL,122,50,'2014-03-05 00:00:00'),(190,'Timothy','Gates','TGATES','650.505.3876','SH_CLERK',2900.00,NULL,122,50,'2014-03-05 00:00:00'),(191,'Randall','Perkins','RPERKINS','650.505.4876','SH_CLERK',2500.00,NULL,122,50,'2014-03-05 00:00:00'),(192,'Sarah','Bell','SBELL','650.501.1876','SH_CLERK',4000.00,NULL,123,50,'2014-03-05 00:00:00'),(193,'Britney','Everett','BEVERETT','650.501.2876','SH_CLERK',3900.00,NULL,123,50,'2014-03-05 00:00:00'),(194,'Samuel','McCain','SMCCAIN','650.501.3876','SH_CLERK',3200.00,NULL,123,50,'2014-03-05 00:00:00'),(195,'Vance','Jones','VJONES','650.501.4876','SH_CLERK',2800.00,NULL,123,50,'2014-03-05 00:00:00'),(196,'Alana','Walsh','AWALSH','650.507.9811','SH_CLERK',3100.00,NULL,124,50,'2014-03-05 00:00:00'),(197,'Kevin','Feeney','KFEENEY','650.507.9822','SH_CLERK',3000.00,NULL,124,50,'2014-03-05 00:00:00'),(198,'Donald','OConnell','DOCONNEL','650.507.9833','SH_CLERK',2600.00,NULL,124,50,'2014-03-05 00:00:00'),(199,'Douglas','Grant','DGRANT','650.507.9844','SH_CLERK',2600.00,NULL,124,50,'2014-03-05 00:00:00'),(200,'Jennifer','Whalen','JWHALEN','515.123.4444','AD_ASST',4400.00,NULL,101,10,'2016-03-03 00:00:00'),(201,'Michael','Hartstein','MHARTSTE','515.123.5555','MK_MAN',13000.00,NULL,100,20,'2016-03-03 00:00:00'),(202,'Pat','Fay','PFAY','603.123.6666','MK_REP',6000.00,NULL,201,20,'2016-03-03 00:00:00'),(203,'Susan','Mavris','SMAVRIS','515.123.7777','HR_REP',6500.00,NULL,101,40,'2016-03-03 00:00:00'),(204,'Hermann','Baer','HBAER','515.123.8888','PR_REP',10000.00,NULL,101,70,'2016-03-03 00:00:00'),(205,'Shelley','Higgins','SHIGGINS','515.123.8080','AC_MGR',12000.00,NULL,101,110,'2016-03-03 00:00:00'),(206,'William','Gietz','WGIETZ','515.123.8181','AC_ACCOUNT',8300.00,NULL,205,110,'2016-03-03 00:00:00');/*Table structure for table `jobs` */DROP TABLE IF EXISTS `jobs`;CREATE TABLE `jobs` (  `job_id` varchar(10) NOT NULL,  `job_title` varchar(35) DEFAULT NULL,  `min_salary` int(6) DEFAULT NULL,  `max_salary` int(6) DEFAULT NULL,  PRIMARY KEY (`job_id`)) ENGINE=InnoDB DEFAULT CHARSET=gb2312;/*Data for the table `jobs` */insert  into `jobs`(`job_id`,`job_title`,`min_salary`,`max_salary`) values ('AC_ACCOUNT','Public Accountant',4200,9000),('AC_MGR','Accounting Manager',8200,16000),('AD_ASST','Administration Assistant',3000,6000),('AD_PRES','President',20000,40000),('AD_VP','Administration Vice President',15000,30000),('FI_ACCOUNT','Accountant',4200,9000),('FI_MGR','Finance Manager',8200,16000),('HR_REP','Human Resources Representative',4000,9000),('IT_PROG','Programmer',4000,10000),('MK_MAN','Marketing Manager',9000,15000),('MK_REP','Marketing Representative',4000,9000),('PR_REP','Public Relations Representative',4500,10500),('PU_CLERK','Purchasing Clerk',2500,5500),('PU_MAN','Purchasing Manager',8000,15000),('SA_MAN','Sales Manager',10000,20000),('SA_REP','Sales Representative',6000,12000),('SH_CLERK','Shipping Clerk',2500,5500),('ST_CLERK','Stock Clerk',2000,5000),('ST_MAN','Stock Manager',5500,8500);/*Table structure for table `locations` */DROP TABLE IF EXISTS `locations`;CREATE TABLE `locations` (  `location_id` int(11) NOT NULL AUTO_INCREMENT,  `street_address` varchar(40) DEFAULT NULL,  `postal_code` varchar(12) DEFAULT NULL,  `city` varchar(30) DEFAULT NULL,  `state_province` varchar(25) DEFAULT NULL,  `country_id` varchar(2) DEFAULT NULL,  PRIMARY KEY (`location_id`)) ENGINE=InnoDB AUTO_INCREMENT=3201 DEFAULT CHARSET=gb2312;/*Data for the table `locations` */insert  into `locations`(`location_id`,`street_address`,`postal_code`,`city`,`state_province`,`country_id`) values (1000,'1297 Via Cola di Rie','00989','Roma',NULL,'IT'),(1100,'93091 Calle della Testa','10934','Venice',NULL,'IT'),(1200,'2017 Shinjuku-ku','1689','Tokyo','Tokyo Prefecture','JP'),(1300,'9450 Kamiya-cho','6823','Hiroshima',NULL,'JP'),(1400,'2014 Jabberwocky Rd','26192','Southlake','Texas','US'),(1500,'2011 Interiors Blvd','99236','South San Francisco','California','US'),(1600,'2007 Zagora St','50090','South Brunswick','New Jersey','US'),(1700,'2004 Charade Rd','98199','Seattle','Washington','US'),(1800,'147 Spadina Ave','M5V 2L7','Toronto','Ontario','CA'),(1900,'6092 Boxwood St','YSW 9T2','Whitehorse','Yukon','CA'),(2000,'40-5-12 Laogianggen','190518','Beijing',NULL,'CN'),(2100,'1298 Vileparle (E)','490231','Bombay','Maharashtra','IN'),(2200,'12-98 Victoria Street','2901','Sydney','New South Wales','AU'),(2300,'198 Clementi North','540198','Singapore',NULL,'SG'),(2400,'8204 Arthur St',NULL,'London',NULL,'UK'),(2500,'Magdalen Centre, The Oxford Science Park','OX9 9ZB','Oxford','Oxford','UK'),(2600,'9702 Chester Road','09629850293','Stretford','Manchester','UK'),(2700,'Schwanthalerstr. 7031','80925','Munich','Bavaria','DE'),(2800,'Rua Frei Caneca 1360 ','01307-002','Sao Paulo','Sao Paulo','BR'),(2900,'20 Rue des Corps-Saints','1730','Geneva','Geneve','CH'),(3000,'Murtenstrasse 921','3095','Bern','BE','CH'),(3100,'Pieter Breughelstraat 837','3029SK','Utrecht','Utrecht','NL'),(3200,'Mariano Escobedo 9991','11932','Mexico City','Distrito Federal,','MX');/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基础查询:</p><p>一、语法<br><code>select 查询列表 from 表名;</code></p><p>二、特点<br>1、查询列表可以是字段、常量、表达式、函数,也可以是多个<br>2、查询结果是一个虚拟表</p><p>三、示例<br>1、查询单个字段<br><code>select 字段名 from 表名;</code><br>2、查询多个字段<br><code>select 字段名,字段名 from 表名;</code><br>3、查询所有字段<br><code>select * from 表名</code><br>4、查询常量<br><code>select 常量值;</code><br>注意:字符型和日期型的常量值必须用单引号引起来,数值型不需要<br>5、查询函数<br><code>select 函数名(实参列表);</code><br>6、查询表达式<br><code>select 100/1234;</code><br>7、起别名<br>①as<br>②空格<br>8、去重<br><code>select distinct 字段名 from 表名;</code><br>9、+<br>作用:做加法运算<br><code>select 数值+数值;</code> 直接运算<br><code>select 字符+数值;</code>先试图将字符转换成数值,如果转换成功,则继续运算;否则转换成0,再做运算<br><code>select null+值;</code>结果都为null</p><p>10、补充:concat函数<br>功能:拼接字符<br><code>select concat(字符1,字符2,字符3,...);</code></p><p>11、补充:ifnull函数<br>功能:判断某字段或表达式是否为null,如果为null 返回指定的值,否则返回原本的值<br><code>select ifnull(commission_pct,0) from employees;</code></p><p>12、补充:isnull函数<br>功能:判断某字段或表达式是否为null,如果是,则返回1,否则返回0</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#基础查询/*语法:select 查询列表 from 表名;特点:1、查询列表可以是表中的字段、常量值、表达式、函数2、查询的结果是一个虚拟的表格*/USE myemployees;#1.查询表中的单个字段SELECT last_name FROM employees;#2.查询表中的多个字段SELECT last_name,salary,email FROM employees;#3.查询表中的所有字段#方式一:SELECT     `employee_id`,    `first_name`,    `last_name`,    `phone_number`,    `last_name`,    `job_id`,    `phone_number`,    `job_id`,    `salary`,    `commission_pct`,    `manager_id`,    `department_id`,    `hiredate` FROM    employees ;#方式二:   SELECT * FROM employees;  #4.查询常量值 SELECT 100; SELECT 'john';  #5.查询表达式 SELECT 100%98;  #6.查询函数  SELECT VERSION();   #7.起别名 /* ①便于理解 ②如果要查询的字段有重名的情况,使用别名可以区分开来  */ #方式一:使用asSELECT 100%98 AS 结果;SELECT last_name AS 姓,first_name AS 名 FROM employees;#方式二:使用空格SELECT last_name 姓,first_name 名 FROM employees;#案例:查询salary,显示结果为 out putSELECT salary AS "out put" FROM employees;#8.去重#案例:查询员工表中涉及到的所有的部门编号SELECT DISTINCT department_id FROM employees;#9.+号的作用/*java中的+号:①运算符,两个操作数都为数值型②连接符,只要有一个操作数为字符串mysql中的+号:仅仅只有一个功能:运算符select 100+90; 两个操作数都为数值型,则做加法运算select '123'+90;只要其中一方为字符型,试图将字符型数值转换成数值型      如果转换成功,则继续做加法运算select 'john'+90; 如果转换失败,则将字符型数值转换成0select null+10; 只要其中一方为null,则结果肯定为null*/#案例:查询员工名和姓连接成一个字段,并显示为 姓名SELECT CONCAT('a','b','c') AS 结果;SELECT   CONCAT(last_name,first_name) AS 姓名FROM  employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#1. 下面的语句是否可以执行成功  SELECT last_name , job_id , salary AS salFROM employees; # 对#2.下面的语句是否可以执行成功  SELECT  *  FROM employees; # 对#4.显示表departments的结构,并查询其中的全部数据DESC departments;SELECT * FROM `departments`;#5.显示出表employees中的全部job_id(不能重复)SELECT DISTINCT job_id FROM employees;#6.显示出表employees的全部列,各个列之间用逗号连接,列头显示成OUT_PUTSELECT   IFNULL(commission_pct,0) AS 奖金率,  commission_pctFROM   employees;    #-------------------------------------------SELECT  CONCAT(`first_name`,',',`last_name`,',',`job_id`,',',IFNULL(commission_pct,0)) AS out_putFROM  employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-条件查询"><a href="#2-2-条件查询" class="headerlink" title="2.2 条件查询"></a>2.2 条件查询</h3><p>条件查询:<br>一、语法<br>select 查询列表<br>from 表名<br>where 筛选条件</p><p>二、筛选条件的分类<br>1、简单条件运算符<br><code>&gt; &lt; = &lt;&gt; != &gt;= &lt;=  &lt;=&gt;安全等于</code><br>2、逻辑运算符<br><code>&amp;&amp; and</code><br><code>|| or</code><br><code>!  not</code><br>3、模糊查询<br>like:一般搭配通配符使用,可以判断字符型或数值型<br>通配符:<code>%任意多个字符,_任意单个字符</code></p><p><code>between and</code><br><code>in</code><br><code>is null /is not null</code>:用于判断null值</p><p>is null PK &lt;=&gt;<br>||普通类型的数值 | null值 | 可读性 |<br>|—|—|—|—|<br>|is null  | ×  |   √ |  √ |<br>|&lt;=&gt;  | √   |  √  | × |</p><pre class="line-numbers language-none"><code class="language-none">分类:一、条件表达式  示例:salary&gt;10000  条件运算符:  &gt; &lt; &gt;= &lt;= = != &lt;&gt;二、逻辑表达式示例:salary&gt;10000 &amp;&amp; salary&lt;20000逻辑运算符:  and(&amp;&amp;):两个条件如果同时成立,结果为true,否则为false  or(||):两个条件只要有一个成立,结果为true,否则为false  not(!):如果条件成立,则not后为false,否则为true三、模糊查询示例:last_name like 'a%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#条件查询/*语法:  select     查询列表  from    表名  where    筛选条件;分类:  一、按条件表达式筛选    简单条件运算符:&gt; &lt; = (!=) &lt;&gt;(不等于) &gt;= &lt;=    二、按逻辑表达式筛选  逻辑运算符:  作用:用于连接条件表达式    &amp;&amp; || !    and or not(建议)      &amp;&amp;和and:两个条件都为true,结果为true,反之为false  ||或or: 只要有一个条件为true,结果为true,反之为false  !或not: 如果连接的条件本身为false,结果为true,反之为false    三、模糊查询    like    between and    in    is null  */#一、按条件表达式筛选#案例1:查询工资&gt;12000的员工信息SELECT   *FROM  employeesWHERE  salary&gt;12000;    #案例2:查询部门编号不等于90号的员工名和部门编号SELECT   last_name,  department_idFROM  employeesWHERE  department_id&lt;&gt;90;#二、按逻辑表达式筛选#案例1:查询工资z在10000到20000之间的员工名、工资以及奖金SELECT  last_name,  salary,  commission_pctFROM  employeesWHERE  salary&gt;=10000 AND   salary&lt;=20000;#案例2:查询部门编号不是在90到110之间,或者工资高于15000的员工信息SELECT  *FROM  employeesWHERE  NOT(department_id&gt;=90 AND  department_id&lt;=110) OR salary&gt;15000;#三、模糊查询/*like    between andinis null|is not null*/#1.like/*特点:①一般和通配符搭配使用  通配符:  % 任意多个字符,包含0个字符  _ 任意单个字符*、#案例1:查询员工名中包含字符a的员工信息select   *from  employeeswhere  last_name like '%a%';#abc#案例2:查询员工名中第三个字符为e,第五个字符为a的员工名和工资select  last_name,  salaryFROM  employeesWHERE  last_name LIKE '__n_l%';#案例3:查询员工名中第二个字符为_的员工名SELECT  last_nameFROM  employeesWHERE  last_name LIKE '_$_%' ESCAPE '$';#2.between and/*①使用between and 可以提高语句的简洁度②包含临界值③两个临界值不要调换顺序*/#案例1:查询员工编号在100到120之间的员工信息SELECT  *FROM  employeesWHERE  employee_id &gt;= 120 AND employee_id&lt;=100;#----------------------SELECT  *FROM  employeesWHERE  employee_id BETWEEN 120 AND 100;#3.in/*含义:判断某字段的值是否属于in列表中的某一项特点:  ①使用in提高语句简洁度  ②in列表的值类型必须一致或兼容  ③in列表中不支持通配符  */#案例:查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号SELECT  last_name,  job_idFROM  employeesWHERE  job_id = 'IT_PROT' OR job_id = 'AD_VP' OR JOB_ID ='AD_PRES';#------------------SELECT  last_name,  job_idFROM  employeesWHERE  job_id IN( 'IT_PROT' ,'AD_VP','AD_PRES');#4、is null/*=或&lt;&gt;不能用于判断null值is null或is not null 可以判断null值*/#案例1:查询没有奖金的员工名和奖金率SELECT  last_name,  commission_pctFROM  employeesWHERE  commission_pct IS NULL;#案例1:查询有奖金的员工名和奖金率SELECT  last_name,  commission_pctFROM  employeesWHERE  commission_pct IS NOT NULL;#----------以下为×SELECT  last_name,  commission_pctFROM  employeesWHERE   salary = 12000;    #安全等于  &lt;=&gt;#案例1:查询没有奖金的员工名和奖金率SELECT  last_name,  commission_pctFROM  employeesWHERE  commission_pct &lt;=&gt;NULL;    #案例2:查询工资为12000的员工信息SELECT  last_name,  salaryFROM  employeesWHERE   salary &lt;=&gt; 12000;  #is null pk &lt;=&gt;#IS NULL:仅仅可以判断NULL值,可读性较高,建议使用#&lt;=&gt;    :既可以判断NULL值,又可以判断普通的数值,可读性较低<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-排序查询"><a href="#2-3-排序查询" class="headerlink" title="2.3 排序查询"></a>2.3 排序查询</h3><p>排序查询:</p><p>一、语法<br><code>select 查询列表</code><br><code>from 表</code><br><code>where 筛选条件</code><br><code>order by 排序列表 [asc}desc]</code></p><p>二、特点<br>1、asc :升序,如果不写默认升序<br>  desc:降序</p><p>2、排序列表 支持 单个字段、多个字段、函数、表达式、别名</p><p>3、order by的位置一般放在查询语句的最后(除limit语句之外)</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#排序查询/*语法:select 查询列表from 表名[where  筛选条件]order by 排序的字段或表达式;特点:1、asc代表的是升序,可以省略desc代表的是降序2、order by子句可以支持 单个字段、别名、表达式、函数、多个字段3、order by子句在查询语句的最后面,除了limit子句*/#1、按单个字段排序SELECT * FROM employees ORDER BY salary DESC;#2、添加筛选条件再排序#案例:查询部门编号&gt;=90的员工信息,并按员工编号降序SELECT *FROM employeesWHERE department_id&gt;=90ORDER BY employee_id DESC;#3、按表达式排序#案例:查询员工信息 按年薪降序SELECT *,salary*12*(1+IFNULL(commission_pct,0)) 年薪FROM employeesORDER BY salary*12*(1+IFNULL(commission_pct,0)) DESC;#4、按别名排序#案例:查询员工信息 按年薪升序SELECT *,salary*12*(1+IFNULL(commission_pct,0)) 年薪FROM employeesORDER BY 年薪 ASC;#5、按函数排序#案例:查询员工名,并且按名字的长度降序SELECT LENGTH(last_name),last_name FROM employeesORDER BY LENGTH(last_name) DESC;#6、按多个字段排序#案例:查询员工信息,要求先按工资降序,再按employee_id升序SELECT *FROM employeesORDER BY salary DESC,employee_id ASC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#1.查询员工的姓名和部门号和年薪,按年薪降序 按姓名升序SELECT last_name,department_id,salary*12*(1+IFNULL(commission_pct,0)) 年薪FROM employeesORDER BY 年薪 DESC,last_name ASC;#2.选择工资不在8000到17000的员工的姓名和工资,按工资降序SELECT last_name,salaryFROM employeesWHERE salary NOT BETWEEN 8000 AND 17000ORDER BY salary DESC;#3.查询邮箱中包含e的员工信息,并先按邮箱的字节数降序,再按部门号升序SELECT *,LENGTH(email)FROM employeesWHERE email LIKE '%e%'ORDER BY LENGTH(email) DESC,department_id ASC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-常见函数"><a href="#2-4-常见函数" class="headerlink" title="2.4 常见函数"></a>2.4 常见函数</h3><p>一、概述<br>功能:类似于java中的方法<br>好处:提高重用性和隐藏实现细节<br>调用:<code>select 函数名(实参列表);</code><br>二、单行函数<br>1.字符函数<br>concat:连接<br>substr:截取子串<br>upper:变大写<br>lower:变小写<br>replace:替换<br>length:获取字节长度<br>trim:去前后空格<br>lpad:左填充<br>rpad:右填充<br>instr:获取子串第一次出现的索引</p><p>2.数学函数<br><code>ceil</code>:向上取整<br><code>round</code>:四舍五入<br><code>mod</code>:取模<br><code>floor</code>:向下取整<br><code>truncate</code>:截断<br><code>rand</code>:获取随机数,返回0-1之间的小数</p><p>3.日期函数<br>now:返回当前日期+时间<br>year:返回年<br>month:返回月<br>day:返回日<br>date_format:将日期转换成字符<br>curdate:返回当前日期<br>str_to_date:将字符转换成日期</p><table><thead><tr><th>格式符</th><th>功能</th></tr></thead><tbody><tr><td>%Y</td><td>四位的年份</td></tr><tr><td>%y</td><td>2位的年份</td></tr><tr><td>%m</td><td>月份(01,02,…,11,12)</td></tr><tr><td>%c</td><td>月份(1,2,…,11,12)</td></tr><tr><td>%d</td><td>日(01,02,…)</td></tr><tr><td>%H</td><td>小时(24小时制)</td></tr><tr><td>%h</td><td>小时(12小时制)</td></tr><tr><td>%i</td><td>分钟(00,01,…,59)</td></tr><tr><td>%s</td><td>秒(00,01,…,59)</td></tr></tbody></table><p>curtime:返回当前时间<br>hour:小时<br>minute:分钟<br>second:秒<br>datediff:返回两个日期相差的天数<br>monthname:以英文形式返回月</p><p>4.其他函数<br>version 当前数据库服务器的版本<br>database 当前打开的数据库<br>user当前用户<br>password(‘字符’):返回该字符的密码形式<br>md5(‘字符’):返回该字符的md5加密形式</p><p>5.流程控制函数<br><code>①if(条件表达式,表达式1,表达式2):如果条件表达式成立,返回表达式1,否则返回表达式2</code><br><code>②case情况1</code><br><code>case 变量或表达式或字段</code><br><code>when 常量1 then 值1</code><br><code>when 常量2 then 值2</code><br><code>...</code><br><code>else 值n</code><br><code>end</code><br><code>③case情况2</code><br><code>case</code><br><code>when 条件1 then 值1</code><br><code>when 条件2 then 值2</code><br><code>...</code><br><code>else 值n</code><br><code>end</code></p><p>三、分组函数<br>1、分类<br>max 最大值<br>min 最小值<br>sum 和<br>avg 平均值<br>count 计算个数</p><p>2、特点<br>①语法<br>select max(字段) from 表名;<br>②支持的类型<br>sum和avg一般用于处理数值型<br>max、min、count可以处理任何数据类型<br>③以上分组函数都忽略null<br>④都可以搭配distinct使用,实现去重的统计<br>select sum(distinct 字段) from 表;<br>⑤count函数<br><code>count(字段)</code>:统计该字段非空值的个数<br><code>count(*)</code>:统计结果集的行数</p><p>案例:查询每个部门的员工个数<br>1 xx    10<br>2 dd    20<br>3 mm    20<br>4 aa    40<br>5 hh    40</p><p>count(1):统计结果集的行数</p><p>效率上:<br><code>MyISAM存储引擎,count(*)最高</code><br><code>InnoDB存储引擎,count(*)和count(1)效率&gt;count(字段)</code></p><p>⑥ 和分组函数一同查询的字段,要求是group by后出现的字段</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#常见函数/*概念:类似于java的方法,将一组逻辑语句封装在方法体中,对外暴露方法名好处:1、隐藏了实现细节  2、提高代码的重用性调用:select 函数名(实参列表) [from 表];特点:  ①叫什么(函数名)  ②干什么(函数功能)分类:  1、单行函数  如 concat、length、ifnull等  2、分组函数    功能:做统计使用,又称为统计函数、聚合函数、组函数  常见函数:  一、单行函数  字符函数:  length:获取字节个数(utf-8一个汉字代表3个字节,gbk为2个字节)  concat  substr  instr  trim  upper  lower  lpad  rpad  replace    数学函数:  round  ceil  floor  truncate  mod    日期函数:  now  curdate  curtime  year  month  monthname  day  hour  minute  second  str_to_date  date_format  其他函数:  version  database  user  控制函数  if  case  */#一、字符函数#1.length 获取参数值的字节个数SELECT LENGTH('john');SELECT LENGTH('张三丰hahaha');SHOW VARIABLES LIKE '%char%';#2.concat 拼接字符串SELECT CONCAT(last_name,'_',first_name) 姓名 FROM employees;#3.upper、lowerSELECT UPPER('john');SELECT LOWER('joHn');#示例:将姓变大写,名变小写,然后拼接SELECT CONCAT(UPPER(last_name),LOWER(first_name))  姓名 FROM employees;#4.substr、substring#注意:索引从1开始#截取从指定索引处后面所有字符SELECT SUBSTR('李莫愁爱上了陆展元',7)  out_put;#截取从指定索引处指定字符长度的字符 第一个参数为开始位置,第二个参数为截取字符长度SELECT SUBSTR('李莫愁爱上了陆展元',1,3) out_put;#案例:姓名中首字符大写,其他字符小写然后用_拼接,显示出来SELECT CONCAT(UPPER(SUBSTR(last_name,1,1)),'_',LOWER(SUBSTR(last_name,2)))  out_putFROM employees;#5.instr 返回子串第一次出现的索引,如果找不到返回0SELECT INSTR('杨不殷六侠悔爱上了殷六侠','殷八侠') AS out_put;#6.trim 去除前后空格SELECT LENGTH(TRIM('    张翠山    ')) AS out_put;SELECT TRIM('aa' FROM 'aaaaaaaaa张aaaaaaaaaaaa翠山aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')  AS out_put;#7.lpad 用指定的字符实现左填充指定长度SELECT LPAD('殷素素',12,'*') AS out_put;#8.rpad 用指定的字符实现右填充指定长度SELECT RPAD('殷素素',12,'ab') AS out_put;#9.replace 替换SELECT REPLACE('周芷若周芷若周芷若周芷若张无忌爱上了周芷若','周芷若','赵敏') AS out_put;#二、数学函数#round 四舍五入SELECT ROUND(-1.55);#-2SELECT ROUND(1.567,2);#俩位小数 1.57#ceil 向上取整,返回&gt;=该参数的最小整数SELECT CEIL(-1.02);#-1#floor 向下取整,返回&lt;=该参数的最大整数SELECT FLOOR(-9.99);#-10#truncate 截断SELECT TRUNCATE(1.69999,1);#1.6#mod取余/*mod(a,b) :  a-a/b*bmod(-10,-3):-10- (-10)/(-3)*(-3)=-1*/SELECT MOD(10,-3);#1SELECT 10%3;#1#三、日期函数#now 返回当前系统日期+时间SELECT NOW();#curdate 返回当前系统日期,不包含时间SELECT CURDATE();#curtime 返回当前时间,不包含日期SELECT CURTIME();#可以获取指定的部分,年、月、日、小时、分钟、秒SELECT YEAR(NOW()) 年;SELECT YEAR('1998-1-1') 年;SELECT  YEAR(hiredate) 年 FROM employees;SELECT MONTH(NOW()) 月;SELECT MONTHNAME(NOW());#str_to_date 将字符通过指定的格式转换成日期SELECT STR_TO_DATE('1998-3-2','%Y-%c-%d') AS out_put;#查询入职日期为1992--4-3的员工信息SELECT * FROM employees WHERE hiredate = '1992-4-3';SELECT * FROM employees WHERE hiredate = STR_TO_DATE('4-3 1992','%c-%d %Y');#date_format 将日期转换成字符SELECT DATE_FORMAT(NOW(),'%y年%m月%d日') AS out_put;#查询有奖金的员工名和入职日期(xx月/xx日 xx年)SELECT last_name,DATE_FORMAT(hiredate,'%m月/%d日 %y年') 入职日期FROM employeesWHERE commission_pct IS NOT NULL;#四、其他函数SELECT VERSION();SELECT DATABASE();SELECT USER();#五、流程控制函数#1.if函数: if else 的效果SELECT IF(10&lt;5,'对','错');SELECT last_name,commission_pct,IF(commission_pct IS NULL,'没奖金,呵呵','有奖金,嘻嘻') 备注FROM employees;#2.case函数的使用一: switch case 的效果/*java中switch(变量或表达式){  case 常量1:语句1;break;  ...  default:语句n;break;}mysql中case 要判断的字段或表达式when 常量1 then 要显示的值1或语句1;when 常量2 then 要显示的值2或语句2;...else 要显示的值n或语句n;end*//*案例:查询员工的工资,要求部门号=30,显示的工资为1.1倍部门号=40,显示的工资为1.2倍部门号=50,显示的工资为1.3倍其他部门,显示的工资为原工资*/SELECT salary 原始工资,department_id,CASE department_idWHEN 30 THEN salary*1.1WHEN 40 THEN salary*1.2WHEN 50 THEN salary*1.3ELSE salaryEND AS 新工资FROM employees;#3.case 函数的使用二:类似于 多重if/*java中:if(条件1){  语句1;}else if(条件2){  语句2;}...else{  语句n;}mysql中:case when 条件1 then 要显示的值1或语句1when 条件2 then 要显示的值2或语句2。。。else 要显示的值n或语句nend*//*案例:查询员工的工资的情况如果工资&gt;20000,显示A级别如果工资&gt;15000,显示B级别如果工资&gt;10000,显示C级别否则,显示D级别*/SELECT salary,CASE WHEN salary&gt;20000 THEN 'A'WHEN salary&gt;15000 THEN 'B'WHEN salary&gt;10000 THEN 'C'ELSE 'D'END AS 工资级别FROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#1. 显示系统时间(注:日期+时间)SELECT NOW();#2. 查询员工号,姓名,工资,以及工资提高百分之20%后的结果(new salary)SELECT employee_id,last_name,salary,salary*1.2 "new salary"FROM employees;#3. 将员工的姓名按首字母排序,并写出姓名的长度(length)SELECT LENGTH(last_name) 长度,SUBSTR(last_name,1,1) 首字符,last_nameFROM employeesORDER BY 首字符;#4. 做一个查询,产生下面的结果/*&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt;Dream SalaryKing earns 24000 monthly but wants 72000*/SELECT CONCAT(last_name,' earns ',salary,' monthly but wants ',salary*3) AS "Dream Salary"FROM employeesWHERE salary=24000;#5. 使用case-when,按照下面的条件:/*job                  gradeAD_PRES            AST_MAN             BIT_PROG             CSA_REP              DST_CLERK           E产生下面的结果Last_name Job_id  Gradeking  AD_PRES A*/SELECT last_name,job_id AS  job,CASE job_idWHEN 'AD_PRES' THEN 'A' WHEN 'ST_MAN' THEN 'B' WHEN 'IT_PROG' THEN 'C' WHEN 'SA_PRE' THEN 'D'WHEN 'ST_CLERK' THEN 'E'END AS GradeFROM employeesWHERE job_id = 'AD_PRES';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-分组查询"><a href="#2-5-分组查询" class="headerlink" title="2.5 分组查询"></a>2.5 分组查询</h3><p>一、语法<br><code>select 分组函数,分组后的字段</code><br><code>from 表</code><br><code>[where 筛选条件]</code><br><code>group by 分组的字段</code><br><code>[having 分组后的筛选]</code><br><code>[order by 排序列表]</code></p><p>二、特点</p><table><thead><tr><th></th><th>使用关键字</th><th>筛选的表</th><th>位置</th></tr></thead><tbody><tr><td>分组前筛选</td><td>where</td><td>原始表</td><td>group by的前面</td></tr><tr><td>分组后筛选</td><td>having</td><td>分组后的结果</td><td>group by 的后面</td></tr></tbody></table><h4 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h4><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#分组函数/*功能:用作统计使用,又称为聚合函数或统计函数或组函数分类:sum 求和、avg 平均值、max 最大值 、min 最小值 、count 计算个数特点:1、sum、avg一般用于处理数值型   max、min、count可以处理任何类型2、以上分组函数都忽略null值3、可以和distinct搭配实现去重的运算4、count函数的单独介绍一般使用count(*)用作统计行数5、和分组函数一同查询的字段要求是group by后的字段*/#1、简单 的使用SELECT SUM(salary) FROM employees;SELECT AVG(salary) FROM employees;SELECT MIN(salary) FROM employees;SELECT MAX(salary) FROM employees;SELECT COUNT(salary) FROM employees;SELECT SUM(salary) 和,AVG(salary) 平均,MAX(salary) 最高,MIN(salary) 最低,COUNT(salary) 个数FROM employees;SELECT SUM(salary) 和,ROUND(AVG(salary),2) 平均,MAX(salary) 最高,MIN(salary) 最低,COUNT(salary) 个数FROM employees;#2、参数支持哪些类型#SUM、AVG不支持字符型、日期型,一般指适用于数字型SELECT SUM(last_name) ,AVG(last_name) FROM employees;SELECT SUM(hiredate) ,AVG(hiredate) FROM employees;#MAX、MIN支持字符型、日期型SELECT MAX(last_name),MIN(last_name) FROM employees;SELECT MAX(hiredate),MIN(hiredate) FROM employees;#COUNT也都支持字符型、日期型SELECT COUNT(commission_pct) FROM employees;SELECT COUNT(last_name) FROM employees;#3、是否忽略null#SUM、AVG忽略nullSELECT SUM(commission_pct) ,AVG(commission_pct),SUM(commission_pct)/35,SUM(commission_pct)/107 FROM employees;#MAX、MIN也忽略nullSELECT MAX(commission_pct) ,MIN(commission_pct) FROM employees;#COUNT也忽略nullSELECT COUNT(commission_pct) FROM employees;SELECT commission_pct FROM employees;#4、和distinct(去重)搭配SELECT SUM(DISTINCT salary),SUM(salary) FROM employees;SELECT COUNT(DISTINCT salary),COUNT(salary) FROM employees;#5、count函数的详细介绍SELECT COUNT(salary) FROM employees;SELECT COUNT(*) FROM employees;SELECT COUNT(1) FROM employees;/*效率:MYISAM存储引擎下  ,COUNT(*)的效率高INNODB存储引擎下,COUNT(*)和COUNT(1)的效率差不多,比COUNT(字段)要高一些*/#6、和分组函数一同查询的字段有限制SELECT AVG(salary),employee_id  FROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#1.查询公司员工工资的最大值,最小值,平均值,总和SELECT MAX(salary) 最大值,MIN(salary) 最小值,AVG(salary) 平均值,SUM(salary) 和FROM employees;#2.查询员工表中的最大入职时间和最小入职时间的相差天数 (DIFFRENCE)SELECT MAX(hiredate) 最大,MIN(hiredate) 最小,DATEDIFF(MAX(hiredate),MIN(hiredate)) DIFFRENCEFROM employees;SELECT DATEDIFF(MAX(hiredate),MIN(hiredate)) DIFFRENCEFROM employees;SELECT DATEDIFF('1995-2-7','1995-2-6');#3.查询部门编号为90的员工个数SELECT COUNT(*) FROM employees WHERE department_id = 90;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#分组查询/*语法:select 查询列表from 表[where 筛选条件]group by 分组的字段[order by 排序的字段];特点:1、和分组函数一同查询的字段必须是group by后出现的字段2、筛选分为两类:分组前筛选和分组后筛选          针对的表            位置          连接的关键字分组前筛选 原始表              group by前   where分组后筛选 group by后的结果集  group by后    having问题1:分组函数做筛选能不能放在where后面答:不能问题2:where——group by——having一般来讲,能用分组前筛选的,尽量使用分组前筛选,提高效率3、分组可以按单个字段也可以按多个字段4、可以搭配着排序使用(排序是放在整个分组查询的最后)*/#引入:查询每个部门的员工个数SELECT COUNT(*) FROM employees WHERE department_id=90;#1.简单的分组#案例1:查询每个工种的员工平均工资SELECT AVG(salary),job_idFROM employeesGROUP BY job_id;#案例2:查询每个位置的部门个数SELECT COUNT(*),location_idFROM departmentsGROUP BY location_id;#2、可以实现分组前的筛选#案例1:查询邮箱中包含a字符的 每个部门的最高工资SELECT MAX(salary),department_idFROM employeesWHERE email LIKE '%a%'GROUP BY department_id;#案例2:查询有奖金的每个领导手下员工的最高工资SELECT MAX(salary),manager_idFROM employeesWHERE commission_pct IS NOT NULLGROUP BY manager_id;#3、分组后筛选#案例:查询哪个部门的员工个数&gt;5#①查询每个部门的员工个数SELECT COUNT(*),department_idFROM employeesGROUP BY department_id;#② 筛选刚才①结果SELECT COUNT(*),department_idFROM employeesGROUP BY department_idHAVING COUNT(*)&gt;5;#案例2:每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资SELECT job_id,MAX(salary)FROM employeesWHERE commission_pct IS NOT NULLGROUP BY job_idHAVING MAX(salary)&gt;12000;#案例3:领导编号&gt;102的每个领导手下的最低工资大于5000的领导编号和最低工资SELECT manager_id,MIN(salary)FROM employeesWHERE manager_id&gt;102GROUP BY manager_idHAVING MIN(salary)&gt;5000;#4.添加排序#案例:每个工种有奖金的员工的最高工资&gt;6000的工种编号和最高工资,按最高工资升序SELECT job_id,MAX(salary) mFROM employeesWHERE commission_pct IS NOT NULLGROUP BY job_idHAVING m&gt;6000ORDER BY m ;#按表达式或函数分组#案例:按员工姓名的长度分组,查询每一组的员工个数,筛选员工个数&gt;5的有哪些SELECT COUNT(*),length(last_name) last_nameFROM employeesgroup by length(last_name)having count(*)&gt;5;#5.按多个字段分组#案例:查询每个工种每个部门的最低工资,并按最低工资降序SELECT MIN(salary),job_id,department_idFROM employeesGROUP BY department_id,job_idORDER BY MIN(salary) DESC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#1.查询各job_id的员工工资的最大值,最小值,平均值,总和,并按job_id升序SELECT MAX(salary),MIN(salary),AVG(salary),SUM(salary),job_idFROM employeesGROUP BY job_idORDER BY job_id;#2.查询员工最高工资和最低工资的差距(DIFFERENCE)SELECT MAX(salary)-MIN(salary) DIFFRENCEFROM employees;#3.查询各个管理者手下员工的最低工资,其中最低工资不能低于6000,没有管理者的员工不计算在内SELECT MIN(salary),manager_idFROM employeesWHERE manager_id IS NOT NULLGROUP BY manager_idHAVING MIN(salary)&gt;=6000;#4.查询所有部门的编号,员工数量和工资平均值,并按平均工资降序SELECT department_id,COUNT(*),AVG(salary) aFROM employeesGROUP BY department_idORDER BY a DESC;#5.选择具有各个job_id的员工人数SELECT COUNT(*) 个数,job_idFROM employeesGROUP BY job_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-连接查询"><a href="#2-6-连接查询" class="headerlink" title="2.6 连接查询"></a>2.6 连接查询</h3><p>一、含义<br>当查询中涉及到了多个表的字段,需要使用多表连接<br>select 字段1,字段2<br>from 表1,表2,…;</p><p>笛卡尔乘积:当查询多个表时,没有添加有效的连接条件,导致多个表所有行实现完全连接<br>如何解决:添加有效的连接条件</p><p>二、分类</p><p>按年代分类:<br>  sql92:<br>    等值<br>    非等值<br>    自连接</p><p>  也支持一部分外连接(用于oracle、sqlserver,mysql不支持)<br>  sql99<code>[推荐使用]</code><br>    内连接<br>      等值<br>      非等值<br>      自连接<br>    外连接<br>      左外<br>      右外<br>      全外(mysql不支持)<br>    交叉连接   </p><p>三、SQL92语法<br>1、等值连接<br>语法:<br><code>select 查询列表</code><br><code>from 表1 别名,表2 别名</code><br><code>where 表1.key=表2.key</code><br><code>[and 筛选条件]</code><br><code>[group by 分组字段]</code><br><code>[having 分组后的筛选]</code><br><code>[order by 排序字段]</code><br>特点:<br>  1.一般为表起别名<br>  2.多表的顺序可以调换<br>  3.n表连接至少需要n-1个连接条件<br>  4.等值连接的结果是多表的交集部分</p><p>2、非等值连接<br>语法:<br><code>select 查询列表</code><br><code>from 表1 别名,表2 别名</code><br><code>where 非等值的连接条件</code><br><code>[and 筛选条件]</code><br><code>[group by 分组字段]</code><br><code>[having 分组后的筛选]</code><br><code>[order by 排序字段]</code><br>3、自连接</p><p>语法:<br><code>select 查询列表</code><br><code>from 表 别名1,表 别名2</code><br><code>where 等值的连接条件</code><br><code>[and 筛选条件]</code><br><code>[group by 分组字段]</code><br><code>[having 分组后的筛选]</code><br><code>[order by 排序字段]</code></p><p>四、SQL99语法<br>1、内连接<br>语法:<br><code>select 查询列表</code><br><code>from 表1 别名</code><br><code>[inner] join 表2 别名 on 连接条件</code><br><code>where 筛选条件</code><br><code>group by 分组列表</code><br><code>having 分组后的筛选</code><br><code>order by 排序列表</code><br><code>limit 子句;</code></p><p>特点:<br>①表的顺序可以调换<br>②内连接的结果=多表的交集<br>③n表连接至少需要n-1个连接条件</p><p>分类:<br>等值连接<br>非等值连接<br>自连接</p><p>2、外连接<br>语法:<br><code>select 查询列表</code><br><code>from 表1 别名</code><br><code>left|right|full[outer] join 表2 别名 on 连接条件</code><br><code>where 筛选条件</code><br><code>group by 分组列表</code><br><code>having 分组后的筛选</code><br><code>order by 排序列表</code><br><code>limit 子句;</code><br>特点:<br>①查询的结果=主表中所有的行,如果从表和它匹配的将显示匹配行,如果从表没有匹配的则显示null<br>②left join 左边的就是主表,right join 右边的就是主表<br>  full join 两边都是主表<br>③一般用于查询除了交集部分的剩余的不匹配的行</p><p>3、交叉连接</p><p>语法:<br>select 查询列表<br>from 表1 别名<br>cross join 表2 别名;</p><p>特点:<br>类似于笛卡尔乘积</p><p>添加girls数据库:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">/*!40101 SET NAMES utf8 */;/*!40101 SET SQL_MODE=''*/;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;CREATE DATABASE /*!32312 IF NOT EXISTS*/`girls` /*!40100 DEFAULT CHARACTER SET utf8 */;USE `girls`;/*Table structure for table `admin` */DROP TABLE IF EXISTS `admin`;CREATE TABLE `admin` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `username` varchar(10) NOT NULL,  `password` varchar(10) NOT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;/*Data for the table `admin` */insert  into `admin`(`id`,`username`,`password`) values (1,'john','8888'),(2,'lyt','6666');/*Table structure for table `beauty` */DROP TABLE IF EXISTS `beauty`;CREATE TABLE `beauty` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(50) NOT NULL,  `sex` char(1) DEFAULT '女',  `borndate` datetime DEFAULT '1987-01-01 00:00:00',  `phone` varchar(11) NOT NULL,  `photo` blob,  `boyfriend_id` int(11) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;/*Data for the table `beauty` */insert  into `beauty`(`id`,`name`,`sex`,`borndate`,`phone`,`photo`,`boyfriend_id`) values (1,'柳岩','女','1988-02-03 00:00:00','18209876577',NULL,8),(2,'苍老师','女','1987-12-30 00:00:00','18219876577',NULL,9),(3,'Angelababy','女','1989-02-03 00:00:00','18209876567',NULL,3),(4,'热巴','女','1993-02-03 00:00:00','18209876579',NULL,2),(5,'周冬雨','女','1992-02-03 00:00:00','18209179577',NULL,9),(6,'周芷若','女','1988-02-03 00:00:00','18209876577',NULL,1),(7,'岳灵珊','女','1987-12-30 00:00:00','18219876577',NULL,9),(8,'小昭','女','1989-02-03 00:00:00','18209876567',NULL,1),(9,'双儿','女','1993-02-03 00:00:00','18209876579',NULL,9),(10,'王语嫣','女','1992-02-03 00:00:00','18209179577',NULL,4),(11,'夏雪','女','1993-02-03 00:00:00','18209876579',NULL,9),(12,'赵敏','女','1992-02-03 00:00:00','18209179577',NULL,1);/*Table structure for table `boys` */DROP TABLE IF EXISTS `boys`;CREATE TABLE `boys` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `boyName` varchar(20) DEFAULT NULL,  `userCP` int(11) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;/*Data for the table `boys` */insert  into `boys`(`id`,`boyName`,`userCP`) values (1,'张无忌',100),(2,'鹿晗',800),(3,'黄晓明',50),(4,'段誉',300);/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#连接查询/*含义:又称多表查询,当查询的字段来自于多个表时,就会用到连接查询笛卡尔乘积现象:表1 有m行,表2有n行,结果=m*n行发生原因:没有有效的连接条件如何避免:添加有效的连接条件分类:  按年代分类:  sql92标准:仅仅支持内连接  sql99标准[推荐]:支持内连接+外连接(左外和右外)+交叉连接    按功能分类:    内连接:      等值连接      非等值连接      自连接    外连接:      左外连接      右外连接      全外连接        交叉连接*/SELECT * FROM beauty;SELECT * FROM boys;SELECT NAME,boyName FROM boys,beautyWHERE beauty.boyfriend_id= boys.id;#一、sql92标准#1、等值连接/*① 多表等值连接的结果为多表的交集部分②n表连接,至少需要n-1个连接条件③ 多表的顺序没有要求④一般需要为表起别名⑤可以搭配前面介绍的所有子句使用,比如排序、分组、筛选*/#案例1:查询女神名和对应的男神名SELECT NAME,boyName FROM boys,beautyWHERE beauty.boyfriend_id= boys.id;#案例2:查询员工名和对应的部门名SELECT last_name,department_nameFROM employees,departmentsWHERE employees.`department_id`=departments.`department_id`;#2、为表起别名/*①提高语句的简洁度②区分多个重名的字段注意:如果为表起了别名,则查询的字段就不能使用原来的表名去限定*/#查询员工名、工种号、工种名SELECT e.last_name,e.job_id,j.job_titleFROM employees  e,jobs jWHERE e.`job_id`=j.`job_id`;#3、两个表的顺序是否可以调换(可以)#查询员工名、工种号、工种名SELECT e.last_name,e.job_id,j.job_titleFROM jobs j,employees eWHERE e.`job_id`=j.`job_id`;#4、可以加筛选#案例:查询有奖金的员工名、部门名SELECT last_name,department_name,commission_pctFROM employees e,departments dWHERE e.`department_id`=d.`department_id`AND e.`commission_pct` IS NOT NULL;#案例2:查询城市名中第二个字符为o的部门名和城市名SELECT department_name,cityFROM departments d,locations lWHERE d.`location_id` = l.`location_id`AND city LIKE '_o%';#5、可以加分组#案例1:查询每个城市的部门个数SELECT COUNT(*) 个数,cityFROM departments d,locations lWHERE d.`location_id`=l.`location_id`GROUP BY city;#案例2:查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资SELECT department_name,d.`manager_id`,MIN(salary)FROM departments d,employees eWHERE d.`department_id`=e.`department_id`AND commission_pct IS NOT NULLGROUP BY department_name,d.`manager_id`;#6、可以加排序#案例:查询每个工种的工种名和员工的个数,并且按员工个数降序SELECT job_title,COUNT(*)FROM employees e,jobs jWHERE e.`job_id`=j.`job_id`GROUP BY job_titleORDER BY COUNT(*) DESC;#7、可以实现三表连接#案例:查询员工名、部门名和所在的城市SELECT last_name,department_name,cityFROM employees e,departments d,locations lWHERE e.`department_id`=d.`department_id`AND d.`location_id`=l.`location_id`AND city LIKE 's%'ORDER BY department_name DESC;#2、非等值连接#案例1:查询员工的工资和工资级别SELECT salary,grade_levelFROM employees e,job_grades gWHERE salary BETWEEN g.`lowest_sal` AND g.`highest_sal`AND g.`grade_level`='A';select salary,employee_id from employees;select * from job_grades;/* 创建等级表job_gradesCREATE TABLE job_grades(grade_level VARCHAR(3), lowest_sal  int, highest_sal int);INSERT INTO job_gradesVALUES ('A', 1000, 2999);INSERT INTO job_gradesVALUES ('B', 3000, 5999);INSERT INTO job_gradesVALUES('C', 6000, 9999);INSERT INTO job_gradesVALUES('D', 10000, 14999);INSERT INTO job_gradesVALUES('E', 15000, 24999);INSERT INTO job_gradesVALUES('F', 25000, 40000);*/#3、自连接#案例:查询 员工名和上级的名称SELECT e.employee_id,e.last_name,m.employee_id,m.last_nameFROM employees e,employees mWHERE e.`manager_id`=m.`employee_id`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#1.显示所有员工的姓名,部门号和部门名称。USE myemployees;SELECT last_name,d.department_id,department_nameFROM employees e,departments dWHERE e.`department_id` = d.`department_id`;#2.查询90号部门员工的job_id和90号部门的location_idSELECT job_id,location_idFROM employees e,departments dWHERE e.`department_id`=d.`department_id`AND e.`department_id`=90;#3. 选择所有有奖金的员工的last_name , department_name , location_id , citySELECT last_name , department_name , l.location_id , cityFROM employees e,departments d,locations lWHERE e.department_id = d.department_idAND d.location_id=l.location_idAND e.commission_pct IS NOT NULL;#4.选择city在Toronto工作的员工的last_name , job_id , department_id , department_name SELECT last_name , job_id , d.department_id , department_name FROM employees e,departments d ,locations lWHERE e.department_id = d.department_idAND d.location_id=l.location_idAND city = 'Toronto';#5.查询每个工种、每个部门的部门名、工种名和最低工资SELECT department_name,job_title,MIN(salary) 最低工资FROM employees e,departments d,jobs jWHERE e.`department_id`=d.`department_id`AND e.`job_id`=j.`job_id`GROUP BY department_name,job_title;#6.查询每个国家下的部门个数大于2的国家编号SELECT country_id,COUNT(*) 部门个数FROM departments d,locations lWHERE d.`location_id`=l.`location_id`GROUP BY country_idHAVING 部门个数&gt;2;#7、选择指定员工的姓名,员工号,以及他的管理者的姓名和员工号,结果类似于下面的格式/*employees Emp#  manager Mgr#kochhar   101 king  100*/SELECT e.last_name employees,e.employee_id "Emp#",m.last_name manager,m.employee_id "Mgr#"FROM employees e,employees mWHERE e.manager_id = m.employee_idAND e.last_name='kochhar';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sql99语法的连接查询</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#sql99语法/*语法:  select 查询列表  from 表1 别名 [连接类型]  join 表2 别名   on 连接条件  [where 筛选条件]  [group by 分组]  [having 筛选条件]  [order by 排序列表]  分类:内连接(★):inner外连接  左外(★):left [outer]  右外(★):right [outer]  全外:full[outer]交叉连接:cross */#一)内连接/*语法:select 查询列表from 表1 别名inner join 表2 别名on 连接条件;分类:等值非等值自连接特点:①添加排序、分组、筛选②inner可以省略③ 筛选条件放在where后面,连接条件放在on后面,提高分离性,便于阅读④inner join连接和sql92语法中的等值连接效果是一样的,都是查询多表的交集*/#1、等值连接#案例1.查询员工名、部门名SELECT last_name,department_nameFROM departments d JOIN  employees eON e.`department_id` = d.`department_id`;#案例2.查询名字中包含e的员工名和工种名(添加筛选)SELECT last_name,job_titleFROM employees eINNER JOIN jobs jON e.`job_id`=  j.`job_id`WHERE e.`last_name` LIKE '%e%';#3. 查询部门个数&gt;3的城市名和部门个数,(添加分组+筛选)#①查询每个城市的部门个数#②在①结果上筛选满足条件的SELECT city,COUNT(*) 部门个数FROM departments dINNER JOIN locations lON d.`location_id`=l.`location_id`GROUP BY cityHAVING COUNT(*)&gt;3;#案例4.查询哪个部门的员工个数&gt;3的部门名和员工个数,并按个数降序(添加排序)#①查询每个部门的员工个数SELECT COUNT(*),department_nameFROM employees eINNER JOIN departments dON e.`department_id`=d.`department_id`GROUP BY department_name;#② 在①结果上筛选员工个数&gt;3的记录,并排序SELECT COUNT(*) 个数,department_nameFROM employees eINNER JOIN departments dON e.`department_id`=d.`department_id`GROUP BY department_nameHAVING COUNT(*)&gt;3ORDER BY COUNT(*) DESC;#5.查询员工名、部门名、工种名,并按部门名降序(添加三表连接)SELECT last_name,department_name,job_titleFROM employees eINNER JOIN departments d ON e.`department_id`=d.`department_id`INNER JOIN jobs j ON e.`job_id` = j.`job_id`ORDER BY department_name DESC;#二)非等值连接#查询员工的工资级别SELECT salary,grade_levelFROM employees eJOIN job_grades gON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`; #查询工资级别的个数&gt;20的个数,并且按工资级别降序SELECT COUNT(*),grade_levelFROM employees eJOIN job_grades gON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`GROUP BY grade_levelHAVING COUNT(*)&gt;20ORDER BY grade_level DESC; #三)自连接#查询员工的名字、上级的名字SELECT e.last_name,m.last_nameFROM employees eJOIN employees mON e.`manager_id`= m.`employee_id`; #查询姓名中包含字符k的员工的名字、上级的名字SELECT e.last_name,m.last_nameFROM employees eJOIN employees mON e.`manager_id`= m.`employee_id`WHERE e.`last_name` LIKE '%k%'; #二、外连接 /*应用场景:用于查询一个表中有,另一个表没有的记录 特点: 1、外连接的查询结果为主表中的所有记录  如果从表中有和它匹配的,则显示匹配的值  如果从表中没有和它匹配的,则显示null  外连接查询结果=内连接结果+主表中有而从表没有的记录 2、左外连接,left join左边的是主表   右外连接,right join右边的是主表 3、左外和右外交换两个表的顺序,可以实现同样的效果  4、全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的*/#引入:查询男朋友 不在男神表的的女神名 查询信息主要来自于哪个表哪个就是主表(查的那个结果) SELECT * FROM beauty;SELECT * FROM boys; #右外连接SELECT b.*,bo.*FROM boys boRIGHT OUTER JOIN beauty bON b.`boyfriend_id` = bo.`id`WHERE bo.`id` IS NULL; #案例1:查询哪个部门没有员工#左外SELECT d.*,e.employee_idFROM departments dLEFT OUTER JOIN employees eON d.`department_id` = e.`department_id`WHERE e.`employee_id` IS NULL; #右外 SELECT d.*,e.employee_idFROM employees eRIGHT OUTER JOIN departments dON d.`department_id` = e.`department_id`WHERE e.`employee_id` IS NULL; #全外 不支持/* USE girls;SELECT b.*,bo.*FROM beauty bFULL OUTER JOIN boys boON b.`boyfriend_id` = bo.id; */#交叉连接SELECT b.*,bo.*FROM beauty bCROSS JOIN boys bo; #sql92和 sql99pk/*功能:sql99支持的较多可读性:sql99实现连接条件和筛选条件的分离,可读性较高*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-子查询"><a href="#2-7-子查询" class="headerlink" title="2.7 子查询"></a>2.7 子查询</h3><p>一、含义<br>嵌套在其他语句内部的select语句称为子查询或内查询,<br>外面的语句可以是insert、update、delete、select等,一般select作为外面语句较多<br>外面如果为select语句,则此语句称为外查询或主查询</p><p>二、分类<br>1、按出现位置<br>select后面:<br>    仅仅支持标量子查询<br>from后面:<br>    表子查询<br>where或having后面:<br>    标量子查询<br>    列子查询<br>    行子查询<br>exists后面:<br>    标量子查询<br>    列子查询<br>    行子查询<br>    表子查询</p><p>2、按结果集的行列<br>标量子查询(单行子查询):结果集为一行一列<br>列子查询(多行子查询):结果集为多行一列<br>行子查询:结果集为多行多列<br>表子查询:结果集为多行多列</p><p>三、示例<br>where或having后面<br>1、标量子查询<br>案例:查询最低工资的员工姓名和工资<br>①最低工资<br>select min(salary) from employees</p><p>②查询员工的姓名和工资,要求工资=①<br>select last_name,salary<br>from employees<br>where salary=(<br>  select min(salary) from employees<br>);</p><p>2、列子查询<br>案例:查询所有是领导的员工姓名<br>①查询所有员工的 manager_id<br>select manager_id<br>from employees</p><p>②查询姓名,employee_id属于①列表的一个<br>select last_name<br>from employees<br>where employee_id in(<br>  select manager_id<br>  from employees<br>);</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#子查询/*含义:出现在其他语句中的select语句,称为子查询或内查询外部的查询语句,称为主查询或外查询分类:按子查询出现的位置:  select后面:    仅仅支持标量子查询    from后面:    支持表子查询  where或having后面:★    标量子查询(单行) √    列子查询  (多行) √        行子查询      exists后面(相关子查询)    表子查询按结果集的行列数不同:  标量子查询(结果集只有一行一列)  列子查询(结果集只有一列多行)  行子查询(结果集有一行多列)  表子查询(结果集一般为多行多列)*/#一、where或having后面/*1、标量子查询(单行子查询)2、列子查询(多行子查询)3、行子查询(多列多行)特点:①子查询放在小括号内②子查询一般放在条件的右侧③标量子查询,一般搭配着单行操作符使用&gt; &lt; &gt;= &lt;= = &lt;&gt;列子查询,一般搭配着多行操作符使用in、any/some、all④子查询的执行优先于主查询执行,主查询的条件用到了子查询的结果*/#1.标量子查询★#案例1:谁的工资比 Abel 高?#①查询Abel的工资SELECT salaryFROM employeesWHERE last_name = 'Abel';#②查询员工的信息,满足 salary&gt;①结果SELECT *FROM employeesWHERE salary&gt;(  SELECT salary  FROM employees  WHERE last_name = 'Abel');#案例2:返回job_id与141号员工相同,salary比143号员工多的员工 姓名,job_id 和工资#①查询141号员工的job_idSELECT job_idFROM employeesWHERE employee_id = 141;#②查询143号员工的salarySELECT salaryFROM employeesWHERE employee_id = 143;#③查询员工的姓名,job_id 和工资,要求job_id=①并且salary&gt;②SELECT last_name,job_id,salaryFROM employeesWHERE job_id = (  SELECT job_id  FROM employees  WHERE employee_id = 141) AND salary&gt;(  SELECT salary  FROM employees  WHERE employee_id = 143);#案例3:返回公司工资最少的员工的last_name,job_id和salary#①查询公司的 最低工资SELECT MIN(salary)FROM employees;#②查询last_name,job_id和salary,要求salary=①SELECT last_name,job_id,salaryFROM employeesWHERE salary=(  SELECT MIN(salary)  FROM employees);#案例4:查询最低工资大于50号部门最低工资的部门id和其最低工资#①查询50号部门的最低工资SELECT  MIN(salary)FROM employeesWHERE department_id = 50;#②查询每个部门的最低工资SELECT MIN(salary),department_idFROM employeesGROUP BY department_id;#③ 在②基础上筛选,满足min(salary)&gt;①SELECT MIN(salary),department_idFROM employeesGROUP BY department_idHAVING MIN(salary)&gt;(  SELECT  MIN(salary)  FROM employees  WHERE department_id = 50);#非法使用标量子查询SELECT MIN(salary),department_idFROM employeesGROUP BY department_idHAVING MIN(salary)&gt;(  SELECT  salary  FROM employees  WHERE department_id = 250);#2.列子查询(多行子查询)★#案例1:返回location_id是1400或1700的部门中的所有员工姓名#①查询location_id是1400或1700的部门编号SELECT DISTINCT department_idFROM departmentsWHERE location_id IN(1400,1700);#②查询员工姓名,要求部门号是①列表中的某一个SELECT last_nameFROM employeesWHERE department_id  &lt;&gt;ALL(  SELECT DISTINCT department_id  FROM departments  WHERE location_id IN(1400,1700));#案例2:返回其它工种中比job_id为'IT_PROG'工种任一工资低的员工的员工号、姓名、job_id 以及salary#①查询job_id为'IT_PROG'部门任一工资SELECT DISTINCT salaryFROM employeesWHERE job_id = 'IT_PROG';#②查询员工号、姓名、job_id 以及salary,salary&lt;(①)的任意一个SELECT last_name,employee_id,job_id,salaryFROM employeesWHERE salary&lt;ANY(  SELECT DISTINCT salary  FROM employees  WHERE job_id = 'IT_PROG') AND job_id&lt;&gt;'IT_PROG';#或SELECT last_name,employee_id,job_id,salaryFROM employeesWHERE salary&lt;(  SELECT MAX(salary)  FROM employees  WHERE job_id = 'IT_PROG') AND job_id&lt;&gt;'IT_PROG';#案例3:返回其它部门中比job_id为'IT_PROG'部门所有工资都低的员工   的员工号、姓名、job_id 以及salarySELECT last_name,employee_id,job_id,salaryFROM employeesWHERE salary&lt;ALL(  SELECT DISTINCT salary  FROM employees  WHERE job_id = 'IT_PROG') AND job_id&lt;&gt;'IT_PROG';#或SELECT last_name,employee_id,job_id,salaryFROM employeesWHERE salary&lt;(  SELECT MIN( salary)  FROM employees  WHERE job_id = 'IT_PROG') AND job_id&lt;&gt;'IT_PROG';#3、行子查询(结果集一行多列或多行多列)#案例:查询员工编号最小并且工资最高的员工信息SELECT * FROM employeesWHERE (employee_id,salary)=(  SELECT MIN(employee_id),MAX(salary)  FROM employees);#①查询最小的员工编号SELECT MIN(employee_id)FROM employees;#②查询最高工资SELECT MAX(salary)FROM employees;#③查询员工信息SELECT *FROM employeesWHERE employee_id=(  SELECT MIN(employee_id)  FROM employees)AND salary=(  SELECT MAX(salary)  FROM employees);#二、select后面/*仅仅支持标量子查询*/#案例:查询每个部门的员工个数SELECT d.*,(  SELECT COUNT(*)  FROM employees e  WHERE e.department_id = d.`department_id` ) 个数 FROM departments d; #案例2:查询员工号=102的部门名 SELECT (  SELECT department_name  FROM departments d  INNER JOIN employees e  ON d.department_id=e.department_id  WHERE e.employee_id=102) 部门名;#三、from后面/*将子查询结果充当一张表,要求必须起别名*/#案例:查询每个部门的平均工资的工资等级#①查询每个部门的平均工资SELECT AVG(salary),department_idFROM employeesGROUP BY department_id;SELECT * FROM job_grades;#②连接①的结果集和job_grades表,筛选条件平均工资 between lowest_sal and highest_salSELECT  ag_dep.*,g.`grade_level`FROM (  SELECT AVG(salary) ag,department_id  FROM employees  GROUP BY department_id) ag_depINNER JOIN job_grades gON ag_dep.ag BETWEEN lowest_sal AND highest_sal;#四、exists后面(相关子查询)/*语法:exists(完整的查询语句)结果:1或0*/SELECT EXISTS(SELECT employee_id FROM employees WHERE salary=300000);#案例1:查询有员工的部门名#inSELECT department_nameFROM departments dWHERE d.`department_id` IN(  SELECT department_id  FROM employees);#existsSELECT department_nameFROM departments dWHERE EXISTS(  SELECT *  FROM employees e  WHERE d.`department_id`=e.`department_id`);#案例2:查询没有女朋友的男神信息#inSELECT bo.*FROM boys boWHERE bo.id NOT IN(  SELECT boyfriend_id  FROM beauty);#existsSELECT bo.*FROM boys boWHERE NOT EXISTS(  SELECT boyfriend_id  FROM beauty b  WHERE bo.`id`=b.`boyfriend_id`);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#1. 查询和Zlotkey相同部门的员工姓名和工资#①查询Zlotkey的部门SELECT department_idFROM employeesWHERE last_name = 'Zlotkey';#②查询部门号=①的姓名和工资SELECT last_name,salaryFROM employeesWHERE department_id = (  SELECT department_id  FROM employees  WHERE last_name = 'Zlotkey');#2.查询工资比公司平均工资高的员工的员工号,姓名和工资。#①查询平均工资SELECT AVG(salary)FROM employees;#②查询工资&gt;①的员工号,姓名和工资。SELECT last_name,employee_id,salaryFROM employeesWHERE salary&gt;(  SELECT AVG(salary)  FROM employees);#3.查询各部门中工资比本部门平均工资高的员工的员工号, 姓名和工资#①查询各部门的平均工资SELECT AVG(salary),department_idFROM employeesGROUP BY department_id;#②连接①结果集和employees表,进行筛选SELECT employee_id,last_name,salary,e.department_idFROM employees eINNER JOIN (  SELECT AVG(salary) ag,department_id  FROM employees  GROUP BY department_id) ag_depON e.department_id = ag_dep.department_idWHERE salary&gt;ag_dep.ag ;#4. 查询和姓名中包含字母u的员工在相同部门的员工的员工号和姓名#①查询姓名中包含字母u的员工的部门SELECT  DISTINCT department_idFROM employeesWHERE last_name LIKE '%u%';#②查询部门号=①中的任意一个的员工号和姓名SELECT last_name,employee_idFROM employeesWHERE department_id IN(  SELECT  DISTINCT department_id  FROM employees  WHERE last_name LIKE '%u%');#5. 查询在部门的location_id为1700的部门工作的员工的员工号#①查询location_id为1700的部门SELECT DISTINCT department_idFROM departments WHERE location_id  = 1700;#②查询部门号=①中的任意一个的员工号SELECT employee_idFROM employeesWHERE department_id =ANY(  SELECT DISTINCT department_id  FROM departments   WHERE location_id  = 1700);#6.查询管理者是King的员工姓名和工资#①查询姓名为king的员工编号SELECT employee_idFROM employeesWHERE last_name  = 'K_ing';#②查询哪个员工的manager_id = ①SELECT last_name,salaryFROM employeesWHERE manager_id IN(  SELECT employee_id  FROM employees  WHERE last_name  = 'K_ing');#7.查询工资最高的员工的姓名,要求first_name和last_name显示为一列,列名为 姓.名#①查询最高工资SELECT MAX(salary)FROM employees;#②查询工资=①的姓.名SELECT CONCAT(first_name,last_name) "姓.名"FROM employeesWHERE salary=(  SELECT MAX(salary)  FROM employees);#子查询经典案例# 1. 查询工资最低的员工信息: last_name, salary#①查询最低的工资SELECT MIN(salary)FROM employees;#②查询last_name,salary,要求salary=①SELECT last_name,salaryFROM employeesWHERE salary=(  SELECT MIN(salary)  FROM employees);# 2. 查询平均工资最低的部门信息#方式一:#①各部门的平均工资SELECT AVG(salary),department_idFROM employeesGROUP BY department_id;#②查询①结果上的最低平均工资SELECT MIN(ag)FROM (  SELECT AVG(salary) ag,department_id  FROM employees  GROUP BY department_id) ag_dep;#③查询哪个部门的平均工资=②SELECT AVG(salary),department_idFROM employeesGROUP BY department_idHAVING AVG(salary)=(  SELECT MIN(ag)  FROM (    SELECT AVG(salary) ag,department_id    FROM employees    GROUP BY department_id  ) ag_dep);#④查询部门信息SELECT d.*FROM departments dWHERE d.`department_id`=(  SELECT department_id  FROM employees  GROUP BY department_id  HAVING AVG(salary)=(    SELECT MIN(ag)    FROM (      SELECT AVG(salary) ag,department_id      FROM employees      GROUP BY department_id    ) ag_dep  ));#方式二:#①各部门的平均工资SELECT AVG(salary),department_idFROM employeesGROUP BY department_id;#②求出最低平均工资的部门编号SELECT department_idFROM employeesGROUP BY department_idORDER BY AVG(salary) LIMIT 1;#③查询部门信息SELECT *FROM departmentsWHERE department_id=(  SELECT department_id  FROM employees  GROUP BY department_id  ORDER BY AVG(salary)   LIMIT 1);# 3. 查询平均工资最低的部门信息和该部门的平均工资#①各部门的平均工资SELECT AVG(salary),department_idFROM employeesGROUP BY department_id;#②求出最低平均工资的部门编号SELECT AVG(salary),department_idFROM employeesGROUP BY department_idORDER BY AVG(salary) LIMIT 1;#③查询部门信息SELECT d.*,agFROM departments dJOIN (  SELECT AVG(salary) ag,department_id  FROM employees  GROUP BY department_id  ORDER BY AVG(salary)   LIMIT 1) ag_depON d.`department_id`=ag_dep.department_id;# 4. 查询平均工资最高的 job 信息#①查询最高的job的平均工资SELECT AVG(salary),job_idFROM employeesGROUP BY job_idORDER BY AVG(salary) DESCLIMIT 1;#②查询job信息SELECT * FROM jobsWHERE job_id=(  SELECT job_id  FROM employees  GROUP BY job_id  ORDER BY AVG(salary) DESC  LIMIT 1);# 5. 查询平均工资高于公司平均工资的部门有哪些?#①查询平均工资SELECT AVG(salary)FROM employees;#②查询每个部门的平均工资SELECT AVG(salary),department_idFROM employeesGROUP BY department_id;#③筛选②结果集,满足平均工资&gt;①SELECT AVG(salary),department_idFROM employeesGROUP BY department_idHAVING AVG(salary)&gt;(  SELECT AVG(salary)  FROM employees);# 6. 查询出公司中所有 manager 的详细信息.#①查询所有manager的员工编号SELECT DISTINCT manager_idFROM employees;#②查询详细信息,满足employee_id=①SELECT *FROM employeesWHERE employee_id =ANY(  SELECT DISTINCT manager_id  FROM employees);# 7. 各个部门中 最高工资中最低的那个部门的 最低工资是多少#①查询各部门的最高工资中最低的部门编号SELECT department_idFROM employeesGROUP BY department_idORDER BY MAX(salary)LIMIT 1;#②查询①结果的那个部门的最低工资SELECT MIN(salary) ,department_idFROM employeesWHERE department_id=(  SELECT department_id  FROM employees  GROUP BY department_id  ORDER BY MAX(salary)  LIMIT 1);# 8. 查询平均工资最高的部门的 manager 的详细信息: last_name, department_id, email, salary#①查询平均工资最高的部门编号SELECT     department_id FROM    employees GROUP BY department_id ORDER BY AVG(salary) DESC LIMIT 1 ;#②将employees和departments连接查询,筛选条件是①    SELECT         last_name, d.department_id, email, salary     FROM        employees e         INNER JOIN departments d             ON d.manager_id = e.employee_id     WHERE d.department_id =         (SELECT             department_id         FROM            employees         GROUP BY department_id         ORDER BY AVG(salary) DESC         LIMIT 1) ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-分页查询"><a href="#2-8-分页查询" class="headerlink" title="2.8 分页查询"></a>2.8 分页查询</h3><p>一、应用场景<br>当要查询的条目数太多,一页显示不全<br>二、语法<br><code>select 查询列表</code><br><code>from 表</code><br><code>limit [offset,]size;</code><br>注意:<br>offset代表的是起始的条目索引,默认从0开始<br>size代表的是显示的条目数</p><p>公式:<br>假如要显示的页数为page,每一页条目数为size<br>select 查询列表<br>from 表<br><code>limit (page-1)*size,size;</code></p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#分页查询 ★/*应用场景:当要显示的数据,一页显示不全,需要分页提交sql请求语法:  select 查询列表  from 表  [join type join 表2  on 连接条件  where 筛选条件  group by 分组字段  having 分组后的筛选  order by 排序的字段]  limit [offset,]size;    offset要显示条目的起始索引(起始索引从0开始)  size 要显示的条目个数特点:  ①limit语句放在查询语句的最后  ②公式  要显示的页数 page,每页的条目数size    select 查询列表  from 表  limit (page-1)*size,size;    size=10  page    1 0  2   10  3 20*/#案例1:查询前五条员工信息SELECT * FROM  employees LIMIT 0,5;SELECT * FROM  employees LIMIT 5;#案例2:查询第11条——第25条SELECT * FROM  employees LIMIT 10,15;#案例3:有奖金的员工信息,并且工资较高的前10名显示出来SELECT     * FROM    employees WHERE commission_pct IS NOT NULL ORDER BY salary DESC LIMIT 10 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-9-联合查询"><a href="#2-9-联合查询" class="headerlink" title="2.9 联合查询"></a>2.9 联合查询</h3><p>一、含义<br>union:合并、联合,将多次查询结果合并成一个结果<br>二、语法<br>查询语句1<br><code>union [all]</code><br>查询语句2<br><code>union [all]</code><br><code>...</code></p><p>三、意义<br>1、将一条比较复杂的查询语句拆分成多条语句<br>2、适用于查询多个表的时候,查询的列基本是一致</p><p>四、特点<br>1、要求多条查询语句的查询列数必须一致<br>2、要求多条查询语句的查询的各列类型、顺序最好一致<br>3、union 去重,union all包含重复项</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#联合查询/*union 联合 合并:将多条查询语句的结果合并成一个结果语法:查询语句1union查询语句2union...应用场景:要查询的结果来自于多个表,且多个表没有直接的连接关系,但查询的信息一致时特点:★1、要求多条查询语句的查询列数是一致的！2、要求多条查询语句的查询的每一列的类型和顺序最好一致3、union关键字默认去重,如果使用union all 可以包含重复项*/#引入的案例:查询部门编号&gt;90或邮箱包含a的员工信息SELECT * FROM employees WHERE email LIKE '%a%' OR department_id&gt;90;SELECT * FROM employees  WHERE email LIKE '%a%'UNIONSELECT * FROM employees  WHERE department_id&gt;90;#案例:查询中国用户中男性的信息以及外国用户中年男性的用户信息SELECT id,cname FROM t_ca WHERE csex='男'UNION ALLSELECT t_id,tname FROM t_ua WHERE tGender='male';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-10-查询总结"><a href="#2-10-查询总结" class="headerlink" title="2.10 查询总结"></a>2.10 查询总结</h3><p>语法:</p><blockquote><p>select 查询列表    7<br>from 表1 别名       1<br>连接类型 join 表2   2<br>on 连接条件         3<br>where 筛选          4<br>group by 分组列表   5<br>having 筛选         6<br>order by排序列表    8<br>limit 起始条目索引,条目数;  9</p></blockquote><h2 id="3-DML语言"><a href="#3-DML语言" class="headerlink" title="3 DML语言"></a>3 DML语言</h2><h3 id="3-1-插入"><a href="#3-1-插入" class="headerlink" title="3.1 插入"></a>3.1 插入</h3><p>一、方式一<br>语法:<br><code>insert into 表名(字段名,...) values(值,...);</code><br>特点:<br>1、要求值的类型和字段的类型要一致或兼容<br>2、字段的个数和顺序不一定与原始表中的字段个数和顺序一致<br>但必须保证值和字段一一对应<br>3、假如表中有可以为null的字段,注意可以通过以下两种方式插入null值<br>①字段和值都省略<br>②字段写上,值使用null<br>4、字段和值的个数必须一致<br>5、字段名可以省略,默认所有列</p><p>二、方式二<br>语法:<br>insert into 表名 set 字段=值,字段=值,…;</p><p>两种方式 的区别:<br>1.方式一支持一次插入多行,语法如下:<br><code>insert into 表名[(字段名,..)] values(值,..),(值,...),...;</code><br>2.方式一支持子查询,语法如下:<br><code>insert into 表名</code><br>查询语句;</p><h3 id="3-2-修改"><a href="#3-2-修改" class="headerlink" title="3.2 修改"></a>3.2 修改</h3><p>一、修改单表的记录 ★<br>语法:<code>update 表名 set 字段=值,字段=值 [where 筛选条件];</code></p><p>二、修改多表的记录(补充)<br>语法:<br><code>update 表1 别名</code><br><code>left|right|inner join 表2 别名</code><br><code>on 连接条件</code><br><code>set 字段=值,字段=值</code><br><code>[where 筛选条件];</code></p><h3 id="3-3-删除"><a href="#3-3-删除" class="headerlink" title="3.3 删除"></a>3.3 删除</h3><p>方式一:使用delete<br>一、删除单表的记录★<br>语法:<code>delete from 表名 [where 筛选条件][limit 条目数]</code><br>二、级联删除(补充)<br>语法:<br><code>delete 别名1,别名2 from 表1 别名</code><br><code>inner|left|right join 表2 别名</code><br><code>on 连接条件</code><br><code> [where 筛选条件]</code></p><p>方式二:使用truncate<br>语法:truncate table 表名</p><p>两种方式的区别(面试题)★</p><p>1.truncate删除后,如果再插入,标识列从1开始<br>  delete删除后,如果再插入,标识列从断点开始<br>2.delete可以添加筛选条件<br>  truncate不可以添加筛选条件<br>3.truncate效率较高<br>4.truncate没有返回值<br>delete可以返回受影响的行数<br>5.truncate不可以回滚<br>delete可以回滚</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#DML语言/*数据操作语言:插入:insert修改:update删除:delete*/#一、插入语句#方式一:经典的插入/*语法:insert into 表名(列名,...) values(值1,...);*/SELECT * FROM beauty;#1.插入的值的类型要与列的类型一致或兼容INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)VALUES(13,'唐艺昕','女','1990-4-23','1898888888',NULL,2);#2.不可以为null的列必须插入值。可以为null的列如何插入值？#方式一:INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)VALUES(13,'唐艺昕','女','1990-4-23','1898888888',NULL,2);#方式二:INSERT INTO beauty(id,NAME,sex,phone)VALUES(15,'娜扎','女','1388888888');#3.列的顺序可以调换INSERT INTO beauty(NAME,sex,id,phone)VALUES('蒋欣','女',16,'110');#4.列数和值的个数必须一致INSERT INTO beauty(NAME,sex,id,phone)VALUES('关晓彤','女',17,'110');#5.可以省略列名,默认所有列,而且列的顺序和表中列的顺序一致INSERT INTO beautyVALUES(18,'张飞','男',NULL,'119',NULL,NULL);#方式二:/*语法:insert into 表名set 列名=值,列名=值,...*/INSERT INTO beautySET id=19,NAME='刘涛',phone='999';#两种方式pk ★#1、方式一支持插入多行,方式二不支持INSERT INTO beautyVALUES(23,'唐艺昕1','女','1990-4-23','1898888888',NULL,2),(24,'唐艺昕2','女','1990-4-23','1898888888',NULL,2),(25,'唐艺昕3','女','1990-4-23','1898888888',NULL,2);#2、方式一支持子查询,方式二不支持INSERT INTO beauty(id,NAME,phone)SELECT 26,'宋茜','11809866';INSERT INTO beauty(id,NAME,phone)SELECT id,boyname,'1234567'FROM boys WHERE id&lt;3;#二、修改语句/*1.修改单表的记录★语法:update 表名set 列=新值,列=新值,...where 筛选条件;2.修改多表的记录[补充]语法:sql92语法:update 表1 别名,表2 别名set 列=值,...where 连接条件and 筛选条件;sql99语法:update 表1 别名inner|left|right join 表2 别名on 连接条件set 列=值,...where 筛选条件;*/#1.修改单表的记录#案例1:修改beauty表中姓唐的女神的电话为13899888899UPDATE beauty SET phone = '13899888899'WHERE NAME LIKE '唐%';#案例2:修改boys表中id好为2的名称为张飞,魅力值 10UPDATE boys SET boyname='张飞',usercp=10WHERE id=2;#2.修改多表的记录#案例 1:修改张无忌的女朋友的手机号为114UPDATE boys boINNER JOIN beauty b ON bo.`id`=b.`boyfriend_id`SET b.`phone`='119',bo.`userCP`=1000WHERE bo.`boyName`='张无忌';#案例2:修改没有男朋友的女神的男朋友编号都为2号UPDATE boys boRIGHT JOIN beauty b ON bo.`id`=b.`boyfriend_id`SET b.`boyfriend_id`=2WHERE bo.`id` IS NULL;SELECT * FROM boys;#三、删除语句/*方式一:delete语法:1、单表的删除[★]delete from 表名 where 筛选条件2、多表的删除[补充]sql92语法:delete 表1的别名,表2的别名from 表1 别名,表2 别名where 连接条件and 筛选条件;sql99语法:delete 表1的别名,表2的别名from 表1 别名inner|left|right join 表2 别名 on 连接条件where 筛选条件;方式二:truncate语法:truncate table 表名;*/#方式一:delete#1.单表的删除#案例:删除手机号以9结尾的女神信息DELETE FROM beauty WHERE phone LIKE '%9';SELECT * FROM beauty;#2.多表的删除#案例:删除张无忌的女朋友的信息DELETE bFROM beauty bINNER JOIN boys bo ON b.`boyfriend_id` = bo.`id`WHERE bo.`boyName`='张无忌';#案例:删除黄晓明的信息以及他女朋友的信息DELETE b,boFROM beauty bINNER JOIN boys bo ON b.`boyfriend_id`=bo.`id`WHERE bo.`boyName`='黄晓明';#方式二:truncate语句#案例:将魅力值&gt;100的男神信息删除TRUNCATE TABLE boys ;#delete pk truncate[面试题★]/*1.delete 可以加where 条件,truncate不能加2.truncate删除,效率高一丢丢3.假如要删除的表中有自增长列,如果用delete删除后,再插入数据,自增长列的值从断点开始,而truncate删除后,再插入数据,自增长列的值从1开始。4.truncate删除没有返回值,delete删除有返回值5.truncate删除不能回滚,delete删除可以回滚.*/SELECT * FROM boys;DELETE FROM boys;TRUNCATE TABLE boys;INSERT INTO boys (boyname,usercp)VALUES('张飞',100),('刘备',100),('关云长',100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#1. 运行以下脚本创建表my_employeesUSE myemployees;CREATE TABLE my_employees(  Id INT(10),  First_name VARCHAR(10),  Last_name VARCHAR(10),  Userid VARCHAR(10),  Salary DOUBLE(10,2));CREATE TABLE users(  id INT,  userid VARCHAR(10),  department_id INT);#2. 显示表my_employees的结构DESC my_employees;#3. 向my_employees表中插入下列数据/*ID  FIRST_NAME  LAST_NAME USERID  SALARY1 patel   Ralph   Rpatel  8952 Dancs   Betty   Bdancs  8603 Biri    Ben   Bbiri 11004 Newman    Chad    Cnewman 7505 Ropeburn  Audrey    Aropebur  1550*/#方式一:INSERT INTO my_employeesVALUES(1,'patel','Ralph','Rpatel',895),(2,'Dancs','Betty','Bdancs',860),(3,'Biri','Ben','Bbiri',1100),(4,'Newman','Chad','Cnewman',750),(5,'Ropeburn','Audrey','Aropebur',1550);DELETE FROM my_employees;#方式二:INSERT INTO my_employeesSELECT 1,'patel','Ralph','Rpatel',895 UNIONSELECT 2,'Dancs','Betty','Bdancs',860 UNIONSELECT 3,'Biri','Ben','Bbiri',1100 UNIONSELECT 4,'Newman','Chad','Cnewman',750 UNIONSELECT 5,'Ropeburn','Audrey','Aropebur',1550;        #4.  向users表中插入数据/*1 Rpatel  102 Bdancs  103 Bbiri 204 Cnewman 305 Aropebur  40*/INSERT INTO usersVALUES(1,'Rpatel',10),(2,'Bdancs',10),(3,'Bbiri',20);#5.将3号员工的last_name修改为"drelxer"UPDATE my_employees SET last_name='drelxer' WHERE id = 3;#6.将所有工资少于900的员工的工资修改为1000UPDATE my_employees SET salary=1000 WHERE salary&lt;900;#7.将userid 为Bbiri的user表和my_employees表的记录全部删除DELETE u,eFROM users uJOIN my_employees e ON u.`userid`=e.`Userid`WHERE u.`userid`='Bbiri';#8.删除所有数据DELETE FROM my_employees;DELETE FROM users;#9.检查所作的修正SELECT * FROM my_employees;SELECT * FROM users;#10.清空表my_employeesTRUNCATE TABLE my_employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-DDL语言"><a href="#4-DDL语言" class="headerlink" title="4 DDL语言"></a>4 DDL语言</h2><h3 id="4-1-库的管理"><a href="#4-1-库的管理" class="headerlink" title="4.1 库的管理"></a>4.1 库的管理</h3><p>一、创建库<br><code>create database [if not exists] 库名[ character set 字符集名];</code><br>二、修改库<br><code>alter database 库名 character set 字符集名;</code><br>三、删除库<br><code>drop database [if exists] 库名;</code></p><h3 id="4-2-表的管理"><a href="#4-2-表的管理" class="headerlink" title="4.2 表的管理"></a>4.2 表的管理</h3><p>一、创建表 ★<br><code>create table [if not exists] 表名(</code><br><code>  字段名 字段类型 [约束],</code><br><code>  字段名 字段类型 [约束],</code><br><code>  ...</code><br><code> 字段名 字段类型 [约束]</code><br><code>)</code><br>二、修改表</p><p>1.添加列<br><code>alter table 表名 add column 列名 类型 [first|after 字段名];</code><br>2.修改列的类型或约束<br><code>alter table 表名 modify column 列名 新类型 [新约束];</code><br>3.修改列名<br><code>alter table 表名 change column 旧列名 新列名 类型;</code><br>4 .删除列<br><code>alter table 表名 drop column 列名;</code><br>5.修改表名<br><code>alter table 表名 rename [to] 新表名;</code></p><p>三、删除表<br><code>drop table[if exists] 表名;</code></p><p>四、复制表<br>1、复制表的结构<br><code>create table 表名 like 旧表;</code><br>2、复制表的结构+数据<br>create table 表名<br><code>select 查询列表 from 旧表[where 筛选];</code></p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#DDL/*数据定义语言库和表的管理一、库的管理创建、修改、删除二、表的管理创建、修改、删除创建: create修改: alter删除: drop*/#一、库的管理#1、库的创建/*语法:create database  [if not exists]库名;*/#案例:创建库BooksCREATE DATABASE IF NOT EXISTS books ;#2、库的修改#RENAME DATABASE books TO 新库名;#更改库的字符集ALTER DATABASE books CHARACTER SET gbk;#3、库的删除DROP DATABASE IF EXISTS books;#二、表的管理#1.表的创建 ★/*语法:create table 表名(  列名 列的类型[(长度) 约束],  列名 列的类型[(长度) 约束],  列名 列的类型[(长度) 约束],  ...  列名 列的类型[(长度) 约束])*/#案例:创建表BookCREATE TABLE book(  id INT,#编号  bName VARCHAR(20),#图书名  price DOUBLE,#价格  authorId  INT,#作者编号  publishDate DATETIME#出版日期);DESC book;#案例:创建表authorCREATE TABLE IF NOT EXISTS author(  id INT,  au_name VARCHAR(20),  nation VARCHAR(10));DESC author;#2.表的修改/*语法alter table 表名 add|drop|modify|change column 列名 [列类型 约束];*/#①修改列名ALTER TABLE book CHANGE COLUMN publishdate pubDate DATETIME;#②修改列的类型或约束ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP;#③添加新列ALTER TABLE author ADD COLUMN annual DOUBLE; #④删除列ALTER TABLE book_author DROP COLUMN  annual;#⑤修改表名ALTER TABLE author RENAME TO book_author;DESC book;#3.表的删除DROP TABLE IF EXISTS book_author;SHOW TABLES;#通用的写法:/*DROP DATABASE IF EXISTS 旧库名;CREATE DATABASE 新库名;DROP TABLE IF EXISTS 旧表名;CREATE TABLE  表名();*/#4.表的复制INSERT INTO author VALUES(1,'村上春树','日本'),(2,'莫言','中国'),(3,'冯唐','中国'),(4,'金庸','中国');SELECT * FROM Author;SELECT * FROM copy2;#1.仅仅复制表的结构CREATE TABLE copy LIKE author;#2.复制表的结构+数据CREATE TABLE copy2 SELECT * FROM author;#只复制部分数据CREATE TABLE copy3SELECT id,au_nameFROM author WHERE nation='中国';#仅仅复制某些字段CREATE TABLE copy4 SELECT id,au_nameFROM authorWHERE 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#1. 创建表dept1/*NAME  NULL? TYPEid    INT(7)NAME    VARCHAR(25)*/USE test;CREATE TABLE dept1(  id INT(7),  NAME VARCHAR(25));#2. 将表departments中的数据插入新表dept2中CREATE TABLE dept2SELECT department_id,department_nameFROM myemployees.departments;#3. 创建表emp5/*NAME  NULL? TYPEid    INT(7)First_name  VARCHAR (25)Last_name VARCHAR(25)Dept_id   INT(7)*/CREATE TABLE emp5(id INT(7),first_name VARCHAR(25),last_name VARCHAR(25),dept_id INT(7));#4. 将列Last_name的长度增加到50ALTER TABLE emp5 MODIFY COLUMN last_name VARCHAR(50);#5. 根据表employees创建employees2CREATE TABLE employees2 LIKE myemployees.employees;#6. 删除表emp5DROP TABLE IF EXISTS emp5;#7. 将表employees2重命名为emp5ALTER TABLE employees2 RENAME TO emp5;#8.在表dept和emp5中添加新列test_column,并检查所作的操作ALTER TABLE emp5 ADD COLUMN test_column INT;#9.直接删除表emp5中的列 dept_idDESC emp5;ALTER TABLE emp5 DROP COLUMN test_column;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-数据类型"><a href="#4-3-数据类型" class="headerlink" title="4.3 数据类型"></a>4.3 数据类型</h3><p>一、数值型<br>1、整型<br>tinyint、smallint、mediumint、int/integer、bigint<br>1         2        3          4            8</p><p>特点:<br>①都可以设置无符号和有符号,默认有符号,通过unsigned设置无符号<br>②如果超出了范围,会报out or range异常,插入临界值<br>③长度可以不指定,默认会有一个长度<br>长度代表显示的最大宽度,如果不够则左边用0填充,但需要搭配zerofill,并且默认变为无符号整型</p><p>2、浮点型<br>定点数:decimal(M,D)<br>浮点数:</p><ul><li>float(M,D)   4</li><li>double(M,D)  8</li></ul><p>特点:<br>①M代表整数部位+小数部位的个数,D代表小数部位<br>②如果超出范围,则报out or range异常,并且插入临界值<br>③M和D都可以省略,但对于定点数,M默认为10,D默认为0<br>④如果精度要求较高,则优先考虑使用定点数</p><p>二、字符型<br>char、varchar、binary、varbinary、enum、set、text、blob</p><p>char:固定长度的字符,写法为char(M),最大长度不能超过M,其中M可以省略,默认为1<br>varchar:可变长度的字符,写法为varchar(M),最大长度不能超过M,其中M不可以省略</p><p>三、日期型<br>year年<br>date日期<br>time时间<br>datetime 日期+时间          8<br>timestamp 日期+时间         4   比较容易受时区、语法模式、版本的影响,更能反映当前时区的真实时间</p><p>代码:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#常见的数据类型/*数值型:  整型  小数:    定点数    浮点数字符型:  较短的文本:char、varchar  较长的文本:text、blob(较长的二进制数据)日期型:*/#一、整型/*分类:tinyint、smallint、mediumint、int/integer、bigint1      2       3        4          8特点:① 如果不设置无符号还是有符号,默认是有符号,如果想设置无符号,需要添加unsigned关键字② 如果插入的数值超出了整型的范围,会报out of range异常,并且插入临界值③ 如果不设置长度,会有默认的长度长度代表了显示的最大宽度,如果不够会用0在左边填充,但必须搭配zerofill使用！*/#1.如何设置无符号和有符号DROP TABLE IF EXISTS tab_int;CREATE TABLE tab_int(  t1 INT(7) ZEROFILL,  t2 INT(7) ZEROFILL );DESC tab_int;INSERT INTO tab_int VALUES(-123456);INSERT INTO tab_int VALUES(-123456,-123456);INSERT INTO tab_int VALUES(2147483648,4294967296);INSERT INTO tab_int VALUES(123,123);SELECT * FROM tab_int;#二、小数/*分类:1.浮点型float(M,D)double(M,D)2.定点型dec(M,D)decimal(M,D)特点:①M:整数部位+小数部位D:小数部位如果超过范围,则插入临界值②M和D都可以省略如果是decimal,则M默认为10,D默认为0如果是float和double,则会根据插入的数值的精度来决定精度③定点型的精确度较高,如果要求插入数值的精度较高如货币运算等则考虑使用*/#测试M和DDROP TABLE tab_float;CREATE TABLE tab_float(  f1 FLOAT,  f2 DOUBLE,  f3 DECIMAL);SELECT * FROM tab_float;DESC tab_float;INSERT INTO tab_float VALUES(123.4523,123.4523,123.4523);INSERT INTO tab_float VALUES(123.456,123.456,123.456);INSERT INTO tab_float VALUES(123.4,123.4,123.4);INSERT INTO tab_float VALUES(1523.4,1523.4,1523.4);#原则:/*所选择的类型越简单越好,能保存数值的类型越小越好*/#三、字符型/*较短的文本:charvarchar其他:binary和varbinary用于保存较短的二进制enum用于保存枚举set用于保存集合较长的文本:textblob(较大的二进制)特点:      写法    M的意思                      特点        空间的耗费 效率char  char(M)   最大的字符数,可以省略,默认为1    固定长度的字符   比较耗费  高varchar varchar(M)  最大的字符数,不可以省略        可变长度的字符   比较节省  低*/CREATE TABLE tab_char(  c1 ENUM('a','b','c'));INSERT INTO tab_char VALUES('a');INSERT INTO tab_char VALUES('b');INSERT INTO tab_char VALUES('c');INSERT INTO tab_char VALUES('m');#超出范围INSERT INTO tab_char VALUES('A');SELECT * FROM tab_set;CREATE TABLE tab_set(  s1 SET('a','b','c','d'));INSERT INTO tab_set VALUES('a');INSERT INTO tab_set VALUES('A,B');INSERT INTO tab_set VALUES('a,c,d');#四、日期型/*分类:date只保存日期time 只保存时间year只保存年datetime保存日期+时间timestamp保存日期+时间特点:      字节    范围        时区等的影响datetime  8     1000——9999      不受timestamp 4     1970-2038     受*/CREATE TABLE tab_date(  t1 DATETIME,  t2 TIMESTAMP);INSERT INTO tab_date VALUES(NOW(),NOW());SELECT * FROM tab_date;SHOW VARIABLES LIKE 'time_zone';SET time_zone='+9:00';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-常见的约束"><a href="#4-4-常见的约束" class="headerlink" title="4.4 常见的约束"></a>4.4 常见的约束</h3><p>一、常见的约束<br>NOT NULL:非空,该字段的值必填<br>UNIQUE:唯一,该字段的值不可重复<br>DEFAULT:默认,该字段的值不用手动插入有默认值<br>CHECK:检查,mysql不支持<br>PRIMARY KEY:主键,该字段的值不可重复并且非空  unique+not null<br>FOREIGN KEY:外键,该字段的值引用了另外的表的字段</p><p>主键和唯一<br>1、区别:<br>①、一个表至多有一个主键,但可以有多个唯一<br>②、主键不允许为空,唯一可以为空<br>2、相同点<br>都具有唯一性<br>都支持组合键,但不推荐<br>外键:<br>1、用于限制两个表的关系,从表的字段值引用了主表的某字段值<br>2、外键列和主表的被引用列要求类型一致,意义一样,名称无要求<br>3、主表的被引用列要求是一个key(一般就是主键)<br>4、插入数据,先插入主表<br>删除数据,先删除从表<br>可以通过以下两种方式来删除主表的记录<br>#方式一:级联删除<br><code>ALTER TABLE stuinfo ADD CONSTRAINT fk_stu_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE CASCADE;</code></p><p>#方式二:级联置空<br><code>ALTER TABLE stuinfo ADD CONSTRAINT fk_stu_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE SET NULL;</code></p><p>二、创建表时添加约束<br><code>create table 表名(</code><br><code>  字段名 字段类型 not null,#非空</code><br><code>  字段名 字段类型 primary key,#主键</code><br><code>  字段名 字段类型 unique,#唯一</code><br><code>  字段名 字段类型 default 值,#默认</code><br><code>  constraint 约束名 foreign key(字段名) references 主表(被引用列)</code><br><code>)</code><br>注意:</p><table><thead><tr><th></th><th>支持类型</th><th>可以起约束名</th></tr></thead><tbody><tr><td>列级约束</td><td>除了外键</td><td>不可以</td></tr><tr><td>表级约束</td><td>除了非空和默认</td><td>可以,但对主键无效</td></tr></tbody></table><p>列级约束可以在一个字段上追加多个,中间用空格隔开,没有顺序要求</p><p>三、修改表时添加或删除约束<br>1、非空<br>添加非空<br><code>alter table 表名 modify column 字段名 字段类型 not null;</code><br>删除非空<br><code>alter table 表名 modify column 字段名 字段类型 ;</code></p><p>2、默认<br>添加默认<br><code>alter table 表名 modify column 字段名 字段类型 default 值;</code><br>删除默认<br><code>alter table 表名 modify column 字段名 字段类型 ;</code><br>3、主键<br>添加主键<br><code>alter table 表名 add[ constraint 约束名] primary key(字段名);</code><br>删除主键<br><code>alter table 表名 drop primary key;</code></p><p>4、唯一<br>添加唯一<br><code>alter table 表名 add[ constraint 约束名] unique(字段名);</code><br>删除唯一<br><code>alter table 表名 drop index 索引名;</code><br>5、外键<br>添加外键<br><code>alter table 表名 add[ constraint 约束名] foreign key(字段名) references 主表(被引用列);</code><br>删除外键<br><code>alter table 表名 drop foreign key 约束名;</code></p><p>四、自增长列<br>特点:<br>1、不用手动插入值,可以自动提供序列值,默认从1开始,步长为1<br>auto_increment_increment<br>如果要更改起始值:手动插入值<br>如果要更改步长:更改系统变量<br>set auto_increment_increment=值;<br>2、一个表至多有一个自增长列<br>3、自增长列只能支持数值型<br>4、自增长列必须为一个key</p><p>一、创建表时设置自增长列<br><code>create table 表(</code><br><code>  字段名 字段类型 约束 auto_increment</code><br><code>)</code><br>二、修改表时设置自增长列<br><code>alter table 表 modify column 字段名 字段类型 约束 auto_increment</code><br>三、删除自增长列<br><code>alter table 表 modify column 字段名 字段类型 约束</code></p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#常见约束/*含义:一种限制,用于限制表中的数据,为了保证表中的数据的准确和可靠性分类:六大约束  NOT NULL:非空,用于保证该字段的值不能为空  比如姓名、学号等  DEFAULT:默认,用于保证该字段有默认值  比如性别  PRIMARY KEY:主键,用于保证该字段的值具有唯一性,并且非空  比如学号、员工编号等  UNIQUE:唯一,用于保证该字段的值具有唯一性,可以为空  比如座位号  CHECK:检查约束[mysql中不支持]  比如年龄、性别  FOREIGN KEY:外键,用于限制两个表的关系,用于保证该字段的值必须来自于主表的关联列的值    在从表添加外键约束,用于引用主表中某列的值  比如学生表的专业编号,员工表的部门编号,员工表的工种编号  添加约束的时机:  1.创建表时  2.修改表时  约束的添加分类:  列级约束:    六大约束语法上都支持,但外键约束没有效果      表级约束:    除了非空、默认,其他的都支持    主键和唯一的大对比:    保证唯一性  是否允许为空    一个表中可以有多少个    是否允许组合  主键 √      ×       至多有1个             √,但不推荐  唯一 √      √       可以有多个           √,但不推荐外键:  1、要求在从表设置外键关系  2、从表的外键列的类型和主表的关联列的类型要求一致或兼容,名称无要求  3、主表的关联列必须是一个key(一般是主键或唯一)  4、插入数据时,先插入主表,再插入从表  删除数据时,先删除从表,再删除主表*//*CREATE TABLE 表名(  字段名 字段类型 列级约束,  字段名 字段类型,  表级约束)*/CREATE DATABASE students;#一、创建表时添加约束#1.添加列级约束/*语法:直接在字段名和类型后面追加 约束类型即可。只支持:默认、非空、主键、唯一*/USE students;DROP TABLE stuinfo;CREATE TABLE stuinfo(  id INT PRIMARY KEY,#主键  stuName VARCHAR(20) NOT NULL UNIQUE,#非空  gender CHAR(1) CHECK(gender='男' OR gender ='女'),#检查  seat INT UNIQUE,#唯一  age INT DEFAULT  18,#默认约束  majorId INT REFERENCES major(id)#外键);CREATE TABLE major(  id INT PRIMARY KEY,  majorName VARCHAR(20));#查看stuinfo中的所有索引,包括主键、外键、唯一SHOW INDEX FROM stuinfo;#2.添加表级约束/*语法:在各个字段的最下面 [constraint 约束名] 约束类型(字段名) */DROP TABLE IF EXISTS stuinfo;CREATE TABLE stuinfo(  id INT,  stuname VARCHAR(20),  gender CHAR(1),  seat INT,  age INT,  majorid INT,  CONSTRAINT pk PRIMARY KEY(id),#主键  CONSTRAINT uq UNIQUE(seat),#唯一键  CONSTRAINT ck CHECK(gender ='男' OR gender  = '女'),#检查  CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键);SHOW INDEX FROM stuinfo;#通用的写法:★CREATE TABLE IF NOT EXISTS stuinfo(  id INT PRIMARY KEY,  stuname VARCHAR(20),  sex CHAR(1),  age INT DEFAULT 18,  seat INT UNIQUE,  majorid INT,  CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id));#二、修改表时添加约束/*1、添加列级约束alter table 表名 modify column 字段名 字段类型 新约束;2、添加表级约束alter table 表名 add [constraint 约束名] 约束类型(字段名) [外键的引用];*/DROP TABLE IF EXISTS stuinfo;CREATE TABLE stuinfo(  id INT,  stuname VARCHAR(20),  gender CHAR(1),  seat INT,  age INT,  majorid INT);DESC stuinfo;#1.添加非空约束ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20)  NOT NULL;#2.添加默认约束ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;#3.添加主键#①列级约束ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;#②表级约束ALTER TABLE stuinfo ADD PRIMARY KEY(id);#4.添加唯一#①列级约束ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;#②表级约束ALTER TABLE stuinfo ADD UNIQUE(seat);#5.添加外键ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id); #三、修改表时删除约束#1.删除非空约束ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;#2.删除默认约束ALTER TABLE stuinfo MODIFY COLUMN age INT ;#3.删除主键ALTER TABLE stuinfo DROP PRIMARY KEY;#4.删除唯一ALTER TABLE stuinfo DROP INDEX seat;#5.删除外键ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;SHOW INDEX FROM stuinfo;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#1.向表emp2的id列中添加PRIMARY KEY约束(my_emp_id_pk)ALTER TABLE emp2 MODIFY COLUMN id INT PRIMARY KEY;ALTER TABLE emp2 ADD CONSTRAINT my_emp_id_pk PRIMARY KEY(id);#2. 向表dept2的id列中添加PRIMARY KEY约束(my_dept_id_pk)#3. 向表emp2中添加列dept_id,并在其中定义FOREIGN KEY约束,与之相关联的列是dept2表中的id列。ALTER TABLE emp2 ADD COLUMN dept_id INT;ALTER TABLE emp2 ADD CONSTRAINT fk_emp2_dept2 FOREIGN KEY(dept_id) REFERENCES dept2(id);/*          位置           支持的约束类型              是否可以起约束名列级约束: 列的后面       语法都支持,但外键没有效果   不可以表级约束: 所有列的下面    默认和非空不支持,其他支持   可以(主键没有效果)*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-标识列"><a href="#4-5-标识列" class="headerlink" title="4.5 标识列"></a>4.5 标识列</h3><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#标识列/*又称为自增长列含义:可以不用手动的插入值,系统提供默认的序列值特点:1、标识列必须和主键搭配吗？不一定,但要求是一个key2、一个表可以有几个标识列？至多一个！3、标识列的类型只能是数值型4、标识列可以通过 SET auto_increment_increment=3;设置步长可以通过 手动插入值,设置起始值*/#一、创建表时设置标识列DROP TABLE IF EXISTS tab_identity;CREATE TABLE tab_identity(  id INT  PRIMARY KEY AUTO_INCREMENT,  NAME VARCHAR(20));TRUNCATE TABLE tab_identity;INSERT INTO tab_identity(id,NAME) VALUES(NULL,'john');INSERT INTO tab_identity(NAME) VALUES('lucy');SELECT * FROM tab_identity;SHOW VARIABLES LIKE '%auto_increment%';SET auto_increment_increment=3;# 二、 修改表时设置标识列alter table tab_identity modify column id int primary key auto_increment;# 三、 修改表时删除标识列alter table tab_identity modify column id int;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-TCL语言"><a href="#5-TCL语言" class="headerlink" title="5 TCL语言"></a>5 TCL语言</h2><h3 id="5-1-事务"><a href="#5-1-事务" class="headerlink" title="5.1 事务"></a>5.1 事务</h3><p>事务:</p><blockquote><p>事务由单独单元的一个或多个SQL语句组成,在这个单元中,每个MySQL语句是相互依赖的。而整个单独单元作为一个不可分割的整体,如果单元中某条SQL语句一旦执行失败或产生错误,整个单元将会回滚。所有受到影响的数据将返回到事物开始以前的状态;如果单元中的所有SQL语句均执行成功,则事物被顺利执行。</p></blockquote><p>一、含义<br>事务:一条或多条sql语句组成一个执行单位,一组sql语句要么都执行要么都不执行<br>二、特点(ACID)<br>A 原子性:一个事务是不可再分割的整体,要么都执行要么都不执行<br>C 一致性:一个事务可以使数据从一个一致状态切换到另外一个一致的状态<br>I 隔离性:一个事务不受其他事务的干扰,多个事务互相隔离的<br>D 持久性:一个事务一旦提交了,则永久的持久化到本地</p><p>三、事务的使用步骤 ★<br>了解:<br>隐式(自动)事务:没有明显的开启和结束,本身就是一条事务可以自动提交,比如insert、update、delete<br>显式事务:具有明显的开启和结束</p><p>使用显式事务:<br>①开启事务<br>set autocommit=0;<br>start transaction;#可以省略</p><p>②编写一组逻辑sql语句<br>注意:sql语句支持的是insert、update、delete</p><p>设置回滚点:<br>savepoint 回滚点名;</p><p>③结束事务<br>提交:commit;<br>回滚:rollback;<br>回滚到指定的地方:rollback to 回滚点名;<br>四、并发事务<br>1、事务的并发问题是如何发生的？<br>多个事务 同时 操作 同一个数据库的相同数据时<br>2、并发问题都有哪些？<br>脏读:一个事务读取了其他事务还没有提交的数据,读到的是其他事务”更新”的数据<br>不可重复读:一个事务多次读取,结果不一样<br>幻读:一个事务读取了其他事务还没有提交的数据,只是读到的是 其他事务”插入”的数据<br>3、如何解决并发问题<br>通过设置隔离级别来解决并发问题<br>4、隔离级别</p><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted:读未提交</td><td>×</td><td>×</td><td>×</td></tr><tr><td>read committed:读已提交</td><td>√</td><td>×</td><td>×</td></tr><tr><td>repeatable read:可重复读</td><td>√</td><td>√</td><td>×</td></tr><tr><td>serializable:串行化</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#TCL/*Transaction Control Language 事务控制语言事务:一个或一组sql语句组成一个执行单元,这个执行单元要么全部执行,要么全部不执行。案例:转账张三丰  1000郭襄  1000update 表 set 张三丰的余额=500 where name='张三丰'意外update 表 set 郭襄的余额=1500 where name='郭襄'事务的特性:ACID原子性:一个事务不可再分割,要么都执行要么都不执行一致性:一个事务执行会使数据从一个一致状态切换到另外一个一致状态隔离性:一个事务的执行不受其他事务的干扰持久性:一个事务一旦提交,则会永久的改变数据库的数据.事务的创建隐式事务:事务没有明显的开启和结束的标记比如insert、update、delete语句delete from 表 where id =1;显式事务:事务具有明显的开启和结束的标记前提:必须先设置自动提交功能为禁用set autocommit=0;步骤1:开启事务set autocommit=0;start transaction;可选的步骤2:编写事务中的sql语句(select insert update delete)语句1;语句2;...步骤3:结束事务commit;提交事务rollback;回滚事务savepoint 节点名;设置保存点事务的隔离级别:                  脏读      不可重复读 幻读read uncommitted:√              √     √read committed:  ×              √     √repeatable read: ×              ×     √serializable      ×              ×     ×mysql中默认 第三个隔离级别 repeatable readoracle中默认第二个隔离级别 read committed查看隔离级别select @@tx_isolation;设置隔离级别set session|global transaction isolation level 隔离级别;开启事务的语句;update 表 set 张三丰的余额=500 where name='张三丰'update 表 set 郭襄的余额=1500 where name='郭襄' 结束事务的语句;*/SHOW VARIABLES LIKE 'autocommit';SHOW ENGINES;#查看存储引擎#1.演示事务的使用步骤#开启事务SET autocommit=0;START TRANSACTION;#编写一组事务的语句UPDATE account SET balance = 1000 WHERE username='张无忌';UPDATE account SET balance = 1000 WHERE username='赵敏';#结束事务ROLLBACK;#commit;SELECT * FROM account;#2.演示事务对于delete和truncate的处理的区别SET autocommit=0;START TRANSACTION;DELETE FROM account;ROLLBACK;#3.演示savepoint 的使用SET autocommit=0;START TRANSACTION;DELETE FROM account WHERE id=25;SAVEPOINT a;#设置保存点DELETE FROM account WHERE id=28;ROLLBACK TO a;#回滚到保存点SELECT * FROM account;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6 其他"></a>6 其他</h2><h3 id="6-1-视图"><a href="#6-1-视图" class="headerlink" title="6.1 视图"></a>6.1 视图</h3><p>一、含义<br>mysql5.1版本出现的新特性,本身是一个虚拟表,它的数据来自于表,通过执行时动态生成。<br>好处:<br>1、简化sql语句<br>2、提高了sql的重用性<br>3、保护基表的数据,提高了安全性<br>二、创建<br><code>create view 视图名</code><br><code>as</code><br><code>查询语句;</code></p><p>三、修改<br>方式一:<br><code>create or replace view 视图名</code><br><code>as</code><br><code>查询语句;</code><br>方式二:<br><code>alter view 视图名</code><br><code>as</code><br><code>查询语句;</code></p><p>四、删除<br><code>drop view 视图1,视图2,...;</code><br>五、查看<br><code>desc 视图名;</code><br><code>show create view 视图名;</code><br>六、使用<br>1.插入<br><code>insert</code><br>2.修改<br><code>update</code><br>3.删除<br><code>delete</code><br>4.查看<br><code>select</code><br>注意:视图一般用于查询的,而不是更新的,所以具备以下特点的视图都不允许更新<br>①包含分组函数、group by、distinct、having、union、<br>②join<br>③常量视图<br>④where后的子查询用到了from中的表<br>⑤用到了不可更新的视图</p><p>七、视图和表的对比</p><table><thead><tr><th></th><th>关键字</th><th>是否占用物理空间</th><th>使用</th></tr></thead><tbody><tr><td>视图</td><td>view</td><td>占用较小,只保存sql逻辑</td><td>一般用于查询</td></tr><tr><td>表</td><td>table</td><td>保存实际的数据</td><td>增删改查</td></tr></tbody></table><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#视图/*含义：虚拟表，和普通表一样使用mysql5.1版本出现的新特性，是通过表动态生成的数据比如：舞蹈班和普通班级的对比  创建语法的关键字  是否实际占用物理空间  使用视图  create view   只是保存了sql逻辑  增删改查，只是一般不能增删改表   create table  保存了数据       增删改查*/#案例：查询姓张的学生名和专业名SELECT stuname,majornameFROM stuinfo sINNER JOIN major m ON s.`majorid`= m.`id`WHERE s.`stuname` LIKE '张%';CREATE VIEW v1ASSELECT stuname,majornameFROM stuinfo sINNER JOIN major m ON s.`majorid`= m.`id`;SELECT * FROM v1 WHERE stuname LIKE '张%';#一、创建视图/*语法：create view 视图名as查询语句;*/USE myemployees;#1.查询姓名中包含a字符的员工名、部门名和工种信息#①创建CREATE VIEW myv1ASSELECT last_name,department_name,job_titleFROM employees eJOIN departments d ON e.department_id  = d.department_idJOIN jobs j ON j.job_id  = e.job_id;#②使用SELECT * FROM myv1 WHERE last_name LIKE '%a%';#2.查询各部门的平均工资级别#①创建视图查看每个部门的平均工资CREATE VIEW myv2ASSELECT AVG(salary) ag,department_idFROM employeesGROUP BY department_id;#②使用SELECT myv2.`ag`,g.grade_levelFROM myv2JOIN job_grades gON myv2.`ag` BETWEEN g.`lowest_sal` AND g.`highest_sal`;#3.查询平均工资最低的部门信息SELECT * FROM myv2 ORDER BY ag LIMIT 1;#4.查询平均工资最低的部门名和工资CREATE VIEW myv3ASSELECT * FROM myv2 ORDER BY ag LIMIT 1;SELECT d.*,m.agFROM myv3 mJOIN departments dON m.`department_id`=d.`department_id`;#二、视图的修改#方式一：/*create or replace view  视图名as查询语句;*/SELECT * FROM myv3;CREATE OR REPLACE VIEW myv3ASSELECT AVG(salary),job_idFROM employeesGROUP BY job_id;#方式二：/*语法：alter view 视图名as 查询语句;*/ALTER VIEW myv3ASSELECT * FROM employees;#三、删除视图/*语法：drop view 视图名,视图名,...;*/DROP VIEW emp_v1,emp_v2,myv3;#四、查看视图DESC myv3;SHOW CREATE VIEW myv3;#五、视图的更新CREATE OR REPLACE VIEW myv1ASSELECT last_name,email,salary*12*(1+IFNULL(commission_pct,0)) "annual salary"FROM employees;CREATE OR REPLACE VIEW myv1ASSELECT last_name,emailFROM employees;SELECT * FROM myv1;SELECT * FROM employees;#1.插入INSERT INTO myv1 VALUES('张飞','zf@qq.com');#2.修改UPDATE myv1 SET last_name = '张无忌' WHERE last_name='张飞';#3.删除DELETE FROM myv1 WHERE last_name = '张无忌';#具备以下特点的视图不允许更新#①包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union allCREATE OR REPLACE VIEW myv1ASSELECT MAX(salary) m,department_idFROM employeesGROUP BY department_id;SELECT * FROM myv1;#更新UPDATE myv1 SET m=9000 WHERE department_id=10;#②常量视图CREATE OR REPLACE VIEW myv2ASSELECT 'john' NAME;SELECT * FROM myv2;#更新UPDATE myv2 SET NAME='lucy';#③Select中包含子查询CREATE OR REPLACE VIEW myv3ASSELECT department_id,(SELECT MAX(salary) FROM employees) 最高工资FROM departments;#更新SELECT * FROM myv3;UPDATE myv3 SET 最高工资=100000;#④joinCREATE OR REPLACE VIEW myv4ASSELECT last_name,department_nameFROM employees eJOIN departments dON e.department_id  = d.department_id;#更新SELECT * FROM myv4;UPDATE myv4 SET last_name  = '张飞' WHERE last_name='Whalen';INSERT INTO myv4 VALUES('陈真','xxxx');#⑤from一个不能更新的视图CREATE OR REPLACE VIEW myv5ASSELECT * FROM myv3;#更新SELECT * FROM myv5;UPDATE myv5 SET 最高工资=10000 WHERE department_id=60;#⑥where子句的子查询引用了from子句中的表CREATE OR REPLACE VIEW myv6ASSELECT last_name,email,salaryFROM employeesWHERE employee_id IN(  SELECT  manager_id  FROM employees  WHERE manager_id IS NOT NULL);#更新SELECT * FROM myv6;UPDATE myv6 SET salary=10000 WHERE last_name = 'k_ing';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#一、创建视图emp_v1,要求查询电话号码以‘011’开头的员工姓名和工资、邮箱CREATE OR REPLACE VIEW emp_v1ASSELECT last_name,salary,emailFROM employeesWHERE phone_number LIKE '011%';#二、创建视图emp_v2，要求查询部门的最高工资高于12000的部门信息CREATE OR REPLACE VIEW emp_v2ASSELECT MAX(salary) mx_dep,department_idFROM employeesGROUP BY department_idHAVING MAX(salary)&gt;12000;SELECT d.*,m.mx_depFROM departments dJOIN emp_v2 mON m.department_id = d.`department_id`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-变量"><a href="#6-2-变量" class="headerlink" title="6.2 变量"></a>6.2 变量</h3><p>分类<br>一、系统变量<br>说明:变量由系统提供的,不用自定义<br>语法:<br>①查看系统变量<br><code>show [global|session ]variables like '';</code> 如果没有显式声明global还是session,则默认是session<br>②查看指定的系统变量的值<br><code>select @@[global|session].变量名;</code> 如果没有显式声明global还是session,则默认是session<br>③为系统变量赋值<br>方式一:<br><code>set [global|session ] 变量名=值;</code> 如果没有显式声明global还是session,则默认是session<br>方式二:<br><code>set @@global.变量名=值;</code><br><code>set @@变量名=值;</code></p><p>1、全局变量<br>服务器层面上的,必须拥有super权限才能为系统变量赋值,作用域为整个服务器,也就是针对于所有连接(会话)有效</p><p>2、会话变量<br>服务器为每一个连接的客户端都提供了系统变量,作用域为当前的连接(会话)</p><p>二、自定义变量<br>说明:<br>1、用户变量<br>作用域:针对于当前连接(会话)生效<br>位置:begin end里面,也可以放在外面<br>使用:</p><p>①声明并赋值:<br><code>set @变量名=值;</code>或<br><code>set @变量名:=值;</code>或<br><code>select @变量名:=值;</code></p><p>②更新值<br>方式一:<br><code>set @变量名=值;</code>或<br><code>set @变量名:=值;</code>或<br><code>select @变量名:=值;</code><br>方式二:<br><code>select xx into @变量名 from 表;</code></p><p>③使用<br><code>select @变量名;</code></p><p>2、局部变量<br>作用域:仅仅在定义它的begin end中有效<br>位置:只能放在begin end中,而且只能放在第一句<br>使用:<br>①声明<br><code>declare 变量名 类型 [default 值];</code><br>②赋值或更新<br>方式一:<br><code>set 变量名=值;</code>或<br><code>set 变量名:=值;</code>或<br><code>select @变量名:=值;</code><br>方式二:<br><code>select xx into 变量名 from 表;</code><br>③使用<br><code>select 变量名;</code></p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#变量/*系统变量：  全局变量  会话变量自定义变量：  用户变量  局部变量*/#一、系统变量/*说明：变量由系统定义，不是用户定义，属于服务器层面注意：全局变量需要添加global关键字，会话变量需要添加session关键字，如果不写，默认会话级别使用步骤：1、查看所有系统变量show global|【session】variables;2、查看满足条件的部分系统变量show global|【session】 variables like '%char%';3、查看指定的系统变量的值select @@global|【session】系统变量名;4、为某个系统变量赋值方式一：set global|【session】系统变量名=值;方式二：set @@global|【session】系统变量名=值;*/#1》全局变量/*作用域：针对于所有会话（连接）有效，但不能跨重启*/#①查看所有全局变量SHOW GLOBAL VARIABLES;#②查看满足条件的部分系统变量SHOW GLOBAL VARIABLES LIKE '%char%';#③查看指定的系统变量的值SELECT @@global.autocommit;#④为某个系统变量赋值SET @@global.autocommit=0;SET GLOBAL autocommit=0;#2》会话变量/*作用域：针对于当前会话（连接）有效*/#①查看所有会话变量SHOW SESSION VARIABLES;#②查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE '%char%';#③查看指定的会话变量的值SELECT @@autocommit;SELECT @@session.tx_isolation;#④为某个会话变量赋值SET @@session.tx_isolation='read-uncommitted';SET SESSION tx_isolation='read-committed';#二、自定义变量/*说明：变量由用户自定义，而不是系统提供的使用步骤：1、声明2、赋值3、使用（查看、比较、运算等）*/#1》用户变量/*作用域：针对于当前会话（连接）有效，作用域同于会话变量*/#赋值操作符：=或:=#①声明并初始化/*SET @变量名=值;SET @变量名:=值;SELECT @变量名:=值;*/#②赋值（更新变量的值）#方式一：/*  SET @变量名=值;  SET @变量名:=值;  SELECT @变量名:=值;*/#方式二：/*  SELECT 字段 INTO @变量名  FROM 表;*/#③使用（查看变量的值）#SELECT @变量名;#2》局部变量/*作用域：仅仅在定义它的begin end块中有效应用在 begin end中的第一句话*/#①声明/*DECLARE 变量名 类型;DECLARE 变量名 类型 【DEFAULT 值】;*/#②赋值（更新变量的值）#方式一：/*  SET 局部变量名=值;  SET 局部变量名:=值;  SELECT 局部变量名:=值;*/#方式二：/*  SELECT 字段 INTO 具备变量名  FROM 表;*/#③使用（查看变量的值）#SELECT 局部变量名;#案例：声明两个变量，求和并打印#用户变量SET @m=1;SET @n=1;SET @sum=@m+@n;SELECT @sum;#局部变量/*DECLARE m INT DEFAULT 1;DECLARE n INT DEFAULT 1;DECLARE SUM INT;SET SUM=m+n;SELECT SUM;*/#用户变量和局部变量的对比/*    作用域     定义位置    语法用户变量  当前会话    会话的任何地方   加@符号，不用指定类型局部变量  定义它的BEGIN END中  BEGIN END的第一句话  一般不用加@,需要指定类型*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-存储过程和函数"><a href="#6-3-存储过程和函数" class="headerlink" title="6.3 存储过程和函数"></a>6.3 存储过程和函数</h3><p>说明:都类似于java中的方法,将一组完成特定功能的逻辑语句包装起来,对外暴露名字</p><p>好处:<br>1.提高重用性<br>2.sql语句简单<br>3.减少了和数据库服务器连接的次数,提高了效率</p><h4 id="6-3-1-存储过程"><a href="#6-3-1-存储过程" class="headerlink" title="6.3.1 存储过程"></a>6.3.1 存储过程</h4><p>一、创建 ★<br><code>create procedure 存储过程名(参数模式 参数名 参数类型)</code><br><code>begin</code><br><code>    存储过程体</code><br><code>end</code><br>注意:<br>1.参数模式:in、out、inout,其中in可以省略<br>2.存储过程体的每一条sql语句都需要用分号结尾</p><p>二、调用<br><code>call 存储过程名(实参列表)</code><br>举例:<br>调用in模式的参数:call sp1(‘值’);<br>调用out模式的参数:set @name; call sp1(@name);select @name;<br>调用inout模式的参数:set @name=值; call sp1(@name); select @name;<br>三、查看<br><code>show create procedure 存储过程名;</code><br>四、删除<br><code>drop procedure 存储过程名;</code></p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#存储过程和函数/*存储过程和函数：类似于java中的方法好处：1、提高代码的重用性2、简化操作*/#存储过程/*含义：一组预先编译好的SQL语句的集合，理解成批处理语句1、提高代码的重用性2、简化操作3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率*/#一、创建语法/*CREATE PROCEDURE 存储过程名(参数列表)BEGIN  存储过程体（一组合法的SQL语句）END*/#注意：/*1、参数列表包含三部分参数模式  参数名  参数类型举例：in stuname varchar(20)参数模式：in：该参数可以作为输入，也就是该参数需要调用方传入值out：该参数可以作为输出，也就是该参数可以作为返回值inout：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值2、如果存储过程体仅仅只有一句话，begin end可以省略存储过程体中的每条sql语句的结尾要求必须加分号。存储过程的结尾可以使用 delimiter 重新设置语法：delimiter 结束标记案例：delimiter $*/#二、调用语法#CALL 存储过程名(实参列表);#--------------------------------案例演示-----------------------------------#1.空参列表#案例：插入到admin表中五条记录# 注意:需要到命令行窗口去执行SELECT * FROM admin;DELIMITER $CREATE PROCEDURE myp1()BEGIN  INSERT INTO admin(username,`password`)   VALUES('john1','0000'),('lily','0000'),('rose','0000'),('jack','0000'),('tom','0000');END $#调用CALL myp1()$#2.创建带in模式参数的存储过程#案例1：创建存储过程实现 根据女神名，查询对应的男神信息CREATE PROCEDURE myp2(IN beautyName VARCHAR(20))BEGIN  SELECT bo.*  FROM boys bo  RIGHT JOIN beauty b ON bo.id = b.boyfriend_id  WHERE b.name=beautyName;END $#调用CALL myp2('柳岩')$#案例2 ：创建存储过程实现，用户是否登录成功CREATE PROCEDURE myp4(IN username VARCHAR(20),IN PASSWORD VARCHAR(20))BEGIN  DECLARE result INT DEFAULT 0;#声明并初始化  SELECT COUNT(*) INTO result#赋值  FROM admin  WHERE admin.username = username  AND admin.password = PASSWORD;  SELECT IF(result&gt;0,'成功','失败');#使用END $#调用CALL myp3('张飞','8888')$#3.创建out 模式参数的存储过程#案例1：根据输入的女神名，返回对应的男神名CREATE PROCEDURE myp6(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20))BEGIN  SELECT bo.boyname INTO boyname  FROM boys bo  RIGHT JOIN  beauty b ON b.boyfriend_id = bo.id  WHERE b.name=beautyName ;END $#案例2：根据输入的女神名，返回对应的男神名和魅力值CREATE PROCEDURE myp7(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20),OUT usercp INT) BEGIN  SELECT boys.boyname ,boys.usercp INTO boyname,usercp  FROM boys   RIGHT JOIN  beauty b ON b.boyfriend_id = boys.id  WHERE b.name=beautyName ;END $#调用CALL myp7('小昭',@name,@cp)$SELECT @name,@cp$#4.创建带inout模式参数的存储过程#案例1：传入a和b两个值，最终a和b都翻倍并返回CREATE PROCEDURE myp8(INOUT a INT ,INOUT b INT)BEGIN  SET a=a*2;  SET b=b*2;END $#调用SET @m=10$SET @n=20$CALL myp8(@m,@n)$SELECT @m,@n$#三、删除存储过程#语法：drop procedure 存储过程名DROP PROCEDURE p1;DROP PROCEDURE p2,p3;#错误#四、查看存储过程的信息DESC myp2;#错误SHOW CREATE PROCEDURE  myp2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#一、创建存储过程实现传入用户名和密码，插入到admin表中DELIMITER $CREATE PROCEDURE test_pro1(IN username VARCHAR(20),IN loginPwd VARCHAR(20))BEGIN  INSERT INTO admin(admin.username,PASSWORD)  VALUES(username,loginpwd);END $#二、创建存储过程实现传入女神编号，返回女神名称和女神电话CREATE PROCEDURE test_pro2(IN id INT,OUT NAME VARCHAR(20),OUT phone VARCHAR(20))BEGIN  SELECT b.name ,b.phone INTO NAME,phone  FROM beauty b  WHERE b.id = id;END $#三、创建存储存储过程或函数实现传入两个女神生日，返回大小CREATE PROCEDURE test_pro3(IN birth1 DATETIME,IN birth2 DATETIME,OUT result INT)BEGIN  SELECT DATEDIFF(birth1,birth2) INTO result;END $#四、创建存储过程或函数实现传入一个日期，格式化成xx年xx月xx日并返回CREATE PROCEDURE test_pro4(IN mydate DATETIME,OUT strDate VARCHAR(50))BEGIN  SELECT DATE_FORMAT(mydate,'%y年%m月%d日') INTO strDate;END $CALL test_pro4(NOW(),@str)$SELECT @str $#五、创建存储过程或函数实现传入女神名称，返回：女神 and 男神  格式的字符串/*如 传入 ：小昭返回： 小昭 AND 张无忌*/DROP PROCEDURE test_pro5 $CREATE PROCEDURE test_pro5(IN beautyName VARCHAR(20),OUT str VARCHAR(50))BEGIN  SELECT CONCAT(beautyName,' and ',IFNULL(boyName,'null')) INTO str  FROM boys bo  RIGHT JOIN beauty b ON b.boyfriend_id = bo.id  WHERE b.name=beautyName;END $CALL test_pro5('柳岩',@str)$SELECT @str $#六、创建存储过程或函数，根据传入的条目数和起始索引，查询beauty表的记录DROP PROCEDURE test_pro6$CREATE PROCEDURE test_pro6(IN startIndex INT,IN size INT)BEGIN  SELECT * FROM beauty LIMIT startIndex,size;END $CALL test_pro6(3,5)$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-2-函数"><a href="#6-3-2-函数" class="headerlink" title="6.3.2 函数"></a>6.3.2 函数</h4><p>一、创建<br><code>create function 函数名(参数名 参数类型) returns  返回类型</code><br><code>begin</code><br><code>  函数体</code><br><code>end</code></p><p>注意:函数体中肯定需要有return语句<br>二、调用<br><code>select 函数名(实参列表);</code><br>三、查看<br><code>show create function 函数名;</code><br>四、删除<br><code>drop function 函数名;</code></p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#函数/*含义：一组预先编译好的SQL语句的集合，理解成批处理语句1、提高代码的重用性2、简化操作3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率区别：存储过程：可以有0个返回，也可以有多个返回，适合做批量插入、批量更新函数：有且仅有1 个返回，适合做处理数据后返回一个结果*/#一、创建语法/*CREATE FUNCTION 函数名(参数列表) RETURNS 返回类型BEGIN  函数体END*//*注意：1.参数列表 包含两部分：参数名 参数类型2.函数体：肯定会有return语句，如果没有会报错如果return语句没有放在函数体的最后也不报错，但不建议return 值;3.函数体中仅有一句话，则可以省略begin end4.使用 delimiter语句设置结束标记*/#二、调用语法#SELECT 函数名(参数列表)#------------------------------案例演示----------------------------#1.无参有返回#案例：返回公司的员工个数DELIMITER $CREATE FUNCTION myf1() RETURNS INTBEGIN  DECLARE c INT DEFAULT 0;#定义局部变量  SELECT COUNT(*) INTO c#赋值  FROM employees;  RETURN c;END $SELECT myf1()$#2.有参有返回#案例1：根据员工名，返回它的工资CREATE FUNCTION myf2(empName VARCHAR(20)) RETURNS DOUBLEBEGIN  SET @sal=0;#定义用户变量   SELECT salary INTO @sal   #赋值  FROM employees  WHERE last_name = empName;    RETURN @sal;END $SELECT myf2('k_ing') $#案例2：根据部门名，返回该部门的平均工资CREATE FUNCTION myf3(deptName VARCHAR(20)) RETURNS DOUBLEBEGIN  DECLARE sal DOUBLE ;  SELECT AVG(salary) INTO sal  FROM employees e  JOIN departments d ON e.department_id = d.department_id  WHERE d.department_name=deptName;  RETURN sal;END $SELECT myf3('IT')$#三、查看函数SHOW CREATE FUNCTION myf3;#四、删除函数DROP FUNCTION myf3;#案例#一、创建函数，实现传入两个float，返回二者之和CREATE FUNCTION test_fun1(num1 FLOAT,num2 FLOAT) RETURNS FLOATBEGIN  DECLARE SUM FLOAT DEFAULT 0;  SET SUM=num1+num2;  RETURN SUM;END $SELECT test_fun1(1,2)$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-流程控制结构"><a href="#6-4-流程控制结构" class="headerlink" title="6.4 流程控制结构"></a>6.4 流程控制结构</h3><p>顺序结构:程序从上往下依次执行<br>分支结构:程序按条件进行选择执行,从两条或多条路径中选择一条执行<br>循环结构:程序满足一定条件下,重复执行一组语句</p><h4 id="6-4-1-分支结构"><a href="#6-4-1-分支结构" class="headerlink" title="6.4.1 分支结构"></a>6.4.1 分支结构</h4><p>特点:<br>1、if函数<br>功能:实现简单双分支<br>语法:<br><code>if(条件,值1,值2)</code><br>位置:<br>可以作为表达式放在任何位置<br>2、case结构<br>功能:实现多分支<br>语法1:<br><code>case 表达式或字段</code><br><code>when 值1 then 语句1;</code><br><code>when 值2 then 语句2;</code><br><code>...</code><br><code>else 语句n;</code><br><code>end [case];</code></p><p>语法2:<br><code>case</code><br><code>when 条件1 then 语句1;</code><br><code>when 条件2 then 语句2;</code><br><code>...</code><br><code>else 语句n;</code><br><code>end [case];</code></p><p>位置:<br>可以放在任何位置,<br>如果放在begin end 外面,作为表达式结合着其他语句使用<br>如果放在begin end 里面,一般作为独立的语句使用<br>3、if结构<br>功能:实现多分支<br>语法:<br><code>if 条件1 then 语句1;</code><br><code>elseif 条件2 then 语句2;</code><br><code>...</code><br><code>else 语句n;</code><br><code>end if;</code><br>位置:<br>只能放在begin end中</p><h4 id="6-4-2-循环结构"><a href="#6-4-2-循环结构" class="headerlink" title="6.4.2 循环结构"></a>6.4.2 循环结构</h4><p>位置:<br>只能放在begin end中</p><p>特点:都能实现循环结构</p><p>对比:</p><p>①这三种循环都可以省略名称,但如果循环中添加了循环控制语句(leave或iterate)则必须添加名称<br>②loop 一般用于实现简单的死循环<br>while 先判断后执行<br>repeat 先执行后判断,无条件至少执行一次</p><p>1、while<br>语法:<br><code>[名称:]while 循环条件 do</code><br><code>    循环体</code><br><code>end while [名称];</code><br>2、loop<br>语法:<br><code>[名称:]loop</code><br><code>    循环体</code><br><code>end loop [名称];</code></p><p>3、repeat<br>语法:<br><code>[名称:]repeat</code><br><code>    循环体</code><br><code>until 结束条件</code><br><code>end repeat [名称];</code></p><p>二、循环控制语句<br>leave:类似于break,用于跳出所在的循环<br>iterate:类似于continue,用于结束本次循环,继续下一次</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">#流程控制结构/*顺序、分支、循环*/#一、分支结构#1.if函数/*语法：if(条件,值1，值2)功能：实现双分支应用在begin end中或外面*/#2.case结构/*语法：情况1：类似于switchcase 变量或表达式when 值1 then 语句1;when 值2 then 语句2;...else 语句n;end 情况2：case when 条件1 then 语句1;when 条件2 then 语句2;...else 语句n;end 应用在begin end 中或外面*/#else可以省略，如果else省略了并且所有when条件都不满足，返回null#3.if结构/*语法：if 条件1 then 语句1;elseif 条件2 then 语句2;....[else 语句n;]end if;功能：类似于多重if只能应用在begin end 中*/#案例1：创建函数，实现传入成绩，如果成绩&gt;90,显示或返回A，如果成绩&gt;80,显示或返回B，如果成绩&gt;60,显示或返回C，否则显示或返回Ddelimiter $CREATE procedure test_case(in score int)BEGIN  case  when score&gt;=90 and score&lt;=100 then select 'A';  when score&gt;=80 then select 'B';  when score&gt;=60 then select 'C';  else select 'D';    end case;END $call test_case(87)$create function test_if(score int) returns charbegin  if score&gt;=90 and score&lt;=100 then return 'A';  elseif score&gt;=80 then return 'B';  elseif score&gt;=60 then return 'C';  else return 'D';    end if;end$select test_if(86)$#案例2：创建存储过程，如果工资&lt;2000,则删除，如果5000&gt;工资&gt;2000,则涨工资1000，否则涨工资500CREATE PROCEDURE test_if_pro(IN sal DOUBLE)BEGIN  IF sal&lt;2000 THEN DELETE FROM employees WHERE employees.salary=sal;  ELSEIF sal&gt;=2000 AND sal&lt;5000 THEN UPDATE employees SET salary=salary+1000 WHERE employees.`salary`=sal;  ELSE UPDATE employees SET salary=salary+500 WHERE employees.`salary`=sal;  END IF;END $CALL test_if_pro(2100)$#案例1：创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回DCREATE FUNCTION test_case(score FLOAT) RETURNS CHARBEGIN   DECLARE ch CHAR DEFAULT 'A';    CASE   WHEN score&gt;90 THEN SET ch='A';  WHEN score&gt;80 THEN SET ch='B';  WHEN score&gt;60 THEN SET ch='C';  ELSE SET ch='D';  END CASE;    RETURN ch;END $SELECT test_case(56)$#二、循环结构/*分类：while、loop、repeat循环控制：iterate类似于 continue，继续，结束本次循环，继续下一次leave 类似于  break，跳出，结束当前所在的循环*/#1.while/*语法：【标签:】while 循环条件 do  循环体;end while【 标签】;联想：while(循环条件){  循环体;}*/#2.loop/*语法：【标签:】loop  循环体;end loop 【标签】;可以用来模拟简单的死循环*/#3.repeat/*语法：【标签：】repeat  循环体;until 结束循环的条件end repeat 【标签】;*/#1.没有添加循环控制语句#案例：批量插入，根据次数插入到admin表中多条记录DROP PROCEDURE pro_while1$CREATE PROCEDURE pro_while1(IN insertCount INT)BEGIN  DECLARE i INT DEFAULT 1;  WHILE i&lt;=insertCount DO    INSERT INTO admin(username,`password`) VALUES(CONCAT('Rose',i),'666');    SET i=i+1;  END WHILE;END $CALL pro_while1(100)$/*int i=1;while(i&lt;=insertcount){  //插入  i++;}*/#2.添加leave语句#案例：批量插入，根据次数插入到admin表中多条记录，如果次数&gt;20则停止TRUNCATE TABLE admin$DROP PROCEDURE test_while1$CREATE PROCEDURE test_while1(IN insertCount INT)BEGIN  DECLARE i INT DEFAULT 1;  a:WHILE i&lt;=insertCount DO    INSERT INTO admin(username,`password`) VALUES(CONCAT('xiaohua',i),'0000');    IF i&gt;=20 THEN LEAVE a;    END IF;    SET i=i+1;  END WHILE a;END $CALL test_while1(100)$#3.添加iterate语句#案例：批量插入，根据次数插入到admin表中多条记录，只插入偶数次TRUNCATE TABLE admin$DROP PROCEDURE test_while1$CREATE PROCEDURE test_while1(IN insertCount INT)BEGIN  DECLARE i INT DEFAULT 0;  a:WHILE i&lt;=insertCount DO    SET i=i+1;    IF MOD(i,2)!=0 THEN ITERATE a;    END IF;    INSERT INTO admin(username,`password`) VALUES(CONCAT('xiaohua',i),'0000');  END WHILE a;END $CALL test_while1(100)$/*int i=0;while(i&lt;=insertCount){  i++;  if(i%2==0){    continue;  }  插入}*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">/*一、已知表stringcontent其中字段：id 自增长content varchar(20)向该表插入指定个数的，随机的字符串*/DROP TABLE IF EXISTS stringcontent;CREATE TABLE stringcontent(  id INT PRIMARY KEY AUTO_INCREMENT,  content VARCHAR(20));DELIMITER $CREATE PROCEDURE test_randstr_insert(IN insertCount INT)BEGIN  DECLARE i INT DEFAULT 1;  DECLARE str VARCHAR(26) DEFAULT 'abcdefghijklmnopqrstuvwxyz';  DECLARE startIndex INT;#代表初始索引  DECLARE len INT;#代表截取的字符长度  WHILE i&lt;=insertcount DO    SET startIndex=FLOOR(RAND()*26+1);#代表初始索引，随机范围1-26    SET len=FLOOR(RAND()*(20-startIndex+1)+1);#代表截取长度，随机范围1-（20-startIndex+1）    INSERT INTO stringcontent(content) VALUES(SUBSTR(str,startIndex,len));    SET i=i+1;  END WHILE;END $CALL test_randstr_insert(10)$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/liaojie.github.io/2022/01/16/css/"/>
      <url>/liaojie.github.io/2022/01/16/css/</url>
      
        <content type="html"><![CDATA[<h2 id="1-CSS初识"><a href="#1-CSS初识" class="headerlink" title="1 CSS初识"></a>1 CSS初识</h2><ul><li><p>概念:</p><p>CSS(Cascading Style Sheets)  ,通常称为CSS样式表或层叠样式表(级联样式表)</p></li><li><p>作用:</p><ul><li>主要用于<strong>设置</strong> HTML页面中的文本内容(字体、大小、对齐方式等)、图片的外形(宽高、边框样式、边距等)以及<strong>版面的布局和外观显示样式。</strong></li><li>CSS以HTML为基础,提供了丰富的功能,如字体、颜色、背景的控制及整体排版等,而且还可以针对不同的浏览器设置不同的样式。</li></ul></li></ul><h2 id="2-引入CSS样式表"><a href="#2-引入CSS样式表" class="headerlink" title="2 引入CSS样式表"></a>2 引入CSS样式表</h2><h3 id="2-1-行内式-内联样式"><a href="#2-1-行内式-内联样式" class="headerlink" title="2.1 行内式(内联样式)"></a>2.1 行内式(内联样式)</h3><ul><li><p>概念:</p><p>  称行内样式、行间样式.</p><p>  是通过标签的style属性来设置元素的样式</p></li><li><p>其基本语法格式如下:</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">属性1</span><span class="token punctuation">:</span>属性值1<span class="token punctuation">;</span> <span class="token property">属性2</span><span class="token punctuation">:</span>属性值2<span class="token punctuation">;</span> <span class="token property">属性3</span><span class="token punctuation">:</span>属性值3<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span> 内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际上任何HTML标签都拥有style属性,用来设置行内式。</p><ul><li>案例:</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;div style=<span class="token string">"color: red; font-size: 12px;"</span>&gt;青春不常在&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意:<ul><li>style其实就是标签的属性</li><li>样式属性和值中间是<code>:</code></li><li>多组属性值之间用<code>;</code>隔开。</li><li>只能控制当前的标签和以及嵌套在其中的字标签,造成代码冗余</li></ul></li><li>缺点:<ul><li>没有实现样式和结构相分离</li></ul></li></ul><h3 id="2-2-内部样式表-内嵌样式表"><a href="#2-2-内部样式表-内嵌样式表" class="headerlink" title="2.2 内部样式表(内嵌样式表)"></a>2.2 内部样式表(内嵌样式表)</h3><ul><li><p>概念:</p><p>  称内嵌式</p><p>  是将CSS代码集中写在HTML文档的head头部标签中,并且用style标签定义</p></li><li><p>基本语法格式如下:</p></li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;&lt;style type="text/CSS"&gt;    选择器(选择的标签) {       属性1: 属性值1;      属性2: 属性值2;       属性3: 属性值3;    }&lt;/style&gt;&lt;/head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt; div</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span> <span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意:</p><ul><li>style标签一般位于head标签中,当然理论上他可以放在HTML文档的任何地方。</li><li>type=”text/css”  在html5中可以省略。</li><li>只能控制当前的页面</li></ul></li><li><p>缺点:</p><p>没有彻底分离</p></li></ul><h5 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;style&gt;   <span class="token comment">/*选择器{属性:值;}*/</span>   <span class="token selector">p</span> <span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span>#06C<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span>14px<span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token comment">/*文字的颜色是 蓝色*/</span>   <span class="token selector">h4</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>#900<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">h1</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>#090<span class="token punctuation">;</span>     <span class="token property">font-size</span><span class="token punctuation">:</span>16px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token selector">body</span> <span class="token punctuation">{</span>     <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>bg2.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考:<br>1.如何实现结构与样式完全分离？<br>2.如何实现css样式共享？</p><h3 id="2-3-外部样式表-外链式"><a href="#2-3-外部样式表-外链式" class="headerlink" title="2.3 外部样式表(外链式)"></a>2.3 外部样式表(外链式)</h3><ul><li><p>概念:</p><p>  链入式</p><p>  是将所有的样式放在一个或多个以**.CSS**为扩展名的外部样式表文件中</p><p>  通过link标签将外部样式表文件链接到HTML文档中</p></li><li><p>其基本语法格式如下:</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css文件路径<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意:  </p><ul><li>link 是个单标签</li><li>link标签需要放在head头部标签中,并且指定link标签的三个属性</li></ul><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>rel</td><td align="left">定义当前文档与被链接文档之间的关系,在这里需要指定为“stylesheet”,表示被链接的文档是一个样式表文件。</td></tr><tr><td>type</td><td align="left">定义所链接文档的类型,在这里需要指定为“text/CSS”,表示链接的外部文件为CSS样式表。我们都可以省略</td></tr><tr><td>href</td><td align="left">定义所链接外部样式表文件的URL,可以是相对路径,也可以是绝对路径。</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/10css%E5%A4%96%E9%93%BE%E5%BC%8F.jpg"></p><h3 id="2-4-三种样式表总结-位置"><a href="#2-4-三种样式表总结-位置" class="headerlink" title="2.4 三种样式表总结(位置)"></a>2.4 三种样式表总结(位置)</h3><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便,权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签(少)</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面(中)</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多,强烈推荐</td><td>控制整个站点(多)</td></tr></tbody></table><h5 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h5><p>样式书写一般有两种:</p><p>一种是紧凑格式 (Compact)</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h3</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一种是展开格式(推荐)</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h3</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码大小写"><a href="#代码大小写" class="headerlink" title="代码大小写"></a>代码大小写</h5><p>样式选择器,属性名,属性值关键字全部使用小写字母书写,属性字符串允许使用大小写。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 推荐 */</span><span class="token selector">h3</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 不推荐 */</span><span class="token selector">H3</span><span class="token punctuation">{</span><span class="token property">COLOR</span><span class="token punctuation">:</span> PINK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CSS样式规则总结"><a href="#3-CSS样式规则总结" class="headerlink" title="3 CSS样式规则总结"></a>3 CSS样式规则总结</h2><p>使用HTML时,需要遵从一定的规范。CSS亦如此,要想熟练地使用CSS对网页进行修饰,首先需要了解CSS样式规则,</p><p>具体格式如下:                                          </p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/gz.png"></p><p><strong>总结:</strong></p><ol><li>选择器用于指定CSS样式作用的HTML标签,花括号内是对该对象设置的具体样式。</li><li>属性和属性值以“键值对”的形式出现。</li><li>属性是对指定的对象设置的样式属性,例如字体大小、文本颜色等。</li><li>属性和属性值之间用英文“:”连接。</li><li>多个“键值对”之间用英文“;”进行区分。</li></ol><h2 id="4-CSS选择器作用-重点"><a href="#4-CSS选择器作用-重点" class="headerlink" title="4 CSS选择器作用(重点)"></a>4 CSS选择器作用(重点)</h2><p>选择器的作用</p><ul><li>找到特定的HTML页面元素</li></ul><blockquote><p>CSS选择器干啥的？   就是选择标签用的,把我们想要的标签选择出来</p></blockquote><p>css 就是两件事,选对人,做对事。 </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h3</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段代码就是2件事, 把  h3选出来, 然后 把它变成了 红色。 以后我们都这么干。</p><p>选择器分为基础选择器和 复合选择器,我们这里先讲解一下 基础选择器。</p><h2 id="5-CSS基础选择器"><a href="#5-CSS基础选择器" class="headerlink" title="5 CSS基础选择器"></a>5 CSS基础选择器</h2><h3 id="5-1-标签选择器"><a href="#5-1-标签选择器" class="headerlink" title="5.1 标签选择器"></a>5.1 标签选择器</h3><p>概念:<br>标签选择器(元素选择器)是指用<strong>HTML标签名</strong>称作为选择器,按标签名称分类,为页面中某一类标签指定统一的CSS样式。</p><p>语法:</p><pre class="line-numbers language-none"><code class="language-none">标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; } <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>作用:<br>标签选择器 可以把某一类标签<strong>全部</strong>选择出来  比如所有的div标签  和 所有的 span标签</p><p>优点:<br>是能快速为页面中同类型的标签统一样式</p><p>缺点:<br>不能设计差异化样式。</p><p><strong>总结 口诀:</strong><br>   标签选择器,<br>   页面同选起。<br>   直接写标签,<br>   全部不放弃。</p><h3 id="5-2-类选择器"><a href="#5-2-类选择器" class="headerlink" title="5.2 类选择器"></a>5.2 类选择器</h3><p>类选择器使用“.”(英文点号)进行标识,后面紧跟类名.</p><p>语法:</p><ul><li>类名选择器</li></ul><pre class="line-numbers language-none"><code class="language-none">.类名  {       属性1:属性值1;     属性2:属性值2;     属性3:属性值3;     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>标签</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;p class='类名'&gt;&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>优点:<br>可以为元素对象定义单独或相同的样式。 可以选择一个或者多个标签 </p><p>注意</p><ul><li>类选择器使用“.”(英文点号)进行标识,后面紧跟类名(自定义,我们自己命名的)</li><li>长名称或词组可以使用中横线来为选择器命名。</li><li>不要纯数字、中文等命名, 尽量使用英文字母来表示。</li></ul><p><strong>记忆口诀</strong></p><p>差异化选择<br>一个或多个<br>上面点定义<br>类名别写错<br>谁用谁调用<br>class来做</p><p><strong>案例:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/go.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">            <span class="token selector">.blue</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.red</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.orange</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token selector">.green</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">}</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>G<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>o<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orange<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>o<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>g<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>l<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>e<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-类选择器特殊用法-多类名"><a href="#5-3-类选择器特殊用法-多类名" class="headerlink" title="5.3 类选择器特殊用法- 多类名"></a>5.3 类选择器特殊用法- 多类名</h3><p>我们可以给标签指定多个类名,从而达到更多的选择目的。</p><p>注意:</p><ul><li>各个类名中间用空格隔开。</li><li>多类名选择器在后期布局比较复杂的情况下,还是较多使用的。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pink fontWeight font20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>亚瑟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>刘备<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font14 pink<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>安其拉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font14<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>貂蝉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-id选择器"><a href="#5-4-id选择器" class="headerlink" title="5.4 id选择器"></a>5.4 id选择器</h3><p>id选择器使用<code>#</code>进行标识,后面紧跟id名</p><p>基本语法格式如下:</p><ul><li>id选择器<pre class="line-numbers language-none"><code class="language-none">#id名 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>标签<pre class="line-numbers language-none"><code class="language-none">&lt;p id="id名"&gt;&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>元素的id值是唯一的,只能对应于文档中某一个具体的元素。</p><p>用法基本和类选择器相同。</p><h5 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h5><p>W3C标准规定,在同一个页面内,不允许有相同名字的id对象出现,但是允许相同名字的class。</p><ul><li>类选择器(class) 好比人的名字,是可以多次重复使用的,比如张伟 王伟 李伟 李娜</li><li>id选择器     好比人的身份证号码,全中国是唯一的,不得重复。只能使用一次。</li></ul><p><em><strong>id选择器和类选择器最大的不同在于 使用次数上。</strong></em></p><ul><li>类选择器我们在修改样式中,用的最多。</li><li>id选择器一般用于页面唯一性的元素身上,经常和我们后面学习的javascript 搭配使用。</li></ul><h3 id="5-5-通配符选择器"><a href="#5-5-通配符选择器" class="headerlink" title="5.5 通配符选择器"></a>5.5 通配符选择器</h3><p>概念:<br>通配符选择器用<code>*</code>号表示, * 就是 选择所有的标签      他是所有选择器中作用范围最广的,能匹配页面中所有的元素。</p><p>基本语法格式如下:</p><pre class="line-numbers language-none"><code class="language-none">* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如下面的代码,使用通配符选择器定义CSS样式,清除所有HTML标记的默认边距。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>                    <span class="token comment">/* 定义外边距*/</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>                   <span class="token comment">/* 定义内边距*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意:<br>会匹配页面所有的元素,降低页面响应速度,不建议随便使用</p><h3 id="5-6-基础选择器总结"><a href="#5-6-基础选择器总结" class="headerlink" title="5.6 基础选择器总结"></a>5.6 基础选择器总结</h3><table><thead><tr><th>选择器</th><th>作用</th><th>缺点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签,比如p</td><td>不能差异化选择</td><td>较多</td><td>p { color:red;}</td></tr><tr><td>类选择器</td><td>可以选出1个或者多个标签</td><td>可以根据需求选择</td><td>非常多</td><td>.nav { color: red; }</td></tr><tr><td>id选择器</td><td>一次只能选择器1个标签</td><td>只能使用一次</td><td>不推荐使用</td><td>#nav {color: red;}</td></tr><tr><td>通配符选择器</td><td>选择所有的标签</td><td>选择的太多,有部分不需要</td><td>不推荐使用</td><td>* {color: red;}</td></tr></tbody></table><p>最常用的:类选择器。</p><h3 id="5-7-约定"><a href="#5-7-约定" class="headerlink" title="5.7 约定"></a>5.7 约定</h3><p>选择器</p><ul><li>尽量少用通用选择器 <code>*</code></li><li>尽量少用 id 选择器</li><li>不使用无具体语义定义的标签选择器 div span </li></ul><pre class="line-numbers language-none"><code class="language-none">/* 推荐 */.jdc {}li {}p{}/* 不推荐 */*{}#jdc {}div{}   因为div 没有语义,我们尽量少用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-font字体"><a href="#6-font字体" class="headerlink" title="6 font字体"></a>6 font字体</h2><h3 id="6-1-font-size-大小"><a href="#6-1-font-size-大小" class="headerlink" title="6.1 font-size:大小"></a>6.1 font-size:大小</h3><p>作用:<br>font-size属性用于设置字号</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>      <span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>单位:</p><ul><li>可以使用相对长度单位,也可以使用绝对长度单位。</li><li>相对长度单位比较常用,推荐使用像素单位px,绝对长度单位使用较少。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dd.png"></p><p><strong>注意:</strong></p><ul><li>文字大小基本就用px,其他单位很少使用</li><li>谷歌浏览器默认的文字大小为16px</li><li>但是不同浏览器可能默认显示的字号大小不一致,我们尽量给一个明确值大小,不要默认大小。一般给body指定整个页面文字的大小</li></ul><h3 id="6-2-font-family-字体"><a href="#6-2-font-family-字体" class="headerlink" title="6.2 font-family:字体"></a>6.2 font-family:字体</h3><p>作用:<br>font-family属性用于设置哪一种字体。</p><pre class="line-numbers language-none"><code class="language-none">p{ font-family:"微软雅黑";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>网页中常用的字体有宋体、微软雅黑、黑体等,例如将网页中所有段落文本的字体设置为微软雅黑</li><li>可以同时指定多个字体,中间以逗号隔开,表示如果浏览器不支持第一个字体,则会尝试下一个,直到找到合适的字体, 如果都没有,则以我们电脑默认的字体为准。</li></ul><pre class="line-numbers language-none"><code class="language-none">p{font-family: Arial,"Microsoft Yahei", "微软雅黑";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用技巧:</p><pre class="line-numbers language-none"><code class="language-none">1. 各种字体之间必须使用英文状态下的逗号隔开。2. 中文字体需要加英文状态下的引号,英文字体一般不需要加引号。当需要设置英文字体时,英文字体名必须位于中文字体名之前。3. 如果字体名中包含空格、#、$等符号,则该字体必须加英文状态下的单引号或双引号,例如font-family: "Times New Roman";。4. 尽量使用系统默认字体,保证在任何用户的浏览器中都能正确显示。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h5><p>为什么使用 Unicode字体?</p><ul><li>在 CSS 中设置字体名称,直接写中文是可以的。但是在文件编码(GB2312、UTF-8 等)不匹配时会产生乱码的错误。</li><li>xp 系统不支持 类似微软雅黑的中文。</li></ul><p>解决:</p><ul><li>方案一: 你可以使用英文来替代。 比如<code> font-family:"Microsoft Yahei"</code>。</li><li>方案二: 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称,浏览器是可以正确的解析的。</li></ul><pre class="line-numbers language-none"><code class="language-none">font-family: "\5FAE\8F6F\96C5\9ED1";   表示设置字体为“微软雅黑”。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table><p>为了照顾不同电脑的字体安装问题,我们尽量只使用宋体和微软雅黑中文字体</p><h3 id="6-3-font-weight-字体粗细"><a href="#6-3-font-weight-字体粗细" class="headerlink" title="6.3 font-weight:字体粗细"></a>6.3 font-weight:字体粗细</h3><p>在html中如何将字体加粗我们可以用标签来实现</p><ul><li>使用 b  和 strong 标签是文本加粗。<br>可以使用CSS 来实现,但是CSS 是没有语义的。</li></ul><table><thead><tr><th>属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td>normal</td><td align="left">默认值(不加粗的)</td></tr><tr><td>bold</td><td align="left">定义粗体(加粗的)</td></tr><tr><td>100~900</td><td align="left">400 等同于 normal,而 700 等同于 bold</td></tr></tbody></table><p>提倡:</p><p>  我们平时更喜欢用数字来表示加粗和不加粗。</p><h3 id="6-4-font-style-字体风格"><a href="#6-4-font-style-字体风格" class="headerlink" title="6.4 font-style:字体风格"></a>6.4 font-style:字体风格</h3><p>在html中如何将字体倾斜我们可以用标签来实现</p><ul><li>字体倾斜除了用 i  和 em 标签,<br>可以使用CSS 来实现,但是CSS 是没有语义的</li></ul><p>font-style属性用于定义字体风格,如设置斜体、倾斜或正常字体,其可用属性值如下:</p><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>normal</td><td align="left">默认值,浏览器会显示标准的字体样式  font-style: normal;</td></tr><tr><td>italic</td><td align="left">浏览器会显示斜体的字体样式。</td></tr></tbody></table><p>小技巧: </p><pre class="line-numbers language-none"><code class="language-none">平时我们很少给文字加斜体,反而喜欢给斜体标签(em,i)改为普通模式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-5-font-综合设置字体样式-重点"><a href="#6-5-font-综合设置字体样式-重点" class="headerlink" title="6.5 font:综合设置字体样式 (重点)"></a>6.5 font:综合设置字体样式 (重点)</h3><p>font属性用于对字体样式进行综合设置</p><p>基本语法格式如下:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">{</span> <span class="token property">font</span><span class="token punctuation">:</span> font-style  font-weight  font-size/line-height  font-family<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意:</p><ul><li>使用font属性时,必须按上面语法格式中的顺序书写,不能更换顺序,各个属性以<strong>空格</strong>隔开。</li><li>其中不需要设置的属性可以省略(取默认值),但必须保留font-size和font-family属性,否则font属性将不起作用。</li></ul><h3 id="6-6-font总结"><a href="#6-6-font总结" class="headerlink" title="6.6 font总结"></a>6.6 font总结</h3><table><thead><tr><th align="left">属性</th><th align="left">表示</th><th align="left">注意点</th></tr></thead><tbody><tr><td align="left">font-size</td><td align="left">字号</td><td align="left">我们通常用的单位是px 像素,一定要跟上单位</td></tr><tr><td align="left">font-family</td><td align="left">字体</td><td align="left">实际工作中按照团队约定来写字体</td></tr><tr><td align="left">font-weight</td><td align="left">字体粗细</td><td align="left">记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位</td></tr><tr><td align="left">font-style</td><td align="left">字体样式</td><td align="left">记住倾斜是 italic     不倾斜 是 normal  工作中我们最常用 normal</td></tr><tr><td align="left">font</td><td align="left">字体连写</td><td align="left">1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现</td></tr></tbody></table><h2 id="7-CSS外观属性"><a href="#7-CSS外观属性" class="headerlink" title="7 CSS外观属性"></a>7 CSS外观属性</h2><h3 id="7-1-color-文本颜色"><a href="#7-1-color-文本颜色" class="headerlink" title="7.1 color:文本颜色"></a>7.1 color:文本颜色</h3><p>作用:<br>  color属性用于定义文本的颜色,</p><p>其取值方式有如下3种:</p><table><thead><tr><th align="left">表示表示</th><th align="left">属性值</th></tr></thead><tbody><tr><td align="left">预定义的颜色值</td><td align="left">red,green,blue,还有我们的御用色 pink</td></tr><tr><td align="left">十六进制</td><td align="left">#FF0000,#FF6600,#29D794</td></tr><tr><td align="left">RGB代码</td><td align="left">rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table><p>注意:<br>我们实际工作中, 用 16进制的写法是最多的,而且我们更喜欢简写方式比如  #f00 代表红色</p><h3 id="7-2-text-align-文本水平对齐方式"><a href="#7-2-text-align-文本水平对齐方式" class="headerlink" title="7.2 text-align:文本水平对齐方式"></a>7.2 text-align:文本水平对齐方式</h3><p>作用:<br>  text-align属性用于设置文本内容的水平对齐,相当于html中的align对齐属性</p><p>其可用属性值如下:</p><table><thead><tr><th>属性</th><th align="center">解释</th></tr></thead><tbody><tr><td>left</td><td align="center">左对齐(默认值)</td></tr><tr><td>right</td><td align="center">右对齐</td></tr><tr><td>center</td><td align="center">居中对齐</td></tr></tbody></table><p>注意:<br>  是让盒子里面的内容水平居中, 而不是让盒子居中对齐</p><h3 id="7-3-line-height-行间距"><a href="#7-3-line-height-行间距" class="headerlink" title="7.3 line-height:行间距"></a>7.3 line-height:行间距</h3><p>作用:</p><ul><li>line-height属性用于设置行间距,就是行与行之间的距离,即字符的垂直间距,一般称为行高。</li></ul><p>单位:</p><ul><li>line-height常用的属性值单位有三种,分别为像素px,相对值em和百分比%,实际工作中使用最多的是像素px</li></ul><p>技巧:</p><pre class="line-numbers language-none"><code class="language-none">一般情况下,行距比字号大7.8像素左右就可以了。line-height: 24px;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-4-text-indent-首行缩进"><a href="#7-4-text-indent-首行缩进" class="headerlink" title="7.4 text-indent:首行缩进"></a>7.4 text-indent:首行缩进</h3><p>作用:</p><ul><li>text-indent属性用于设置首行文本的缩进,</li></ul><p>属性值</p><ul><li>其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%,允许使用负值,</li><li>建议使用em作为设置单位。</li></ul><p><strong>1em就是一个字的宽度   如果是汉字的段落,1em 就是一个汉字的宽度</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>      <span class="token comment">/*行间距*/</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>      <span class="token comment">/*首行缩进2个字  em  1个em 就是1个字的大小*/</span>      <span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-text-decoration-文本的装饰"><a href="#7-5-text-decoration-文本的装饰" class="headerlink" title="7.5 text-decoration 文本的装饰"></a>7.5 text-decoration 文本的装饰</h3><p>text-decoration   通常我们用于给链接修改装饰效果</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。定义标准的文本。 取消下划线(最常用)</td></tr><tr><td>underline</td><td>定义文本下的一条线。下划线 也是我们链接自带的(常用)</td></tr><tr><td>overline</td><td>定义文本上的一条线。(不用)</td></tr><tr><td>line-through</td><td>定义穿过文本下的一条线。(不常用)</td></tr></tbody></table><h3 id="7-6-CSS外观属性总结"><a href="#7-6-CSS外观属性总结" class="headerlink" title="7.6 CSS外观属性总结"></a>7.6 CSS外观属性总结</h3><table><thead><tr><th align="left">属性</th><th align="left">表示</th><th align="left">注意点</th></tr></thead><tbody><tr><td align="left">color</td><td align="left">颜色</td><td align="left">我们通常用  十六进制   比如 而且是简写形式 #fff</td></tr><tr><td align="left">line-height</td><td align="left">行高</td><td align="left">控制行与行之间的距离</td></tr><tr><td align="left">text-align</td><td align="left">水平对齐</td><td align="left">可以设定文字水平的对齐方式</td></tr><tr><td align="left">text-indent</td><td align="left">首行缩进</td><td align="left">通常我们用于段落首行缩进2个字的距离   text-indent: 2em;</td></tr><tr><td align="left">text-decoration</td><td align="left">文本修饰</td><td align="left">记住 添加 下划线  underline  取消下划线  none</td></tr></tbody></table><h2 id="8-开发者工具-chrome"><a href="#8-开发者工具-chrome" class="headerlink" title="8 开发者工具(chrome)"></a>8 开发者工具(chrome)</h2><p>如果代码出现问题:</p><ul><li>“按F12”或者是 “shift+ctrl+i”打开开发者工具。</li><li>菜单:右击网页空白出—检查</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/11%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%B7%A5%E5%85%B7.jpg"></p><ul><li>通过开发人员工具小指针工具,查找页面元素</li><li>左侧是html页面结构,右侧是css样式</li></ul><p>小技巧:</p><ol><li>ctrl+滚轮 可以 放大开发者工具代码大小。</li><li>左边是HTML元素结构   右边是CSS样式。</li><li>右边CSS样式可以改动数值和颜色查看更改后效果。</li><li>ctrl + 0  复原浏览器大小</li></ol><h2 id="9-sublime快捷操作emmet语法"><a href="#9-sublime快捷操作emmet语法" class="headerlink" title="9 sublime快捷操作emmet语法"></a>9 sublime快捷操作emmet语法</h2><p>Emmet的前身是Zen coding,它使用缩写,来提高html/css的编写速度。</p><ol><li><p>生成标签 直接输入标签名按tab键即可比如div然后tab 键,就可以生成 <code>&lt;div&gt;&lt;/div&gt;</code></p></li><li><p>如果想要生成多个相同标签加上 * 就可以了 比如<code>div*3</code>就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签,可以用 &gt;  比如   ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签,用  +  就可以了 比如 div+p  </p></li><li><p>如果生成带有类名或者id名字的,  直接写  .demo  或者  #two   tab 键就可以了</p></li><li><p>如果生成的div 类名是有顺序的, 可以用 自增符号  $     </p></li></ol><pre class="line-numbers language-none"><code class="language-none">.demo$*3        &lt;div class="demo1"&gt;&lt;/div&gt;&lt;div class="demo2"&gt;&lt;/div&gt;&lt;div class="demo3"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/zong1.jpg"></p><h2 id="10-CSS复合选择器"><a href="#10-CSS复合选择器" class="headerlink" title="10 CSS复合选择器"></a>10 CSS复合选择器</h2><p><strong>为什么要学习css复合选择器</strong></p><p>CSS选择器分为基础选择器和复合选择器,但是基础选择器不能满足我们实际开发中,快速高效的选择标签。</p><ul><li>目的是为了可以选择更准确更精细的目标元素标签。</li><li>复合选择器是由两个或多个基础选择器,通过不同的方式组合而成的</li></ul><h3 id="10-1-后代选择器-重点"><a href="#10-1-后代选择器-重点" class="headerlink" title="10.1 后代选择器(重点)"></a>10.1 后代选择器(重点)</h3><p>概念:<br>  后代选择器又称为包含选择器</p><p>作用:<br>  用来选择元素或元素组的<strong>子孙后代</strong></p><p>其写法就是把外层标签写在前面,内层标签写在后面,中间用<strong>空格</strong>分隔,先写父亲爷爷,再写儿子孙子。 </p><pre class="line-numbers language-none"><code class="language-none">父级 子级{属性:属性值;属性:属性值;}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法:</p><pre class="line-numbers language-none"><code class="language-none">.class h3{color:red;font-size:16px;}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/hou.png"></p><ul><li>当标签发生嵌套时,内层标签就成为外层标签的后代。</li><li>子孙后代都可以这么选择。 或者说,它能选择任何包含在内 的标签。</li></ul><h3 id="10-2-子元素选择器"><a href="#10-2-子元素选择器" class="headerlink" title="10.2 子元素选择器"></a>10.2 子元素选择器</h3><p>作用:<br>子元素选择器只能选择作为某元素**子元素(亲儿子)**的元素。</p><p>其写法就是把父级标签写在前面,子级标签写在后面,中间跟一个 <code>&gt;</code> 进行连接</p><p>语法:</p><pre class="line-numbers language-none"><code class="language-none">.class&gt;h3{color:red;font-size:14px;}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/zi1.png"></p><blockquote><p>这里的子 指的是 亲儿子  不包含孙子 重孙子之类。</p></blockquote><p>比如:.demo &gt; h3 {color: red;} 说明h3一定是demo亲儿子。demo元素包含着h3。</p><h3 id="10-3-交集选择器"><a href="#10-3-交集选择器" class="headerlink" title="10.3 交集选择器"></a>10.3 交集选择器</h3><p>条件<br>交集选择器由两个选择器构成,找到的标签必须满足:既有标签一的特点,也有标签二的特点。</p><p>语法:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/jiao.png"></p><p>其中第一个为标签选择器,第二个为class选择器,两个选择器之间<strong>不能有空格</strong>,如h3.special。</p><p><strong>技巧:</strong></p><p>交集选择器是并且的意思。  即…又…的意思</p><p>比如:p.one  选择的是:类名为.one的段落标签。  </p><p>用的相对来说比较少,不太建议使用。</p><h3 id="10-4-并集选择器-重点"><a href="#10-4-并集选择器-重点" class="headerlink" title="10.4 并集选择器(重点)"></a>10.4 并集选择器(重点)</h3><p>应用:</p><ul><li>如果某些选择器定义的相同样式,就可以利用并集选择器,可以让代码更简洁。<br>并集选择器(CSS选择器分组)是各个选择器通过<code>,</code>连接而成的,通常用于集体声明。</li></ul><p>语法:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/bing.png"></p><p>任何形式的选择器(包括标签选择器、class类选择器id选择器等),都可以作为并集选择器的一部分。</p><p>技巧:<br>并集选择器通常用于集体声明,逗号隔开的,所有选择器都会执行后面样式,逗号可以理解为和的意思。</p><pre class="line-numbers language-none"><code class="language-none">比如  .one, p , #test {color: #F00;}  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 通常用于集体声明。  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"> <span class="token comment">&lt;!-- 主导航栏 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>公司首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>公司简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>公司产品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>联系我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 侧导航栏 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sitenav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site-l<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>左侧侧导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site-r<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在不修改以上结构代码的前提下,完成以下任务:</p><ol><li>链接 登录 的颜色为红色</li><li>主导航栏里面的所有的链接改为橙色    </li><li>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。</li></ol><h3 id="10-5-链接伪类选择器-重点"><a href="#10-5-链接伪类选择器-重点" class="headerlink" title="10.5  链接伪类选择器(重点)"></a>10.5  链接伪类选择器(重点)</h3><p>伪类选择器:<br>类选择器是一个点 比如 .demo {}<br>而我们的伪类用2个点就是冒号比如:link{}</p><p>作用:</p><p>用于向某些选择器添加特殊的效果。比如给链接添加特殊效果, 比如可以选择第1个,第n个元素。</p><p>因为伪类选择器很多,比如链接伪类,结构伪类等等。我们这里先给大家讲解链接伪类选择器。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">a</span><span class="token punctuation">:</span>link      <span class="token comment">/* 未访问的链接 */</span><span class="token property">a</span><span class="token punctuation">:</span>visited   <span class="token comment">/* 已访问的链接 */</span><span class="token property">a</span><span class="token punctuation">:</span>hover     <span class="token comment">/* 鼠标移动到链接上 */</span><span class="token property">a</span><span class="token punctuation">:</span>active    <span class="token comment">/* 选定的链接 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>写的时候,他们的顺序尽量不要颠倒按照lvha的顺序。否则可能引起错误。  </li><li>因为叫链接伪类,所以都是 利用交集选择器  a:link    a:hover  </li><li>因为a链接浏览器具有默认样式,所以我们实际工作中都需要给链接单独指定样式。</li><li>实际工作开发中,我们很少写全四个状态,一般我们写法如下:</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a</span> <span class="token punctuation">{</span>   <span class="token comment">/* a是标签选择器  所有的链接 */</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a:hover</span> <span class="token punctuation">{</span>   <span class="token comment">/* :hover 是链接伪类选择器 鼠标经过 */</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment">/*  鼠标经过的时候,由原来的 灰色 变成了红色 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-6-复合选择器总结"><a href="#10-6-复合选择器总结" class="headerlink" title="10.6 复合选择器总结"></a>10.6 复合选择器总结</h3><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择元素后代</td><td>是选择所有的子孙后代</td><td>较多</td><td>符号是<strong>空格</strong> .nav a</td></tr><tr><td>子代选择器</td><td>选择 最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是**&gt;**   .nav&gt;p</td></tr><tr><td>交集选择器</td><td>选择两个标签交集的部分</td><td>既是 又是</td><td>较少</td><td><strong>没有符号</strong>  p.one</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的选择器</td><td>可以用于集体声明</td><td>较多</td><td>符号是<strong>逗号</strong> .nav, .header</td></tr><tr><td>链接伪类选择器</td><td>给链接更改状态</td><td></td><td>较多</td><td>重点记住 a{} 和 a:hover  实际开发的写法</td></tr></tbody></table><h2 id="11-标签显示模式-display-重点"><a href="#11-标签显示模式-display-重点" class="headerlink" title="11 标签显示模式(display)重点"></a>11 标签显示模式(display)重点</h2><h3 id="11-1-什么是标签显示模式"><a href="#11-1-什么是标签显示模式" class="headerlink" title="11.1 什么是标签显示模式"></a>11.1 什么是标签显示模式</h3><p>什么是标签的显示模式？<br>标签以什么方式进行显示,比如div自己占一行,比如span一行可以放很多个</p><p>作用:<br>我们网页的标签非常多,再不同地方会用到不同类型的标签,以便更好的完成我们的网页。</p><p>标签的类型(分类)<br>HTML标签一般分为块标签和行内标签两种类型,它们也称块元素和行内元素。</p><h3 id="11-2-块级元素-block-level"><a href="#11-2-块级元素-block-level" class="headerlink" title="11.2 块级元素(block-level)"></a>11.2 块级元素(block-level)</h3><pre class="line-numbers language-none"><code class="language-none">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等,其中&lt;div&gt;标签是最典型的块元素。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/12%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0.png"></p><p>块级元素的特点<br>(1)自己独占一行<br>(2)高度,宽度、外边距以及内边距都可以控制。<br>(3)宽度默认是容器(父级宽度)的100%<br>(4)是一个容器及盒子,里面可以放行内或者块级元素。</p><p>注意:</p><ul><li>只有 文字才 能组成段落  因此 p  里面不能放块级元素,特别是 p 不能放div </li><li>同理还有这些标签h1,h2,h3,h4,h5,h6,dt,他们都是文字类块级标签,里面不能放其他块级元素。</li></ul><h3 id="11-3-行内元素-inline-level"><a href="#11-3-行内元素-inline-level" class="headerlink" title="11.3 行内元素(inline-level)"></a>11.3 行内元素(inline-level)</h3><pre class="line-numbers language-none"><code class="language-none">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等,其中&lt;span&gt;标签最典型的行内元素。有的地方也成内联元素<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/13%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0.png"></p><p>行内元素的特点:<br>(1)相邻行内元素在一行上,一行可以显示多个。<br>(2)高、宽直接设置是无效的。<br>(3)默认宽度就是它本身内容的宽度。<br>(4)<strong>行内元素只能容纳文本或则其他行内元素。</strong></p><p>注意:</p><ul><li>链接里面不能再放链接。</li><li>特殊情况a里面可以放块级元素,但是给a转换一下块级模式最安全。</li></ul><h3 id="11-4-行内块元素-inline-block"><a href="#11-4-行内块元素-inline-block" class="headerlink" title="11.4 行内块元素(inline-block)"></a>11.4 行内块元素(inline-block)</h3><pre class="line-numbers language-none"><code class="language-none">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;,可以对它们设置宽高和对齐属性,有些资料可能会称它们为行内块元素。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/14%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0.png"></p><p>行内块元素的特点:<br>(1)和相邻行内元素(行内块)在一行上,但是之间会有空白缝隙。一行可以显示多个<br>(2)默认宽度就是它本身内容的宽度。<br>(3)高度,行高、外边距以及内边距都可以控制。</p><h3 id="11-5-三种模式总结区别"><a href="#11-5-三种模式总结区别" class="headerlink" title="11.5 三种模式总结区别"></a>11.5 三种模式总结区别</h3><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或则其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h3 id="11-6-标签显示模式转换-display"><a href="#11-6-标签显示模式转换-display" class="headerlink" title="11.6 标签显示模式转换 display"></a>11.6 标签显示模式转换 display</h3><ul><li>块转行内:display:inline;</li><li>行内转块:display:block;</li><li>块、行内元素转换为行内块: display: inline-block;</li></ul><h2 id="12-行高-line-height"><a href="#12-行高-line-height" class="headerlink" title="12 行高(line-height)"></a>12 行高(line-height)</h2><h3 id="12-1-行高测量"><a href="#12-1-行高测量" class="headerlink" title="12.1 行高测量"></a>12.1 行高测量</h3><p>行高的测量方法:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/line1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/line2.png"></p><h3 id="12-2-单行文本垂直居中"><a href="#12-2-单行文本垂直居中" class="headerlink" title="12.2 单行文本垂直居中"></a>12.2 单行文本垂直居中</h3><p>行高我们利用最多的一个地方是: 可以让单行文本在盒子中垂直居中对齐。</p><p><strong>文字的行高等于盒子的高度。</strong></p><p>行高   =  上距离 +  内容高度  + 下距离 </p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/1.png"></p><p>上距离和下距离总是相等的,因此文字看上去是垂直居中的。</p><p><strong>行高和高度的三种关系</strong></p><ul><li>如果行高等于高度  文字会垂直居中</li><li>如果行高大于高度  文字会偏下 </li><li>如果行高小于高度  文字会偏上 </li></ul><h2 id="13-CSS-背景-background"><a href="#13-CSS-背景-background" class="headerlink" title="13 CSS 背景(background)"></a>13 CSS 背景(background)</h2><h3 id="13-1-背景颜色-color"><a href="#13-1-背景颜色-color" class="headerlink" title="13.1 背景颜色(color)"></a>13.1 背景颜色(color)</h3><p>语法:</p><pre class="line-numbers language-none"><code class="language-none">background-color:颜色值;   默认的值是 transparent  透明的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="13-2-背景图片-image"><a href="#13-2-背景图片-image" class="headerlink" title="13.2 背景图片(image)"></a>13.2 背景图片(image)</h3><p>语法: </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-image</span> <span class="token punctuation">:</span> none | url <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th align="center">作用</th></tr></thead><tbody><tr><td>none</td><td align="center">无背景图(默认的)</td></tr><tr><td>url</td><td align="center">使用绝对或相对地址指定背景图像</td></tr></tbody></table><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-image</span> <span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/demo.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>小技巧: 我们提倡背景图片后面的地址,url不要加引号。</p><h3 id="13-3-背景平铺-repeat"><a href="#13-3-背景平铺-repeat" class="headerlink" title="13.3 背景平铺(repeat)"></a>13.3 背景平铺(repeat)</h3><p>语法: </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-repeat</span> <span class="token punctuation">:</span> repeat | no-repeat | repeat-x | repeat-y <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th align="center">作用</th></tr></thead><tbody><tr><td>repeat</td><td align="center">背景图像在纵向和横向上平铺(默认的)</td></tr><tr><td>no-repeat</td><td align="center">背景图像不平铺</td></tr><tr><td>repeat-x</td><td align="center">背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td align="center">背景图像在纵向平铺</td></tr></tbody></table><h3 id="13-4-背景位置-position-重点"><a href="#13-4-背景位置-position-重点" class="headerlink" title="13.4 背景位置(position) 重点"></a>13.4 背景位置(position) 重点</h3><p>语法: </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-position</span> <span class="token punctuation">:</span> length || length<span class="token property">background-position</span> <span class="token punctuation">:</span> position || position <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th align="center">值</th></tr></thead><tbody><tr><td>length</td><td align="center">百分数 | 由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td align="center">top | center | bottom | left | center | right   方位名词</td></tr></tbody></table><p>注意:</p><ul><li>必须先指定background-image属性</li><li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li><li>如果指定两个值,两个值都是方位名字,则两个值前后顺序无关,比如left  top和top  left效果一致</li><li>如果只指定了一个方位名词,另一个值默认居中对齐。</li><li>如果position 后面是精确坐标, 那么第一个,肯定是 x  第二的一定是y</li><li>如果只指定一个数值,那该数值一定是x坐标,另一个默认垂直居中</li><li>如果指定的两个值是 精确单位和方位名字混合使用,则第一个值是x坐标,第二个值是y坐标</li></ul><p><strong>实际工作用的最多的,就是背景图片居中对齐。</strong></p><h3 id="13-5-背景附着"><a href="#13-5-背景附着" class="headerlink" title="13.5 背景附着"></a>13.5 背景附着</h3><p>背景附着就是解释背景是滚动的还是固定的</p><p>语法: </p><pre class="line-numbers language-none"><code class="language-none">background-attachment : scroll | fixed <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th align="center">作用</th></tr></thead><tbody><tr><td>scroll</td><td align="center">背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td align="center">背景图像固定</td></tr></tbody></table><h3 id="13-6-背景简写"><a href="#13-6-背景简写" class="headerlink" title="13.6 背景简写"></a>13.6 背景简写</h3><p>background:属性的值的书写顺序官方并没有强制标准的。为了可读性,建议大家如下写:<br>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</p><p>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>image.jpg<span class="token punctuation">)</span></span> repeat-y  scroll center top <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="案例-导航栏案例"><a href="#案例-导航栏案例" class="headerlink" title="案例: 导航栏案例"></a>案例: 导航栏案例</h5><h3 id="13-7-背景透明-CSS3"><a href="#13-7-背景透明-CSS3" class="headerlink" title="13.7 背景透明(CSS3)"></a>13.7 背景透明(CSS3)</h3><p>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>最后一个参数是alpha 透明度  取值范围 <code>0~1</code>之间</li><li>我们习惯把0.3 的 0 省略掉  这样写  background: rgba(0, 0, 0, .3);</li><li>注意:  背景半透明是指盒子背景半透明, 盒子里面的内容不受影响</li><li>因为是CSS3 ,所以 低于 ie9 的版本是不支持的。</li></ul><h3 id="13-8-背景总结"><a href="#13-8-背景总结" class="headerlink" title="13.8 背景总结"></a>13.8 背景总结</h3><table><thead><tr><th>属性</th><th align="left">作用</th><th align="left">值</th></tr></thead><tbody><tr><td>background-color</td><td align="left">背景颜色</td><td align="left">预定义的颜色值/十六进制/RGB代码</td></tr><tr><td>background-image</td><td align="left">背景图片</td><td align="left">url(图片路径)</td></tr><tr><td>background-repeat</td><td align="left">是否平铺</td><td align="left">repeat/no-repeat/repeat-x/repeat-y</td></tr><tr><td>background-position</td><td align="left">背景位置</td><td align="left">length/position    分别是x  和 y坐标, 切记 如果有 精确数值单位,则必须按照先X 后Y 的写法</td></tr><tr><td>background-attachment</td><td align="left">背景固定还是滚动</td><td align="left">scroll/fixed</td></tr><tr><td>背景简写</td><td align="left">更简单</td><td align="left">背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序</td></tr><tr><td>背景透明</td><td align="left">让盒子半透明</td><td align="left">background: rgba(0,0,0,0.3);   后面必须是 4个值</td></tr></tbody></table><h2 id="14-CSS-三大特性"><a href="#14-CSS-三大特性" class="headerlink" title="14 CSS 三大特性"></a>14 CSS 三大特性</h2><h3 id="14-1-CSS层叠性"><a href="#14-1-CSS层叠性" class="headerlink" title="14.1 CSS层叠性"></a>14.1 CSS层叠性</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/20%E5%B1%82%E5%8F%A0%E6%80%A7.png"></p><p>概念:<br>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上,那么这个时候一个属性就会将另一个属性层叠掉</p><p>原则:</p><ul><li>样式冲突,遵循的原则是<strong>就近原则</strong>。 哪个样式离着结构近,就执行哪个样式。</li><li>样式不冲突,不会层叠</li></ul><h3 id="14-2-CSS继承性"><a href="#14-2-CSS继承性" class="headerlink" title="14.2 CSS继承性"></a>14.2 CSS继承性</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/21%E7%BB%A7%E6%89%BF%E6%80%A7.png"></p><p>概念:</p><p>子标签会继承父标签的某些样式,如文本颜色和字号。</p><p>想要设置一个可继承的属性,只需将它应用于父元素即可。</p><p>简单的理解就是:子承父业。</p><p><strong>注意</strong>:</p><ul><li>恰当地使用继承可以简化代码,降低CSS样式的复杂性。比如有很多子级孩子都需要某个样式,可以给父级指定一个,这些孩子继承过来就好了。</li><li>子元素可以继承父元素的样式(<strong>text-,font-,line-这些元素开头的可以继承,以及color属性</strong>)</li></ul><h3 id="14-3-CSS优先级-重点"><a href="#14-3-CSS优先级-重点" class="headerlink" title="14.3 CSS优先级(重点)"></a>14.3 CSS优先级(重点)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/22%E4%BC%98%E5%85%88%E7%BA%A7.png"></p><p>概念:</p><p>定义CSS样式时,经常出现两个或更多规则应用在同一元素上,此时,</p><ul><li>选择器相同,则执行层叠性</li><li>选择器不同,就会出现优先级的问题。</li></ul><h5 id="1-权重计算公式"><a href="#1-权重计算公式" class="headerlink" title="1)权重计算公式"></a>1)权重计算公式</h5><p>关于CSS权重,我们需要一套计算公式来去计算,这个就是 CSS Specificity(特殊性)</p><table><thead><tr><th>标签选择器</th><th>计算权重公式</th></tr></thead><tbody><tr><td>继承或者 *</td><td>0,0,0,0</td></tr><tr><td>每个元素(标签选择器)</td><td>0,0,0,1</td></tr><tr><td>每个类,伪类</td><td>0,0,1,0</td></tr><tr><td>每个ID</td><td>0,1,0,0</td></tr><tr><td>每个行内样式 style=””</td><td>1,0,0,0</td></tr><tr><td>每个!important  重要的</td><td>∞ 无穷大</td></tr></tbody></table><ul><li>值从左到右,左面的最大,一级大于一级,数位之间没有进制,级别之间不可超越。 </li><li>关于CSS权重,我们需要一套计算公式来去计算,这个就是 CSS Specificity(特殊性)</li><li>div {<pre><code>color: pink!important;  </code></pre>}</li></ul><h5 id="2-权重叠加"><a href="#2-权重叠加" class="headerlink" title="2)权重叠加"></a>2)权重叠加</h5><p>我们经常用交集选择器,后代选择器等,是有多个基础选择器组合而成,那么此时,就会出现权重叠加。</p><p>就是一个简单的加法计算</p><ul><li>div ul  li   ——&gt;      0,0,0,3</li><li>.nav ul li   ——&gt;      0,0,1,2</li><li>a:hover      ——&gt;      0,0,1,1</li><li>.nav a       ——&gt;      0,0,1,1</li></ul><p>注意:<br>数位之间没有进制 比如说: 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0, 所以不会存在10个div能赶上一个类选择器的情况。</p><h5 id="3-继承的权重是0"><a href="#3-继承的权重是0" class="headerlink" title="3)继承的权重是0"></a>3)继承的权重是0</h5><p>当我们修改样式时,一定要看该标签有没有被选中。</p><ol><li>如果选中了,那么以上面的公式来计权重。谁大听谁的。 </li><li>如果没有选中,那么权重是0,因为继承的权重为0.</li></ol><h2 id="15-CSS注释"><a href="#15-CSS注释" class="headerlink" title="15 CSS注释"></a>15 CSS注释</h2><p><strong>CSS注释规则:</strong></p><pre class="line-numbers language-none"><code class="language-none">/*  需要注释的内容  */  进行注释的,即在需要注释的内容前使用 "/*" 标记开始注释,在内容的结尾使用 "*/"结束。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span> <span class="token comment">/* 所有的字体是14像素大小*/</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-盒子模型-CSS重点"><a href="#16-盒子模型-CSS重点" class="headerlink" title="16 盒子模型(CSS重点)"></a>16 盒子模型(CSS重点)</h2><p>css学习三大重点: css 盒子模型、浮动、定位 </p><h3 id="16-1-看透网页布局的本质"><a href="#16-1-看透网页布局的本质" class="headerlink" title="16.1 看透网页布局的本质"></a>16.1 看透网页布局的本质</h3><p>网页布局的本质:</p><ul><li>首先利用CSS设置好盒子的大小,然后摆放盒子的位置。</li><li>最后把网页元素比如文字图片等等,放入盒子里面。</li></ul><p>盒子是网页布局的关键点</p><h3 id="16-2-盒子模型-Box-Model"><a href="#16-2-盒子模型-Box-Model" class="headerlink" title="16.2 盒子模型(Box Model)"></a>16.2 盒子模型(Box Model)</h3><p>盒子模型:<br>就是把HTML页面中的布局元素看作是一个矩形的盒子,也就是一个盛装内容的容器。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/boxs.png"></p><ul><li>盒子模型有元素的内容、边框(border)、内边距(padding)、和外边距(margin)组成。</li><li>盒子里面的文字和图片等元素是 内容区域</li><li>盒子的厚度 我们成为 盒子的边框 </li><li>盒子内容与边框的距离是内边距(类似单元格的 cellpadding)</li><li>盒子与盒子之间的距离是外边距(类似单元格的 cellspacing)</li></ul><p><strong>标准盒子模型</strong><br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%A0%87%E5%87%86%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png"></p><h3 id="16-3-盒子边框-border"><a href="#16-3-盒子边框-border" class="headerlink" title="16.3 盒子边框(border)"></a>16.3 盒子边框(border)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%9B%92%E5%AD%90%E8%BE%B9%E6%A1%86.png"></p><p>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border</span> <span class="token punctuation">:</span> border-width || border-style || border-color <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性</th><th align="center">作用</th></tr></thead><tbody><tr><td>border-width</td><td align="center">定义边框粗细,单位是px</td></tr><tr><td>border-style</td><td align="center">边框的样式</td></tr><tr><td>border-color</td><td align="center">边框颜色</td></tr></tbody></table><p>边框的样式:</p><ul><li>none:没有边框即忽略所有边框的宽度(默认值)</li><li>solid:边框为单实线(最为常用的)</li><li>dashed:边框为虚线  </li><li>dotted:边框为点线</li></ul><h4 id="16-3-1-边框综合设置"><a href="#16-3-1-边框综合设置" class="headerlink" title="16.3.1 边框综合设置"></a>16.3.1 边框综合设置</h4><pre class="line-numbers language-none"><code class="language-none">border : border-width || border-style || border-color <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>  没有顺序  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="16-3-2-盒子边框写法总结表"><a href="#16-3-2-盒子边框写法总结表" class="headerlink" title="16.3.2 盒子边框写法总结表"></a>16.3.2 盒子边框写法总结表</h4><p>很多情况下,我们不需要指定4个边框,我们是可以单独给4个边框分别指定的。</p><table><thead><tr><th align="left">上边框</th><th align="left">下边框</th><th align="left">左边框</th><th align="left">右边框</th></tr></thead><tbody><tr><td align="left">border-top-style:样式;</td><td align="left">border-bottom-style:样式;</td><td align="left">border-left-style:样式;</td><td align="left">border-right-style:样式;</td></tr><tr><td align="left">border-top-width:宽度;</td><td align="left">border- bottom-width:宽度;</td><td align="left">border-left-width:宽度;</td><td align="left">border-right-width:宽度;</td></tr><tr><td align="left">border-top-color:颜色;</td><td align="left">border- bottom-color:颜色;</td><td align="left">border-left-color:颜色;</td><td align="left">border-right-color:颜色;</td></tr><tr><td align="left">border-top:宽度 样式 颜色;</td><td align="left">border-bottom:宽度 样式 颜色;</td><td align="left">border-left:宽度 样式 颜色;</td><td align="left">border-right:宽度 样式 颜色;</td></tr></tbody></table><h4 id="16-3-3-表格的细线边框"><a href="#16-3-3-表格的细线边框" class="headerlink" title="16.3.3 表格的细线边框"></a>16.3.3 表格的细线边框</h4><p>通过表格的<code>cellspacing="0"</code>,将单元格与单元格之间的距离设置为0,</p><p>但是两个单元格之间的边框会出现重叠,从而使边框变粗</p><p>通过css属性:</p><pre class="line-numbers language-none"><code class="language-none">table{ border-collapse:collapse; }  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>collapse 单词是合并的意思</li><li>border-collapse:collapse; 表示相邻边框合并在一起。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;table</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">td</span> <span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">table, td</span> <span class="token punctuation">{</span><span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>  <span class="token comment">/*合并相邻边框*/</span><span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-4-内边距-padding"><a href="#16-4-内边距-padding" class="headerlink" title="16.4. 内边距(padding)"></a>16.4. 内边距(padding)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/16%E5%86%85%E8%BE%B9%E8%B7%9D.png"></p><h4 id="16-4-1-内边距"><a href="#16-4-1-内边距" class="headerlink" title="16.4.1 内边距:"></a>16.4.1 内边距:</h4><p>padding属性用于设置内边距。 <strong>是指边框与内容之间的距离。</strong></p><h4 id="16-4-2-设置"><a href="#16-4-2-设置" class="headerlink" title="16.4.2 设置"></a>16.4.2 设置</h4><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>padding-left</td><td align="left">左内边距</td></tr><tr><td>padding-right</td><td align="left">右内边距</td></tr><tr><td>padding-top</td><td align="left">上内边距</td></tr><tr><td>padding-bottom</td><td align="left">下内边距</td></tr></tbody></table><p>当我们给盒子指定padding值之后,发生了2件事情:</p><ol><li>内容和边框 有了距离,添加了内边距。</li><li>盒子会变大了。</li></ol><p><strong>注意:后面跟几个数值表示的意思是不一样的。</strong></p><p>我们分开写有点麻烦,我们可以不可以简写呢？</p><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding:上下左右内边距;</td></tr><tr><td>2个值</td><td>padding: 上下内边距    左右内边距 ;</td></tr><tr><td>3个值</td><td>padding:上内边距   左右内边距   下内边距;</td></tr><tr><td>4个值</td><td>padding: 上内边距 右内边距 下内边距 左内边距 ;</td></tr></tbody></table><p><strong>练习:</strong></p><p>请写出如下内边距:</p><ol><li>要求盒子有一个左边内边距是 5像素</li><li>要求简写的形式写出  一个盒子上下是 25像素   左右是15像素。</li><li>要求简写的形式写出 一个盒子  上内边距是 12像素  下内边距是 0  左内边距是 25像素  右内边距是 10像素</li></ol><h5 id="案例-新浪导航"><a href="#案例-新浪导航" class="headerlink" title="案例:  新浪导航"></a>案例:  新浪导航</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/al.gif"></p><h4 id="16-4-3-内盒尺寸计算-元素实际大小"><a href="#16-4-3-内盒尺寸计算-元素实际大小" class="headerlink" title="16.4.3 内盒尺寸计算(元素实际大小)"></a>16.4.3 内盒尺寸计算(元素实际大小)</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%A4%A7%E5%B0%8F.png"></p><p>宽度<br>Element Height = content height + padding + border (Height为内容高度)</p><p>高度<br>Element Width = content width + padding + border (Width为内容宽度)</p><p>盒子的实际的大小 =   内容的宽度和高度 +  内边距   +  边框   </p><h4 id="16-4-4-内边距产生的问题"><a href="#16-4-4-内边距产生的问题" class="headerlink" title="16.4.4 内边距产生的问题"></a>16.4.4 内边距产生的问题</h4><p>问题:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/31padding%E9%97%AE%E9%A2%98.png"></p><p>会撑大原来的盒子</p><p>解决:</p><p>通过给设置了宽高的盒子,减去相应的内边距的值,维持盒子原有的大小</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/32padding%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.png"></p><p><strong>练习</strong></p><ol><li>一个盒子宽度为100, padding为 10, 边框为5像素,问这个盒子实际的宽度的是()</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  (A) 130</p></li><li><p><input disabled="" type="checkbox">  (B) 135 </p></li><li><p><input disabled="" type="checkbox">  (C) 125</p></li><li><p><input disabled="" type="checkbox">  (D) 115</p></li></ul><blockquote><p>100 +  20 + 10 </p></blockquote><ol start="2"><li>关于根据下列代码计算 盒子宽高下列说法正确的是()</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000000<span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span> 5px solid blue<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token property">padding-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> (A) 宽度为200px 高度为200px</li><li><input checked="" disabled="" type="checkbox"> (B) 宽度为352px 高度为306px</li><li><input disabled="" type="checkbox"> (C) 宽度为302px 高度为307px</li><li><input disabled="" type="checkbox"> (D) 宽度为302px 高度为252px</li></ul><blockquote><p>w  200 +  150 + 2  = 352<br>h  200 +  100 + 6  = 306 </p></blockquote><h4 id="16-4-5-padding不影响盒子大小情况"><a href="#16-4-5-padding不影响盒子大小情况" class="headerlink" title="16.4.5 padding不影响盒子大小情况"></a>16.4.5 padding不影响盒子大小情况</h4><blockquote><p>如果没有给一个盒子指定宽度,此时,如果给这个盒子指定padding,则不会撑开盒子。</p></blockquote><h3 id="16-5-外边距-margin"><a href="#16-5-外边距-margin" class="headerlink" title="16.5 外边距(margin)"></a>16.5 外边距(margin)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/18margin%E5%A4%96%E8%BE%B9%E8%B7%9D.png"></p><h4 id="16-5-1-外边距"><a href="#16-5-1-外边距" class="headerlink" title="16.5.1 外边距"></a>16.5.1 外边距</h4><p>margin属性用于设置外边距。margin就是控制<strong>盒子和盒子之间的距离</strong></p><h4 id="16-5-2-设置"><a href="#16-5-2-设置" class="headerlink" title="16.5.2 设置:"></a>16.5.2 设置:</h4><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>margin-left</td><td align="left">左外边距</td></tr><tr><td>margin-right</td><td align="left">右外边距</td></tr><tr><td>margin-top</td><td align="left">上外边距</td></tr><tr><td>margin-bottom</td><td align="left">下外边距</td></tr></tbody></table><p>margin值的简写(复合写法)代表意思跟padding完全相同。</p><h4 id="16-5-3-块级盒子水平居中"><a href="#16-5-3-块级盒子水平居中" class="headerlink" title="16.5.3 块级盒子水平居中"></a>16.5.3 块级盒子水平居中</h4><p>可以让一个块级盒子实现水平居中必须:</p><ul><li>盒子必须指定了宽度(width)</li><li>然后就给<strong>左右的外边距都设置为auto</strong>,</li></ul><p>实际工作中常用这种方式进行网页布局,示例代码如下:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.header</span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span>960px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常见的写法,以下三种都可以:</p><ul><li>margin-left: auto;   margin-right: auto;</li><li>margin: auto;</li><li>margin: 0 auto;</li></ul><h4 id="16-5-4-文字居中和盒子居中区别"><a href="#16-5-4-文字居中和盒子居中区别" class="headerlink" title="16.5.4 文字居中和盒子居中区别"></a>16.5.4 文字居中和盒子居中区别</h4><ol><li>盒子内的文字水平居中是  text-align: center,  而且还可以让 行内元素和行内块居中对齐</li><li>块级盒子水平居中  左右margin 改为 auto </li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/*  文字 行内元素 行内块元素水平居中 */</span><span class="token property">margin</span><span class="token punctuation">:</span> 10px auto<span class="token punctuation">;</span>  <span class="token comment">/* 块级盒子水平居中  左右margin 改为 auto 就阔以了 上下margin都可以 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="16-5-5-插入图片和背景图片区别"><a href="#16-5-5-插入图片和背景图片区别" class="headerlink" title="16.5.5 插入图片和背景图片区别"></a>16.5.5 插入图片和背景图片区别</h4><ol><li>插入图片 我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin</li><li>背景图片我们一般用于小图标背景 或者 超大背景图片  背景图片 只能通过  background-position</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token comment">/* 插入图片更改大小 width 和 height */</span><span class="token property">height</span><span class="token punctuation">:</span> 210px<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span> <span class="token comment">/* 插入当图片也是一个盒子 */</span><span class="token punctuation">}</span><span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid purple<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> #fff <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/sun.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token property">background-position</span><span class="token punctuation">:</span> 30px 50px<span class="token punctuation">;</span> <span class="token comment">/* 背景图片更改位置 我用 background-position */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="16-5-6-清除元素的默认内外边距-重要"><a href="#16-5-6-清除元素的默认内外边距-重要" class="headerlink" title="16.5.6 清除元素的默认内外边距(重要)"></a>16.5.6 清除元素的默认内外边距(重要)</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/19%E6%B8%85%E9%99%A4%E5%86%85%E5%A4%96%E8%BE%B9%E8%B7%9D.png"></p><p>为了更灵活方便地控制网页中的元素,制作网页时,我们需要将元素的默认内外边距清除</p><p>代码: </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>   <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>         <span class="token comment">/* 清除内边距 */</span>   <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>          <span class="token comment">/* 清除外边距 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意:  </p><ul><li>行内元素为了照顾兼容性,尽量只设置左右内外边距,不要设置上下内外边距。</li></ul><h4 id="16-5-7-外边距合并"><a href="#16-5-7-外边距合并" class="headerlink" title="16.5.7 外边距合并"></a>16.5.7 外边距合并</h4><p>使用margin定义块元素的<strong>垂直外边距</strong>时,可能会出现外边距的合并。</p><h5 id="1-相邻块元素垂直外边距的合并"><a href="#1-相邻块元素垂直外边距的合并" class="headerlink" title="(1) 相邻块元素垂直外边距的合并"></a>(1) 相邻块元素垂直外边距的合并</h5><p>当上下相邻的两个块元素相遇时,如果上面的元素有下外边距margin-bottom<br>下面的元素有上外边距margin-top,则他们之间的垂直间距不是margin-bottom与margin-top之和<br><strong>取两个值中的较大者</strong>这种现象被称为相邻块元素垂直外边距的合并(也称外边距塌陷)。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/www.png"></p><p><strong>解决方案:尽量只给一个盒子添加margin值</strong>。</p><h5 id="2-嵌套块元素垂直外边距的合并-塌陷"><a href="#2-嵌套块元素垂直外边距的合并-塌陷" class="headerlink" title="(2) 嵌套块元素垂直外边距的合并(塌陷)"></a>(2) 嵌套块元素垂直外边距的合并(塌陷)</h5><ul><li>对于两个嵌套关系的块元素,如果父元素没有上内边距及边框</li><li>父元素的上外边距会与子元素的上外边距发生合并</li><li>合并后的外边距为两者中的较大者</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/n.png"></p><p><strong>解决方案:</strong></p><ol><li>可以为父元素定义上边框。</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加overflow:hidden。</li></ol><p>还有其他方法,比如浮动、固定、绝对定位的盒子不会有问题</p><h3 id="16-6-盒子模型布局稳定性"><a href="#16-6-盒子模型布局稳定性" class="headerlink" title="16.6 盒子模型布局稳定性"></a>16.6 盒子模型布局稳定性</h3><p>学习完盒子模型,内边距和外边距,什么情况下用内边距,什么情况下用外边距？</p><ul><li>大部分情况下是可以混用的。就是说,你用内边距也可以,用外边距也可以。 你觉得哪个方便,就用哪个。</li></ul><p>我们根据稳定性来分,建议如下:<br>按照 优先使用宽度(width)其次使用内边距(padding)再次外边距(margin)。   </p><pre class="line-numbers language-none"><code class="language-none">width &gt;  padding  &gt;   margin   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因:</p><ul><li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug(讨厌)所以最后使用。</li><li>padding  会影响盒子大小, 需要进行加减计算(麻烦) 其次使用。</li><li>width   没有问题(嗨皮)我们经常使用宽度剩余法 高度剩余法来做。</li></ul><h3 id="16-7-ps基本操作以及常用快捷键"><a href="#16-7-ps基本操作以及常用快捷键" class="headerlink" title="16.7 ps基本操作以及常用快捷键:"></a>16.7 ps基本操作以及常用快捷键:</h3><p>因为网页美工大部分效果图都是利用ps 来做的,所以以后我们大部分切图工作都是在ps里面完成。</p><ul><li>文件–打开 –  可以打开 我们要测量的图片</li><li>ctrl+r 可以打开标尺  或者  视图 –  标尺</li><li>右击标尺,  把里面的单位改为  像素  </li><li>ctrl+ 加号 键  可以 放大  视图  ctrl+ 减号 缩小视图</li><li>按住空格键,  鼠标可以 变成小手 ,拖动 ps 视图</li><li>用选区 拖动  可以 测量 大小 </li><li>ctrl+ d  可以取消选区  或者旁边空白处点击一下也可以取消选区</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/ps2.png"></p><h5 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/lieb.png"></p><h5 id="去掉列表默认的样式"><a href="#去掉列表默认的样式" class="headerlink" title="去掉列表默认的样式"></a>去掉列表默认的样式</h5><p>无序和有序列表前面默认的列表样式,在不同浏览器显示效果不一样,而且也比较难看,所以,我们一般上来就直接去掉这些列表样式就行了。 代码如下</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li</span> <span class="token punctuation">{</span> <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%9C%86%E8%A7%92.png"></p><p>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span>length<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中每一个值可以为 数值或百分比的形式。 </p><p>技巧: 让一个正方形变成圆圈 </p><pre class="line-numbers language-none"><code class="language-none">border-radius: 50%;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/radio.png"></p><ul><li>以上效果图矩形的圆角, 就不要用百分比了,因为百分比会表示高度和宽度的一半。</li><li>而我们这里矩形就只用高度的一半就好了。精确单位。</li></ul><h5 id="盒子阴影-CSS3"><a href="#盒子阴影-CSS3" class="headerlink" title="盒子阴影(CSS3)"></a>盒子阴影(CSS3)</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E9%98%B4%E5%BD%B1.png"></p><p>语法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span>水平阴影 垂直阴影 模糊距离<span class="token punctuation">(</span>虚实<span class="token punctuation">)</span>  阴影尺寸<span class="token punctuation">(</span>影子大小<span class="token punctuation">)</span>  阴影颜色  内/外阴影<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/1498467567011.png"></p><ul><li>前两个属性是必须写的。其余的可以省略。</li><li>外阴影 (outset) 是默认的 但是不能写   想要内阴影可以写  inset </li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span><span class="token comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span><span class="token comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸(影子大小) 阴影颜色  内/外阴影; */</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 15px 30px  <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-CSS书写规范"><a href="#17-CSS书写规范" class="headerlink" title="17 CSS书写规范"></a>17 CSS书写规范</h2><h3 id="17-1-空格规范"><a href="#17-1-空格规范" class="headerlink" title="17.1 空格规范"></a>17.1 空格规范</h3><p>【强制】 选择器 与 { 之间必须包含空格。</p><p>示例: </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.selector</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>【强制】 属性名 与之后的 : 之间不允许包含空格, : 与 属性值 之间必须包含空格。</p><p>示例:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="17-2-选择器规范"><a href="#17-2-选择器规范" class="headerlink" title="17.2 选择器规范"></a>17.2 选择器规范</h3><p>【强制】 并集选择器,每个选择器声明必须独占一行。</p><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">/* good */.post,.page,.comment {    line-height: 1.5;}/* bad */.post, .page, .comment {    line-height: 1.5;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【建议】 一般情况情况下,选择器的嵌套层级应不大于 3 级,位置靠后的限定条件应尽可能精确。</p><p>示例:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* good */</span><span class="token selector">#username input</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">.comment .avatar</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/* bad */</span><span class="token selector">.page .header .login  input</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">.comment div *</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-3-属性规范"><a href="#17-3-属性规范" class="headerlink" title="17.3 属性规范"></a>17.3 属性规范</h3><p>【强制】 属性定义必须另起一行。</p><p>示例:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* good */</span><span class="token selector">.selector</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* bad */</span><span class="token selector">.selector</span> <span class="token punctuation">{</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【强制】 属性定义后必须以分号结尾。</p><p>示例:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* good */</span><span class="token selector">.selector</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* bad */</span><span class="token selector">.selector</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-浮动-float"><a href="#18-浮动-float" class="headerlink" title="18 浮动(float)"></a>18 浮动(float)</h2><h3 id="18-1-CSS-布局的三种机制"><a href="#18-1-CSS-布局的三种机制" class="headerlink" title="18.1 CSS 布局的三种机制"></a>18.1 CSS 布局的三种机制</h3><blockquote><p>网页布局的核心——就是<strong>用 CSS 来摆放盒子</strong>。</p></blockquote><p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置,分别是<strong>普通流</strong>(标准流)、<strong>浮动</strong>和<strong>定位</strong>,其中: </p><ol><li><strong>普通流</strong>(标准流)<ul><li><strong>块级元素</strong>会独占一行,<strong>从上向下</strong>顺序排列;<ul><li>常用元素:<code>div、hr、p、h1~h6、ul、ol、dl、form、table</code></li></ul></li><li><strong>行内元素</strong>会按照顺序,<strong>从左到右</strong>顺序排列,碰到父元素边缘则自动换行;<ul><li>常用元素:span、a、i、em等</li></ul></li></ul></li><li><strong>浮动</strong><ul><li>让盒子从普通流中<strong>浮</strong>起来,主要作用让多个块级盒子一行显示。</li></ul></li><li><strong>定位</strong><ul><li>将盒子<strong>定</strong>在浏览器的某一个<strong>位</strong>置——CSS 离不开定位,特别是后面的 js 特效。</li></ul></li></ol><h3 id="18-2-为什么需要浮动？"><a href="#18-2-为什么需要浮动？" class="headerlink" title="18.2 为什么需要浮动？"></a>18.2 为什么需要浮动？</h3><p>思考题:</p><p> 我们首先要思考以下2个布局中最常见的问题？</p><ol><li>如何让多个盒子(div)水平排列成一行？</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/03_%E6%B0%B4%E5%B9%B3%E6%8E%92%E5%88%97div.png"></p><ol start="2"><li>如何实现盒子的左右对齐？</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/float1.png"></p><p>虽然我们前面学过行内块(inline-block) 但是他却有自己的缺陷:</p><ol><li>它可以实现多个元素一行显示,但是中间会有空白缝隙,不能满足以上第一个问题。</li><li>它不能实现以上第二个问题,盒子左右对齐 </li></ol><blockquote><p>因为一些网页布局要求,标准流不能满足我们的需要了,因此我们需要浮动来完成网页布局。</p></blockquote><h3 id="18-3-什么是浮动-float"><a href="#18-3-什么是浮动-float" class="headerlink" title="18.3  什么是浮动(float)"></a>18.3  什么是浮动(float)</h3><p><strong>概念</strong>:元素的浮动是指<strong>设置了浮动属性的元素</strong></p><ol><li>脱离标准普通流的控制</li><li>移动到指定位置。</li></ol><p>作用:</p><ol><li><strong>让多个盒子(div)水平排列成一行</strong>,使得浮动成为布局的重要手段。</li><li>可以实现盒子的左右对齐等等..</li><li>浮动最早是用来<strong>控制图片</strong>,实现<strong>文字环绕图片的效果</strong>。</li></ol><p>语法:</p><p>在 CSS 中,通过 <code>float</code> 属性定义浮动,语法如下:</p><pre class="line-numbers language-none"><code class="language-none">选择器 { float: 属性值; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>none</strong></td><td>元素不浮动(<strong>默认值</strong>)</td></tr><tr><td><strong>left</strong></td><td>元素向<strong>左</strong>浮动</td></tr><tr><td><strong>right</strong></td><td>元素向<strong>右</strong>浮动</td></tr></tbody></table><h5 id="1-浮动口诀之-浮"><a href="#1-浮动口诀之-浮" class="headerlink" title="1) 浮动口诀之 浮"></a>1) 浮动口诀之 浮</h5><p>浮动 脱离标准流。 俗称 “脱标”   </p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/23%E6%B5%AE%E5%8A%A8%E8%84%B1%E6%A0%87.png"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box1</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box2</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong>:</p><p><code>float</code> 属性会让盒子漂浮在标准流的上面,所以第二个标准流的盒子跑到浮动盒子的底下了。</p><h5 id="2-浮动口诀之-漏"><a href="#2-浮动口诀之-漏" class="headerlink" title="2)  浮动口诀之 漏"></a>2)  浮动口诀之 漏</h5><p>浮动的盒子,把自己原来的位置漏给下面标准流的盒子,就是不占有原来位置,是脱离标准流的,我们俗称 “脱标”。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box1</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 让第 1 个盒子漂浮起来,不占位置 */</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box2</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以,box2下面的其实就是跑到box1盒子下面了, 被box1给压住了,遮挡起来了</p><p>看个立体图</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/23%E6%B5%AE%E5%8A%A8%E8%84%B1%E6%A0%87.png"></p><h5 id="3-浮动口诀之-特"><a href="#3-浮动口诀之-特" class="headerlink" title="3) 浮动口诀之 特"></a>3) 浮动口诀之 特</h5><p>浮动特性  float属性会改变元素display属性。</p><p>任何元素都可以浮动。浮动元素会生成一个块级框,而不论它本身是何种元素。 生成的块级框和我们前面的行内块极其相似。</p><h5 id="案例-div-水平排列"><a href="#案例-div-水平排列" class="headerlink" title="案例:div 水平排列"></a>案例:div 水平排列</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token comment">/* 转换为行内块元素,可以水平显示,不过 div 之间有间隙,不方便处理 */</span>    <span class="token comment">/* display: inline-block; */</span>    <span class="token comment">/* 设置浮动属性,可以让 div 水平排列,并且没有间隙 */</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.two</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/24%E6%B5%AE%E5%8A%A8%E4%B8%80%E8%A1%8C%E6%98%BE%E7%A4%BA.png"></p><p><strong>注意: 浮动的元素互相贴靠一起的,但是如果父级宽度装不下这些浮动的盒子, 多出的盒子会另起一行对齐</strong></p><h3 id="18-4-浮动-float-小结"><a href="#18-4-浮动-float-小结" class="headerlink" title="18.4 浮动(float)小结"></a>18.4 浮动(float)小结</h3><p>我们使用浮动的核心目的——让多个块级盒子在同一行显示。 因为这是我们最常见的一种布局方式</p><p>float:<br>| 特点 | 说明                                                         |<br>| —- | ———————————————————— |<br>| 浮   | 加了浮动的盒子<strong>是浮起来</strong>的,漂浮在其他标准流盒子的上面。   |<br>| 漏   | 加了浮动的盒子<strong>是不占位置的</strong>,它原来的位置<strong>漏给了标准流的盒子</strong>。 |<br>| 特   | <strong>特别注意</strong>:浮动元素会改变display属性, 类似转换为了行内块,但是元素之间没有空白缝隙 |</p><h3 id="18-5-浮动-float-的应用-重要"><a href="#18-5-浮动-float-的应用-重要" class="headerlink" title="18.5 浮动(float)的应用(重要)"></a>18.5 浮动(float)的应用(重要)</h3><h5 id="浮动和标准流的父盒子搭配"><a href="#浮动和标准流的父盒子搭配" class="headerlink" title="浮动和标准流的父盒子搭配"></a>浮动和标准流的父盒子搭配</h5><p>我们知道,浮动是脱标的,会影响下面的标准流元素,此时,我们需要给浮动的元素添加一个标准流的父亲,这样最大化的减小了对其他标准流的影响。</p><blockquote><p>一个完整的网页,是 标准流 +  浮动 +  定位 一起完成的。</p></blockquote><h5 id="浮动应用案例"><a href="#浮动应用案例" class="headerlink" title="浮动应用案例"></a>浮动应用案例</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/mii.png"></p><p>注意,实际重要的导航栏中,我们不会直接用链接a而是用li包含链接(li+a)的做法。</p><ol><li>li+a 语义更清晰,一看这就是有条理的列表型内容。</li><li>如果直接用a,搜索引擎容易辨别为有堆砌关键字嫌疑(故意堆砌关键字容易被搜索引擎有降权的风险),从而影响网站排名</li></ol><h3 id="18-6-浮动-float-的扩展"><a href="#18-6-浮动-float-的扩展" class="headerlink" title="18.6  浮动(float)的扩展"></a>18.6  浮动(float)的扩展</h3><h5 id="1-浮动元素与父盒子的关系"><a href="#1-浮动元素与父盒子的关系" class="headerlink" title="1) 浮动元素与父盒子的关系"></a>1) 浮动元素与父盒子的关系</h5><ul><li>子盒子的浮动参照父盒子对齐</li><li>不会与父盒子的边框重叠,也不会超过父盒子的内边距<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/05_%E7%88%B6%E5%AD%90%E7%9B%92%E5%AD%90%E5%85%B3%E7%B3%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></li></ul><h5 id="2-浮动元素与兄弟盒子的关系"><a href="#2-浮动元素与兄弟盒子的关系" class="headerlink" title="2) 浮动元素与兄弟盒子的关系"></a>2) 浮动元素与兄弟盒子的关系</h5><p>在一个父级盒子中,如果<strong>前一个兄弟盒子</strong>是:</p><ul><li><strong>浮动</strong>的,那么<strong>当前盒子</strong>会与前一个盒子的顶部对齐;</li><li><strong>普通流</strong>的,那么<strong>当前盒子</strong>会显示在前一个兄弟盒子的下方。 </li></ul><blockquote><p>浮动只会影响当前的或者是后面的标准流盒子,不会影响前面的标准流。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/two1.jpg"></p><p><strong>建议:</strong></p><p><strong>如果一个盒子里面有多个子盒子,如果其中一个盒子浮动了,其他兄弟也应该浮动。防止引起问题</strong></p><h2 id="19-清除浮动"><a href="#19-清除浮动" class="headerlink" title="19 清除浮动"></a>19 清除浮动</h2><h3 id="19-1-为什么要清除浮动"><a href="#19-1-为什么要清除浮动" class="headerlink" title="19.1 为什么要清除浮动"></a>19.1 为什么要清除浮动</h3><p>因为父级盒子很多情况下,不方便给高度,但是子盒子浮动就不占有位置,最后父级盒子高度为0,就影响了下面的标准流盒子。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/n.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/no.jpg"></p><p>总结:</p><ul><li>由于浮动元素不再占用原文档流的位置,所以它会对后面的元素排版产生影响</li><li>准确地说,并不是清除浮动,而是<strong>清除浮动后造成的影响</strong></li></ul><h3 id="19-2-清除浮动本质"><a href="#19-2-清除浮动本质" class="headerlink" title="19.2 清除浮动本质"></a>19.2 清除浮动本质</h3><p><strong>清除浮动本质:</strong><br>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后, 父级就会根据浮动的子盒子自动检测高度。父级有了高度,就不会影响下面的标准流了</p><h3 id="19-3-清除浮动的方法"><a href="#19-3-清除浮动的方法" class="headerlink" title="19.3 清除浮动的方法"></a>19.3 清除浮动的方法</h3><p>在CSS中,clear属性用于清除浮动</p><p>语法:</p><pre class="line-numbers language-none"><code class="language-none">选择器{clear:属性值;}   clear 清除  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素(清除左侧浮动的影响)</td></tr><tr><td>right</td><td>不允许右侧有浮动元素(清除右侧浮动的影响)</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>但是我们实际工作中, 几乎只用 clear: both;</p><h5 id="1-额外标签法-隔墙法"><a href="#1-额外标签法-隔墙法" class="headerlink" title="1) 额外标签法(隔墙法)"></a>1) 额外标签法(隔墙法)</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value css language-css"><span class="token property">”clear</span><span class="token punctuation">:</span>both”</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>,或则其他标签br等亦可。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>优点: 通俗易懂,书写方便</li><li>缺点: 添加许多无意义的标签,结构化较差。</li></ul><h5 id="2-父级添加overflow属性方法"><a href="#2-父级添加overflow属性方法" class="headerlink" title="2) 父级添加overflow属性方法"></a>2) 父级添加overflow属性方法</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">可以给父级添加</span><span class="token punctuation">:</span> overflow为 hidden| auto| scroll  都可以实现。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>优点:  代码简洁</p><p>缺点:  内容增多时候容易造成不会自动换行导致内容被隐藏掉,无法显示需要溢出的元素。</p><h5 id="3-使用after伪元素清除浮动"><a href="#3-使用after伪元素清除浮动" class="headerlink" title="3) 使用after伪元素清除浮动"></a>3) 使用after伪元素清除浮动</h5><p><strong>:after 方式为空元素额外标签法的升级版,好处是不用单独加标签了</strong> </p><p>使用方法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token selector">.clearfix</span> <span class="token punctuation">{</span>*<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment">/* IE6、7 专有 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>优点: 符合闭合浮动思想  结构语义化正确</li><li>缺点: 由于IE6-7不支持:after,使用 zoom:1触发 hasLayout。</li><li>代表网站: 百度、淘宝网、网易等</li></ul><h5 id="4-使用双伪元素清除浮动"><a href="#4-使用双伪元素清除浮动" class="headerlink" title="4) 使用双伪元素清除浮动"></a>4) 使用双伪元素清除浮动</h5><p>使用方法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:before,.clearfix:after</span> <span class="token punctuation">{</span>   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span> <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.clearfix</span> <span class="token punctuation">{</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优点:  代码更简洁</li><li>缺点:  由于IE6-7不支持:after,使用 zoom:1触发 hasLayout。</li><li>代表网站: 小米、腾讯等</li></ul><h3 id="19-4-清除浮动总结"><a href="#19-4-清除浮动总结" class="headerlink" title="19.4 清除浮动总结"></a>19.4 清除浮动总结</h3><p><strong>什么时候用清除浮动呢？</strong></p><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了,我们就应该清除浮动了。</li></ol><table><thead><tr><th>清除浮动的方式</th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td>额外标签法(隔墙法)</td><td align="left">通俗易懂,书写方便</td><td align="left">添加许多无意义的标签,结构化较差。</td></tr><tr><td>父级overflow:hidden;</td><td align="left">书写简单</td><td align="left">溢出隐藏</td></tr><tr><td>父级after伪元素</td><td align="left">结构语义化正确</td><td align="left">由于IE6-7不支持:after,兼容性问题</td></tr><tr><td>父级双伪元素</td><td align="left">结构语义化正确</td><td align="left">由于IE6-7不支持:after,兼容性问题</td></tr></tbody></table><p>后面两种伪元素清除浮动,会使用就好</p><h2 id="20-Photoshop-切图"><a href="#20-Photoshop-切图" class="headerlink" title="20 Photoshop 切图"></a>20 Photoshop 切图</h2><p><strong>常见的图片格式</strong></p><pre class="line-numbers language-none"><code class="language-none">1. jpg图像格式: JPEG(.JPG)对色彩的信息保留较好,高清,颜色较多,我们产品类的图片经常用jpg格式的2. gif图像格式:GIF格式最多只能储存256色,所以通常用来显示简单图形及字体,但是可以保存透明背景和动画效果3. png图像格式是一种新兴的网络图形格式,结合了GIF和JPEG的优点,具有存储形式丰富的特点,能够保持透明背景4. PSD图像格式PSD格式是Photoshop的专用格式,里面可以存放图层、通道、遮罩等多种设计草稿。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS切图可以分为利用切片工具切图以及利用PS的插件快速切图。</p><h3 id="1-PS切片工具"><a href="#1-PS切片工具" class="headerlink" title="1) PS切片工具"></a>1) PS切片工具</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/1498466173246.png"></p><p>ps切图片,分两大步:</p><p><strong>1) 用切片选中图片</strong></p><ul><li>利用切片工具手动划出</li><li>图层菜单—新建基于图层的切片</li><li>利用辅助线 来切图 – 基于参考线的切片 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/1498466734205.png"></p><p><strong>2) 导出切片</strong></p><p>文件菜单-&gt;存储为web设备所用格式-&gt;选择我们要的图片格式-&gt;点存储-&gt;别忘了选中的切片</p><h5 id="辅助线和切片使用及清除"><a href="#辅助线和切片使用及清除" class="headerlink" title="辅助线和切片使用及清除"></a>辅助线和切片使用及清除</h5><p>视图菜单– 清除 辅助线/ 清除切片</p><h3 id="2-切图插件"><a href="#2-切图插件" class="headerlink" title="2) 切图插件"></a>2) 切图插件</h3><p>Cutterman是一款运行在photoshop中的插件,能够自动将你需要的图层进行输出, 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出,方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则,纯点击操作,方便、快捷,易于上手。</p><p>官网: <a href="http://www.cutterman.cn/zh/cutterman">http://www.cutterman.cn/zh/cutterman</a></p><p>注意: cutterman插件要求你的ps 必须是完整版,不能是绿色版,所以大家需要从新安装完整版本。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/sample1.gif"></p><h2 id="21-定位-position"><a href="#21-定位-position" class="headerlink" title="21 定位(position)"></a>21 定位(position)</h2><h3 id="21-1-CSS-布局的三种机制"><a href="#21-1-CSS-布局的三种机制" class="headerlink" title="21.1 CSS 布局的三种机制"></a>21.1 CSS 布局的三种机制</h3><blockquote><p>网页布局的核心 —— 就是<strong>用 CSS 来摆放盒子位置</strong>。</p></blockquote><p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置,分别是<strong>普通流</strong>、<strong>浮动</strong>和<strong>定位</strong>,其中:</p><ol><li><strong>普通流</strong>(<strong>标准流</strong>)</li><li><strong>浮动</strong><ul><li>让盒子从普通流中<strong>浮</strong>起来 —— <strong>让多个盒子(div)水平排列成一行</strong>。</li></ul></li><li><strong>定位</strong><ul><li>将盒子<strong>定</strong>在某一个<strong>位</strong>置  自由的漂浮在其他盒子的上面  —— CSS 离不开定位,特别是后面的 js 特效。</li></ul></li></ol><h3 id="21-2-为什么使用定位"><a href="#21-2-为什么使用定位" class="headerlink" title="21.2 为什么使用定位"></a>21.2 为什么使用定位</h3><blockquote><p>我们先来看一个效果,同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p></blockquote><p>1.<strong>吸引用户的眼球</strong>。</p><p>2.<strong>当我们滚动窗口的时候,盒子是固定屏幕某个位置的</strong></p><blockquote><p><strong>结论</strong>:要实现以上效果,<strong>标准流</strong>或<strong>浮动</strong>都无法快速实现<br>将盒子<strong>定</strong>在某一个<strong>位</strong>置  自由的漂浮在其他盒子(包括标准流和浮动)的上面 </p></blockquote><p>三种布局机制的上下顺序</p><p>标准流在最底层 (海底)  浮动的盒子在中间层 (海面)   定位的盒子在最上层 (天空)</p><h3 id="21-3-定位详解"><a href="#21-3-定位详解" class="headerlink" title="21.3 定位详解"></a>21.3 定位详解</h3><p>定位也是用来布局的,它有两部分组成:</p><blockquote><p><code>定位 = 定位模式 + 边偏移</code></p></blockquote><h4 id="21-3-1-边偏移"><a href="#21-3-1-边偏移" class="headerlink" title="21.3.1 边偏移"></a>21.3.1 边偏移</h4><p>简单说, 我们定位的盒子,是通过边偏移来移动位置的。</p><p>在 CSS 中,通过 <code>top</code>、<code>bottom</code>、<code>left</code> 和 <code>right</code> 属性定义元素的<strong>边偏移</strong>:(方位名词)</p><table><thead><tr><th>边偏移属性</th><th align="left">示例</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td align="left"><code>top: 80px</code></td><td><strong>顶端</strong>偏移量,定义元素相对于其父元素<strong>上边线的距离</strong>。</td></tr><tr><td><code>bottom</code></td><td align="left"><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量,定义元素相对于其父元素<strong>下边线的距离</strong>。</td></tr><tr><td><code>left</code></td><td align="left"><code>left: 80px</code></td><td><strong>左侧</strong>偏移量,定义元素相对于其父元素<strong>左边线的距离</strong>。</td></tr><tr><td><code>right</code></td><td align="left"><code>right: 80px</code></td><td><strong>右侧</strong>偏移量,定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table><p>定位的盒子有了边偏移才有价值。 一般情况下,凡是有定位地方必定有边偏移。</p><h4 id="21-3-2-定位模式-position"><a href="#21-3-2-定位模式-position" class="headerlink" title="21.3.2  定位模式 (position)"></a>21.3.2  定位模式 (position)</h4><p>在 CSS 中,通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>,语法如下:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">{</span> <span class="token property">position</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定位模式是有不同分类的,在不同情况下,我们用到不同的定位模式。</p><table><thead><tr><th>值</th><th align="center">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td align="center"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td align="center"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td align="center"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td align="center"><strong>固定</strong>定位</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/26%E5%AE%9A%E4%BD%8D%E7%9A%84%E6%A6%82%E5%BF%B5.png"></p><p><strong>静态定位(static)</strong> 了解</p><ul><li><strong>静态定位</strong>是元素的默认定位方式,无定位的意思。它相当于 border 里面的none, 不要定位的时候用。</li><li>静态定位 按照标准流特性摆放位置,它没有边偏移。</li><li>静态定位在布局时我们几乎不用的 </li></ul><p><strong>3.2.1 相对定位(relative)</strong> - 重要</p><p><strong>相对定位</strong>是元素<strong>相对</strong>于它  原来在标准流中的位置来说的</p><p><strong>效果图</strong>:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/04_%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png"></p><p>相对定位的特点:(务必记住)</p><ul><li>相对于 自己原来在标准流中位置来移动的</li><li>原来<strong>在标准流的区域继续占有</strong>,后面的盒子仍然以标准流的方式对待它。</li></ul><p><strong>3.2.3 绝对定位(absolute)</strong> - 重要</p><p><strong>绝对定位</strong>是元素以带有定位的父级元素来移动位置</p><ol><li><p><strong>完全脱标</strong> —— 完全不占位置;  </p></li><li><p><strong>父元素没有定位</strong>,则以<strong>浏览器</strong>为准定位(Document 文档)。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/05_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D_%E7%88%B6%E7%BA%A7%E6%97%A0%E5%AE%9A%E4%BD%8D.png"></p><ol start="3"><li><strong>父元素要有定位</strong></li></ol><ul><li>将元素依据最近的已经定位(绝对、固定或相对定位)的父元素(祖先)进行定位。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/06_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D_%E7%88%B6%E7%BA%A7%E6%9C%89%E5%AE%9A%E4%BD%8D.png"></p><p>绝对定位的特点:(务必记住)</p><ul><li>绝对是以带有定位的父级元素来移动位置 (拼爹型) 如果父级都没有定位,则以浏览器文档为准移动位置</li><li>不保留原来的位置,完全是脱标的。</li></ul><p>因为绝对定位的盒子是拼爹的,所以要和父级搭配一起来使用。</p><h5 id="定位口诀-——-子绝父相"><a href="#定位口诀-——-子绝父相" class="headerlink" title="定位口诀 —— 子绝父相"></a>定位口诀 —— 子绝父相</h5><p>刚才咱们说过,绝对定位,要和带有定位的父级搭配使用,那么父级要用什么定位呢？</p><p><strong>子绝父相</strong> —— <strong>子级</strong>是<strong>绝对</strong>定位,<strong>父级</strong>要用<strong>相对</strong>定位。</p><p><strong>疑问</strong>:为什么在布局时,<strong>子级元素</strong>使用<strong>绝对定位</strong>时,<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p><p>观察下图,思考一下在布局时,<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/27%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8.png"></p><p><strong>分析</strong>:</p><ol><li><strong>方向箭头</strong>叠加在其他图片上方,应该使用<strong>绝对定位</strong>,因为<strong>绝对定位完全脱标</strong>,完全不占位置。</li><li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>,因为<strong>相对定位不脱标</strong>,后续盒子仍然以标准流的方式对待它。</li></ol><ul><li>如果父级盒子也使用<strong>绝对定位</strong>,会完全脱标,那么下方的<strong>广告盒子</strong>会上移,这显然不是我们想要的。</li></ul><p><strong>结论</strong>:<strong>父级要占有位置,子级要任意摆放</strong>,这就是<strong>子绝父相</strong>的由来。</p><p><strong>固定定位(fixed)</strong> - 重要</p><p><strong>固定定位</strong>是<strong>绝对定位</strong>的一种特殊形式:   如果说绝对定位是一个矩形 那么 固定定位就类似于正方形</p><ol><li><strong>完全脱标</strong> —— 完全不占位置;</li><li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置;</li></ol><ul><li>跟父元素没有任何关系;单独使用的</li><li>不随滚动条滚动。</li></ul><p><strong>提示</strong>:IE 6 等低版本浏览器不支持固定定位。</p><h3 id="21-4-定位-position-的案例"><a href="#21-4-定位-position-的案例" class="headerlink" title="21.4 定位(position)的案例"></a>21.4 定位(position)的案例</h3><h4 id="21-4-1-哈根达斯"><a href="#21-4-1-哈根达斯" class="headerlink" title="21.4.1 哈根达斯"></a>21.4.1 哈根达斯</h4><p><strong>案例截图</strong>:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/09_%E5%93%88%E6%A0%B9%E8%BE%BE%E6%96%AF%E6%A1%88%E4%BE%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><h5 id="哈根达斯分析"><a href="#哈根达斯分析" class="headerlink" title="哈根达斯分析"></a>哈根达斯分析</h5><ol><li>一个大的 <code>div</code> 中包含 <code>3</code> 张图片;</li><li>大的 <code>div</code> 水平居中;</li><li><code>2</code> 张小图片<strong>重叠</strong>在<strong>广告</strong>图片上方 —— 脱标,不占位置,需要使用<strong>绝对定位</strong>;</li><li><code>2</code> 张小图片分别显示在<strong>左上角</strong>和<strong>右下角</strong> —— 需要<strong>使用边偏移确定准确位置</strong>。</li></ol><p><strong>案例小结</strong>:</p><ol><li><strong>子绝父相</strong> —— <strong>子元素</strong>使用<strong>绝对定位</strong>,<strong>父元素</strong>使用<strong>相对定位</strong>;</li><li><strong>与浮动的对比</strong>:</li></ol><ul><li><strong>绝对定位</strong>:脱标,<strong>利用边偏移指定准确位置</strong>;</li><li><strong>浮动</strong>:脱标,不能指定准确位置,<strong>让多个块级元素在一行显示</strong>。</li></ul><h4 id="21-4-2-仿新浪头部和广告"><a href="#21-4-2-仿新浪头部和广告" class="headerlink" title="21.4.2 仿新浪头部和广告"></a>21.4.2 仿新浪头部和广告</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/xl.png"></p><h5 id="新浪案例分析"><a href="#新浪案例分析" class="headerlink" title="新浪案例分析"></a>新浪案例分析</h5><ol><li>顶部图片<strong>固定</strong>在浏览器可视窗口顶部,不会随窗口一起滚动;</li><li>左右两侧的广告图片<strong>固定</strong>在浏览器可视窗口的左右两侧,不会随窗口一起滚动;</li><li>注意:<strong>底部的内容图片</strong>初始<strong>显示在顶部图片的下方</strong>,如何解决？</li></ol><h5 id="步骤-1-——-顶部图片和底部内容"><a href="#步骤-1-——-顶部图片和底部内容" class="headerlink" title="步骤 1 —— 顶部图片和底部内容"></a>步骤 1 —— 顶部图片和底部内容</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.top</span> <span class="token punctuation">{</span>    <span class="token comment">/* 注意:使用固定定位时,如果盒子中没有内容,需要指定宽度 */</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 44px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/top.png<span class="token punctuation">)</span></span> no-repeat top center<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 1002px<span class="token punctuation">;</span>    <span class="token comment">/* 顶部的 44px 的 margin 可以让 box 显示在顶部图片下方 */</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 44px auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>:</p><ol><li>在使用固定定位时,如果盒子中没有内容,需要指定宽度</li><li>设置底部内容图片的<strong>顶部 <code>margin</code></strong>,可以让底部盒子初始显示在顶部图片的下方。</li></ol><h5 id="步骤-2-——-左右两侧广告"><a href="#步骤-2-——-左右两侧广告" class="headerlink" title="步骤 2 —— 左右两侧广告"></a>步骤 2 —— 左右两侧广告</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.ad-left,.ad-right</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.ad-left</span> <span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.ad-right</span> <span class="token punctuation">{</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>:不要同时使用 <code>left</code> 和 <code>right</code> 和边偏移属性。</p><p><strong>案例小结</strong>:</p><ol><li><strong>固定定位</strong>的应用场景:<strong>固定在浏览器可视窗口某个位置的布局</strong>;</li><li>在使用固定和绝对定位时,如果盒子中没有内容,需要指定宽度(稍后就讲)。</li></ol><h3 id="21-5-定位-position-的扩展"><a href="#21-5-定位-position-的扩展" class="headerlink" title="21.5 定位(position)的扩展"></a>21.5 定位(position)的扩展</h3><h4 id="21-5-1-绝对定位的盒子居中"><a href="#21-5-1-绝对定位的盒子居中" class="headerlink" title="21.5.1 绝对定位的盒子居中"></a>21.5.1 绝对定位的盒子居中</h4><p><strong>注意</strong>:<strong>绝对定位/固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong>。</p><p>在使用<strong>绝对定位</strong>时要想实现水平居中,可以按照下图的方法:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/10_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.png"></p><ol><li><code>left: 50%;</code>:让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong>;</li><li><code>margin-left: -100px;</code>:让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong>。</li></ol><blockquote><p>案例演示:相对定位案例。</p></blockquote><h5 id="盒子居中定位示意图"><a href="#盒子居中定位示意图" class="headerlink" title="盒子居中定位示意图"></a>盒子居中定位示意图</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/11_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B1%85%E4%B8%AD%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><h4 id="21-5-2-堆叠顺序-z-index"><a href="#21-5-2-堆叠顺序-z-index" class="headerlink" title="21.5.2 堆叠顺序(z-index)"></a>21.5.2 堆叠顺序(z-index)</h4><p>在使用<strong>定位</strong>布局时,可能会<strong>出现盒子重叠的情况</strong>。</p><p>加了定位的盒子,默认<strong>后来者居上</strong>, 后面的盒子会压住前面的盒子。</p><p>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/12_zindex%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><p><code>z-index</code> 的特性如下:</p><ol><li><strong>属性值</strong>:<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>,默认值是 0,数值越大,盒子越靠上;</li><li>如果<strong>属性值相同</strong>,则按照书写顺序,<strong>后来居上</strong>;</li><li><strong>数字后面不能加单位</strong>。</li></ol><p><strong>注意</strong>:<code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素,其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效。</p><h4 id="21-5-3-定位改变display属性"><a href="#21-5-3-定位改变display属性" class="headerlink" title="21.5.3 定位改变display属性"></a>21.5.3 定位改变display属性</h4><p>display是显示模式,可以改变显示模式有以下方式:</p><ul><li>可以用inline-block  转换为行内块</li><li>可以用浮动 float 默认转换为行内块(类似,并不完全一样,因为浮动是脱标的)</li><li>绝对定位和固定定位也和浮动类似, 默认转换的特性 转换为行内块。</li></ul><p>所以说, 一个行内的盒子,如果加了<strong>浮动</strong>、<strong>固定定位</strong>和<strong>绝对定位</strong>,不用转换,就可以给这个盒子直接设置宽度和高度等。</p><p><strong>注意:</strong><br>浮动元素、绝对定位(固定定位)元素的都不会触发外边距合并的问题。(我们以前是用padding border overflow解决的)</p><p>也就是说,我们给盒子改为了浮动或者定位,就不会有垂直外边距合并的问题了。</p><h3 id="21-6-综合演练-淘宝轮播图"><a href="#21-6-综合演练-淘宝轮播图" class="headerlink" title="21.6. 综合演练 - 淘宝轮播图"></a>21.6. 综合演练 - 淘宝轮播图</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/28%E6%B7%98%E5%AE%9D.png"></p><h5 id="圆角矩形设置4个角"><a href="#圆角矩形设置4个角" class="headerlink" title="圆角矩形设置4个角"></a>圆角矩形设置4个角</h5><p>圆角矩形可以为4个角分别设置圆度, 但是是有顺序的</p><pre class="line-numbers language-none"><code class="language-none">border-top-left-radius:20px;border-top-right-radius:20px;border-bottom-right-radius:20px;border-bottom-left-radius:20px;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>如果4个角,数值相同</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>里面数值不同,我们也可以按照简写的形式,具体格式如下:</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span> 左上角 右上角  右下角  左下角<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还是遵循顺时针。</p><h3 id="12-7-定位小结"><a href="#12-7-定位小结" class="headerlink" title="12.7 定位小结"></a>12.7 定位小结</h3><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th align="left">移动位置基准</th><th>模式转换(行内块)</th><th>使用情况</th></tr></thead><tbody><tr><td>静态static</td><td>不脱标,正常模式</td><td align="left">正常模式</td><td>不能</td><td>几乎不用</td></tr><tr><td>相对定位relative</td><td>不脱标,占有位置</td><td align="left">相对自身位置移动</td><td>不能</td><td>基本单独使用</td></tr><tr><td>绝对定位absolute</td><td>完全脱标,不占有位置</td><td align="left">相对于定位父级移动位置</td><td>能</td><td>要和定位父级元素搭配使用</td></tr><tr><td>固定定位fixed</td><td>完全脱标,不占有位置</td><td align="left">相对于浏览器移动位置</td><td>能</td><td>单独使用,不需要父级</td></tr></tbody></table><p><strong>注意</strong>:</p><ol><li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用,<strong>单独使用无效</strong>;</li><li><code>top</code> 和 <code>bottom</code> 不要同时使用;</li><li><code>left</code> 和 <code>right</code> 不要同时使用。</li></ol><p>一个小技巧:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dingwei.png"></p><h3 id="21-9-网页布局总结"><a href="#21-9-网页布局总结" class="headerlink" title="21.9 网页布局总结"></a>21.9 网页布局总结</h3><p>一个完整的网页,有标准流 、 浮动 、 定位 一起完成布局的。每个都有自己的专门用法。</p><h5 id="1-标准流"><a href="#1-标准流" class="headerlink" title="1) 标准流"></a>1) 标准流</h5><p>可以让盒子上下排列 或者 左右排列的</p><h5 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2) 浮动"></a>2) 浮动</h5><p>可以让多个块级元素一行显示  或者 左右对齐盒子   浮动的盒子就是按照顺序左右排列 </p><h5 id="3-定位"><a href="#3-定位" class="headerlink" title="3) 定位"></a>3) 定位</h5><p>定位最大的特点是有层叠的概念,就是可以让多个盒子 前后 叠压来显示。 但是每个盒子需要测量数值。</p><h2 id="22-CSS高级技巧"><a href="#22-CSS高级技巧" class="headerlink" title="22 CSS高级技巧"></a>22 CSS高级技巧</h2><h3 id="22-1-元素的显示与隐藏"><a href="#22-1-元素的显示与隐藏" class="headerlink" title="22.1 元素的显示与隐藏"></a>22.1 元素的显示与隐藏</h3><p>目的<br>让一个元素在页面中消失或者显示出来</p><p>场景<br>类似网站广告,当我们点击关闭就不见了,但是我们重新刷新页面,会重新出现！</p><h4 id="22-1-1-display-显示-重点"><a href="#22-1-1-display-显示-重点" class="headerlink" title="22.1.1 display 显示(重点)"></a>22.1.1 display 显示(重点)</h4><p>display 设置或检索对象是否及如何显示。</p><pre class="line-numbers language-none"><code class="language-none">display: none 隐藏对象display:block 除了转换为块级元素之外,同时还有显示元素的意思。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>特点: 隐藏之后,不再保留位置。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/29none.png"></p><p>实际开发场景:</p><blockquote><p>配合后面js做特效,比如下拉菜单,原先没有,鼠标经过,显示下拉菜单, 应用极为广泛</p></blockquote><h4 id="22-1-2-visibility-可见性-了解"><a href="#22-1-2-visibility-可见性-了解" class="headerlink" title="22.1.2 visibility 可见性 (了解)"></a>22.1.2 visibility 可见性 (了解)</h4><p>设置或检索是否显示对象。</p><pre class="line-numbers language-none"><code class="language-none">visibility:visible ; 　对象可视  visibility:hidden; 　  对象隐藏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>特点: 隐藏之后,继续保留原有位置</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/30visibility.png"></p><h4 id="22-1-3-overflow-溢出-重点"><a href="#22-1-3-overflow-溢出-重点" class="headerlink" title="22.1.3 overflow 溢出(重点)"></a>22.1.3 overflow 溢出(重点)</h4><ul><li>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容,超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否,总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条,不超出不显示滚动条</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/33overflow.png"></p><p>实际开发场景:</p><ol><li>清除浮动</li><li>隐藏超出内容,隐藏掉,  不允许内容超过父盒子。</li></ol><h4 id="22-1-4-显示与隐藏总结"><a href="#22-1-4-显示与隐藏总结" class="headerlink" title="22.1.4 显示与隐藏总结"></a>22.1.4 显示与隐藏总结</h4><table><thead><tr><th>属性</th><th>区别</th><th>用途</th></tr></thead><tbody><tr><td><strong>display</strong></td><td>隐藏对象,不保留位置</td><td>配合后面js做特效,比如下拉菜单,原先没有,鼠标经过,显示下拉菜单, 应用极为广泛</td></tr><tr><td><strong>visibility</strong></td><td>隐藏对象,保留位置</td><td>使用较少</td></tr><tr><td><strong>overflow</strong></td><td>只是隐藏超出大小的部分</td><td>1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围</td></tr></tbody></table><h3 id="22-2-CSS用户界面样式"><a href="#22-2-CSS用户界面样式" class="headerlink" title="22.2 CSS用户界面样式"></a>22.2 CSS用户界面样式</h3><p>所谓的界面样式, 就是更改一些用户操作样式,以便提高更好的用户体验。</p><ul><li>更改用户的鼠标样式 (滚动条因为兼容性非常差,我们不研究) </li><li>表单轮廓等。</li><li>防止表单域拖拽</li></ul><h4 id="22-2-1-鼠标样式cursor"><a href="#22-2-1-鼠标样式cursor" class="headerlink" title="22.2.1 鼠标样式cursor"></a>22.2.1 鼠标样式cursor</h4><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>default</strong></td><td>小白  默认</td></tr><tr><td><strong>pointer</strong></td><td>小手</td></tr><tr><td><strong>move</strong></td><td>移动</td></tr><tr><td><strong>text</strong></td><td>文本</td></tr><tr><td><strong>not-allowed</strong></td><td>禁止</td></tr></tbody></table><p> 鼠标放我身上查看效果哦:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>default</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>我是小白<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>pointer</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>我是小手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>move</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>我是移动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>text</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>我是文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>not-allowed</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>我是文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-轮廓线-outline"><a href="#2-2-轮廓线-outline" class="headerlink" title="2.2 轮廓线 outline"></a>2.2 轮廓线 outline</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/outline.png"></p><p>是绘制于元素周围的一条线,位于边框边缘的外围,可起到突出元素的作用。 </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">outline</span> <span class="token punctuation">:</span> outline-color ||outline-style || outline-width <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是我们都不关心可以设置多少,我们平时都是去掉的。 li  </p><p>最直接的写法是 :  outline: 0;   或者  outline: none;</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">outline</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="22-2-3-防止拖拽文本域resize"><a href="#22-2-3-防止拖拽文本域resize" class="headerlink" title="22.2.3 防止拖拽文本域resize"></a>22.2.3 防止拖拽文本域resize</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/34textarea.png"></p><p>实际开发中,我们文本域右下角是不可以拖拽: </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="22-2-4-用户界面样式总结"><a href="#22-2-4-用户界面样式总结" class="headerlink" title="22.2.4 用户界面样式总结"></a>22.2.4 用户界面样式总结</h4><table><thead><tr><th>属性</th><th>用途</th><th>用途</th></tr></thead><tbody><tr><td><strong>鼠标样式</strong></td><td>更改鼠标样式cursor</td><td>样式很多,重点记住 pointer</td></tr><tr><td><strong>轮廓线</strong></td><td>表单默认outline</td><td>outline 轮廓线,我们一般直接去掉,border是边框,我们会经常用</td></tr><tr><td>防止拖拽</td><td>主要针对文本域resize</td><td>防止用户随意拖拽文本域,造成页面布局混乱,我们resize:none</td></tr></tbody></table><h3 id="22-3-vertical-align-垂直对齐"><a href="#22-3-vertical-align-垂直对齐" class="headerlink" title="22.3 vertical-align 垂直对齐"></a>22.3 vertical-align 垂直对齐</h3><ul><li>有宽度的块级元素居中对齐,是margin: 0 auto;</li><li>让文字居中对齐,是 text-align: center;</li></ul><p>但是我们从来没有讲过有垂直居中的属性。</p><p>vertical-align 垂直对齐,它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>,</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/xian.jpg"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">vertical-align</span> <span class="token punctuation">:</span> baseline |top |middle |bottom <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置或检索对象内容的垂直对其方式。</p><ul><li><p>注意:</p><p>vertical-align 不影响块级元素中的内容对齐,它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>,</p><p>特别是行内块元素, <strong>通常用来控制图片/表单与文字的对齐</strong>。</p></li></ul><h4 id="22-3-1-图片、表单和文字对齐"><a href="#22-3-1-图片、表单和文字对齐" class="headerlink" title="22.3.1 图片、表单和文字对齐"></a>22.3.1 图片、表单和文字对齐</h4><p>我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%9F%BA%E7%BA%BF%E5%AF%B9%E9%BD%90.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/1498467742995.png"></p><h4 id="22-3-2-去除图片底侧空白缝隙"><a href="#22-3-2-去除图片底侧空白缝隙" class="headerlink" title="22.3.2 去除图片底侧空白缝隙"></a>22.3.2 去除图片底侧空白缝隙</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/35vertical.png"></p><p>原因:<br>图片或者表单等行内块元素,他的底线会和父级盒子的基线对齐。<br>就是图片底侧会有一个空白缝隙。</p><p>解决的方法:<br>1.给img vertical-align:middle | top| bottom等等。  让图片不要和基线对齐。<br>2.给img 添加 display:block; 转换为块级元素就不会存在问题了。</p><h3 id="22-4-溢出的文字省略号显示"><a href="#22-4-溢出的文字省略号显示" class="headerlink" title="22.4 溢出的文字省略号显示"></a>22.4 溢出的文字省略号显示</h3><h4 id="22-4-1-white-space"><a href="#22-4-1-white-space" class="headerlink" title="22.4.1 white-space"></a>22.4.1 white-space</h4><p>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 </p><pre class="line-numbers language-none"><code class="language-none">white-space:normal ;默认处理方式white-space:nowrap ;　强制在同一行内显示所有文本,直到文本结束或者遭遇br标签对象才换行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="22-4-2-text-overflow-文字溢出"><a href="#22-4-2-text-overflow-文字溢出" class="headerlink" title="22.4.2 text-overflow 文字溢出"></a>22.4.2 text-overflow 文字溢出</h4><p>设置或检索是否使用一个省略标记(…)标示对象内文本的溢出</p><pre class="line-numbers language-none"><code class="language-none">text-overflow : clip ;不显示省略标记(...),而是简单的裁切 text-overflow:ellipsis ; 当对象内文本溢出时显示省略标记(...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>:</p><p>一定要首先强制一行内显示,再次和overflow属性  搭配使用</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dot.png"></p><h4 id="22-4-3-总结"><a href="#22-4-3-总结" class="headerlink" title="22.4.3 总结"></a>22.4.3 总结</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*1. 先强制一行内显示文本*/</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token comment">/*2. 超出的部分隐藏*/</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment">/*3. 文字用省略号替代超出的部分*/</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="22-5-CSS精灵技术-sprite-重点"><a href="#22-5-CSS精灵技术-sprite-重点" class="headerlink" title="22.5 CSS精灵技术(sprite) 重点"></a>22.5 CSS精灵技术(sprite) 重点</h3><h4 id="22-5-1-为什么需要精灵技术"><a href="#22-5-1-为什么需要精灵技术" class="headerlink" title="22.5.1 为什么需要精灵技术"></a>22.5.1 为什么需要精灵技术</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/sss.png"></p><p>图所示为网页的请求原理图,当用户访问一个网站时,需要向服务器发送请求,网页上的每张图像都要经过一次请求才能展现给用户。</p><p>然而,一个网页中往往会应用很多小的背景图像作为修饰,当网页中的图像过多时,服务器就会频繁地接受和发送请求,这将大大降低页面的加载速度。</p><p>为什么需要精灵技术:<br><strong>为了有效地减少服务器接受和发送请求的次数,提高页面的加载速度。</strong></p><p>出现了CSS精灵技术(也称CSS Sprites)。</p><h4 id="22-5-2-精灵技术讲解"><a href="#22-5-2-精灵技术讲解" class="headerlink" title="22.5.2 精灵技术讲解"></a>22.5.2 精灵技术讲解</h4><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中(精灵图),然而,各个网页元素通常只需要精灵图中不同位置的某个小图,要想精确定位到精灵图中的某个小图。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/jds.png"></p><p>这样,当用户访问该页面时,只需向服务发送一次请求,网页中的背景图像即可全部展示出来。</p><p>我们需要使用CSS的</p><ul><li>background-image</li><li>background-repeat</li><li>background-position属性进行背景定位,</li><li>其中最关键的是使用background-position 属性精确地定位。</li></ul><h4 id="22-5-3-精灵技术使用的核心总结"><a href="#22-5-3-精灵技术使用的核心总结" class="headerlink" title="22.5.3 精灵技术使用的核心总结"></a>22.5.3 精灵技术使用的核心总结</h4><p>首先我们知道,css精灵技术主要针对于背景图片,插入的图片img 是不需要这个技术的。</p><ol><li>精确测量,每个小背景图片的大小和 位置。</li><li>给盒子指定小背景图片时, 背景定位基本都是 负值。</li></ol><h4 id="22-5-4-制作精灵图-了解"><a href="#22-5-4-制作精灵图-了解" class="headerlink" title="22.5.4 制作精灵图(了解)"></a>22.5.4 制作精灵图(了解)</h4><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中(精灵图),那我们要做的,就是把小图拼合成一张大图。</p><p>大部分情况下,精灵图都是网页美工做。</p><p>我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。<br>我们可以横向摆放也可以纵向摆放,但是每个图片之间留有适当的空隙<br>在我们精灵图的最低端,留一片空隙,方便我们以后添加其他精灵图。</p><p>小公司,背景图片很少的情况,没有必要使用精灵技术,维护成本太高。 如果是背景图片比较多,可以建议使用精灵技术。</p><h3 id="22-6-滑动门"><a href="#22-6-滑动门" class="headerlink" title="22.6 滑动门"></a>22.6 滑动门</h3><h5 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h5><p>制作网页时,为了美观,常常需要为网页元素设置特殊形状的背景,比如微信导航栏,有凸起和凹下去的感觉,最大的问题是里面的字数不一样多,咋办？</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/wxx.jpg"></p><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少,出现了CSS滑动门技术。它从新的角度构建页面,使各种特殊形状的背景能够自由拉伸滑动,以适应元素内部的文本内容,可用性更强。 最常见于各种导航栏的滑动门。</p><h5 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h5><p>核心技术就是利用CSS精灵(主要是背景位置)和 盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>导航栏内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css样式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>      <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/wx.jpg<span class="token punctuation">)</span></span> repeat-x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.father</span> <span class="token punctuation">{</span>      <span class="token property">padding-top</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">li</span> <span class="token punctuation">{</span>      <span class="token property">padding-left</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 33px<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 33px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span>0  10px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./images/to.png<span class="token punctuation">)</span></span> no-repeat left <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">a</span> <span class="token punctuation">{</span>      <span class="token property">padding-right</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 33px<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./images/to.png<span class="token punctuation">)</span></span> no-repeat right <span class="token punctuation">;</span>      <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">li:hover,     li:hover a</span> <span class="token punctuation">{</span>      <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./images/ao.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结: </p><p>1.a 设置 背景左侧,padding撑开合适宽度。<br>2.span 设置背景右侧, padding撑开合适宽度 剩下由文字继续撑开宽度。<br>3.之所以a包含span就是因为 整个导航都是可以点击的。</p><h4 id="22-7-1-margin负值之美"><a href="#22-7-1-margin负值之美" class="headerlink" title="22.7.1 margin负值之美"></a>22.7.1 margin负值之美</h4><h5 id="1-负边距-定位-水平垂直居中"><a href="#1-负边距-定位-水平垂直居中" class="headerlink" title="1) 负边距+定位:水平垂直居中"></a>1) 负边距+定位:水平垂直居中</h5><p>咱们前面讲过,一个绝对定位的盒子,利用父级盒子的50%,然后往左(上)走自己宽度的一半 ,可以实现盒子水平垂直居中。</p><h5 id="2-压住盒子相邻边框"><a href="#2-压住盒子相邻边框" class="headerlink" title="2) 压住盒子相邻边框"></a>2) 压住盒子相邻边框</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/margin.png"></p><h3 id="7-2-CSS三角形之美"><a href="#7-2-CSS三角形之美" class="headerlink" title="7.2 CSS三角形之美"></a>7.2 CSS三角形之美</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>   <span class="token property">line-height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">border-top</span><span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span> <span class="token property">border-right</span><span class="token punctuation">:</span> 10px solid green<span class="token punctuation">;</span> <span class="token property">border-bottom</span><span class="token punctuation">:</span> 10px solid blue<span class="token punctuation">;</span> <span class="token property">border-left</span><span class="token punctuation">:</span> 10px solid #000<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css 三角是怎么来的, 做法如下:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/arr.png"></p><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写,只保留需要的边框颜色,其余的不能省略,都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器,加上 font-size: 0;  line-height: 0;</li></ol><p><a href="https://github.com/liaojie1314/web">代码</a>,仅供参考</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/liaojie.github.io/2022/01/15/ji-suan-ji-zu-cheng-yuan-li/"/>
      <url>/liaojie.github.io/2022/01/15/ji-suan-ji-zu-cheng-yuan-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/liaojie.github.io/2022/01/15/ji-suan-ji-wang-luo/"/>
      <url>/liaojie.github.io/2022/01/15/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/liaojie.github.io/2022/01/15/cao-zuo-xi-tong/"/>
      <url>/liaojie.github.io/2022/01/15/cao-zuo-xi-tong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#</title>
      <link href="/liaojie.github.io/2022/01/15/c-1/"/>
      <url>/liaojie.github.io/2022/01/15/c-1/</url>
      
        <content type="html"><![CDATA[<p>.net/dotnet:一般指.Net Framework框架.一种平台,一种技术</p><p>C#(sharp):一种编程语言,可以开发基于.net平台的应用</p><p>.net都能干什么?</p><ul><li>桌面应用程序  Winform</li><li>Internet应用程序 ASP.NET</li><li>手机开发 wp8</li><li>Unity3D游戏开发或者虚拟现实</li></ul><p>.NET俩种交互模式</p><ul><li>C/S:客户机(Client)/服务器模式(Server) winform应用程序</li><li>B/S:浏览器(Browser)/服务器模式(Server) Internet应用程序</li></ul><h3 id="1-1-开发工具-Visual-Studio"><a href="#1-1-开发工具-Visual-Studio" class="headerlink" title="1.1 开发工具:Visual Studio"></a>1.1 开发工具:Visual Studio</h3><p>新建项目:选择Visual C#-&gt;Windows-&gt;控制台应用程序,起一个英文名称(最好见名知意)<br>一个解决方案下可以有多个项目:解决方案右键-&gt;添加-&gt;新建项目</p><p>.cs结尾的称为类文件</p><p>解决方案资源管理器(视图里找)</p><p>Program组成部分</p><ul><li>命名空间</li><li>方法或函数(Main函数为程序的入口)</li></ul><p>.sln: 解决方案文件,里面包含整个解决方案的信息,可以双击运行</p><p>.csproj: 项目文件,里面包含项目的信息,可以双击运行</p><h3 id="1-2-C-基础"><a href="#1-2-C-基础" class="headerlink" title="1.2 C#基础"></a>1.2 C#基础</h3><p>C#中,每行代码都以<code>;</code>结束.</p><p>输出: <code>Console.WriteLine("输出内容");</code></p><p><code>Console.ReadKey();</code> 作用:暂停当前程序,等待用户按下任意键继续,按下的任意键将显示在控制台当中</p><p>vs快捷键：</p><ul><li>Ctrl+K+D 快速对齐</li><li>Ctrl+S 保存</li><li>Ctrl+Z 撤销</li><li>Ctrl+J 提示</li><li>Ctrl+K+C 注释</li><li>Ctrl+K+U 取消注释</li><li>#region…#endregion 折叠代码</li></ul><p>vs设置: 工具-&gt;选项(推荐将字体(环境-&gt;字体和颜色)改为Consolas)</p><p>启动项目设置: 解决方案右键-&gt;属性-&gt;启动项目改为当前选定内容</p><p>项目的加载与卸载: 右键需要修改的项目-&gt;移除/卸载(不可用,当需要时可以右键重新加载)</p><h3 id="1-3-注释符"><a href="#1-3-注释符" class="headerlink" title="1.3 注释符"></a>1.3 注释符</h3><p>作用:<br> 1.注销<br> 2.解释</p><p>单行注释: <code>//</code><br>多行注释: <code>/* 注释内容 */</code><br>文档注释: <code>///</code> 多用来解释类或者方法</p><h3 id="1-4-变量"><a href="#1-4-变量" class="headerlink" title="1.4 变量"></a>1.4 变量</h3><p>在计算机中存储数据</p><p>语法: <code>变量类型 变量名 = 值;</code></p><p>整数类型: int 只能存整数,不能存储小数</p><p>小数类型: double 既能存整数,也能存小数,小数点后位数 15 ~ 16位</p><p>字符类型不能为空,并且只能有一个 字符: <code>char ch = 'a';</code> </p><p>字符串类型可以存空,字符串: <code>string name = "张三";</code></p><p>存钱: <code>decimal money = 5000m;</code> 后面需加上一个m</p><p>变量命名规则:</p><ul><li>必须以字母下划线或”@”符号开头,不能以数字开头</li><li>后面可以跟任意字母、数字、下划线</li><li>不能更C#关键字重复</li><li>区分大小写</li><li>同一变量名不允许重复定义</li><li>变量命名必须有意义</li><li>Camel命名规则:除第一个单词第一个字母小写,其他每一个单词第一个字母大写(变量命名)</li><li>Pascal命名规则:每一个单词第一个字母大写(类或者方法命名)</li></ul><p>变量必须先声明,再赋值,最后再使用</p><h3 id="1-5-赋值运算符"><a href="#1-5-赋值运算符" class="headerlink" title="1.5 赋值运算符 ="></a>1.5 赋值运算符 =</h3><p>意义: 表示把等号右边的值赋值给等号左边的变量</p><p>“+”号作用:<br>1.连接俩个字符串<br>2.相加(俩个数字)</p><h4 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h4><p>使用方法: 先挖个坑,再填</p><p>多填:没效果<br>少填:抛异常</p><p>输出顺序:按照挖坑的顺序</p><p>保留小数:</p><p>{:0.00}//保留俩位小数</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int n1 = 10;int n2 = 20;int n3 = 30;//占位符Console.WriteLine("第一个数字：{0},第二个数字：{1},第三个数字：{2}", n1, n2, n3);Console.ReadKey();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h4><p>交换变量:<br>1.设置中间变量temp<br>2.交换俩整型变量：n1=n1-n2;n2=n1+n2;n1=n2-n1;</p><h3 id="1-6-输入"><a href="#1-6-输入" class="headerlink" title="1.6 输入"></a>1.6 输入</h3><p><code>string str = Console.ReadLine();</code></p><h3 id="1-7转义符"><a href="#1-7转义符" class="headerlink" title="1.7转义符"></a>1.7转义符</h3><p>转义符指的是一个’'+一个特殊字符组成一个具有特殊意义的字符</p><p>\n:表示换行<br>\“:表示一个英文半角的双引号<br>\t:表示一个Tab键的空格<br>\b:表示退格键，放字符串俩边无用<br>@:<br>1.取消\转义作用<br>2.将字符串按照原格式输出<br>\r\n:windows操作系统不认识\n,只认识\r\n<br>\\:表示一个\</p><h3 id="1-8-算术运算符-二元运算符"><a href="#1-8-算术运算符-二元运算符" class="headerlink" title="1.8 算术运算符 (二元运算符)"></a>1.8 算术运算符 (二元运算符)</h3><p>加(+)、减(-)、乘( * )、除(/)、取余(%)</p><h3 id="1-9-显式类型转换和隐式类型转换"><a href="#1-9-显式类型转换和隐式类型转换" class="headerlink" title="1.9 显式类型转换和隐式类型转换"></a>1.9 显式类型转换和隐式类型转换</h3><p>要求等号俩边参与运算的操作数的类型必须一致,如果不一致,满足下列条件会发生自动类型转换,或者称之为隐式类型转换</p><ul><li>俩种类型兼容</li><li>目标类型大于原类型(eg:double&gt;int) int — double</li></ul><p>强制类型转换 double — int 显式类型转换 (eg:(int)double值)</p><ul><li>俩种类型相兼容</li><li>大的转换为小的</li></ul><p>语法: (待转换的类型)要转换的值</p><h3 id="1-10-Convert类型转换"><a href="#1-10-Convert类型转换" class="headerlink" title="1.10 Convert类型转换"></a>1.10 Convert类型转换</h3><p>条件:</p><ul><li>面上必须要过得去</li></ul><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">string s = "123";double d = Convert.ToDouble(s);int n = Convert.ToInt32(s);Console.WriteLine(d);Console.WriteLine(n);Console.ReadKey();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-11-加加减减-一元运算符"><a href="#1-11-加加减减-一元运算符" class="headerlink" title="1.11 加加减减 (一元运算符)"></a>1.11 加加减减 (一元运算符)</h3><p>++: 分为前++、后++,最终结果都为变量+1,不同的是前++是先+1再用+1后的值去运算,后++是先用原先的值参与运算再将这个变量+1<br>–: 同上</p><blockquote><p>一元运算符优先级高于二元运算符</p></blockquote><h3 id="1-12-关系运算符和逻辑运算符"><a href="#1-12-关系运算符和逻辑运算符" class="headerlink" title="1.12 关系运算符和逻辑运算符"></a>1.12 关系运算符和逻辑运算符</h3><p>关系运算符:<br>大于(&gt;)、小于(&lt;)、大于等于(&gt;=)、小于等于(&lt;=)、等于(==)、不等于(!=)</p><p>bool类型:</p><ul><li>True</li><li>False</li></ul><p>逻辑运算符:<br>逻辑与(&amp;&amp;)全真才真,一假就假、逻辑或(||)全假才假,一真就真、逻辑非(!)</p><p>&amp;&amp;优先级高于||</p><h3 id="1-13-复合赋值运算符"><a href="#1-13-复合赋值运算符" class="headerlink" title="1.13 复合赋值运算符"></a>1.13 复合赋值运算符</h3><p>+=、-=、*=、/=、%=</p><h5 id="异常捕获："><a href="#异常捕获：" class="headerlink" title="异常捕获："></a>异常捕获：</h5><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">try{  可能出异常的代码   }catch{     出异常执行代码   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2 流程控制"></a>2 流程控制</h2><p>循环结构:程序从Main函数进入,从上到下一行一行的执行,不会落下任意一行<br>分支结构:if if-else<br>选择结构:if else-if switch-case<br>循环结构:while do-while for foreach</p><h3 id="2-1-if"><a href="#2-1-if" class="headerlink" title="2.1 if"></a>2.1 if</h3><p>if:<br>语法:<br>if(判断条件)<br>{<br>    要执行的代码;<br>}</p><p>判断条件:一般为关系表达式或者bool类型的值</p><p>if-else:<br>语法:<br>if(判断条件)<br>{<br>    条件成立执行的代码;<br>}else{<br>    条件不成立执行代码;<br>}</p><p>if else-if:<br>语法:<br>if(判断条件1)<br>{<br>    条件1成立执行的代码;<br>}else if(判断条件2)<br>{<br>    条件2成立执行的代码;<br>}…<br>else{<br>    条件都不成立执行代码;<br>}</p><h3 id="2-2-switch-case"><a href="#2-2-switch-case" class="headerlink" title="2.2 switch-case"></a>2.2 switch-case</h3><p>作用: 用于处理多条件的定值的判断</p><p>语法:<br>switch(变量或者表达式的值)<br>{<br>    case 值1:要执行的代码;<br>    break;<br>    case 值2:要执行的代码;<br>    break;<br>    case 值3:要执行的代码;<br>    break;<br>    …<br>    default:要执行的代码;<br>    break;<br>}</p><h5 id="案例-判断年份"><a href="#案例-判断年份" class="headerlink" title="案例: 判断年份"></a>案例: 判断年份</h5><p>案例描述: 输入年份和月份,输出对应的天数</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 判断闰年{    class Program    {        static void Main(string[] args)        {            Console.WriteLine("请输入一个年份");            try            {                int year = Convert.ToInt32(Console.ReadLine());                Console.WriteLine("请输入一个月份");                try                {                    int month = Convert.ToInt32(Console.ReadLine());//1~12                    if (month &gt;= 1 &amp;&amp; month &lt;= 12)                    {                        int day = 0;//声明一个变量用来存储天数                        switch (month)                        {                            case 1:                            case 3:                            case 5:                            case 7:                            case 8:                            case 10:                            case 12:                                day = 31;                                break;                            case 2:                                //有平年和润年的不同                                if ((year % 400 == 0) || (year % 4 == 0 &amp;&amp; year % 100 != 0))                                {                                    day = 29;                                }                                else                                {                                    day = 28;                                }                                break;                            default://4,6,9,11                                day = 30;                                break;                        }                        Console.WriteLine("{0}年{1}月有{2}天", year, month, day);                    }//if判断                    else                    {                        Console.WriteLine("输入的月份不符合要求,程序退出");                    }                }                catch//月份                {                    Console.WriteLine("输入的月份有误,程序退出");                }            }            catch//年份            {                Console.WriteLine("输入的年份有误,程序退出");            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-while"><a href="#2-3-while" class="headerlink" title="2.3 while"></a>2.3 while</h3><p>语法:<br>while(循环条件)<br>{<br>    循环体;<br>}</p><p>break用法:<br>1.跳出switch-case结构<br>2.跳出当前循环<br>一般不单独使用,而是跟着if判断一起使用</p><p>特点:先判断,再执行,有可以一遍循环都不执行</p><h3 id="2-4-do-while循环"><a href="#2-4-do-while循环" class="headerlink" title="2.4 do-while循环"></a>2.4 do-while循环</h3><p>语法:<br>do<br>{<br>    循环体;<br>}while(循环条件);</p><p>特点:先执行,再判断,至少执行一遍</p><h5 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h5><ul><li>设置断点(在行号前点击空白处)</li><li>单步运行(F11逐语句调试)</li><li>观察变量(鼠标放在变量名上观察)</li><li>F10逐过程调试</li></ul><h3 id="2-5-for循环"><a href="#2-5-for循环" class="headerlink" title="2.5 for循环"></a>2.5 for循环</h3><p>语法:<br>for(表达式1;表达式2;表达式3)<br>{<br>    循环体4;<br>}</p><p>表达式1:一般为声明循环变量,记录循环的次数(int i = 0;)<br>表达式2:一般为循环条件<br>表达式3:一般为改变循环条件的代码,使循环条件终会不成立,否则就是死循环</p><p>顺序:1-&gt;2-&gt;4-&gt;3-&gt;2-&gt;4-&gt;3-&gt;…</p><p>代码提示: 输入for,再按俩下Tab键</p><h5 id="案例-水仙花数"><a href="#案例-水仙花数" class="headerlink" title="案例: 水仙花数"></a>案例: 水仙花数</h5><p>案例描述:输出三位数的水仙花数(水仙花数:每位数字的三次方的和等于原数字)</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 水仙花数{    class Program    {        static void Main(string[] args)        {            for (int i = 100; i &lt;= 999; i++)            {                int bai = i / 100;                int shi = i % 100 / 10;                int ge = i % 10;                if (bai*bai*bai+shi*shi*shi+ge*ge*ge==i)                {                    Console.WriteLine("{0}\t", i);                }            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-for循环嵌套"><a href="#2-6-for循环嵌套" class="headerlink" title="2.6 for循环嵌套"></a>2.6 for循环嵌套</h3><h5 id="案例-九九乘法表"><a href="#案例-九九乘法表" class="headerlink" title="案例: 九九乘法表"></a>案例: 九九乘法表</h5><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 九九乘法表{    class Program    {        static void Main(string[] args)        {            for (int i = 1; i &lt;=9; i++)            {                for(int j=1;j&lt;=i;j++)                {                    Console.Write("{0}x{1}={2}\t", j, i, i * j);                }                Console.WriteLine();//换行            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-类型转换"><a href="#2-7-类型转换" class="headerlink" title="2.7 类型转换"></a>2.7 类型转换</h3><p>int.TryParse:尝试将一个字符串转换成int类型</p><p>eg:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int number = 0;//参数 返回值bool b = int.TryParse("123",out number);Console.WriteLine(b);Console.WriteLine(number);//转换成功:b = True number = 123//转换失败:b = False number = 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-质数"><a href="#案例-质数" class="headerlink" title="案例: 质数"></a>案例: 质数</h5><p>案例描述:<br>找出100以内的所有质数(质数/素数:只能被1和本身整除的数字,比如:2)</p><p>提示:<br>continue用法:<br>结束本次循环,判断循环条件,如果成立则进入下一次循环,否则退出循环</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 质数{    class Program    {        static void Main(string[] args)//计算质数        {            for(int i=2;i&lt;=100;i++)            {                bool b = true;                for(int j=2;j&lt;i;j++)                {                    if(i%j==0)                    {                        b = false;                        break;                    }                }                if(b)                {                    Console.WriteLine(i);                }            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-三元表达式"><a href="#2-8-三元表达式" class="headerlink" title="2.8 三元表达式"></a>2.8 三元表达式</h3><p>语法: <code>表达式1?表达式2:表达式3;</code></p><p>表达式1一般为一个关系表达式<br>如果1为True,结果为2的值;如果1为False,结果为3的值<br>2与3与整个三元表达式类型须一致</p><h5 id="案例-随机数"><a href="#案例-随机数" class="headerlink" title="案例: 随机数"></a>案例: 随机数</h5><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 随机数{    class Program    {        static void Main(string[] args)        {            while(true)            {                //产生随机数                //1.创建产生随机数的对象                Random r = new Random();                //2.让产生随机数的对象调用方法来产生随机数                int rNumber = r.Next(1, 11);//产生1~10的随机数                Console.WriteLine(rNumber);                Console.ReadKey();            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-复杂数据类型"><a href="#3-复杂数据类型" class="headerlink" title="3 复杂数据类型"></a>3 复杂数据类型</h2><h3 id="3-1-常量"><a href="#3-1-常量" class="headerlink" title="3.1 常量"></a>3.1 常量</h3><p>不能被重新赋值</p><p>语法: <code>const 变量类型 变量名 = 值;</code></p><h3 id="3-2-枚举"><a href="#3-2-枚举" class="headerlink" title="3.2 枚举"></a>3.2 枚举</h3><p>语法: <code>[public] enum 枚举名 {     值1,     值2,     值3,     ... }</code></p><p>public: 访问修饰符,公开的,哪都可以访问<br>enum: 声明枚举的关键字<br>枚举名: Pascal命名规范</p><blockquote><p>枚举就是一个变量类型,只是枚举声明、赋值、使用的方式与普通变量类型不同</p></blockquote><p>枚举类型和string、int类型之间转换:</p><ul><li>枚举类型与int类型是兼容的(枚举从0开始),可以使用强制类型转换相互转换</li><li>int类型转枚举:超出枚举范围直接输出int值</li><li>Enum.Parse(typeof(要转换的枚举类型即枚举名),”要转换的字符串”)字符串转换为枚举类型<ul><li>如果转换的字符串是数字且枚举中没有,不会抛异常</li><li>如果转换的是文本且枚举中没有,会抛异常</li></ul></li><li>所有类型都可以转换为string类型 调用ToString()</li></ul><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 枚举{    public enum Gender    {        男,        女    }    class Program    {        static void Main(string[] args)        {            //Enum.Parse(typeof(要转换的枚举类型),"要转换的字符串")转换为枚举类型            //所有类型都可以转换为string类型 调用ToString()            Gender gender = Gender.男;            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-结构"><a href="#3-3-结构" class="headerlink" title="3.3 结构"></a>3.3 结构</h3><p>作用: 一次性声明多个不同类型的变量</p><p>语法: <code>[public] struct 结构名 {     成员;//字段 }</code></p><p>字段可以存储多个值,规范上每个字段前加一个下划线<code>_</code></p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 结构{    public struct Person    {        public string _name;//字段        public int _age;        public Gender _gender;    }    public enum Gender    {        男,        女    }    class Program    {        static void Main(string[] args)        {            Person zsPerson;            zsPerson._name = "张三";            zsPerson._age = 11;            zsPerson._gender = Gender.男;            Console.WriteLine(zsPerson._name);            Console.WriteLine(zsPerson._age);            Console.WriteLine(zsPerson._gender);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-数组"><a href="#3-4-数组" class="headerlink" title="3.4 数组"></a>3.4 数组</h3><p>一次性存储多个相同类型的变量</p><p>语法: <code>数组类型[] 数组名=new 数组类型[数组长度];</code></p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 数组{    class Program    {        static void Main(string[] args)        {            int[] nums = new int[10];            int[] numsTwo = { 1, 2,7, 4, 5 };            Array.Sort(numsTwo);//升序排列            Array.Reverse(numsTwo);//反转数组            for(int i=0;i&lt;nums.Length;i++)            {                nums[i] = i;            }            for (int i = 0; i &lt; nums.Length; i++)            {                Console.WriteLine(nums[i]);            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><p>将数组中的元素从大到小或者从小到大进行排序</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 冒泡排序{    class Program    {        static void Main(string[] args)        {            int[] number = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };            for (int i = 0; i &lt; number.Length-1; i++)            {                for(int j=0;j&lt;number.Length-i-1;j++)                {                    if(number[j]&gt;number[j+1])                    {                        int temp = number[j + 1];                        number[j + 1] = number[j];                        number[j] = temp;                    }                }            }            for (int i = 0; i &lt; number.Length; i++)            {                Console.WriteLine(number[i]);            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-方法-函数"><a href="#3-5-方法-函数" class="headerlink" title="3.5 方法(函数)"></a>3.5 方法(函数)</h3><p>函数就是将一堆代码进行重用的一种机制</p><p>语法:<br><code>[public] static 返回值类型 方法名 ([参数列表]) {     方法体; }</code></p><p>static: 静态的<br>方法名: Pascal命名规则</p><p>方法写好后需在Main()函数中调用<br>调用语法:<code>类名.方法名([参数]);</code></p><blockquote><p>如果你写的方法跟Main()函数同在一个类(Program)中,类名可以省略</p></blockquote><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 方法{    class Program    {        static void Main(string[] args)        {            int max=Program.GetMax(1, 3);            Console.WriteLine(max);            Console.ReadKey();        }        /// &lt;summary&gt;        /// 求俩个数最大值并返回        /// &lt;/summary&gt;        /// &lt;param name="n1"&gt;第一个整数&lt;/param&gt;        /// &lt;param name="n2"&gt;第二个整数&lt;/param&gt;        /// &lt;returns&gt;最大值&lt;/returns&gt;        public static int GetMax(int n1,int n2)        {            return n1 &gt; n2 ? n1 : n1;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>return作用:<br>1.在方法中返回要返回的函数值<br>2.立即结束本方法</p><p>调用者:Main()函数中调用其他方法;被调用者:其他方法</p><p>如果被调用者要使用调用者的值:</p><ul><li>传递参数</li><li>使用静态字段来模拟全局变量 <code>public static int _number = 10;</code>(函数外,Program类中) </li></ul><p>如果调用者要得到被调用者的值:</p><ul><li>返回值</li></ul><p>不管是实参还是形参都是在内存中开辟了空间的</p><p>方法的功能一定是单一的,方法中最忌讳的就是出现提示用户输入的字眼</p><h4 id="3-5-1-out参数"><a href="#3-5-1-out参数" class="headerlink" title="3.5.1 out参数"></a>3.5.1 out参数</h4><p>返回多个类型相同的值的时候,可以考虑返回一个数组<br>返回对个不同类型的值的时候,可以考虑使用out参数</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;//out 参数：可以返回多个不同的值namespace out参数{    class Program    {        static void Main(string[] args)        {            int[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };            int[] res = GetMaxMinSumAvg(numbers);            Console.WriteLine("最大值是{0}，最小值是{1}，总和是{2}，平均值是{3}",res[0],res[1],res[2],res[3]);            int max;            int min;            int sum;            int avg;            bool b;            string s;            double d;            Test(numbers, out max, out min, out sum, out avg,out b,out s,out d);            Console.WriteLine(max);            Console.WriteLine(min);            Console.WriteLine(sum);            Console.WriteLine(avg);            Console.WriteLine(b);            Console.WriteLine(s);            Console.WriteLine(d);            Console.ReadKey();        }        /// &lt;summary&gt;        /// 求数组最大最小总和平均值        /// &lt;/summary&gt;        /// &lt;param name="nums"&gt;传入数据数组&lt;/param&gt;        /// &lt;returns&gt;返回的数组&lt;/returns&gt;        public static int[] GetMaxMinSumAvg(int[] nums)        {            int[] res = new int[4];            res[0] = nums[0];//max            res[1] = nums[0];//min            res[2] = 0;//sum            for(int i=0;i&lt;nums.Length;i++)            {                if(nums[i]&gt;res[0])                {                    res[0] = nums[i];                }                if(nums[i]&lt;res[1])                {                    res[1] = nums[i];                }                res[2] += nums[i];            }            //平均值            res[3] = res[2] / nums.Length;            return res;        }        /// &lt;summary&gt;        /// 求数组最大最小总和平均值        /// &lt;/summary&gt;        /// &lt;param name="nums"&gt;传入数组&lt;/param&gt;        /// &lt;param name="max"&gt;多余返回的最大值&lt;/param&gt;        /// &lt;param name="min"&gt;多余返回的最小值&lt;/param&gt;        /// &lt;param name="sum"&gt;多余返回的总和&lt;/param&gt;        /// &lt;param name="avg"&gt;多余返回的平均值&lt;/param&gt;        public static void Test(int[] nums, out int max, out int min, out int sum, out int avg, out bool b, out string s, out double d)        {            //out 参数要求在方法内给初值            max = nums[0];//max            min = nums[0];//min            sum = 0;//sum            for (int i = 0; i &lt; nums.Length; i++)            {                if (nums[i] &gt; max)                {                    max = nums[i];                }                if (nums[i] &lt; min)                {                    min = nums[i];                }                sum += nums[i];            }            //平均值            avg = sum / nums.Length;            b = true;            s = "123";            d = 3.14;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-2-ref参数"><a href="#3-5-2-ref参数" class="headerlink" title="3.5.2 ref参数"></a>3.5.2 ref参数</h4><p>能够将一个变量带入一个方法中进行改变,改变完成后,再将改变后的值带出方法</p><p>要求:在方法外必须赋初值</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace ref参数{    class Program    {        static void Main(string[] args)        {            double salary = 5000;            JiangJin(ref salary);            Console.WriteLine(salary);            Console.ReadKey();        }        public static void JiangJin(ref double s)        {            s += 500;        }        public static void FaKuan(double s)        {            s -= 500;        }    }}//5500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-3-params可变参数"><a href="#3-5-3-params可变参数" class="headerlink" title="3.5.3 params可变参数"></a>3.5.3 params可变参数</h4><p>将实参列表中跟可变参数数组类型一致的元素都当做数组的元素去处理</p><p>params可变参数只能做最后一个参数且只能有一个</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace params参数//可变参数params 只能做成最后一个参数且只能有一个{    class Program    {        static void Main(string[] args)        {            int[] score = { 98,78,90 };            Test("张三", 360,98, 78, 90);            Console.ReadKey();        }        public static void Test(string name, int id,params int[] score)        {            int sum = 0;            for(int i=0;i&lt;score.Length;i++)            {                sum += score[i];            }            Console.WriteLine("{0}这次考试的总成绩是{1}，学号为{2}", name, sum,id);        }    }}//张三这次考试的总成绩是266，学号为360<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-4-方法的重载"><a href="#3-5-4-方法的重载" class="headerlink" title="3.5.4 方法的重载"></a>3.5.4 方法的重载</h4><p>方法的重载指的是方法的名称相同、参数不同</p><ul><li>参数个数相同,类型就不能相同</li><li>参数类型相同,个数就不能相同</li></ul><h4 id="3-5-5-方法的递归"><a href="#3-5-5-方法的递归" class="headerlink" title="3.5.5 方法的递归"></a>3.5.5 方法的递归</h4><p>递归:方法自己调用自己</p><h5 id="案例-飞行棋"><a href="#案例-飞行棋" class="headerlink" title="案例: 飞行棋"></a>案例: 飞行棋</h5><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;//保留俩位小数(会四舍五入)//double num=0.12453;//string s=num.ToString("0.00");//num=Convert.ToDouble(s);namespace 飞行棋项目{    class Program    {        public static int[] Maps = new int[100];//静态字段模拟全局变量        public static int[] PlayerPos = new int[2];//声明一个静态数组存储玩家坐标        public static string[] PlayerNames = new string[2];//存储玩家姓名        public static bool[] Flags = new bool[2];//Flags[0]=false,Flags[1]=false;        static void Main(string[] args)        {            GameShow();            #region 输入姓名            Console.WriteLine("请输入玩家A的姓名:");            PlayerNames[0] = Console.ReadLine();            while(PlayerNames[0]=="")            {                Console.WriteLine("玩家A的姓名不能为空");                PlayerNames[0] = Console.ReadLine();            }            Console.WriteLine("请输入玩家B的姓名:");            PlayerNames[1] = Console.ReadLine();            while (PlayerNames[1] == ""||PlayerNames[1]==PlayerNames[0])            {                if(PlayerNames[1]=="")                {                    Console.WriteLine("玩家A的姓名不能为空");                    PlayerNames[1] = Console.ReadLine();                }else                {                    Console.WriteLine("玩家B的姓名不能跟A的相同，请重新输入");                    PlayerNames[1] = Console.ReadLine();                }                            }            #endregion            //玩家姓名输入完成后首先清屏            Console.Clear();            GameShow();            Console.WriteLine("{0}的士兵用A表示",PlayerNames[0]);            Console.WriteLine("{0}的士兵用B表示",PlayerNames[1]);            InitailMap();            DrawMap();            while(PlayerPos[0]&lt;99&amp;&amp;PlayerPos[1]&lt;99)            {                if(Flags[0]==false)                {                    PlayGame(0);                }                else                {                    Flags[0] = false;                }                if(PlayerPos[0]&gt;=99)                {                    Console.WriteLine("玩家{0}胜利",PlayerNames[0]);                    break;                }                if (Flags[1] == false)                {                    PlayGame(1);                }                else                {                    Flags[1] = false;                }                if (PlayerPos[1] &gt;= 99)                {                    Console.WriteLine("玩家{0}胜利", PlayerNames[1]);                    break;                }            }//while            Console.ReadKey();        }        /// &lt;summary&gt;        /// 游戏头        /// &lt;/summary&gt;        public static void GameShow()        {            Console.ForegroundColor = ConsoleColor.Blue;//添加颜色            Console.WriteLine("************************");            Console.ForegroundColor = ConsoleColor.Green;            Console.WriteLine("************************");            Console.ForegroundColor = ConsoleColor.Yellow;            Console.WriteLine("*******飞行棋项目*******");            Console.ForegroundColor = ConsoleColor.Red;            Console.WriteLine("************************");            Console.ForegroundColor = ConsoleColor.Gray;            Console.WriteLine("************************");        }        /// &lt;summary&gt;        /// 初始化地图        /// &lt;/summary&gt;        public static void InitailMap()        {            int[] luckyturn = { 6, 23, 40, 55, 69, 83 };//幸运圆盘◎            for(int i=0;i&lt;luckyturn.Length;i++)            {                //int index = luckyturn[i];                Maps[luckyturn[i]] = 1;            }            int[] landMine = { 5, 13, 17, 33, 38, 50, 64, 80, 94 };//地雷☆            for (int i = 0; i &lt; landMine.Length; i++)            {                Maps[landMine[i]] = 2;            }            int[] pause = { 9, 27, 60, 93 };//暂停▲            for (int i = 0; i &lt; pause.Length; i++)            {                Maps[pause[i]] = 3;            }            int[] timeTunnel = { 20, 25, 45, 63, 72, 88, 90 };//时空隧道卐            for (int i = 0; i &lt; timeTunnel.Length; i++)            {                Maps[timeTunnel[i]] = 4;            }        }        /// &lt;summary&gt;        /// 画地图        /// &lt;/summary&gt;        public static void DrawMap()        {            Console.WriteLine("图例：幸运圆盘：◎  地雷：☆  暂停：▲  时空隧道：卐 ");            #region 第一横行            for (int i=0;i&lt;30;i++)            {                Console.Write(DrawStringMap(i));            }//for            #endregion            //画完第一行需换行            Console.WriteLine();            #region 第一竖行            for (int i=30;i&lt;35;i++)            {                for(int j=0;j&lt;=28;j++)                {                    Console.Write("  ");                }                Console.Write(DrawStringMap(i));                Console.WriteLine();            }            #endregion            #region 第二横行            for(int i=64;i&gt;=35;i--)            {                Console.Write(DrawStringMap(i));            }            #endregion            Console.WriteLine();            #region 第二竖行            for (int i=65;i&lt;=69;i++)            {                Console.WriteLine(DrawStringMap(i));            }            #endregion            #region 第三横行            for(int i=70;i&lt;=99;i++)            {                Console.Write(DrawStringMap(i));            }            #endregion            Console.WriteLine();        }//DrawMap        /// &lt;summary&gt;        /// 从画地图方法中抽象出来的一个方法        /// &lt;/summary&gt;        /// &lt;param name="i"&gt;位置坐标&lt;/param&gt;        /// &lt;returns&gt;&lt;/returns&gt;        public static string DrawStringMap(int i)        {            string str="";            #region 画图            if (PlayerPos[0] == PlayerPos[1] &amp;&amp; PlayerPos[1] == i)            {                str="&lt;&gt;";//玩家坐标相同并且都在地图上            }            else if (PlayerPos[0] == i)            {                str="Ａ";//shift+空格 切全角            }            else if (PlayerPos[1] == i)            {                str="Ｂ";//shift+空格 切全角            }            else            {                switch (Maps[i])                {                    case 0:                        Console.ForegroundColor = ConsoleColor.Yellow;                        str = "□";                        break;                    case 1:                        Console.ForegroundColor = ConsoleColor.Red;                        str = "◎";                        break;                    case 2:                        Console.ForegroundColor = ConsoleColor.Cyan;                        str = "☆";                        break;                    case 3:                        Console.ForegroundColor = ConsoleColor.Green;                        str = "▲";                        break;                    case 4:                        Console.ForegroundColor = ConsoleColor.Blue;                        str="卐";                        break;                }//switch            }//else            return str;            #endregion        }        /// &lt;summary&gt;        /// 玩游戏        /// &lt;/summary&gt;        public static void PlayGame(int playerNumber)        {            Random r = new Random();            int rNumber = r.Next(1, 7);            Console.WriteLine("{0}按任意键开始掷骰子", PlayerNames[playerNumber]);            Console.ReadKey(true);            Console.WriteLine("{0}掷出了{1}", PlayerNames[playerNumber],rNumber);            PlayerPos[playerNumber] += rNumber;            ChangePos();            Console.ReadKey(true);            Console.WriteLine("{0}按任意键继续行动", PlayerNames[playerNumber]);            Console.ReadKey(true);            Console.WriteLine("{0}行动完了", PlayerNames[playerNumber]);            Console.ReadKey(true);            if (PlayerPos[playerNumber] == PlayerPos[1- playerNumber])            {                Console.WriteLine("玩家{0}踩到玩家{1}，玩家{2}退6格", PlayerNames[playerNumber], PlayerNames[1- playerNumber], PlayerNames[1- playerNumber]);                PlayerPos[1- playerNumber] -= 6;                ChangePos();                Console.ReadKey(true);            }            else//关卡            {                //玩家坐标                switch (Maps[PlayerPos[playerNumber]])//0 1 2 3 4                {                    case 0:                        Console.WriteLine("玩家{0}踩到了方块，安全", PlayerNames[playerNumber]);                        Console.ReadKey(true);                        break;                    case 1:                        Console.WriteLine("玩家{0}踩到了幸运圆盘，请选择：1--交换位置，2--轰炸对方", PlayerNames[playerNumber]);                        string input = Console.ReadLine();                        while (true)                        {                            if (input == "1")                            {                                Console.WriteLine("玩家{0}与玩家{1}交换位置", PlayerNames[playerNumber], PlayerNames[1- playerNumber]);                                Console.ReadKey(true);                                int temp = PlayerPos[playerNumber];                                PlayerPos[playerNumber] = PlayerPos[1- playerNumber];                                PlayerPos[1- playerNumber] = temp;                                Console.WriteLine("交换完成，按任意键继续!!!");                                Console.ReadKey(true);                                break;                            }                            else if (input == "2")                            {                                Console.WriteLine("玩家{0}轰炸玩家{1}，玩家{2}退6格", PlayerNames[playerNumber], PlayerNames[1- playerNumber], PlayerNames[1- playerNumber]);                                Console.ReadKey(true);                                PlayerPos[1- playerNumber] -= 6;                                ChangePos();                                Console.WriteLine("玩家{0}退了6格", PlayerNames[1- playerNumber]);                                Console.ReadKey(true);                                break;                            }                            else                            {                                Console.WriteLine("只能输入1或者2 :1--交换位置，2--轰炸对方");                                input = Console.ReadLine();                            }                        }                        break;                    case 2:                        Console.WriteLine("玩家{0}踩到了地雷，退6格", PlayerNames[playerNumber]);                        Console.ReadKey(true);                        PlayerPos[playerNumber] -= 6;                        ChangePos();                        break;                    case 3:                        Console.WriteLine("玩家{0}踩到了暂停，暂停一回合", PlayerNames[playerNumber]);                        Flags[playerNumber] = true;                        Console.ReadKey(true);                        break;                    case 4:                        Console.WriteLine("玩家{0}踩到了时空隧道，前进10格", PlayerNames[playerNumber]);                        PlayerPos[playerNumber] += 10;                        ChangePos();                        Console.ReadKey(true);                        break;                }//switch            }//else            ChangePos();            Console.Clear();            DrawMap();        }        /// &lt;summary&gt;        /// 玩家坐标发生改变时调用        /// &lt;/summary&gt;        public static void ChangePos()        {            if (PlayerPos[0]&lt;0)            {                PlayerPos[0] = 0;            }            if (PlayerPos[0] &gt;99)            {                PlayerPos[0] = 99;            }            if (PlayerPos[1] &lt; 0)            {                PlayerPos[1] = 0;            }            if (PlayerPos[1] &gt; 99)            {                PlayerPos[1] = 99;            }        }        /// &lt;summary&gt;        /// 反转数组内容        /// &lt;/summary&gt;        /// &lt;param name="names"&gt;传入数组&lt;/param&gt;        public static void Test(string[] names)        {            for (int i = 0; i &lt; names.Length / 2; i++)            {                string temp = names[i];                names[i] = names[names.Length - 1 - i];                names[names.Length - 1 - i] = temp;            }        }            }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-面向对象"><a href="#4-面向对象" class="headerlink" title="4 面向对象"></a>4 面向对象</h2><p>面向对象意在写出一个通用的代码屏蔽差异</p><p>描述一个对象通常描述这个对象的属性和方法</p><p>类:将具有相同属性和方法的对象进一步封装,抽象出类的概念</p><p>对象是根据类创建出来的</p><h3 id="4-1-类"><a href="#4-1-类" class="headerlink" title="4.1 类"></a>4.1 类</h3><p>语法:<br><code>[public] class 类名 {     字段(Fiels);     属性(Property);     方法(Method); }</code></p><p>添加类:需要添加类的项目-&gt;右键-&gt;添加-&gt;类(.cs)</p><p>写好一个类之后,我们需要创建这个类的对象,我们称创建类的过程称为类的实例化,使用关键字<code>new</code></p><p>类不占内存，对象占内存</p><p>属性的作用就是保护字段、对字段的赋值和取值进行限定。<br>属性的本质就是get(读)和set(写)俩个方法</p><p>访问修饰符:</p><ul><li>public:公开的,在哪都能访问</li><li>private:私有的,只能在当前类的内部进行访问,出了这个类就访问不到</li></ul><p>静态与非静态的区别:<br>1.在非静态类中,既可以有实例成员,也可以有静态成员<br>2.在调用实例成员时,需要使用<code>对象名.实例成员</code><br>  在调用静态成员时,需要使用<code>类名.静态成员名</code></p><p>总结:</p><ul><li>静态成员必须使用类名区调用,而实例成员使用对象名区调用</li><li>静态函数中,只能访问静态成员,不允许访问实例成员</li><li>实例函数中,既可以访问静态成员,也可以访问实例成员</li><li>静态类中只允许有静态成员,不允许出现实例成员</li></ul><p>使用:<br>1.如果你需要将你的类当做一个工具类使用时可以考虑将类写成静态的<br>2.静态类在整个项目中资源共享<br>只有在程序全部结束后静态类才会释放资源</p><p>堆、栈 静态存储区域</p><p>释放资源:GC</p><p>构造函数:<br>创建对象时会执行构造函数<br>构造函数可以有重载<br>作用:帮助我们初始化对象<br>构造函数是一个特殊的方法:<br>1.没有返回值,连void也不用写<br>2.名称必须跟类名一样</p><p>类中有一个默认的无参数的构造函数,当你写了一个新的构造函数会替代原先的构造函数</p><p>new关键字帮我们干的3件事:<br>1.在内存中开辟一块空间<br>2.在开辟的空间中创建对象<br>3.调用对象的构造函数进行初始化对象</p><p>this关键字:<br>1.代表当前类的对象<br>2.在类中显示调用本类的构造函数 <code>:this</code></p><p>析构函数:<br>当程序结束时,析构函数才执行<br>作用:帮助我们释放资源</p><p>Person.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 面向对象初级{    public class Person//工具类使用静态类,静态类在整个项目中资源共享    {        //析构函数        ~Person()        {            Console.WriteLine("析构函数调用");//帮助我们释放资源        }        public Person(string name,int age,char gender)        {            this._name = name;            this._age = age;            this._gender = gender;            Console.WriteLine("构造函数");        }        public Person(string name, int age):this(name,age,'男')//this：在类中显示调用本类的构造函数 优点：减少代码重复量        {            //this._name = name;            //this._age = age;        }        public Person(string name)        {            this._name = name;        }        private string _name;        //属性 保护字段        public string Name        {            get { return _name; }            set { _name = value; }        }        private int _age;        public int Age        {             get{ return _age; }            set {                if(value&lt;0||value&gt;100)                {                    value = 0;                }                _age = value; }        }                char _gender;        public char Gender        {            get {                if(_gender!='男'&amp;&amp;_gender!='女')                {                    return _gender = '男';                }                return _gender; }            set { _gender = value; }        }        public void CHLSS()        {            Console.WriteLine("{0},{1}岁,{2},会吃喝拉撒睡",this.Name,this.Age,this.Gender);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Program.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 面向对象初级{    class Program    {        static void Main(string[] args)        {            //创建类的对象   -&gt; 类的实例化            //类不占内存，对象占内存            Person sunQuan = new Person("孙权",18,'男');            sunQuan.CHLSS();            Console.ReadKey();        }    }}//构造函数//孙权,18岁,男,会吃喝拉撒睡<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-命名空间"><a href="#4-2-命名空间" class="headerlink" title="4.2 命名空间"></a>4.2 命名空间</h3><p>导入类所在命名空间:<br>1.用鼠标点<br>2.alt+shift+F10<br>3.记住常见类的命名空间,手敲</p><p>一个项目中引用另一个项目的类<br>1.添加引用:引用-&gt;右键-&gt;引用<br>2.引用命名空间 <code>using 命名空间;</code></p><h3 id="4-3-值类型和引用类型"><a href="#4-3-值类型和引用类型" class="headerlink" title="4.3 值类型和引用类型"></a>4.3 值类型和引用类型</h3><p>区别:<br>1.在内存上存储的地方不一样<br>2.在传递值类型和传递引用类型时,传递的方式不同(值传递和引用传递)</p><p>值传递:int、double、bool、char、decimal、struct、enum<br>引用传递:string、自定义类、数组</p><p>存储:<br>值类型的值是存储在内存的栈当中<br>引用类型的值是存储在内存的堆中</p><h3 id="4-4-字符串"><a href="#4-4-字符串" class="headerlink" title="4.4 字符串"></a>4.4 字符串</h3><p>1.字符串的不可变性(当重新给一个字符串赋值后,原来值并没用销毁,而是重新开辟一块内存存储新值)<br>当程序结束后,GC扫描整个内存,如果发现有的空间没有被指向,立即将它销毁</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            //字符串的不可变性             string s1 = "张三";            string s2 = "张三";            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.可以将字符串看成是char类型的只读数组,可以通过下标访问字符串中的一个元素</p><ul><li>将字符串转换为char类型数组 <code>字符串.ToCharArray()</code></li><li>将字符数组转换为字符串 <code>new string(字符数组)</code></li></ul><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            //可以将字符串看成是char类型的只读数组            string s = "abcdef";            Console.WriteLine(s[0]);            //s[0] = 'b';不能这样做            //首先将字符串转换为char类型数组            char[] chs = s.ToCharArray();            chs[0] = 'b';            //将字符数组转换为字符串            s = new string(chs);            Console.WriteLine(s[0]);            Console.WriteLine(s);            Console.ReadKey();        }    }}//b//bbcdef<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StringBuilder:不开内存空间,比string快<br>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            StringBuilder sb = new StringBuilder();//同一块内存            string str = null;            //创建计时器,用来记录程序运行的时间            Stopwatch sw = new Stopwatch();            sw.Start();//开始计时            for(int i=0;i&lt;100000;i++)            {                //str += i;                sb.Append(i);            }            sw.Stop();//结束计时            Console.WriteLine(sb.ToString());            Console.WriteLine(sw.Elapsed);            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s.ToUpper() 转换为大写<br>s.ToLower() 转换为小写<br>s1.Equals(s1,StringComparison.OrdinalIgnoreCase) 比较 StringComparison.OrdinalIgnoreCase:忽略比较字符串大小写</p><p>**分割字符串:**s.Split(chs,StringSplitOptions.RemoveEmptyEntries) chs:需要移除的字符数组 StringSplitOptions.RemoveEmptyEntries:去除空项<br>返回字符串类型数组</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            //字符串分割Split()返回字符串类型数组            string s = "a b    dfd    _+   =  ,,, fdf";            char[] chs = { ' ', '_', '+', '=', ',' };            string[] str = s.Split(chs,StringSplitOptions.RemoveEmptyEntries);            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s1.Contains(s2) s1包含s2<br>s.Replace(要替换的内容,替换成为的内容) 替换</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            string str = "国家关键人物老赵";            if(str.Contains("老赵"))            {                str = str.Replace("老赵", "**");            }            Console.WriteLine(str);            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s.SubString(起始位置0开始,截取个数) 截取字符串</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            //SubString 截取字符串            string str = "今天天气好晴朗，处处好风光";            str = str.Substring(1,2);            Console.WriteLine(str);            Console.ReadKey();        }    }}//天天<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s.StartsWith(str) 以什么开始,返回bool类型<br>s.EndsWith(str) 以什么结尾,返回bool类型</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            string str = "今天天气好晴朗，处处好风光";            if(str.StartsWith("今天"))            {                Console.WriteLine("是");            }            else            {                Console.WriteLine("不是");            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>str.IndexOf(字符串,开始查找位置包括当前位置); 判读该字符串第一次出现位置,从0开始<br>str.LastIndexOf(字符串,开始查找位置包括当前位置); 判断该字符串最后出现位置,从0开始</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            string str = "今天天气好晴朗，处处好风光";            int index = str.IndexOf('天',2);            int index1 = str.LastIndexOf('天',2);            Console.WriteLine(index);            Console.WriteLine(index1);            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>str.Trim(); 去空格 返回string类型<br>str.TrimStart(); 去前面空格 返回string类型<br>str.TrimEnd(); 去后面空格 返回string类型</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            string str = "      hahaha     ";            //str = str.Trim();            //str = str.TrimStart();            str = str.TrimEnd();            Console.Write(str);            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>string.IsNullOrEmpty(str) 判断字符串是否为NULL或Empty</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            string str = null;            if(string.IsNullOrEmpty(str))            {                Console.WriteLine("是的");            }            else            {                Console.WriteLine("不是");            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>string.Join(字符串, 可变数组); 将数组按照指定的字符串连接,返回一个字符串</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            string[] names = { "张三", "李四", "王五", "赵六" };            string strNew = string.Join("|", names);            Console.WriteLine(strNew);            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-字符串使用"><a href="#案例-字符串使用" class="headerlink" title="案例: 字符串使用"></a>案例: 字符串使用</h5><p>案例描述:<br>文本文件中存储了多个文章标题、作者，<br>标题和作者之间用若干空格(数量不定)隔开，每行一个，<br>标题有的长有的短，输出到控制台的时候最多标题长度10.<br>如果超过10，则截取长度8的子串并且最后添加“…”，加一个竖线后输出作者的名字。</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;using System.IO;using System.Text;namespace 字符串{    class Program    {        static void Main(string[] args)        {            string path = @"文件路径";            string[] contents = File.ReadAllLines(path, Encoding.Default);            for(int i=0;i&lt;contents.Length;i++)            {                string[] strNew = contents[i].Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);                Console.WriteLine((strNew[0].Length &gt; 10 ? strNew[0].Substring(0, 8)+"......r": strNew[0]) + "|" + strNew[1]);            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-继承"><a href="#4-5-继承" class="headerlink" title="4.5 继承"></a>4.5 继承</h3><p>子类  派生类<br>父类  基类<br>子类继承了父类,继承了父类的属性和方法,但是子类没有继承父类的私有字段</p><p>继承的特性:<br>1.单根性:一个子类只能有一个父类<br>2.传递性</p><p>子类并没有继承父类的构造函数,但是子类会默认调用父类无参数的构造函数创建父类对象,让子类可以使用父类中的成员。所以,如果在父类中重新写了一个有参数的构造函数后,那个无参数的就被干掉了,子类就调用不到了,所以子类会报错。<br>解决方法:<br>1.在父类中重新写一个无参数的构造函数<br>2.在子类中显示的调用父类的构造函数,使用关键字<code>:base()</code></p><p>object是所有类的基类</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 继承{    class Program    {        static void Main(string[] args)        {            Reporter rep = new Reporter("狗仔", 34,'男',"偷拍");            rep.ReporterSayHello();            Programmer pro = new Programmer("程序猿", 23, '男', 3);            pro.ProgrammerSayHello();            Console.ReadKey();         }    }    public class Person    {        private string _name;        public string Name        {            get { return _name; }            set { _name = value; }        }        private int _age;        public int Age        {            get { return _age; }            set { _age = value; }        }        private char _gender;        public char Gender        {            get { return _gender; }            set { _gender = value; }        }        public Person(string name, int age,char gender)        {            this.Name = name;            this.Age = age;            this.Gender = gender;        }        public void SayHello()        {            Console.WriteLine("大家好，我是人类");        }    }    public class Reporter : Person    {        public Reporter(string name,int age,char gender,string hobby)            :base(name,age,gender)        {            this.Hobby = hobby;        }        private string _hobby;        public string Hobby        {            get { return _hobby; }            set { _hobby = value; }        }        public void ReporterSayHello()        {            Console.WriteLine("我叫{0}，我是一名记者，我的爱好是{1}，我是{2}生，我今年{3}岁", this.Name, this.Hobby, this.Gender, this.Age);        }        public new void SayHello()        {            Console.WriteLine("大家好，我是记者");        }    }    public class Programmer : Person    {        public Programmer(string name, int age, char gender, int workYear)            : base(name, age, gender)        {            this.WorkYear = workYear;        }        private int _workYear;        public int WorkYear        {            get { return _workYear; }            set { _workYear = value; }        }        public void ProgrammerSayHello()        {            Console.WriteLine("我叫{0}，我是一名程序员，我是{1}生，我今年{2}岁,我的工作年限是{3}年", this.Name,  this.Gender, this.Age,this.WorkYear);        }        public new void SayHello()//new ：隐藏从父类那里继承来的成员        {            Console.WriteLine("大家好，我是程序猿");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new关键字:<br>1.创建对象<br>2.隐藏从父类继承过来的同名成员    隐藏后果:子类调用不到父类的成员</p><h3 id="4-6-里氏转换"><a href="#4-6-里氏转换" class="headerlink" title="4.6 里氏转换"></a>4.6 里氏转换</h3><p>1.子类可以赋值给父类     如果有一个地方需要父类作为参数,我们可以给一个子类代替<br>2.如果父类中装的是子类对象,那么可以将这个父类强转为子类对象</p><p>子类对象可以调用父类的成员,但是父类对象只能调用自己的成员</p><p>is: 表示类型转换,如果能转换成功,则返回true,不能转换成功返回false<br>as: 表示类型转换,如果能够转换则返回对应的对象,否则返回一个NULL</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 里氏转换{    class Program    {        static void Main(string[] args)        {            //1.子类可以赋值给父类：如果有一个地方需要父类作为参数，我们可以给一个子类代替            //Student s = new Student();            //Person p = s;            Person p = new Student();            //2.如果父类中装的是子类对象，那么可以将这个父类强转为子类对象            //is用法            //if(p is Student)            //{            //    Student ss = (Student)p;            //    ss.StudentSayHello();            //}            //else            //{            //    Console.WriteLine("转换失败");            //}            //as用法            Student t = p as Student;            t.StudentSayHello();            Console.ReadKey();        }    }    public class Person    {        public void PersonSayHello()        {            Console.WriteLine("我是父类");        }    }    public class Student:Person    {        public void StudentSayHello()        {            Console.WriteLine("我是学生");        }    }    public class Teacher : Person    {        public void TeacherSayHello()        {            Console.WriteLine("我是老师");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h5><p>受保护的:可以在当前类的内部以及该类的子类中访问</p><h3 id="4-7-ArrayList集合"><a href="#4-7-ArrayList集合" class="headerlink" title="4.7 ArrayList集合"></a>4.7 ArrayList集合</h3><p>集合好处(相对于数组):<br>1.长度可以任意改变<br>2.类型随意</p><p>我们将一个对象输出到控制台,默认情况下就是打印这个对象的命名空间</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections;namespace ArrayList集合{    class Program    {        static void Main(string[] args)        {            ArrayList list = new ArrayList();            list.Add(1);            list.Add(3.14);            list.Add(true);            list.Add("张三");            list.Add('男');            list.Add(5000m);            list.Add(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });            Person p = new Person();            list.Add(p);            list.Add(list);            list.Remove(true);//删除单个元素            list.RemoveAt(0);//根据下标删除元素            for(int i=0;i&lt;list.Count;i++)            {                if(list[i] is Person)                {                    ((Person)list[i]).SayHello();                }else if(list[i] is int[])                {                    for(int j=0;j&lt;((int[])list[i]).Length;j++)                    {                        Console.WriteLine(((int[])list[i])[j]);                    }                }                else                {                    Console.WriteLine(list[i]);                }              }            list.Clear();//清除所有元素            //添加集合元素 AddRange()            list.AddRange(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });            list.AddRange(list);            list.RemoveRange(0, 8);//根据下标删除范围元素            list.Sort();//升序排列            list.Reverse();//反转            list.Insert(1, 9);//在位置1插入数字9 InsertRange()在指定位置插入一个集合            bool b = list.Contains(1);//判断是否包含指定的内容            for(int i=0;i&lt;list.Count;i++)            {                Console.WriteLine(list[i]);            }            Console.WriteLine(b);            Console.WriteLine(list.Count);            Console.WriteLine(list.Capacity);            Console.ReadKey();                    }    }    public class Person    {        public void SayHello()        {            Console.WriteLine("Hello");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ArrayList集合长度:</p><ul><li>count 表示这个集合中实际包含的元素个数 没元素:0</li><li>capcity 表示这个集合中可以包含的元素个数 没元素:0<br>当实际包含的元素个数(count)超过了可以包含的元素个数(capcity)时,集合就会向内存中申请多开一倍的空间来保证集合的长度一直够用</li></ul><h3 id="4-8-HashTable集合-键值对集合"><a href="#4-8-HashTable集合-键值对集合" class="headerlink" title="4.8 HashTable集合 (键值对集合)"></a>4.8 HashTable集合 (键值对集合)</h3><p>类似于生活中的字典,<code>键值对对象[键]=值</code></p><p>键值对集合中,键必须是唯一的,值可以是重复的</p><p>使用foreach循环输出,不能使用for循环  var:根据值能够推断出来类型</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Hashtable集合{    class Program    {        static void Main(string[] args)        {            //var:根据值能够推断出来类型            //var n = 5;            //Console.WriteLine(n.GetType());            //创建一个键值对集合对象            Hashtable ht = new Hashtable();            ht.Add(1,"张三");            ht.Add(2, true);            ht.Add(3, '男');            ht.Add(false, "错误的");            //ht.Clear();//清空            ht[5] = "new";            ht[1] = "换掉张三";            //ht.Remove(5);            //Console.WriteLine(ht[1]);            //不能使用for循环遍历，使用foreach循环            foreach (var item in ht.Keys)            {                Console.WriteLine("键是---{0}，值是---{1}",item,ht[item]);            }            //for (int i=0;i&lt;ht.Count,;i++)            //{            //  Console.WriteLine(ht[i]);            //}            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-9-Path类"><a href="#4-9-Path类" class="headerlink" title="4.9 Path类"></a>4.9 Path类</h3><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.IO;namespace Path类{    class Program    {        static void Main(string[] args)        {            string str = @"文件路径";            //int index = str.LastIndexOf("\\");            //str = str.Substring(index + 1);            //Console.WriteLine(str);            //快速获得一个路径下文件的名字            Console.WriteLine(Path.GetFileName(str));            //获得没有扩展名的文件名            Console.WriteLine(Path.GetFileNameWithoutExtension(str));            //获得文件扩展名            Console.WriteLine(Path.GetExtension(str));            //获得文件所在文件夹名称            Console.WriteLine(Path.GetDirectoryName(str));            //获得文件全路径            Console.WriteLine(Path.GetFullPath(str));            //连接俩个字符串作为路径            Console.WriteLine(Path.Combine(@"c:\a\","b.txt"));            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-10-File类"><a href="#4-10-File类" class="headerlink" title="4.10 File类"></a>4.10 File类</h3><p>File.Exists():判断是否存在<br>File.Copy():复制文件<br>File.Move():剪切,俩个参数,第一个原地址,第二个新地址<br>File.Delete():删除</p><p>读取文件的三个方法:</p><p>1.<code>byte[] buffer = File.ReadAllBytes(@"文件路径"); string str = System.Text.Encoding.Default.GetString(buffer);//将二进制转换为字符串</code></p><p>2.<code>string[] str = File.ReadAllLines(@"文件路径",Encoding.Default);//读取所有行</code></p><p>3.<code>string str = File.ReadAllText(@"文件路径",Encoding.Default);</code></p><p>写入文件:</p><p>1.<code>byte[] buffer = System.Text.Encoding.Default.GetBytes(str);//将字符串转换为字节数组 File.WriteAllBytes(@"文件路径",buffer);</code></p><p>2.<code>File.WriteAllLines(@"文件路径",str数组);</code></p><p>3.<code>File.WriteAllText(@"文件路径",str);</code></p><p>File.AppendAllText(@”文件路径”,str);//追加文字</p><p>多媒体(只能以字节形式)的复制:<br><code>byte[] buffer = File.ReadAllBytes(@"文件路径"); File.WriteAllBytes(@"存放路径",buffer);</code></p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.IO;namespace File类{    class Program    {        static void Main(string[] args)        {            //创建一个文件            //File.Create(@"F:\new.txt");            //Console.WriteLine("创建成功");            //Console.ReadKey();            //删除一个文件            //File.Delete(@"F:\str.docx");            //Console.WriteLine("删除成功");            //Console.ReadKey();            //赋值一个文件            File.Copy(@"F:\new.txt", @"F:\copy.txt");            Console.WriteLine("复制成功");            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编码:</p><p>ASC     128<br>ASCII   256</p><p>GB2312  简体字(中国)<br>Big5    繁体字</p><p>unicode 全,但解析慢<br>UTF-8   web</p><p>将字符串以怎样的形式保存为二进制</p><p>乱码:<br>产生原因:保存文件的编码和打开文件的编码格式不同</p><h5 id="Directory操作"><a href="#Directory操作" class="headerlink" title="Directory操作"></a>Directory操作</h5><p>Directory.CreateDirectory():创建文件夹<br>Directory.Delete(@”文件夹路径”,true):删除文件夹 true表示即使该文件夹下不为空也删除<br>Directory.Exists():判断文件夹是否存在<br>Directory.Move():剪切<br>Directory.GetDirectories():得到该路径下所有文件夹路径的字符串数组<br>Directory.GetFiles():得到该路径下所有文件路径的字符串数组 第二个参数为指定文件后缀名 <code>*.avi</code></p><h5 id="FileStream"><a href="#FileStream" class="headerlink" title="FileStream"></a>FileStream</h5><p>操作字节</p><p>File只能操作小文件;操作大文件(字符):StreamReader、StreamWriter</p><p>读:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">//创建FileStream对象FileStream fsRead = new FileStream(@"文件路径",FileMode.Open,FileAccess.Read);//创建缓冲区的大小byte[] buffer = new byte[fsRead.Length];//开始读取数据 返回的是这次实际读取到的数据int r = fsRead.Read(buffer,0,buffer.Length);//将字节数组转换为字符串string str = System.Text.Encoding.Default.GetString(buffer);fsRead.Close();//关闭流fsRead.Dispose();//释放流占用的资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写: 追加:FileMode.Append</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using(FileStream fsWrite = new FileStream(@"文件路径",FileMode.OpenOrCreate,FileAccess.Write)){    byte[] buffer = System.Text.Encoding.Default.GetBytes(str);    fsWrite.Write(buffer,0,buffer.Length);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>多媒体文件的复制:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public static void CopyFile(string source,string target){    using(FileStream fsRead = new FileStream(source,FileMode.Open,FileAccess.Read)){        using(FileStream fsWrite = new FileStream(target,FileMode.OpenOrCreate,FileAccess.Write)){            //创建缓冲区的大小            byte[] buffer = new byte[1024*1024*7];            //开始读取数据 返回的是这次实际读取到的数据            while(true)            {                int r = fsRead.Read(buffer,0,buffer.Length);                if(r==0)//读完了                {                    return;                }else{                    fsWrite.Write(buffer,0,r);                }            }            }    }}//source:原文件路径//target:复制到的文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StreamReader读数据</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">//使用FileStream来读取数据using(FileStream fsRead = new FileStream(@"文件路径",FileMode.Open,FileAccess.Read)){    using(StreamReader sr = new StreamReader(fsRead,Encoding.Default)){        while(!sr.EndOfStream)        {            Console.WriteLine(sr.ReadLine());        }    }}Console.ReadKey();//可简写为:using(StreamReader sr = new StreamReader(@"文件路径"),Encoding.Default){    while(!sr.EndOfStream)    {        Console.WriteLine(sr.ReadLine());    }}Console.ReadKey();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StreamReader写数据</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">//使用FileStream来写数据 追加:FileMode.Appendusing(FileStream fsWrite = new FileStream(@"文件路径",FileMode.OpenOrCreate,FileAccess.Write)){    using(StreamWriter sw = new StreamWriter(fsWrite,Encoding.Default)){        sw.Write("xxx");//俩个字符替换一个字    }}Console.ReadKey();//可简写为: true:追加using(StreamWriter sw = new StreamWriter(@"文件路径"),true){    sw.Write("xxx");}Console.ReadKey();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-11-List泛型集合"><a href="#4-11-List泛型集合" class="headerlink" title="4.11 List泛型集合"></a>4.11 List泛型集合</h3><p>方法跟ArrayList差不多</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;namespace List泛型集合{    class Program    {        static void Main(string[] args)        {            //创建泛型集合对象            List&lt;int&gt; list = new List&lt;int&gt;();            list.Add(1);            list.Add(2);            list.Add(3);            list.AddRange(new int[] { 1, 2, 3, 4, 5, 6 });            list.AddRange(list);            //list泛型集合可以转换为数组            int[] nums = list.ToArray();            for (int i = 0; i &lt; list.Count; i++)            {                Console.WriteLine(list[i]);            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-12-装箱和拆箱"><a href="#4-12-装箱和拆箱" class="headerlink" title="4.12 装箱和拆箱"></a>4.12 装箱和拆箱</h3><p>装箱:就是将值类型转换为引用类型<br>拆箱:就是将引用类型转换为值类型</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int n=10;object o=n;//装箱int nn=(int)o;//拆箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>装箱会浪费时间,代码中应该避免装箱和拆箱</p><p>注意:Convert.ToInt(str)没有发生任意类型的装箱和拆箱</p><p>发生装箱和拆箱的条件:看是否有继承关系,有继承关系才有可能发生</p><h3 id="4-13-Dictionary集合"><a href="#4-13-Dictionary集合" class="headerlink" title="4.13 Dictionary集合"></a>4.13 Dictionary集合</h3><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;namespace Dictionary集合{    class Program    {        static void Main(string[] args)        {            Dictionary&lt;int, string&gt; dic = new Dictionary&lt;int, string&gt;();            dic.Add(1, "张三");            dic.Add(2, "李四");            dic.Add(3, "王五");            dic[1] = "新来的";            //遍历方式            //1.foreach            //foreach (var item in dic.Keys)            //{            //    Console.WriteLine("{0}---{1}", item, dic[item]);            //}            //2.一对数据的遍历            foreach (KeyValuePair&lt;int,string&gt; kv in dic)            {                Console.WriteLine("{0}---{1}", kv.Key, kv.Value);            }            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-14-多态"><a href="#4-14-多态" class="headerlink" title="4.14 多态"></a>4.14 多态</h3><p>多态:<br>概念:让一个对象能够表现出多种状态(类型)<br>实现多态的3种手段:<br>1.虚方法</p><p>将父类方法标记为虚方法,在其返回类型之前加<code>virtual</code>,这个函数子类要重写一遍,在重写方法返回类型前加<code>override</code></p><p>2.抽象类</p><p>当父类中的方法不知道如何去实现时,可以考虑将父类写成抽象类<code>abstract class</code>,将方法写成抽象方法<code>abstract 返回类型</code> 子类也需要重写(在重写方法返回类型前加<code>override</code>),而且子类必须要实现父类中所有的抽象成员<br>实现多态:不能创建父类对象,可以创建子类对象<code>Father f = new Son(); a.Eat();</code></p><p>抽象方法不能有方法体<code>public abstract void func();</code><br>空实现:<code>public abstract void func(){}</code></p><p>抽象类可以有非抽象成员,但是非抽象类中不能有抽象成员</p><p>如果子类也是抽象类,不用重写父类抽象成员</p><p>抽象类是由构造函数的,虽然不能被实例化</p><p>子类重写父类抽象函数时返回值和参数必须一样</p><p>如果父类中的方法有默认的实现,并且父类需要被实例化,这时可以考虑将父类定义成一个普通类,用虚方法来实现多态<br>如果父类中的方法没有默认实现,父类也不需要被实例化,则可以将父类定义为抽象类</p><p>抽象类也可以有虚方法,子类也不是必须要重写虚方法</p><h5 id="案例-使用多态求矩形的面积和周长以及圆形的面积和周长"><a href="#案例-使用多态求矩形的面积和周长以及圆形的面积和周长" class="headerlink" title="案例:使用多态求矩形的面积和周长以及圆形的面积和周长"></a>案例:使用多态求矩形的面积和周长以及圆形的面积和周长</h5><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 抽象类{    class Program    {        static void Main(string[] args)        {            Shape shape = new Circle(5);            double area = shape.GetArea();            double perimeter = shape.GetPerimeter();            Console.WriteLine("面积:{0},周长:{1}", area, perimeter);            Console.ReadKey();        }    }    public abstract class Shape    {        public abstract double GetArea();        public abstract double GetPerimeter();    }    public class Circle : Shape    {        private double _r;        public double R        {            get { return _r; }            set { _r = value; }        }        public Circle(double r)        {            this.R = r;        }        public override double GetArea()        {            return Math.PI * this.R * this.R;        }        public override double GetPerimeter()        {            return 2 * Math.PI * this.R;        }    }    public class Square : Shape    {        private double _Height;        public double Height        {            get { return _Height; }            set { _Height = value; }        }        private double _Width;        public double Width        {            get { return _Width; }            set { _Width = value; }        }        public Square(double height,double width)        {            this.Height = height;            this.Width = width;        }        public override double GetArea()        {            return this.Height * this.Width;        }        public override double GetPerimeter()        {            return 2 * (this.Height + this.Width);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.接口</p><p>接口就是一个规范、能力</p><p>语法:<br><code>[public] interface I...able {     成员; }</code></p><p>接口中的成员不允许添加访问修饰符<br>不允许写具有方法体的函数 自动属性<br>不能写字段和构造函数,只能有方法、属性、索引器、事件<br>一个类继承了一个接口就必须实现这个接口中所有成员<br>为了多态,接口不能被实例化,接口不能创建对象<br>接口中的成员不能有任何实现<br>接口与接口间可以继承,并且可以多继承<br>接口只能继承接口<br>类继承类A,继承接口B,写法上A在B前(先继承类)</p><p>显式实现接口就是为了解决方法重名问题</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 显式实现接口{    class Program    {        static void Main(string[] args)        {            //显式实现接口就是为了解决方法重名问题            IFlyable fly = new Bird();            fly.Fly();            Bird bird = new Bird();            bird.Fly();            Console.ReadKey();        }    }    public class Bird:IFlyable    {        public void Fly()        {            Console.WriteLine("鸟会飞");        }        /// &lt;summary&gt;        /// 显式实现接口        /// &lt;/summary&gt;        void IFlyable.Fly()        {            Console.WriteLine("我是接口的Fly");        }    }    public interface IFlyable    {        void Fly();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h5><p>public:公开的,公共的<br>private:私有的,只有在当前类的内部访问<br>protected:受保护的,只能在当前类的内部以及该类的子类中访问<br>internal:只能在当前项目中访问,在同一个项目中,与public权限一样<br>protected internal:protected+internal</p><p>1.能够修饰类的修饰符:public、internal(默认)<br>2.可访问性不一致<br>子类访问权限不能高于父类访问权限,因为子类会暴露父类成员</p><h5 id="简单工厂设计模式"><a href="#简单工厂设计模式" class="headerlink" title="简单工厂设计模式"></a>简单工厂设计模式</h5><p>设计模式:设计这个项目的一种方式</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 简单工厂设计模式{    class Program    {        static void Main(string[] args)        {            Console.WriteLine("请输入你想要的笔记本品牌:");            string brand = Console.ReadLine();            NoteBook nb = GetNoteBook(brand);            nb.SayHello();            Console.ReadKey();        }        /// &lt;summary&gt;        /// 简单工厂的核心,根据用户的输入创建对象赋值给父类        /// &lt;/summary&gt;        /// &lt;param name="brand"&gt;&lt;/param&gt;        /// &lt;returns&gt;&lt;/returns&gt;        public static NoteBook GetNoteBook(string brand)        {            NoteBook nb = null;            switch (brand)            {                case "Lenovo":nb = new Lenovo();                    break;                case "IBM":nb = new IBM();                    break;                case "Acer":nb = new Acer();                    break;                case "Dell":nb = new Dell();                    break;                default:                    break;            }            return nb;        }    }    public abstract class NoteBook    {        public abstract void SayHello();    }    public class Lenovo : NoteBook    {        public override void SayHello()        {            Console.WriteLine("我是联想笔记本");        }    }    public class Acer : NoteBook    {        public override void SayHello()        {            Console.WriteLine("我是鸿基笔记本");        }    }    public class Dell : NoteBook    {        public override void SayHello()        {            Console.WriteLine("我是戴尔笔记本");        }    }    public class IBM : NoteBook    {        public override void SayHello()        {            Console.WriteLine("我是IBM笔记本");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值类型:int,double,char,decimal,bool,enum,struct<br>复制时,传递的是本身<br>引用类型:string,数组,自定义类,集合,object,接口<br>复制时,传递的是地址 注意:字符串的不可变型</p><p>加ref:值传递-&gt;引用传递</p><p>序列化和反序列化:<br>序列化:就是将对象转换为二进制<br>在类上加<code>[Serializable]</code></p><p>反序列化:就是将二进制转换为对象</p><p>作用:传递数据</p><p>部分类:在类的class前加<code>partial</code>,可以写相同类</p><p>密封类:在类的class前加<code>sealed</code>,不能被继承,但是可以继承其他类</p><p>重写toString方法:</p><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 重写toString方法{    class Program    {        static void Main(string[] args)        {            Person p = new Person();            Console.WriteLine(p.ToString());            Console.ReadKey();        }    }    public class Person    {        public override string ToString()        {            return "Hello World";        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-超市收银系统"><a href="#案例-超市收银系统" class="headerlink" title="案例: 超市收银系统"></a>案例: 超市收银系统</h5><p>商品类、</p><p>GUID:产生一个不会重复的编号 <code>Guid.NewGuid().toString()</code></p><p>代码:</p><p>ProductFather.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    class ProductFather    {        public double Price        {            get;            set;        }        public string Name        {            get;            set;        }        public string ID        {            get;            set;        }        public ProductFather(string id,double price,string name)        {            this.ID = id;            this.Name = name;            this.Price = price;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Acer.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    class Acer:ProductFather    {        public Acer(string id,double price,string name)            : base(id, price, name)        {        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SamSung.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    class SamSung:ProductFather    {        public SamSung(string id,double price,string name)            : base(id, price, name)        {        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JiangYou.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    class JiangYou:ProductFather    {        public JiangYou(string id,double price,string name)            : base(id, price, name)        {        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Banana.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    class Banana:ProductFather    {        public Banana(string id,double price,string name)            : base(id, price, name)        {        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CangKu.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    class CangKu    {        //存储货物 使用父类        List&lt;List&lt;ProductFather&gt;&gt; list = new List&lt;List&lt;ProductFather&gt;&gt;();        /// &lt;summary&gt;        /// 向用户展示货物        /// &lt;/summary&gt;        public void ShowPros()        {            foreach (var item in list)            {                Console.WriteLine("仓库有:"+item[0].Name+"\t\t"+"有"+item.Count+"个"+"\t\t每个"+item[0].Price+"元");            }        }        //list[0]存放Acer电脑        //list[1]存放三星手机        //list[2]存放酱油        //list[3]存放酱油        /// &lt;summary&gt;        /// 在创建仓库对象时 向仓库中添加货架        /// &lt;/summary&gt;        public CangKu()        {            list.Add(new List&lt;ProductFather&gt;());            list.Add(new List&lt;ProductFather&gt;());            list.Add(new List&lt;ProductFather&gt;());            list.Add(new List&lt;ProductFather&gt;());        }        /// &lt;summary&gt;        /// 进货        /// &lt;/summary&gt;        /// &lt;param name="strType"&gt;货物类型&lt;/param&gt;        /// &lt;param name="count"&gt;货物数量&lt;/param&gt;        public void JinPros(String strType,int count)        {            for (int i = 0; i &lt; count; i++)            {                switch(strType)                {                    case "Acer":                        list[0].Add(new Acer(Guid.NewGuid().ToString(),1000,"鸿基笔记本"));                        break;                    case "SamSung":                        list[1].Add(new SamSung(Guid.NewGuid().ToString(), 800, "三星手机"));                        break;                    case "JiangYou":                        list[2].Add(new JiangYou(Guid.NewGuid().ToString(), 8, "酱油"));                        break;                    case "Banana":                        list[3].Add(new Banana(Guid.NewGuid().ToString(), 3, "香蕉"));                        break;                }            }        }        /// &lt;summary&gt;        /// 从仓库中去货物        /// &lt;/summary&gt;        /// &lt;param name="strType"&gt;&lt;/param&gt;        /// &lt;param name="count"&gt;&lt;/param&gt;        /// &lt;returns&gt;&lt;/returns&gt;        public ProductFather[] QuPros(String strType, int count)        {            ProductFather[] pros = new ProductFather[count];            for (int i = 0; i &lt; pros.Length; i++)            {                switch (strType)                {                    case "Acer":                        pros[i]=list[0][0];                        list[0].RemoveAt(0);                        break;                    case "SamSung":                        pros[i] = list[1][0];                        list[1].RemoveAt(0);                        break;                    case "JiangYou":                        pros[i] = list[2][0];                        list[2].RemoveAt(0);                        break;                    case "Banana":                        pros[i] = list[3][0];                        list[3].RemoveAt(0);                        break;                    default:                        break;                }            }            return pros;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SupperMarket.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    class SupperMarket    {        //创建仓库对象        CangKu ck = new CangKu();        /// &lt;summary&gt;        /// 创建超市对象时给仓库货架上导入货物        /// &lt;/summary&gt;        public SupperMarket()        {            ck.JinPros("Acer", 1000);            ck.JinPros("SamSung", 1000);            ck.JinPros("JiangYou", 1000);            ck.JinPros("Banana", 1000);        }        /// &lt;summary&gt;        /// 与用户交互        /// &lt;/summary&gt;        public void AskBuying()        {            Console.WriteLine("欢迎光临,请问你要什么");            Console.WriteLine("我们有Acer、SamSung、JiangYou、Banana");            string strType = Console.ReadLine();            Console.WriteLine("你需要多少");            int count = Convert.ToInt32(Console.ReadLine());            //去仓库取货            ProductFather[] pros = ck.QuPros(strType, count);            double realMoney = GetMoney(pros);            Console.WriteLine("你总共消费{0}元", realMoney);            Console.WriteLine("请选择打折方式:1--不打折,2--打9折,3--打85折,4--满300减50,5--满500减100");            string input = Console.ReadLine();            //通过简单工厂设计模式根据用户输入获得一个打折对象            CalFather cal = GetCal(input);            double totalMoney=cal.GetTotalMoney(realMoney);            Console.WriteLine("打折后价钱:{0}", totalMoney);            Console.WriteLine("以下是你的小票:");            foreach (var item in pros)            {                Console.WriteLine("货物名称:{0}\t货物单价:{1}\t货物编号:{2}", item.Name, item.Price, item.ID);            }        }        /// &lt;summary&gt;        /// 根据用户选择的打折方式返回一个打折对象        /// &lt;/summary&gt;        /// &lt;param name="input"&gt;用户选择&lt;/param&gt;        /// &lt;returns&gt;返回的是父类对象 但是里面装的是子类对象&lt;/returns&gt;        public CalFather GetCal(string input)        {            CalFather cal = null;            switch (input)            {                case "1":                    cal=new CalNormal();                    break;                case "2":                    cal = new CalRate(0.9);                    break;                case "3":                    cal = new CalRate(0.85);                    break;                case "4":                    cal = new CalMN(300,50);                    break;                case "5":                    cal = new CalMN(500,100);                    break;                default:                    break;            }            return cal;        }        /// &lt;summary&gt;        /// 根据用户买的货物计算总价钱        /// &lt;/summary&gt;        /// &lt;param name="pros"&gt;&lt;/param&gt;        /// &lt;returns&gt;&lt;/returns&gt;        public double GetMoney(ProductFather[] pros)        {            double realMoney = 0;            for (int i = 0; i &lt; pros.Length; i++)            {                realMoney += pros[i].Price;            }            return realMoney;        }        public void ShowPros()        {            ck.ShowPros();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CalFather.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    abstract class CalFather    {        /// &lt;summary&gt;        /// 计算打折后价钱        /// &lt;/summary&gt;        /// &lt;param name="realMoney"&gt;打折前的价钱&lt;/param&gt;        /// &lt;returns&gt;打折后的价钱&lt;/returns&gt;        public abstract double GetTotalMoney(double realMoney);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CalNormal.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    class CalNormal : CalFather    {        /// &lt;summary&gt;        /// 不打折        /// &lt;/summary&gt;        /// &lt;param name="realMoney"&gt;&lt;/param&gt;        /// &lt;returns&gt;&lt;/returns&gt;        public override double GetTotalMoney(double realMoney)        {            return realMoney;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CalRate.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    class CalRate : CalFather    {        /// &lt;summary&gt;        /// 折扣率        /// &lt;/summary&gt;        public double Rate        {            get;            set;        }        public CalRate(double rate)        {            this.Rate = rate;        }        public override double GetTotalMoney(double realMoney)        {            return realMoney * this.Rate;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CalMN.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace 超市收银系统{    class CalMN : CalFather    {        public double M        {            get;            set;        }        public double N        {            set;            get;        }        public CalMN(double m,double n)        {            this.M = m;            this.N = n;        }        public override double GetTotalMoney(double realMoney)        {            if(realMoney&gt;=this.M)            {                return realMoney - (int)(realMoney / this.M) * this.N;            }            else            {                return realMoney;            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Main.cs</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 超市收银系统{    class Program    {        static void Main(string[] args)        {            //创建超市对象            SupperMarket sm = new SupperMarket();            //展示货物            sm.ShowPros();            //用户交互            sm.AskBuying();            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h5><p>代码:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Security.Cryptography;using System.Text;namespace MD5加密{    class Program    {        static void Main(string[] args)        {            //"123"  202cb962ac59075b964b07152d234b70            string s = GetMD5("123");            Console.WriteLine(s);            Console.ReadKey();        }        public static string GetMD5(string str)        {            //创建MD5对象            MD5 md5 = MD5.Create();            //加密            //将字符串转化为字节数组            byte[] buffer = Encoding.Default.GetBytes(str);            byte[] MD5Buffer = md5.ComputeHash(buffer);            //将字节数组转化为字符串            //将字节数组中每一个元素按照指定的编码格式解析成字符串            //直接将数组ToString()            //将字节数组中每个元素ToString()            //return Encoding.Default.GetString(MD5Buffer);            string strs = "";            for (int i = 0; i &lt; MD5Buffer.Length; i++)            {                strs += MD5Buffer[i].ToString("x2");//将10进制转化为16进制：x   x2起对齐作用            }            return strs;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-winform"><a href="#5-winform" class="headerlink" title="5 winform"></a>5 winform</h2><p>winform应用程序是一种智能客户端技术,我们可以使用winform应用程序帮助我们获得信息或者传输信息等</p><p>创建时选择Windows窗体应用(.NET Framework)</p><p>后台切前台:右键-&gt;查看设计器</p><h4 id="Button控件"><a href="#Button控件" class="headerlink" title="Button控件"></a>Button控件</h4><p>属性:<br>1.Name:在后台要获得前台的空间对象时需要使用Name属性<br>2.visible:指示一个控件是否可见<br>3.Enabled:指示一个控件是否可用</p><p>事件:<br>注册事件:双击控件注册的都是控件默认选中的那个事件<br>触发事件:</p><p>在Main函数中创建的窗体对象我们称之为这个窗体应用程序的主窗体</p><p>关闭所有窗体:</p><p>新建一个静态类</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public static class Test{    public static Form1 _fr1Test;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>主窗体load加载时发生:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">Test._fr1Test = this;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要调用关闭事件的地方:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">Test._fr1Test.Close();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Button常用事件:Click、MouseEnter</p><h4 id="TextBox控件"><a href="#TextBox控件" class="headerlink" title="TextBox控件"></a>TextBox控件</h4><p>属性:<br>1.WordWrap:指示文本框是否换行<br>2.PasswordChar:让文本框显示一个单一的字符<br>3.ScollBars:是否显示滚动条<br>事件:TextChanged:当文本框中内容改变时执行这个事件</p><p>Timer<br>在指定的一段时间间隔内<br>事件:Tick:每隔一段时间执行一次事件</p><p>播放音乐:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">SoundPlayer sp = new SoundPlayer();sp.SoundLocation = @"音乐文件路径(只支持.wav)";sp.play();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CheckBox-复选框"><a href="#CheckBox-复选框" class="headerlink" title="CheckBox 复选框"></a>CheckBox 复选框</h4><p>checked:指示这个空间是否选中</p><h4 id="RadioButton-单选"><a href="#RadioButton-单选" class="headerlink" title="RadioButton 单选"></a>RadioButton 单选</h4><p>默认情况下,在一个窗体中,所有单选按钮只允许选中一个,但可以使用GroupBox容器:用于分组</p><h3 id="MDI窗体设计"><a href="#MDI窗体设计" class="headerlink" title="MDI窗体设计"></a>MDI窗体设计</h3><p>1.首先确定一个父窗体<br>isMdiContainer -&gt; true<br>2.创建子窗体,并且设置他们的父窗体</p><p><a href="https://github.com/liaojie1314/MDIdesign">代码</a></p><h4 id="PictureBox"><a href="#PictureBox" class="headerlink" title="PictureBox"></a>PictureBox</h4><p>.Image = Image.FromFile(图片全路径);</p><h3 id="Directory-操作文件夹"><a href="#Directory-操作文件夹" class="headerlink" title="Directory 操作文件夹"></a>Directory 操作文件夹</h3><p>CreateDirectory 创建文件夹<br>Delete 删除文件夹<br>Move 剪切文件夹<br>Exist 判断是否存在<br>GetFiles 获得指定目录下所有文件的全路径<br>GetDirectory 获得指定目录下所有文件夹的全路径</p><h4 id="WebBrowser-浏览器控件"><a href="#WebBrowser-浏览器控件" class="headerlink" title="WebBrowser 浏览器控件"></a>WebBrowser 浏览器控件</h4><p>Url:网站网址</p><p>Uri uri = new Uri(“http://“+str);</p><h4 id="ComboBox-下拉框控件"><a href="#ComboBox-下拉框控件" class="headerlink" title="ComboBox 下拉框控件"></a>ComboBox 下拉框控件</h4><p>DropDownStyle:控制下拉框的外观样式</p><p>名字:cbo+…</p><p>.Items.Add()//添加<br>.Items.Clear()//清空<br>.SelectedItem.ToString()//获取当前选择的文本</p><h5 id="案例-日期选择器"><a href="#案例-日期选择器" class="headerlink" title="案例: 日期选择器"></a>案例: 日期选择器</h5><p><a href="https://github.com/liaojie1314/DatePickers">代码</a></p><h4 id="ListBox控件"><a href="#ListBox控件" class="headerlink" title="ListBox控件"></a>ListBox控件</h4><p>.Items.Add()//添加</p><h5 id="案例-石头剪刀布"><a href="#案例-石头剪刀布" class="headerlink" title="案例: 石头剪刀布"></a>案例: 石头剪刀布</h5><p><a href="https://github.com/liaojie1314/RockPaperScissors">代码</a></p><h4 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h4><p>打开对话框</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">OpenFileDialog ofd = new OpenFileDialog();//设置对话框标题ofd.Title = "";//设置对话框可以多选ofd.Multiselect = true;//设置对话框初始目录ofd.InitialDirectory = @"全路径";//设置对话框的文件类型ofd.Filter = "文本文件|*.txt|媒体文件|*.wmv|图片文件|*.jpg|所有文件|*.*";//展示对话框ofd.ShowDialog();//获得在打开对话框中选中文件的路径string path = ofd.FileName;if(path==""){    return;}using(FileStream fsRead = new FileStream(path,FileMode.OpenOrCreate,FileAccess.Read)){    byte[] buffer = new byte[1024*1024*5];    int r = fsRead.Read(buffer,0,buffer.Length);    textBox.Text = Encoding.Default.GetString(buffer,0,r);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存对话框</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">SaveFileDialog sfd = new SaveFileDialog();sfd.Title = "";sfd.InitialDirectory = @"全路径";sfd.Filter = "文本文件|*.txt|媒体文件|*.wmv|图片文件|*.jpg|所有文件|*.*";sfd.ShowDialog();string path = sfd.FileName;if(path==""){    return;}using(FileStream fsWrite = new FileStream(path,FileMode.OpenOrCreate,FileAccess.Write)){    byte[] buffer = Encoding.Default.GetBytes(textBox.Text);    fsWrite.Write(buffer,0,buffer.Length);}MessageBox.Show("保存成功");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体和颜色对话框</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">FontDialog fd = new FontDialog();fd.ShowDialog();textBox.Font = fd.Font;ColorDialog cd = new ColorDialog();cd.ShowDialog();textBox.ForeColor = cd.Color;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>panel.Visibel = false;//隐藏</p><h3 id="进程类"><a href="#进程类" class="headerlink" title="进程类"></a>进程类</h3><p>代码</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;using System.Diagnostics;namespace 进程类{    class Program    {        static void Main(string[] args)        {            //获取当前程序所有正在运行的进程            /*            Process[] pros = Process.GetProcesses();            foreach (var item in pros)            {                Console.WriteLine(item);            }            */            //Process.Start("calc");//打开计算机            //打开指定文件            ProcessStartInfo psi = new ProcessStartInfo(@"E:\test.txt");            //1.创建进程对象            Process p = new Process();            p.StartInfo = psi;            p.Start();            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>线程分类:</p><ul><li>前台线程:只有所有前台线程都关闭才能完成程序关闭</li><li>后台线程:只要所有前台线程结束,后台线程自动关闭</li></ul><p>单线程问题:</p><ul><li>假死</li><li>耗时</li></ul><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">Thread th;//创建一个线程th = new Thread(Test);//将线程设置为后台线程th.IsBackground = true;//标记这个线程准备就绪,随时可以被执行th.Start();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.NET下不允许跨线程访问</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">//取消跨线程访问Control.CheckForIllegalCrossThreadCalls = false;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关闭窗体时判断新线程是否为null,避免主线程关闭,新线程未关闭</p><p>Closing</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">if(th != null){    //结束这个线程    th.Abort();//一旦Abort就不能Start了}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Thread.Sleep(3000);//休眠3秒</p><h2 id="Socket网络编程"><a href="#Socket网络编程" class="headerlink" title="Socket网络编程"></a>Socket网络编程</h2><p>如果线程执行的方法需要参数,那么要求这个参数必须是object类型</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">Thread th = new Thread(Test);th.IsBackground = true;th.Start("123");//下面是Test方法private void Test(object s){    string ss = (string)s;    for(int i = 0;i &lt; 10000;i++)    {        Console.WriteLine(i);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TCP:3次握手 安全、稳定但效率低<br>UDP:快速、效率高,但是不稳定 容易发生数据丢失</p><p>服务器:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">try{    //创建一个负责监听的Socket    Socket socketWatch = new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);    //创建IP地址和端口号对象    IPAddress ip = IPAddress.Any; //IPAddress.Parse(txtServer.Text);    IPEndPoint point = new IPEndPoint(ip,Convert.ToInt32(txtPort.Text));//第二个参数为端口号    //让负责监听的Socket绑定IP地址的端口号    socketWatch.Bind(point);    ShowMsg("监听成功");    //设置监听队列 在某一个时间点内能够连入这个服务端的最大客户端数量    socketWatch.Listen(10);    Thread th = new Thread(Listen);    th.IsBackground = true;    th.Start(socketWatch);    }catch    {}Socket socketSend;//等待客户端的连接 并且创建与之通信的Socketvoid Listen(object o){    //负责跟客户端通信的Socket 将远程地址的端口号存在下拉列表中    Socket socketWatch = o as Socket;    //负责监听的Socket 来接收客户端的连接 创建跟客户端通信的Socket    while(true)    {        try        {            socketSend = socketWatch.Accept();            //将远程连接的客户端的IP地址和Socket存入集合中            dicSocket.Add(socketSend.RemoteEndPoint.ToString(),socketSend);            //将远程连接的客户端IP地址和端口号存入下拉框中            cboUsers.Items.Add(socketSend.RemoteEndPoint.ToString());            //RemoteEndPoint 得到远程地址的端口号            ShowMsg(socketSend.RemoteEndPoint.ToString()+":"+"连接成功");            //开启一个新线程 不同接收客户端发来的消息            Thread th = new Thread(Recive);            th.IsBackground = true;            th.Start(socketSend);        }        catch        {}    }}//将远程连接的客户端的IP地址和Socket存入集合中Dictionary&lt;string,Socket&gt; dicSocket = new Dictionary&lt;string,Socket&gt;();//服务器端不停接收客户端发送的消息void Recive(object o){    Socket socketSend = o as Socket;    while(true)        {            try            {                //客户端连接成功后 服务器应该接收客户端发来的消息                byte[] buffer = new byte[1024*1024*2];                //r 实际接收到的有效字节数                int r = socketSend.Receive(buffer);                if(r==0)                {                    break;                }                string str = Encoding.UTF8.GetString(buffer,0,r);                ShowMsg(socketSend.RemoteEndPoint+":"+str);            }catch            {}        }}void ShowMsg(string str){    txtLog.AppendText(str + "\r\n");}//服务端个客户端发送消息 点击事件string str = txtMsg.Text;byte[] buffer = System.Text.Encoding.UTF8.GetBytes(str);List&lt;byte&gt; list = new List&lt;byte&gt;();list.Add(0);list.AddRange(buffer);//将泛型集合转化为数组byte[] newBuffer = list.ToArray();//获得在下拉框中选择的IP地址string ip = cboUsers.SelectedItem.ToString();dicSocket[ip].Send(newBuffer);//socketSend.Send(buffer);//选择要发送的文件  按钮点击事件OpenFileDialog ofd =new OpenFileDialog();ofd.InitialDirectory = @"初始目录全路径";ofd.Title = "请选择要发送的文件";ofd.Filter = "所有文件|*.*";ofd.ShowDialog();txtPath.Text = ofd.FileName;//按钮点击事件string path = txtPath.Text;using(FileStream fsRead = new FileStream(path,FileMode.Open,FileAccess.Read)){    byte[] buffer = new byte[1024*1024*5];    int r = fsRead.Read(buffer,0,buffer.Length);    List&lt;byte&gt;list = new List&lt;byte&gt;();    list.Add(1);    list.AddRange(buffer);    byte[] newBuffer = list.ToArray();    dicSocket[cboUsers.SelectedItem.ToString()].Send(newBuffer,0,r+1,SocketFlags.None);}//震动 按钮点击事件byte[] buffer = new byte[1];buffer[0] = 2;dicSocket[cboUsers.SelectedItem.ToString()].Send(buffer);//解决线程间操作不到问题//在程序加载时取消跨线程的检查Control.CheckForIllegalCrossThreadCalls = false;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开Telnet Client:<br>控制面板-&gt;查看方式(类别)-&gt;程序-&gt;程序和功能-&gt;启用或关闭Windows功能(在左边)-&gt;Telnet Client(勾上),点击确认</p><p>客户端:</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">Socket socketSend;try{    //创建负责通讯的Socket    socketSend = new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);    IPAddress ip = IPAddress.Parse(txtServer.Text);    IPEndPoint point = new IPEndPoint(ip,Convert.ToInt32(txtPort.Text));    //获得要连接的远程服务器应用程序的IP地址和端口号    socketSend.Connect(point);    ShowMsg("连接成功");    //开启新线程不停接收服务端发来的消息    Thread th = new Thread(Recive);    th.IsBackground = true;    th.Start();    }catch    {}//不停接收服务端发来的消息void Recive(){    try{        while(true)        {            byte[] buffer = new byte[1024*1024*3];            int r = socketSend.Receive(buffer);            //实际接收到的有效字节数组            if(r==0)            {                break;            }            if(buffer[0]==0)            {                //发送文字消息                string s = Encoding.UTF8.GetString(buffer,1,r-1);                ShowMsg(socketSend.RemoteEndPoint+":"+s);            }else if(buffer[0]==1)            {                SaveFileDialog sfd = new SaveFileDialog();                sfd.InitialDirectory = @"保存默认地址";                sfd.Title = "请选择要保存的文件";                sfd.Filter = "所有文件|*.*";                sfd.ShowDialog(this);                string path = sfd.FileName;                using(FileStream fsWrite = new FileStream(path,FileMode.OpenOrCreate,FileAccess.Write))                {                    fsWrite.Write(buffer,1,r-1);                }                MessageBox.Show("保存成功");            }else if(buffer[0]==2)            {                ZD();            }        }    }catch    {}}//震动void ZD(){    for(int i = 0;i &lt; 500;i++)    {        this.Location = new Point(200,200);        this.Location = new Point(280,280);    }}//发送消息事件中string str = txtMsg.Text.Trim();byte[] buffer = System.Text.Encoding.UTF8.GetBytes(str);socketSend.Send();void ShowMsg(string str){    txtLog.AppendText(str + "\r\n");}//解决线程间操作不到问题//在程序加载时取消跨线程的检查Control.CheckForIllegalCrossThreadCalls = false;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启多个项目:右键项目-&gt;调试-&gt;启动新实例</p><p>设计”协议”:</p><ul><li>0 文本</li><li>1 文件</li><li>2 震动</li></ul><h2 id="GDI绘图"><a href="#GDI绘图" class="headerlink" title="GDI绘图"></a>GDI绘图</h2><p>保留2位小数: <code>avg = Convert.ToDouble(avg.ToString("0.00"));</code></p><p>窗体事件:Print<br>窗体重新绘制时都会画一遍</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">//创建GDI对象Graphics g = this.CreateGraphics();//创建画笔对象Pen pen = new Pen(Brushes.Red);//扇形Size sizePie = new System.Drawing.Size(80, 80);Rectangle recPie = new Rectangle(new Point(150, 150), sizePie);g.DrawPie(pen, recPie, 60, 60);//矩形Size size = new System.Drawing.Size(80, 80);Rectangle rec = new Rectangle(new Point(50,50),size);g.DrawRectangle(pen, rec);//创建俩个点Point p1 = new Point(30, 50);Point p2 = new Point(25, 250);g.DrawLine(pen, p1, p2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-验证码"><a href="#案例-验证码" class="headerlink" title="案例: 验证码"></a>案例: 验证码</h5><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private void pictureBox1_Click(object sender, EventArgs e){Random r = new Random();string str = null;for (int i = 0; i &lt; 5; i++){    int rNumber = r.Next(0, 10);    str += rNumber;}//MessageBox.Show(str);//创建GDI对象Bitmap bmp = new Bitmap(110,30);Graphics g = Graphics.FromImage(bmp);for (int i = 0; i &lt; 5; i++){    Point p = new Point(i*20,0);    string[] fonts = { "微软雅黑", "宋体", "隶书", "黑体", "仿宋" };    Color[] colors = { Color.Yellow, Color.Blue, Color.Green, Color.Black, Color.Red };    g.DrawString(str[i].ToString(),new Font(fonts[r.Next(0,5)],20,FontStyle.Bold),new SolidBrush(colors[r.Next(0,5)]),p);}for (int i = 0; i &lt; 20; i++){    Point p1 = new Point(r.Next(0,bmp.Width),r.Next(0,bmp.Height));    Point p2 = new Point(r.Next(0,bmp.Width),r.Next(0,bmp.Height));    g.DrawLine(new Pen(Brushes.Green),p1,p2);}for (int i = 0; i &lt; 500; i++){    Point p = new Point(r.Next(0, bmp.Width), r.Next(0, bmp.Height));    bmp.SetPixel(p.X,p.Y,Color.Black);}//将图片镶嵌到PictureBox中pictureBox1.Image = bmp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/liaojie1314/VerificationCodeC-">代码</a></p><h5 id="案例-简单播放器"><a href="#案例-简单播放器" class="headerlink" title="案例: 简单播放器"></a>案例: 简单播放器</h5><p>添加<code>Windows Media Player</code>：<br>工具箱里找到组件右键-&gt;选择项-&gt;COM组件-&gt;找到Windows Media Player勾上并确认</p><p><strong>windows media player控件的常用属性和方法</strong></p><p>以下 music player 均为windows media player控件的名字。<br>1.属性<br>1）musicPlayer.settings.autoStart：打开播放器时是否自动播放 。true：自动播放，false：不自动播放，默认自动播放。<br>2）musicPlayer.URL：要播放歌曲的路径。<br>3）musicPlayer.settings.mute：是否静音。true：静音，false：不静音。<br>4）musicPlayer.settings.volume：音量值大小，范围是1 ~ 100。<br>5）musicPlayer.Ctlcontrols.currentPositionString：当前播放时间。返回值是字符串类型，例如：02：23。<br>6）musicPlayer.Ctlcontrols.currentPosition：也是返回当前播放的时间。返回值是 double 类型，例如：133.8。<br>7）musicPlayer.currentMedia.name：返回当前播放歌曲的名字。<br>8）musicPlayer.playState：播放器当前的状态。</p><ul><li>有一个枚举 WMPLib.WMPPlayState 说明了它的取值：<br>0——wmppsUndefined：未知状态<br>1——wmppsStopped：播放停止<br>2——wmppsPaused：播放暂停<br>3——wmppsPlaying：正在播放<br>4——wmppsScanForward：向前搜索<br>5——wmppsScanReverse：向后搜索<br>6——wmppsBuffering ：正在缓冲<br>7——wmppsWaiting：正在等待流开始<br>8——wmppsMediaEnded：播放流已结束<br>9——wmppsTransitioning ：准备新的媒体文件<br>10——wmppsReady：播放准备就绪<br>11——wmppsReconnecting：尝试重新连接流媒体数据<br>12——wmppsLast：上一次状态,状态没有改变</li></ul><p>2.方法<br>1）musicPlayer.Ctlcontrols.play()：播放<br>2）musicPlayer.Ctlcontrols.pause()：暂停<br>3）musicPlayer.Ctlcontrols.stop()：停止</p><p>属性:<br>url:音乐地址</p><p>1.在程序加载时取消播放器自动播放功能<br>2.播放或者暂停按钮<br>3.上一曲、下一曲<br>4.多选删除</p><ul><li>给ListBox添加一个右键菜单</li></ul><p>5.静音和放音<br>6.选择列表中的音乐文件,单击按钮直接播放<br>7.自动播放下一曲</p><p><a href="">代码</a></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>需要安装组件<code>ASP.net 和 Web开发</code>中的<code>其他项目模板(早期版本)</code></p><ul><li>位置:展开最右边的ASP.NET和Web开发下拉菜单</li></ul><p>新建网站项目:<br>选择<code>ASP.NET 空网站</code>这个选项即可<br>添加html页:右键项目-&gt;添加-&gt;添加新项-&gt;HTML页</p><p>HTML:超文本标记语言</p><p>标签:</p><ul><li>p: 段落标签</li><li>&amp;nbsp: 空格</li><li>h#: 标题标签</li><li><code>&lt;!-- 要注释的内容 --&gt;</code>: 注释符</li><li><code>&lt;img/&gt;</code>: 图片标签<ul><li>src: 要显示图片的路径</li><li>height: 图片高度</li><li>width: 图片宽度</li><li>alt: 图片显示失败所显示的文本</li><li>title: 光标移动到图片上所显示的文本</li></ul></li><li><code>&lt;hr/&gt;</code>: 分割线</li><li><code>&lt;font&gt;&lt;/font&gt;</code>: 字体标签 <ul><li>size=1 ~ 7 最大:7</li><li>color: 颜色</li><li>face: 字体系列</li></ul></li><li>a标签:<ul><li>href: 要连接的地址</li><li>target: 打开新网页的方式(<code>_blank</code>:打开一个新的页面;<code>_self</code>:当前页面跳转)<br>作用:</li></ul></li></ul><p>1.实现页面内的跳转<br>2.实现页面间的跳转<br>3.发送邮件</p><ul><li>div+span</li><li>frame: 框架标签</li></ul><p>更多请查看HTML</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS:控制网页内容的效果</p><p>更多请查看CSS</p><h2 id="委托、XML、播放器项目"><a href="#委托、XML、播放器项目" class="headerlink" title="委托、XML、播放器项目"></a>委托、XML、播放器项目</h2><p>单例模式<br>1.将构造函数私有化<br>2.提供一个静态方法,返回一个对象<br>3.创建一个单例</p><h3 id="XML-可扩展标记语言"><a href="#XML-可扩展标记语言" class="headerlink" title="XML:可扩展标记语言"></a>XML:可扩展标记语言</h3><ul><li>存储数据<br>注意:XML严格区分大小写且也是成对出现<br>XML文档有且只有一个根节点</li></ul><p>节点<br>元素</p><p>通过代码创建XML文档<br>1.引用命名空间</p><ul><li><code>using System.Xml;</code></li></ul><p>2.创建XML文档对象</p><ul><li><code>XmlDocument doc = new XmlDocument();</code><br>追加文档<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">XmlElement root;if(File.Exists("xxx.xml")){    //文件存在 加载XML    doc.Load("xxx.xml");     //获取文件根节点    root = doc.DocumentElement;}else{    //文件不存在    //创建第一行描述信息,并添加到文档中    XmlDeclaration dec = doc.CreateXmlDeclaration("1.0","utf-8",null);    doc.AppendChild(dec);    //创建根节点    root = doc.CreateElement("xxx");    doc.AppendChild(root);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>读取XML文档<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">doc.Load("xxx.xml");//获取文件根节点XmlElement root = doc.DocumentElement;//获得子节点 返回结点集合XmlNodeList xnl = root.ChildNodes;foreach(XmlNode item in xnl){    Console.WriteLine(item.InnerText);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>读取带属性XML文档<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">doc.Load("xxx.xml");XmlNodeList xnl = doc.SelectNodes("/xxx/xxx");//找到节点foreach(XmlNode node in xnl){    Console.WriteLine(node.Attributes["属性名"].Value);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>删除节点<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">doc.Load("xxx.xml");XmlNode xn = doc.SelectSingleNode("/xxx/xxx");xn.RemoveAll();doc.Save("xxx.xml");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>3.创建第一行描述信息,并添加到文档中</p><ul><li><code>XmlDeclaration dec = doc.CreateXmlDeclaration("1.0","utf-8",null);</code></li><li><code>doc.AppendChild(dec);</code></li></ul><p>4.创建根节点</p><ul><li><code>XmlElement root = doc.CreateElement("xxx");</code></li><li><code>doc.AppendChild(root);</code></li></ul><p>5.创建子节点</p><ul><li><code>XmlElement child = doc.CreateElement("xxxxx");</code></li></ul><p>6.给根节点添加子节点<br><code>child.InnerText = "";</code> 添加文本<br><code>child.InnerXml = "";</code> 添加标签<br><code>child.setAttribute("属性名","属性值");</code> 添加属性</p><ul><li><code>root.AppendChild(child);</code></li><li><code>doc.Save("xxx.xml");</code></li></ul><p>保存的文件放在bin目录下</p><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>1.为什么使用委托</p><p>将一个方法作为参数传递给另一个方法</p><p>2.委托概念</p><p>声明一个委托类型(命名空间下)<br><code>public delegate void func(参数类型,参数名);</code><br>委托所指向的函数必须跟委托具有相同的签名(参数和返回值)</p><p>3.匿名函数</p><p>没有名字的函数<br>函数只调用一次时建议使用匿名函数<br>匿名函数必须跟委托具有相同的签名(参数和返回值)</p><p>4.练习:使用委托求数组最大值<br>5.练习:使用委托求任意数组最大值</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 委托求数组最大值{    class Program    {        public delegate int DelCompare(object o1,object o2);        static void Main(string[] args)        {            object[] o1 = { 1, 2, 3, 4, 5 };            object result1 = GetMax(o1, Compare1);            object[] o2 = { "vhgfh","yuewueg","fdg" };            //object result2 = GetMax(o2, Compare2);            //object result2 = GetMax(o2, delegate(object o1,object o2) {            //    string s1 = (string)o1;            //    string s2 = (string)o2;            //    return s1.Length - s2.Length;            //});            object result2 = GetMax(o2, (object o1,object o2) =&gt;{                string s1 = (string)o1;                string s2 = (string)o2;                return s1.Length - s2.Length;            });            Console.WriteLine(result2);            Console.ReadKey();        }        public static object GetMax(object []nums,DelCompare del)        {            object max = nums[0];            for (int i = 0; i &lt; nums.Length; i++)            {                //要传一个比较方法                if(del(max,nums[i])&lt;0)                {                    max = nums[i];                }            }            return max;        }        public static int Compare1(object o1,object o2)        {            int n1 = (int)o1;            int n2 = (int)o2;            return n1 - n2;        }        public static int Compare2(object o1, object o2)        {            string s1 = (string)o1;            string s2 = (string)o2;            return s1.Length - s2.Length;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.泛型委托</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace 泛型委托求数组最大值{    class Program    {        public delegate int DelCompare&lt;T&gt;(T o1,T o2);        static void Main(string[] args)        {            int[] nums= { 1, 2, 3, 4, 5 };            int result1 = GetMax&lt;int&gt;(nums, Compare1);            string[] str = { "vhgfh","yuewueg","fdg" };            string result2 = GetMax&lt;string&gt;(str, (string s1, string s2) =&gt;             {                 return s1.Length - s2.Length;             });            Console.WriteLine(result2);            Console.ReadKey();        }        public static T GetMax&lt;T&gt;(T []nums,DelCompare&lt;T&gt; del)        {            T max = nums[0];            for (int i = 0; i &lt; nums.Length; i++)            {                //要传一个比较方法                if(del(max,nums[i])&lt;0)                {                    max = nums[i];                }            }            return max;        }        public static int Compare1(int n1,int n2)        {            return n1 - n2;        }        public static int Compare2(string s1, string s2)        {            return s1.Length - s2.Length;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.多播委托</p><p>委托可以指向多个函数,但要满足指向的函数必须跟委托具有相同的签名(参数和返回值)<br>可以使用<code>=</code> <code>+=</code> 操作</p><p>8.lambda表达式</p><p>(参数)=&gt;{方法体}   =&gt; goes to<br>eg:<br><code>list.RemoveAll(n =&gt; n &gt; 4);</code> //移除大于4的元素</p><p>9.使用委托实现窗体传值</p><p><a href="https://github.com/liaojie1314/DelegateValueTransfer">代码</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/liaojie.github.io/2022/01/15/c-0/"/>
      <url>/liaojie.github.io/2022/01/15/c-0/</url>
      
        <content type="html"><![CDATA[<p>C++编写软件(推荐):Visual Studio</p><p>Visual Studio安装:</p><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-创建新项目"><a href="#1-1-创建新项目" class="headerlink" title="1.1 创建新项目"></a>1.1 创建新项目</h3><p>选择Visual C++下的空项目,然后给项目取一个名;右键源文件,添加-&gt;新建项,在弹出的页面中选择C++文件(.cpp),给它取一个名称.</p><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p>作用:方便程序员阅读</p><p>俩种格式:<br>1.单行注释: <code>//描述信息</code></p><ul><li>通常放在一行代码的上方,或者一条语句的末尾,对该行代码说明</li></ul><p>2.多行注释: <code>/* 描述信息 */</code></p><ul><li>通常放在一段代码的上方,对该段代码做整体说明</li></ul><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p>作用: 给一段指定的内存空间起名,方便操作这段内存</p><p>语法: <code>数据类型 变量名 = 初始值</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int a = 10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4 常量"></a>1.4 常量</h3><p>作用: 用于记录程序中不可更改的数据</p><p>C++定义常量的俩种方式:<br> 1.#define宏常量: <code>#define 常量名 常量值</code></p><ul><li>通常在文件上方定义,表示一个常量</li></ul><p> 2.const修饰的变量: <code>const 数据类型 常量名 = 常量值</code></p><ul><li>通常在变量定义前加关键字const,修饰该变量为常量,不可修改</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#define month 12const int month = 12;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p>作用: 定义变量或者常量时,不能使用关键字</p><p>C++关键字如下:</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><p>标识符争取做到见名知意的效果</p><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>-2^15~2^15-1</td></tr><tr><td>int(整型)</td><td>4字节</td><td>-2^31~2^31-1</td></tr><tr><td>long(长整型)</td><td>Window为4字节,Linux为4字节(32位),8字节(64位)</td><td>-2^31~2^31-1</td></tr><tr><td>long long(长长整型)</td><td>8字节</td><td>-2^63~2^63-1</td></tr></tbody></table><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p>作用: 利用sizeof关键字可以统计数据类型所占内存大小</p><p>语法: <code>sizeof(数据类型/变量)</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">cout &lt;&lt; "short占用内存空间为:" &lt;&lt; sizeof(short) &lt;&lt; endl;cout &lt;&lt; "int占用内存空间为:" &lt;&lt; sizeof(int) &lt;&lt; endl;cout &lt;&lt; "long占用内存空间为:" &lt;&lt; sizeof(long) &lt;&lt; endl;cout &lt;&lt; "long long占用内存空间为:" &lt;&lt; sizeof(long long) &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>大小比较:</p><blockquote><p>short &lt; int &lt;= long &lt;= long long</p></blockquote><h3 id="2-3-实型-浮点型"><a href="#2-3-实型-浮点型" class="headerlink" title="2.3 实型(浮点型)"></a>2.3 实型(浮点型)</h3><p>作用: 用于表示小数</p><p>浮点型变量分为俩种:<br> 1.单精度float<br> 2.双精度double</p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>有效数字范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15~16位有效数字</td></tr></tbody></table><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">float f1 = 3.14f;double d1 = 3.14;//科学计数法float f2 = 3e2;//3*10^2float f3 = 3e-2;//3*0.1^2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>默认情况下输出一个小数会显示出6位有效数字</p></blockquote><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p>作用: 字符型变量用于显示单个字符</p><p>语法: <code>char ch = 'a';</code></p><blockquote><p>注意1: 在显示字符型变量时,用单引号将字符括起来,不要用双引号</p></blockquote><blockquote><p>注意2: 单引号内只能有一个字符,不可能是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用1个字节</li><li>字符型变量并不是把字符本身放到内存中存储,而是将对应的ASCII编码(int(ch))放入到存储单元</li></ul><p>a - 97<br>A - 65</p><h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p>作用: 用于表示一些不能显示出来的ASCII字符<br>常用转义字符有: <code>\n \\ \t</code></p><table><thead><tr><th>转义字符</th><th>含义</th><th>ASCII码值(十进制)</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS),将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF),将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF),将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR),将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT) (跳到下一个TAB位置)</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>\</td><td>代表一个反斜线字符”"</td><td>092</td></tr><tr><td>'</td><td>代表一个单引号(撇号)字符</td><td>039</td></tr><tr><td>"</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>\？</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符,d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符,h范围0<del>9,A</del>F</td><td>3位16进制</td></tr></tbody></table><h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p>作用: 用于表示一串字符</p><p>俩种风格:<br> 1.C风格字符串: <code>char 变量名[] = "字符串值";</code><br>  </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">   //C风格字符串 等号后面要用双引号char str1[] = "hello world";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br> 2.C++风格字符串: <code>string 变量名 = "字符串值";</code><br> <pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">   //C++风格字符串 需包含头文件：#include&lt;string&gt;string str2 = "hello world";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p></p><h3 id="2-7-布尔类型bool"><a href="#2-7-布尔类型bool" class="headerlink" title="2.7 布尔类型bool"></a>2.7 布尔类型bool</h3><p>作用: 布尔数据类型代表真或假的值</p><p>bool类型只有俩个值:</p><ul><li>true — 真 (本质是1)</li><li>false — 假 (本质是0)</li></ul><p>bool类型占1个字节大小</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool flag = true;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p>作用: 用于从键盘获取数据</p><p>关键字: cin</p><p>语法: <code>cin &gt;&gt; 变量</code></p><blockquote><p>bool类型只要是非0的值都代表真</p></blockquote><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p>作用: 用于执行代码的运算</p><table><thead><tr><th>运算符类型</th><th>作用</th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋值给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较,并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p>作用: 用于处理四则运算</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>1+2</td><td>3</td></tr><tr><td>-</td><td>减</td><td>2-1</td><td>1</td></tr><tr><td>*</td><td>乘</td><td>1*2</td><td>2</td></tr><tr><td>/</td><td>除</td><td>2/1</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10%3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a=2;b=++a;</td><td>a=3;b=3;</td></tr><tr><td>++</td><td>后置递增</td><td>a=2;b=a++;</td><td>a=3;b=2;</td></tr><tr><td>–</td><td>前置递减</td><td>a=2;b=–a;</td><td>a=1;b=1;</td></tr><tr><td>–</td><td>后置递减</td><td>a=2;b=a–;</td><td>a=1;b=2;</td></tr></tbody></table><blockquote><p>俩个整数相除结果依然是整数,将小数部分去除</p></blockquote><blockquote><p>前置递增 先让变量+1,然后进行表达式计算;后置递增 先进行表达式计算,然后让变量+1(递减同理)</p></blockquote><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p>作用: 用于将表达式的值赋值给变量</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=2;b=3;</td><td>a=2;b=3;</td></tr><tr><td>+=</td><td>加等于</td><td>a=0;a+=2;</td><td>a=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=5;a-=3;</td><td>a=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2;a*=2;</td><td>a=4;</td></tr><tr><td>/=</td><td>除等于</td><td>a=4;a/=2;</td><td>a=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3;a%=2;</td><td>a=1;</td></tr></tbody></table><h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p>作用: 用于表达式的比较,并返回一个真值或假值</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4==3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4!=3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4&lt;3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4&gt;3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4&lt;=3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4&gt;=3</td><td>1</td></tr></tbody></table><h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p>作用: 用于根据表达式的值返回真值或假值</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假,则!a为真;如果a为真,则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a&amp;&amp;b</td><td>如果a和b都为真,则结果为真,否则为假。</td></tr><tr><td>||</td><td>或</td><td>a||b</td><td>如果a和b有一个为真,则结果为真,二者都为假时,结果为假。</td></tr></tbody></table><p>在C++中,除0外都为真</p><h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基础的三种程序运算结构:顺序结构、选择结构、循环结构</p><ul><li>顺序结构:程序按顺序执行,不发生跳转</li><li>选择结构:依据条件是否满足,有选择的执行相应功能</li><li>循环结构:依据条件是否满足,循环多次执行某段代码</li></ul><h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p>作用: 执行满足条件的语句</p><p>if语句的三种形式</p><ul><li>单行格式if语句</li><li>多行格式if语句</li><li>多条件的if语句</li></ul><p>1.单行格式if语句: <code>if(条件){条件满足执行的语句}</code></p><p>2.多行格式if语句: <code>if(条件){条件满足执行的语句}else{条件不满足执行的语句}</code></p><p>3.多条件的if语句: <code>if(条件1){条件1满足执行的语句}else if(条件2){条件2满足执行的语句}... else{条件都不满足执行的语句}</code></p><p>嵌套if语句: 在if语句中,可以嵌套使用if语句,达到更精确的条件判断</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  int score = 0;  cout &lt;&lt; "请输入你的分数：" &lt;&lt; endl;  cin &gt;&gt; score;  cout &lt;&lt; "你的分数为：" &lt;&lt; score &lt;&lt; endl;  if (score &gt; 600)// 注意:if 条件后面不能加分号  {    cout &lt;&lt; "恭喜你考上一本" &lt;&lt; endl;    if (score &gt; 700)     {      cout &lt;&lt; "恭喜你考上北大" &lt;&lt; endl;    }    else if (score&gt;650)    {      cout &lt;&lt; "恭喜你考上清华" &lt;&lt; endl;    }    else {      cout &lt;&lt; "恭喜你考上重大" &lt;&lt; endl;    }  }  else if(score&gt;500)  {    cout &lt;&lt; "恭喜你考上二本" &lt;&lt; endl;  }  else  if (score&gt;400)  {    cout &lt;&lt; "恭喜你考上三本" &lt;&lt; endl;  }else  {    cout &lt;&lt; "未考上本科大学" &lt;&lt; endl;  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p>作用: 通过三目运算符实现简单的判断</p><p>语法: <code>表达式1?表达式2:表达式3</code></p><p>解释: </p><ul><li>如果表达式1的值为真,执行表达式2,并返回表达式2的结果;</li><li>如果表达式1的值为假,执行表达式3,并返回表达式3的结果。</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  //三目运算符  int a = 10;  int b = 20;  int c = 0;  c = (a &gt; b ? a : b);  //C++中三目运算符返回的是变量可以继续赋值  (a &lt; b ? a : b)=100; ==&gt;a=100;b=20  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p>作用: 执行多条件分支语句</p><p>语法:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">switch(表达式){  case 结果1: 执行语句1;break;  case 结果2: 执行语句2;break;  ...  default: 执行语句;break;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  int score = 0;  cout &lt;&lt; "请打分" &lt;&lt; endl;  cin &gt;&gt; score;  cout &lt;&lt; "你打的分为" &lt;&lt; score &lt;&lt; endl;  switch (score)    //缺点：只能是整数或者字符    //优点：结构清晰，执行效率高  {  case 10:    cout &lt;&lt; "经典" &lt;&lt; endl;    break;  case 9:    cout &lt;&lt; "经典" &lt;&lt; endl;    break;  case 8:    cout &lt;&lt; "很好" &lt;&lt; endl;    break;  case 7:    cout &lt;&lt; "很好" &lt;&lt; endl;    break;  case 6:    cout &lt;&lt; "一般" &lt;&lt; endl;    break;  case 5:    cout &lt;&lt; "一般" &lt;&lt; endl;    break;  default:    cout &lt;&lt; "不好" &lt;&lt; endl;    break;  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>case里如果没有break,那么程序会一直向下执行</p><blockquote><p>if与switch区别?<br>switch 缺点：判断时只能是整数或者字符,不可以是一个区间<br>switch 优点：结构清晰，执行效率高</p></blockquote><h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p>作用: 满足循环条件,执行循环语句</p><p>语法: <code>while(循环条件){循环语句}</code></p><p>解释: 只要循环条件的结果为真,就执行循环语句</p><p>写循环时应避免死循环!!!</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main1(){  int num = 0;  //打印0~9  while (num &lt; 10)  {    cout &lt;&lt; num &lt;&lt; endl;    num++;  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p>作用: 满足循环条件,执行循环语句</p><p>语法: <code>do{循环语句}while(循环条件);</code></p><p>注意: 与while的区别在于do…while会先执行一次循环语句,在判断循环条件</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  int num = 0;  //打印0~9  do  {    cout &lt;&lt; num &lt;&lt; endl;    num++;  } while (num&lt;10);  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>生成随机数<br>添加随机数种子 利用系统当前时间生成随机数,防止每次随机数相同<br>srand((unsigned int)time(NULL));<br>int num = rand() % 100 + 1;<br>生成 0 + 1 ~ 99 + 1随机数</p></blockquote><h5 id="案例-水仙花数"><a href="#案例-水仙花数" class="headerlink" title="案例: 水仙花数"></a>案例: 水仙花数</h5><p>案例描述: 水仙花数是指一个3位数,它的每个位上的数字的3次幂之和等于它本身<br>例如: 1^3+5^3+3^3=153</p><p>代码: </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  //1.先打印所有三位数  int num = 100;  do  {    //2.从所有三位数中找到水仙花数    int a = num % 10; // 个位    int b = num / 10 % 10;//十位    int c = num / 100;//百位    if (a*a*a+b*b*b+c*c*c == num)//如果是水仙花数才打印    {      cout &lt;&lt; num &lt;&lt; endl;    }    num++;  } while (num&lt;1000);    system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p>作用: 满足循环条件,执行循环语句</p><p>语法: <code>for(起始表达式;条件表达式;末尾循环体){循环语句;}</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  //打印0~9  for (int i = 0;i &lt; 10;i++) {    cout &lt;&lt; i &lt;&lt; endl;  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p>作用: 在循环体中再嵌套一层循环,解决一些设计问题</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  /* 打印10*10星图  for (int i = 0;i &lt; 10;i++)   {    for (int j = 0;j &lt; 10;j++)    {      cout &lt;&lt; "*";    }    cout &lt;&lt; endl;  }*/  //九九乘法表  for (int i = 1;i &lt;= 9;i++)  {    for (int j = 1;j &lt;= i;j++)    {      cout &lt;&lt; j &lt;&lt; "x" &lt;&lt; i &lt;&lt; "=" &lt;&lt; (i * j)&lt;&lt;"\t";    }    cout &lt;&lt; endl;  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p>作用: 用于跳出选择结构或循环结构</p><p>break 使用场景：<br>1.switch语句中 case:break;<br>2.循环语句中 跳出当前循环<br>3.嵌套循环语句中 跳出内部循环</p><h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p>作用: 在循环语句中,跳出本次循环中余下尚未执行的语句,继续执行下一次循环</p><p>continue:筛选条件符合的内容</p><h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p>作用: 可以无条件跳转语句</p><p>语法: <code>goto 标记;</code><br>翻译: 如果标记的名称存在,在执行到goto语句时,会跳转到标记的位置</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  //goto:  //语法：goto 标记;  cout &lt;&lt; "1 ..." &lt;&lt; endl;  cout &lt;&lt; "2 ..." &lt;&lt; endl;  goto FLAG;  cout &lt;&lt; "3 ..." &lt;&lt; endl;  cout &lt;&lt; "4 ..." &lt;&lt; endl;  FLAG:  cout &lt;&lt; "5 ..." &lt;&lt; endl;  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/goto.png"></p><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组就是一个集合里面存放了相同类型的数据结构</p><p>特点1:数组中的每个数据元素都是相同的数据类型<br>特点2:数组是由连续的内存位置组成的</p><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>1.<code>数据类型 数组名[数组长度];</code><br>2.<code>数据类型 数组名[数组长度] = {值1,值2...};</code><br>3.<code>数据类型 数组名[] = {值1,值2...};</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  //一维定义：  //1.  int arr1[5];  arr1[0] = 10;  arr1[1] = 20;  arr1[2] = 30;  arr1[3] =40;  arr1[4] = 50;  //2.  int arr2[5]={10,20,30,40,50};  //3.  int arr3[]={10,20,30,40,50};  //定义数组的时候,必须有初始长度  //数组名(常量，不可修改)：  //1.统计整个数组在内存中的长度 sizeof(arr)  //2.获取数组在内存中的首地址  cout&lt;&lt;(int)arr&lt;&lt;endl;  第一个元素地址: (int)&amp;arr[0]  //3.元素个数 sizeof(arr)/sizeof(arr[0])  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="数组元素逆置"><a href="#数组元素逆置" class="headerlink" title="数组元素逆置"></a>数组元素逆置</h5><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  //元素逆置：(start&lt;end执行互换)  int arr[] = { 1,2,3,5,7 };  cout &lt;&lt; "逆序前" &lt;&lt; endl;  for (int i = 0; i &lt; sizeof(arr)/sizeof(arr[0]); i++)  {    cout &lt;&lt; arr[i] &lt;&lt; endl;  }  int start = 0;  int end = sizeof(arr) / sizeof(arr[0]) - 1;//末尾元素下标  while (start&lt;end)  {    //起始下标与结束下标的元素互换    int temp = arr[start];    arr[start] = arr[end];    arr[end] = temp;    //起始位置++;结束位置--    start++;    end--;  }  cout &lt;&lt; "逆序后" &lt;&lt; endl;  for (int j = 0; j &lt; sizeof(arr) / sizeof(arr[0]); j++)  {    cout &lt;&lt; arr[j] &lt;&lt; endl;  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%85%83%E7%B4%A0%E9%80%86%E7%BD%AE.png"></p><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  //冒泡排序  int arr[9] = { 4,2,8,0,5,7,1,3,9 };  cout &lt;&lt; "排序前" &lt;&lt; endl;  for (int i = 0; i &lt; sizeof(arr) / sizeof(arr[0]); i++)  {    cout &lt;&lt; arr[i] &lt;&lt; endl;  }  //排序总轮数=元素个数-1  //每轮对比次数=元素个数-排序轮数-1  for (int i = 0; i &lt; sizeof(arr) / sizeof(arr[0]) - 1; i++)  {    for (int j = 0; j &lt; sizeof(arr) / sizeof(arr[0])-i - 1; j++)    {      if (arr[j] &gt; arr[j + 1])      {        int temp = arr[j];        arr[j] = arr[j + 1];        arr[j + 1] = temp;      }    }  }  cout &lt;&lt; "排序后" &lt;&lt; endl;  for (int j = 0; j &lt; sizeof(arr) / sizeof(arr[0]); j++)  {    cout &lt;&lt; arr[j] &lt;&lt; endl;  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.png"></p><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>1.<code>数据类型 数组名[行数][列数];</code><br>2.<code>数据类型 数组名[行数][列数] = {{数据1,数据2},{数据3,数据4}};</code><br>3.<code>数据类型 数组名[行数][列数] = {数据1,数据2,数据3,数据4};</code><br>3.<code>数据类型 数组名[][列数] = {数据1,数据2,数据3,数据4};;</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  //二维定义:  int arr[2][3] = {    {1,2,3},    {4,5,6}  };  //数组名(常量，不可修改)：  //1.占内存空间大小 sizeof(arr) 第一行占用内存 sizeof(arr[0]) 第一个元素 sizeof(arr[0][0])  //行数：sizeof(arr)/sizeof(arr[0]) 列数：sizeof(arr[0])/sizeof(arr[0][0])  //2.获取数组在内存中的首地址  cout&lt;&lt;arr&lt;&lt;endl; (arr arr[0] &amp;arr[0][0])  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><p>作用: 将一段经常用的代码封装起来,减少重复代码</p><h3 id="6-1-函数的定义"><a href="#6-1-函数的定义" class="headerlink" title="6.1 函数的定义"></a>6.1 函数的定义</h3><p>函数的定义一般主要有5个步骤</p><p>1、返回值类型<br>2、函数名<br>3、参数列表(形参)<br>4、函数体语句<br>5、return表达式</p><p>语法:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">返回值类型 函数名 (参数列表){  函数体语句  return 表达式}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-函数的调用"><a href="#6-2-函数的调用" class="headerlink" title="6.2 函数的调用"></a>6.2 函数的调用</h3><p>功能: 使用定义好的函数</p><p>语法: <code>函数名 (参数)</code></p><p>当调用函数时候,实参的值会传递给形参</p><h3 id="6-3-值传递"><a href="#6-3-值传递" class="headerlink" title="6.3 值传递"></a>6.3 值传递</h3><ul><li>所谓值传递,就是函数调用时实参将数值传入给形参</li><li>值传递时,如果形参发生,并不会影响实参</li></ul><h3 id="6-4-函数的常见样式"><a href="#6-4-函数的常见样式" class="headerlink" title="6.4 函数的常见样式"></a>6.4 函数的常见样式</h3><p>1.无参无返<br>2.有参无返<br>3.无参有返<br>4.有参有返</p><h3 id="6-5-函数的声明"><a href="#6-5-函数的声明" class="headerlink" title="6.5 函数的声明"></a>6.5 函数的声明</h3><p>作用: 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义</p><ul><li>函数的声明可以多次,但是函数的定义只能有一次</li></ul><h3 id="6-6-函数的分文件编写"><a href="#6-6-函数的分文件编写" class="headerlink" title="6.6 函数的分文件编写"></a>6.6 函数的分文件编写</h3><p>作用: 让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤:<br>1.创建.h头文件<br>头文件右键-&gt;添加-&gt;新建项,在弹出页面中选择头文件(eg:max.h)<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%A4%B4%E6%96%87%E4%BB%B6.png"><br>2.创建.cpp源文件<br>源文件右键-&gt;添加-&gt;新建项,在弹出页面中选择源文件(eg:max.cpp)<br>3.头文件写函数声明<br>4.源文件写函数定义</p><p>代码:</p><p>max.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数声明#include&lt;iostream&gt;using namespace std;int max(int a, int b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>max.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数定义int max(int a, int b){  return a &gt; b ? a : b;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include"max.h"int main(){  int a = 10;  int b = 20;  int c = max(a, b);  cout &lt;&lt; c &lt;&lt; endl;  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><p>作用: 可以通过指针间接访问内存</p><ul><li>内存编号是从0开始记录的,一般用十六进制数字表示</li><li>可以利用指针变量保存地址</li></ul><h3 id="7-1-指针变量的定义和使用"><a href="#7-1-指针变量的定义和使用" class="headerlink" title="7.1 指针变量的定义和使用"></a>7.1 指针变量的定义和使用</h3><p>语法: <code>数据类型 * 变量名;</code></p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){   int a = 10;  /*int* p;  p = &amp;a;*/  //32位系统指针占4个字节  //64位系统指针占8个字节  int* p = &amp;a;  cout &lt;&lt; "a地址为" &lt;&lt; &amp;a &lt;&lt; endl;  cout &lt;&lt; "p=" &lt;&lt; p &lt;&lt; endl;  /*通过解引用使用指针  *p = 100;  cout &lt;&lt; "*p=" &lt;&lt; *p &lt;&lt; endl;  cout &lt;&lt; "a=" &lt;&lt; a &lt;&lt; endl;  */  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-空指针和野指针"><a href="#7-2-空指针和野指针" class="headerlink" title="7.2 空指针和野指针"></a>7.2 空指针和野指针</h3><p>空指针：<br>1.用于指针变量初始化： int* p =NULL;<br>2.空指针不可以进行访问：0 ~ 255之间的内存编号是系统占用</p><p>野指针：避免出现<br>int* p= (int *)0x1100;</p><h3 id="7-3-const修饰指针"><a href="#7-3-const修饰指针" class="headerlink" title="7.3 const修饰指针"></a>7.3 const修饰指针</h3><p>const修饰指针：常量指针const int* p = &amp;a(指针指向可以修改，指针指向的值不可以改)<br>指针常量int * const p = &amp;a(指针指向不可以改，指针指向的值可以修改)<br>const int* const p = &amp;a(指针指向,指针指向的值都不可以改)</p><h3 id="7-4-指针和数组"><a href="#7-4-指针和数组" class="headerlink" title="7.4 指针和数组"></a>7.4 指针和数组</h3><p>作用: 利用指针访问数组中元素</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){   //指针与数组：  int arr[10] = { 1,2,3,4,5,6,7,8,9,0 };  int* p = arr;  cout &lt;&lt; "arr[0]=" &lt;&lt; *p&lt;&lt;endl;  p++;  cout &lt;&lt; "arr[1]=" &lt;&lt; *p &lt;&lt; endl;  cout &lt;&lt; "指针遍历数组" &lt;&lt; endl;  int* p2 = arr;  for (int i = 0; i &lt; 10; i++)  {    cout &lt;&lt; *p2 &lt;&lt; endl;    p2++;  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-指针和函数"><a href="#7-5-指针和函数" class="headerlink" title="7.5 指针和函数"></a>7.5 指针和函数</h3><p>作用: 利用指针作函数参数,可以修改实参的值</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;void swap(int* p1, int* p2);int main(){   /*地址传递：  */  int num1 = 10;  int num2 = 20;  swap(&amp;num1, &amp;num2);  cout &lt;&lt; "num1=" &lt;&lt; num1 &lt;&lt; endl;  cout &lt;&lt; "num2=" &lt;&lt; num2 &lt;&lt; endl;  system("pause");  return 0;}void swap(int* p1, int* p2){  int temp = *p1;  *p1 = *p2;  *p2 = temp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/swap.png"></p><h5 id="案例-指针、数组、函数"><a href="#案例-指针、数组、函数" class="headerlink" title="案例: 指针、数组、函数"></a>案例: 指针、数组、函数</h5><p>案例描述: 封装一个函数,利用冒泡排序,实现对整型数组的升序排序<br>例如数组: <code>int arr[10] = {4,3,6,9,1,2,10,8,7,5};</code></p><p>代码:</p><p>bubbleSort.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;void bubbleSort(int* arr, int len);void printArray(int* arr, int len);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>bubbleSort.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;void bubbleSort(int* arr, int len){  //排序总轮数=元素个数-1  //每轮对比次数=元素个数-排序轮数-1  for (int i = 0; i &lt; len - 1; i++)  {    for (int j = 0; j &lt; len- i - 1; j++)    {      if (arr[j] &gt; arr[j + 1])      {        int temp = arr[j];        arr[j] = arr[j + 1];        arr[j + 1] = temp;      }    }  }}void printArray(int* arr, int len){  for (int i = 0; i &lt; len; i++)  {    cout &lt;&lt; arr[i] &lt;&lt; endl;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include"bubbleSort.h"int main(){  //案例：  int arr[10] = {4,3,6,9,1,2,10,8,7,5};  int len = sizeof(arr) / sizeof(arr[0]);  bubbleSort(arr, len);  printArray(arr, len);  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E5%87%BD%E6%95%B0.png"></p><h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><p>结构体属于用户自定义的数据类型,允许用户存储不同的数据类型</p><h3 id="8-1-结构体定义和使用"><a href="#8-1-结构体定义和使用" class="headerlink" title="8.1 结构体定义和使用"></a>8.1 结构体定义和使用</h3><p>语法: <code>struct 结构体名 {结构体成员列表};</code></p><p>通过结构体创建变量的方式有三种:</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = {成员1值,成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;string&gt;struct Student{  string name;  int age;  int score;}s3;int main(){  struct Student s1;  //等同于Student s1;  s1.name = "张三";  s1.age = 18;  s1.score = 80;  struct  Student s2= { "李四",19,88 };  s3.name = "王五";  s3.age = 17;  s3.score = 90;  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-结构体数组"><a href="#8-2-结构体数组" class="headerlink" title="8.2 结构体数组"></a>8.2 结构体数组</h3><p>作用: 将自定义的结构体放入到数组中方便维护</p><p>语法: <code>struct 结构体名 数组名[元素个数] = {{},{},...{}}</code></p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//结构体数组//1.定义结构体#include&lt;string&gt;struct Student{  string name;  int age;  int score;};int main(){  //2.创建结构体数组  struct Student stuArray[3] =  {    {"张三",18,100},    {"李四",16,89},    {"王五",18,98}  };  //3.给结构体数组赋值  stuArray[2].name = "张六";  stuArray[2].age = 19;  stuArray[2].score = 90;  //4.遍历结构体数组  for (int i = 0; i &lt; 3; i++)  {    cout &lt;&lt; "姓名：" &lt;&lt; stuArray[i].name       &lt;&lt; " 年龄：" &lt;&lt; stuArray[i].age       &lt;&lt; " 分数：" &lt;&lt; stuArray[i].score &lt;&lt; endl;  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-结构体指针"><a href="#8-3-结构体指针" class="headerlink" title="8.3 结构体指针"></a>8.3 结构体指针</h3><p>作用: 通过指针访问结构体中的成员</p><ul><li>利用操作符<code>-&gt;</code>可以通过结构体指针访问结构体属性</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//结构体指针#include&lt;string&gt;struct Student{  string name;  int age;  int score;};int main(){  //1.创建结构体变量  Student s = { "张三",18,90 };  //2.通过指针指向结构体变量  Student* p = &amp;s;  //3.通过指针访问数据  cout &lt;&lt; "姓名：" &lt;&lt; p-&gt;name    &lt;&lt; " 年龄：" &lt;&lt; p-&gt;age    &lt;&lt; " 分数：" &lt;&lt; p-&gt;score &lt;&lt; endl;  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-结构体嵌套结构体"><a href="#8-4-结构体嵌套结构体" class="headerlink" title="8.4 结构体嵌套结构体"></a>8.4 结构体嵌套结构体</h3><p>作用: 结构体中的成员可以是另一个结构体</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//结构体嵌套#include&lt;string&gt;struct Student{  string name;  int age;  int score;};struct Teacher{  int id;  string name;  int age;  struct Student stu;};int main(){  //1.创建结构体变量  Teacher t;  t.id = 10;  t.name = "老王";  t.age = 50;  t.stu.name = "小王";  t.stu.age = 18;  t.stu.score = 100;  cout &lt;&lt; "老师姓名：" &lt;&lt; t.name    &lt;&lt; " 老师年龄：" &lt;&lt; t.age    &lt;&lt; "学生姓名：" &lt;&lt; t.stu.name    &lt;&lt; " 学生年龄：" &lt;&lt; t.stu.age    &lt;&lt; " 学生分数：" &lt;&lt; t.stu.score &lt;&lt; endl;  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-5-结构体做函数参数"><a href="#8-5-结构体做函数参数" class="headerlink" title="8.5 结构体做函数参数"></a>8.5 结构体做函数参数</h3><p>作用: 将结构体作为参数向函数中传递</p><p>传递方式有俩种:</p><ul><li>值传递</li><li>地址传递</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;struct student{  string name;  int age;  int score;};//值传递void  printStudent1(struct student s){  cout &lt;&lt; "值传递子函数 : 姓名：" &lt;&lt; s.name &lt;&lt; endl;  cout &lt;&lt; "值传递子函数 : 年龄：" &lt;&lt; s.age &lt;&lt; endl;  cout &lt;&lt; "值传递子函数 : 分数：" &lt;&lt; s.score &lt;&lt; endl;}//地址传递void  printStudent2(struct student *p){  cout &lt;&lt; "地址传递子函数 : 姓名：" &lt;&lt; p-&gt;name &lt;&lt; endl;  cout &lt;&lt; "地址传递子函数 : 年龄：" &lt;&lt; p-&gt;age &lt;&lt; endl;  cout &lt;&lt; "地址传递子函数 : 分数：" &lt;&lt; p-&gt;score &lt;&lt; endl;}int main(){  struct student s;  s.name = "张三";  s.age = 20;  s.score = 85;  cout &lt;&lt; "main : 姓名：" &lt;&lt; s.name &lt;&lt; endl;  cout &lt;&lt; "main : 年龄：" &lt;&lt; s.age&lt;&lt; endl;  cout &lt;&lt; "main : 分数：" &lt;&lt; s.score &lt;&lt; endl;  printStudent1(s);  printStudent2(&amp;s);  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BB%93%E6%9E%84%E4%BD%93%E5%81%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0.png"></p><blockquote><p>总结:如果不想修改主函数中的数据用值传递,反之用地址传递</p></blockquote><h3 id="8-6-结构体中const使用场景"><a href="#8-6-结构体中const使用场景" class="headerlink" title="8.6 结构体中const使用场景"></a>8.6 结构体中const使用场景</h3><p>作用: 用const来防止误操作</p><h5 id="案例-结构体"><a href="#案例-结构体" class="headerlink" title="案例: 结构体"></a>案例: 结构体</h5><p>案例描述: 设计一个英雄的结构体,包括成员姓名,年龄,性别;创建结构体数组,数组中存放5名英雄。通过冒泡排序算法,将数组中的英雄按照年龄进行升序排序,最终打印排序后的结果</p><p>五名英雄信息如下:</p><pre class="line-numbers language-none"><code class="language-none">{"刘备",23,"男"},{"关羽",22,"男"},{"张飞",20,"男"},{"赵云",21,"男"},{"貂蝉",19,"女"},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码: </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;string&gt;//英雄结构体struct Hero{  string name;  int age;  string sex;};void bubbleSort(struct Hero heroArray[], int length){  for (int i = 0; i &lt; length-1; i++)  {    for (int j = 0; j &lt; length-i-1; j++)    {      if (heroArray[j].age &gt; heroArray[j + 1].age)      {        struct Hero temp = heroArray[j];        heroArray[j] = heroArray[j + 1];        heroArray[j + 1] = temp;      }    }  }}void printHero(struct Hero heroArray[], int length){  for (int i = 0; i &lt; length; i++)  {    cout &lt;&lt; "姓名：" &lt;&lt; heroArray[i].name &lt;&lt; " 年龄：" &lt;&lt; heroArray[i].age &lt;&lt; " 性别：" &lt;&lt; heroArray[i].sex &lt;&lt; endl;  }}int main(){  struct Hero heroArray[5] = {  {"刘备",23,"男"},    {"关羽",22,"男"},    {"张飞",20,"男"},    {"赵云",21,"男"},    {"貂蝉",19,"女"} };  int length = sizeof(heroArray) / sizeof(heroArray[0]);  cout &lt;&lt; "排序前:" &lt;&lt; endl;  printHero(heroArray, length);  bubbleSort(heroArray, length);  cout &lt;&lt; "排序后:" &lt;&lt; endl;  printHero(heroArray, length);  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BB%93%E6%9E%84%E4%BD%93%E6%A1%88%E4%BE%8B.png"></p><h5 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h5><p>功能要求:</p><ul><li>菜单功能:用户选择功能的界面 void showMenu()</li><li>添加联系人:向通讯录中添加新人,信息包括(姓名、性别、年龄、联系电话、家庭地址)最多记录1000人<br>步骤:<ul><li>设计联系人结构体</li><li>设计通讯录结构体</li><li>main函数中创建通讯录</li><li>封装添加联系人函数</li><li>测试添加联系人功能</li></ul></li><li>显示联系人:显示通讯录中所有联系人的信息<br>步骤:<ul><li>封装显示联系人函数</li><li>测试显示联系人功能</li></ul></li><li>删除联系人:按照姓名进行删除指定联系人<br>步骤:<ul><li>封装检测联系人是否存在</li><li>封装删除联系人函数</li><li>测试删除指定联系人</li></ul></li><li>查找联系人:按照姓名查看指定联系人信息<br>步骤:<ul><li>封装查找联系人函数</li><li>测试查找指定联系人</li></ul></li><li>修改联系人:按照姓名重新修改指定联系人<br>步骤:<ul><li>封装修改联系人函数</li><li>测试修改指定联系人</li></ul></li><li>清空联系人:清空通讯录中所有信息</li><li>退出通讯录:退出当前使用的通讯录 当用户选择0时,退出</li></ul><p>提示代码:<br><code>system("cls");</code>//清屏</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;string&gt;#define MAX 1000//联系人结构体struct Person{  string m_Name;  int  m_Sex;  int m_Age;  string m_Phone;  string m_Addr;};//通讯录结构体struct Addressbooks{  struct Person personArray[MAX];  int m_Size;};//添加联系人void addPerson(Addressbooks* abs){  if (abs-&gt;m_Size==MAX)  {    cout &lt;&lt; "通讯录已满，无法添加" &lt;&lt; endl;    return;  }  else  {    string name;    cout &lt;&lt; "请输入姓名:" &lt;&lt; endl;    cin &gt;&gt; name;    abs-&gt;personArray[abs-&gt;m_Size].m_Name = name;    cout &lt;&lt; "请输入性别:" &lt;&lt; endl;    cout &lt;&lt; "1  ---  男" &lt;&lt; endl;    cout &lt;&lt; "2  ---  女" &lt;&lt; endl;    int sex = 0;        while (true)    {      cin &gt;&gt; sex;      if (sex==1||sex==2)      {        abs-&gt;personArray[abs-&gt;m_Size].m_Sex = sex;        break;      }      cout &lt;&lt; "输入有误，重新输入" &lt;&lt; endl;    }    cout &lt;&lt; "请输入年龄:" &lt;&lt; endl;    int age = 0;    while (true)    {            cin &gt;&gt; age;      if (age &gt; 0 &amp;&amp; age&lt;150)      {        abs-&gt;personArray[abs-&gt;m_Size].m_Age = age;        break;      }      cout &lt;&lt; "输入有误，重新输入" &lt;&lt; endl;    }        cout &lt;&lt; "请输入联系电话:" &lt;&lt; endl;    string phone;    cin &gt;&gt; phone;    abs-&gt;personArray[abs-&gt;m_Size].m_Phone = phone;    cout &lt;&lt; "请输入家庭住址:" &lt;&lt; endl;    string address;    cin &gt;&gt; address;    abs-&gt;personArray[abs-&gt;m_Size].m_Addr = address;    abs-&gt;m_Size++;//更新    cout &lt;&lt; "添加成功" &lt;&lt; endl;    system("pause");    system("cls");//清屏  }}//显示联系人void showPerson(Addressbooks* abs){  if (abs-&gt;m_Size == 0)  {    cout &lt;&lt; "当前记录为空" &lt;&lt; endl;  }  else  {    for (int i = 0; i &lt; abs-&gt;m_Size; i++)    {      cout &lt;&lt; "姓名：" &lt;&lt; abs-&gt;personArray[i].m_Name &lt;&lt; "\t";      cout &lt;&lt; "性别：" &lt;&lt; (abs-&gt;personArray[i].m_Sex==1?"男":"女")&lt;&lt; "\t";      cout &lt;&lt; "年龄：" &lt;&lt; abs-&gt;personArray[i].m_Age &lt;&lt; "\t";      cout &lt;&lt; "电话：" &lt;&lt; abs-&gt;personArray[i].m_Phone&lt;&lt; "\t";      cout &lt;&lt; "地址：" &lt;&lt; abs-&gt;personArray[i].m_Addr &lt;&lt; endl;    }  }  system("pause");  system("cls");}//检查联系人是否存在，存在返回其在数组中位置，不存在返回-1int isExist(Addressbooks* abs, string name){  for (int i = 0; i &lt; abs-&gt;m_Size; i++)  {    if (abs-&gt;personArray[i].m_Name == name)    {      return i;    }  }  return -1;}//删除联系人void deletePerson(Addressbooks* abs){  cout &lt;&lt; "请输入删除的联系人" &lt;&lt; endl;  string name;  cin &gt;&gt; name;  int ret = isExist(abs, name);  if ( ret!= -1)  {    for (int i = ret; i &lt; abs-&gt;m_Size; i++)    {      //数据前移      abs-&gt;personArray[i] = abs-&gt;personArray[i + 1];    }    abs-&gt;m_Size--;//更新    cout &lt;&lt; "删除成功" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "查无此人" &lt;&lt; endl;  }  system("pause");  system("cls");//清屏}//查找联系人void findPerson(Addressbooks *abs){  cout &lt;&lt; "请输入要查找的联系人" &lt;&lt; endl;  string name;  cin &gt;&gt; name;  int ret=isExist(abs, name);  if (ret != -1)  {    cout &lt;&lt; "姓名：" &lt;&lt; abs-&gt;personArray[ret].m_Name &lt;&lt; "\t";    cout &lt;&lt; "性别：" &lt;&lt; (abs-&gt;personArray[ret].m_Sex == 1 ? "男" : "女") &lt;&lt; "\t";    cout &lt;&lt; "年龄：" &lt;&lt; abs-&gt;personArray[ret].m_Age &lt;&lt; "\t";    cout &lt;&lt; "电话：" &lt;&lt; abs-&gt;personArray[ret].m_Phone &lt;&lt; "\t";    cout &lt;&lt; "地址：" &lt;&lt; abs-&gt;personArray[ret].m_Addr &lt;&lt; endl;  }  else  {    cout &lt;&lt; "查无此人" &lt;&lt; endl;  }  system("pause");  system("cls");//清屏}//修改联系人void modifyPerson(Addressbooks* abs){  cout &lt;&lt; "请输入要修改的联系人" &lt;&lt; endl;  string name;  cin &gt;&gt; name;  int ret = isExist(abs, name);  if (ret != -1)  {    string name;    cout &lt;&lt; "请输入姓名:" &lt;&lt; endl;    cin &gt;&gt; name;    abs-&gt;personArray[ret].m_Name = name;    cout &lt;&lt; "请输入性别:" &lt;&lt; endl;    cout &lt;&lt; "1  ---  男" &lt;&lt; endl;    cout &lt;&lt; "2  ---  女" &lt;&lt; endl;    int sex = 0;    while (true)    {      cin &gt;&gt; sex;      if (sex == 1 || sex == 2)      {        abs-&gt;personArray[ret].m_Sex = sex;        break;      }      cout &lt;&lt; "输入有误，重新输入" &lt;&lt; endl;    }    cout &lt;&lt; "请输入年龄:" &lt;&lt; endl;    int age = 0;    while (true)    {      cin &gt;&gt; age;      if (age &gt; 0 &amp;&amp; age &lt; 150)      {        abs-&gt;personArray[ret].m_Age = age;        break;      }      cout &lt;&lt; "输入有误，重新输入" &lt;&lt; endl;    }    cout &lt;&lt; "请输入联系电话:" &lt;&lt; endl;    string phone;    cin &gt;&gt; phone;    abs-&gt;personArray[ret].m_Phone = phone;    cout &lt;&lt; "请输入家庭住址:" &lt;&lt; endl;    string address;    cin &gt;&gt; address;    abs-&gt;personArray[ret].m_Addr = address;  }  else  {    cout &lt;&lt; "查无此人" &lt;&lt; endl;  }  system("pause");  system("cls");//清屏}//清空联系人void clearPerson(Addressbooks* abs){  abs-&gt;m_Size = 0;  cout &lt;&lt; "通讯录已清空" &lt;&lt; endl;  system("pause");  system("cls");//清屏}//菜单界面void showMenu(){  cout &lt;&lt; "************************" &lt;&lt; endl;  cout &lt;&lt; "***** 1.添加联系人 *****" &lt;&lt; endl;  cout &lt;&lt; "***** 2.显示联系人 *****" &lt;&lt; endl;  cout &lt;&lt; "***** 3.删除联系人 *****" &lt;&lt; endl;  cout &lt;&lt; "***** 4.查找联系人 *****" &lt;&lt; endl;  cout &lt;&lt; "***** 5.修改联系人 *****" &lt;&lt; endl;  cout &lt;&lt; "***** 6.清空联系人 *****" &lt;&lt; endl;  cout &lt;&lt; "***** 0.退出通讯录 *****" &lt;&lt; endl;  cout &lt;&lt; "************************" &lt;&lt; endl;}int main(){  Addressbooks abs;  abs.m_Size = 0;  int select = 0;  while (true)  {    showMenu();//菜单    cin &gt;&gt; select;    switch (select)    {    case 1://1.添加联系人      addPerson(&amp;abs);//地址传递，可以修饰实参      break;    case 2://2.显示联系人      showPerson(&amp;abs);      break;    case 3://3.删除联系人      deletePerson(&amp;abs);      break;    case 4://4.查找联系人      findPerson(&amp;abs);      break;    case 5://5.修改联系人      modifyPerson(&amp;abs);      break;    case 6://6.清空联系人      clearPerson(&amp;abs);      break;    case 0://0.退出通讯录      cout &lt;&lt; "欢迎下次使用!" &lt;&lt; endl;      system("pause");      return 0;      break;    default:      cout &lt;&lt; "请重新输入" &lt;&lt; endl;      break;    }  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-C-核心编程"><a href="#2-C-核心编程" class="headerlink" title="2 C++核心编程"></a>2 C++核心编程</h2><h3 id="2-1-内存分区模式"><a href="#2-1-内存分区模式" class="headerlink" title="2.1 内存分区模式"></a>2.1 内存分区模式</h3><ul><li>代码区:存放函数体的二进制代码,由操作系统进行管理的 特点:共享、只读</li><li>全局区:存放全局变量和静态变量以及常量 该区域的数据在程序结束后由操作系统释放</li><li>栈区:由编译器自动分配释放,存放函数的参数值,局部变量等 不要返回局部变量的地址:第一次可以正确打印是因为编译器做了保留,第二次这个数据就不再保留了</li><li>堆区:由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收 主要利用new在堆区开辟内存</li></ul><p>程序运行前:代码区、全局区</p><p>不在全局区：局部变量，const修饰局部变量(局部常量)<br>全局区：全局变量，静态变量(static关键字修饰 eg:static int s_a = 10),常量:字符串常量、const修饰全局变量</p><p>程序运行后:栈区、堆区</p><p><strong>内存4区意义:</strong><br>不同区域存放的数据,赋予不同的生命周期,给我们更大的灵活编程</p><p>指针本质是局部变量</p><h4 id="2-1-1-new操作符"><a href="#2-1-1-new操作符" class="headerlink" title="2.1.1 new操作符"></a>2.1.1 new操作符</h4><p>C++中利用<code>new</code>操作符在堆区开辟数据<br>堆区开辟的数据,由程序员手动开辟、手动释放,释放利用操作符<code>delete</code></p><p>语法: <code>new 数据类型</code></p><p>利用new创建的数据,会返回该数据对应的类型的指针<br>释放数组<code>delete[] arr;</code></p><h3 id="2-2-引用"><a href="#2-2-引用" class="headerlink" title="2.2 引用"></a>2.2 引用</h3><h4 id="2-2-1-引用的基本使用"><a href="#2-2-1-引用的基本使用" class="headerlink" title="2.2.1 引用的基本使用"></a>2.2.1 引用的基本使用</h4><p>作用: 给变量起别名</p><p>语法: <code>数据类型 &amp;别名 = 原名</code></p><ul><li>引用必须初始化</li><li>引用一旦初始化就不能更改</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  //引用基本语法:  //数据类型 &amp;别名=原名  int a = 10;  int&amp; b = a;  cout &lt;&lt; "a=" &lt;&lt; a &lt;&lt; endl;  cout &lt;&lt; "b=" &lt;&lt; b &lt;&lt; endl;  int c = 100;  b = c;//赋值操作不是更改应用  cout &lt;&lt; "a=" &lt;&lt; a &lt;&lt; endl;  cout &lt;&lt; "b=" &lt;&lt; b &lt;&lt; endl;}//a=10,b=10//a=100,b=100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-引用做函数参数"><a href="#2-2-2-引用做函数参数" class="headerlink" title="2.2.2 引用做函数参数"></a>2.2.2 引用做函数参数</h4><p>作用: 函数传参时,可以利用引用的技术让形参修饰实参<br>优点: 简化指针修改实参</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main(){  int a = 10;  int b = 20;  mySwap(a,b);  cout &lt;&lt; "a=" &lt;&lt; a &lt;&lt; endl;  cout &lt;&lt; "b=" &lt;&lt; b &lt;&lt; endl;}//引用做函数参数//优点:简化指针修改实参//作用：让形参修饰实参void mySwap(int &amp;a,int &amp;b){  int temp=a;  a=b;  b=temp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-引用做函数返回值"><a href="#2-2-3-引用做函数返回值" class="headerlink" title="2.2.3 引用做函数返回值"></a>2.2.3 引用做函数返回值</h4><p>作用: 引用是可以作为函数的返回值存在的</p><p>1.不能返回局部变量的引用<br>2.函数的调用可以作为左值</p><p>本质：指针常量 int * const ref = &amp;a</p><h4 id="2-2-4-常量引用"><a href="#2-2-4-常量引用" class="headerlink" title="2.2.4 常量引用"></a>2.2.4 常量引用</h4><p>作用: 常量引用主要用来修饰形参,防止误操作</p><p>在函数形参列表中,可以加<code>const修饰形参</code>,防止形参改变实参</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;void showValue(const int&amp; val);int main(){  //常量引用  /*int a = 10;  int&amp; ref = a;*/  //const int&amp; ref = 10;//加入const变为只读，不能修改  int a = 100;  showValue(a);  system("pause");  return 0;}void showValue(const int&amp; val){  cout &lt;&lt; "val=" &lt;&lt; val &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-函数-提升"><a href="#2-3-函数-提升" class="headerlink" title="2.3 函数(提升)"></a>2.3 函数(提升)</h3><h4 id="2-3-1-函数默认参数"><a href="#2-3-1-函数默认参数" class="headerlink" title="2.3.1 函数默认参数"></a>2.3.1 函数默认参数</h4><p>在C++中,函数的形参列表中的形参是可以有默认值的</p><p>语法: <code>返回值类型 函数名 (参数 = 默认值){}</code></p><p>注意:<br>1.如果某个位置已经有了默认参数,那么从这个位置往后,从左往右都必须有默认值<br>2.如果函数声明有默认参数,函数实现就不能有默认参数(声明和实现只能有一个默认参数)</p><h4 id="2-3-2-函数占位参数"><a href="#2-3-2-函数占位参数" class="headerlink" title="2.3.2 函数占位参数"></a>2.3.2 函数占位参数</h4><p>语法: <code>返回值类型 函数名 (数据类型){}</code></p><p>占位参数也可以有默认参数(void func(int a,int = 10))</p><h4 id="2-3-3-函数重载"><a href="#2-3-3-函数重载" class="headerlink" title="2.3.3 函数重载"></a>2.3.3 函数重载</h4><p>作用: 函数名可以相同,提高复用性</p><p>条件：<br>1.同一作用域<br>2.函数名称相同<br>3.函数参数<em>类型不同</em>，或者<em>个数不同</em>，或者<em>顺序不同</em></p><p>函数返回值不可以作为函数重载的条件</p><ul><li>引用可作为重载条件：void func(int&amp; a)(传入变量时执行)与 void func(const int&amp; a)（传入数据时执行）</li><li>函数重载遇到函数默认参数</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;void func(){  cout &lt;&lt; "func()的调用" &lt;&lt; endl;}void func(int a){  cout &lt;&lt; "func(int a)的调用" &lt;&lt; endl;}void func(double a){  cout &lt;&lt; "func(double a)的调用" &lt;&lt; endl;}void func(int a,double b){  cout &lt;&lt; "func(int a,double b)的调用" &lt;&lt; endl;}void func(double a,int b){  cout &lt;&lt; "func(double a,int b)的调用" &lt;&lt; endl;}int main(){  //条件：  //1.同一作用域  //2.函数名称相同  //3.函数参数类型不同，或者个数不同，或者顺序不同  //函数返回值不可以作为函数重载的条件  //func();  //func(10);  //func(3.14);  //func(10,3.14);  func(3.14,10);  //引用可作为重载条件：void func(int&amp; a)(传入变量执行)与 void func(const int&amp; a)（传入数据执行）    system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-类和对象"><a href="#2-4-类和对象" class="headerlink" title="2.4 类和对象"></a>2.4 类和对象</h3><p>C++面向对象三大特性为:<code>封装、继承、多态</code></p><p>C++认为<code>万事万物皆为对象</code>,对象上有其属性和行为</p><p>具有相同性质的对象可以抽象称为类</p><h4 id="2-4-1-封装"><a href="#2-4-1-封装" class="headerlink" title="2.4.1 封装"></a>2.4.1 封装</h4><p>封装的意义:</p><ul><li>将属性和行为作为一个整体,表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p>封装意义一:<br>    在设计类的时候,属性和行为写在一起,表现事物</p><p>语法: <code>class 类名{ 访问权限: 属性 / 行为 };</code></p><p>类中的属性和行为 我们统一称为 成员<br>属性: 成员属性 成员变量<br>行为: 成员函数 成员方法</p><p>封装意义二:<br>类在设计时,可以把属性和行为放在不同的权限下,加以控制<br>访问权限有三种:</p><p>1.public   公共权限   成员 类内可以访问 类外可以访问<br>2.protected保护权限   成员 类内可以访问 类外不可以访问 儿子可以访问父亲中的保护内容<br>3.private  私有权限   成员 类内可以访问 类外不可以访问 儿子不可以访问父亲中的私有内容</p><p><strong>struct和class区别:</strong></p><ul><li>struct默认权限为公共</li><li>class默认权限为私有</li></ul><p><strong>成员属性设置为私有:</strong><br>优点:<br>    1.将所有成员属性设置为私有,可以自己控制读写权限 set写;get读<br>    2.对于写权限,我们可以检测数据的有效性</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;string&gt;//class 与 struct区别:/** class默认私有* struct默认公共*/class Student{//类中属性与行为称为成员  //属性 成员属性 成员变量 (设置为私有)  //行为 成员函数 成员方法public://权限：  /*  * public 公共 成员类内可以访问 成员类外可以访问  * protected 保护 成员类内可以访问 成员类外不可以访问  * private 私有 成员类内可以访问 成员类外不可以访问  */  string m_Name;  int m_Id;  void showStudent()//显示姓名与学号  {    cout &lt;&lt; "姓名：" &lt;&lt; m_Name &lt;&lt; ";学号：" &lt;&lt; m_Id &lt;&lt; endl;  }  //给姓名赋值  void setName(string name)  {    m_Name = name;  }  //给学号赋值  void setId(int id)  {    m_Id = id;  }protected:  string m_Car;private:  string m_Password;public:  void func()  {    m_Name = "张三";    m_Car = "bike";    m_Password = "123456";  }};/*int main(){  Student s1;  //s1.m_Name = "张三";  s1.setName("张三");  s1.m_Id = 1;  s1.showStudent();  system("pause");  return 0;}*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-设计立方体类"><a href="#案例-设计立方体类" class="headerlink" title="案例: 设计立方体类"></a>案例: 设计立方体类</h5><p>案例描述: </p><p>设计立方体类(Cube)<br>求出立方体的面积和体积<br>分别用全局函数和成员函数判断俩个立方体是否相等</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//创建类class Cube{public:  //设置长  void setL(int l)  {    m_L = l;  }  //获取长  int getL()  {    return m_L;  }  //设置宽  void setW(int w)  {    m_W = w;  }  //获取宽  int getW()  {    return m_W;  }  //设置高  void setH(int h)  {    m_H = h;  }  //获取高  int getH()  {    return m_H;  }  //获取立方体面积  int calculateS()  {    return 2 * m_L*m_W + 2 * m_W*m_H + 2 * m_H*m_L;  }  //获取立方体体积  int calculateV() {    return m_L * m_W * m_H;  }  //利用成员函数判断俩个立方体是否相等  bool isSameByClass(Cube &amp;c)  {    if (m_L == c.getL() &amp;&amp; m_W == c.getW() &amp;&amp; m_H == c.getH())    {      return true;    }    return false;  }private:  int m_L;//长  int m_W;//宽  int m_H;//高};//利用全局函数判断俩立方体是否相等bool isSame(Cube &amp;c1, Cube &amp;c2){  if (c1.getL()==c2.getL()&amp;&amp;c1.getW()==c2.getW()&amp;&amp;c1.getH()==c2.getH())  {    return true;  }  return false;}int main(){  Cube c1;  c1.setL(10);  c1.setH(10);  c1.setW(10);  cout &lt;&lt; "面积为:" &lt;&lt; c1.calculateS() &lt;&lt; endl;  cout &lt;&lt; "体积为:" &lt;&lt; c1.calculateV() &lt;&lt; endl;  Cube c2;  c2.setL(10);  c2.setH(10);  c2.setW(10);  cout &lt;&lt; "全局函数判断" &lt;&lt; endl;  bool ret = isSame(c1, c2);  if (ret)  {    cout &lt;&lt; "c1与c2相等" &lt;&lt; endl;  }  else {    cout &lt;&lt; "c1与c2不相等" &lt;&lt; endl;  }  cout &lt;&lt; "成员函数判断" &lt;&lt; endl;  ret = c1.isSameByClass(c2);  if (ret)  {    cout &lt;&lt; "c1与c2相等" &lt;&lt; endl;  }  else {    cout &lt;&lt; "c1与c2不相等" &lt;&lt; endl;  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-点和圆的关系"><a href="#案例-点和圆的关系" class="headerlink" title="案例: 点和圆的关系"></a>案例: 点和圆的关系</h5><p>案例描述:<br>设计一个圆形类(Circle)和一个点类(Point),计算点和圆的关系</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//点与圆关系#include&lt;iostream&gt;using namespace std;//点类class Point{public:  //设置x  void setX(int x)  {    m_X = x;  }  //获取x  int getX()  {    return m_X;  }  //设置y  void setY(int y)  {    m_Y = y;  }  //获取y  int getY()  {    return m_Y;  }private:  int m_X;  int m_Y;};//圆类class Circle{public:  //设置半径  void setR(int r)  {    m_R = r;  }  //获取半径  int getR()  {    return m_R;  }  //设置圆心  void setCenter(Point center)  {    m_Center=center;  }  //获取圆心  Point getCenter()  {    return m_Center;  }private:  int m_R;  Point m_Center;};void isInCircle(Circle&amp; c, Point&amp; p){  //计算俩点间距离平方  int distance = (c.getCenter().getX() - p.getX()) * (c.getCenter().getX() - p.getX()) +    (c.getCenter().getY() - p.getY()) * (c.getCenter().getY() - p.getY());  //计算半径平方  int rDistance = c.getR() * c.getR();  if (distance==rDistance)  {    cout &lt;&lt; "点在圆上" &lt;&lt; endl;  }  else if (distance&gt;rDistance)  {    cout &lt;&lt; "点在圆外" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "点在圆内" &lt;&lt; endl;  }}int main(){  Circle c;  c.setR(10);  Point center;  center.setX(10);  center.setY(0);  c.setCenter(center);  Point p;  p.setX(10);  p.setY(10);  isInCircle(c, p);  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分文件:</p><p>point.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;//点类class Point{public:  //设置x  void setX(int x);  //获取x  int getX();  //设置y  void setY(int y);  //获取y  int getY();private:  int m_X;  int m_Y;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>point.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include"point.h"//点类//设置xvoid Point::setX(int x){  m_X = x;}//获取xint Point::getX(){  return m_X;}//设置yvoid Point::setY(int y){  m_Y = y;}//获取yint Point::getY(){  return m_Y;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>circle.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include"point.h"//圆类class Circle{public:  //设置半径  void setR(int r);  //获取半径  int getR();  //设置圆心  void setCenter(Point center);  //获取圆心  Point getCenter();private:  int m_R;  Point m_Center;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>circle.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include"circle.h"//圆类//设置半径void Circle::setR(int r){  m_R = r;}//获取半径int Circle::getR(){  return m_R;}//设置圆心void Circle::setCenter(Point center){  m_Center = center;}//获取圆心Point Circle::getCenter(){  return m_Center;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Main.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//点与圆关系#include&lt;iostream&gt;using namespace std;#include"point.h"#include"circle.h"void isInCircle(Circle&amp; c, Point&amp; p){  //计算俩点间距离平方  int distance = (c.getCenter().getX() - p.getX()) * (c.getCenter().getX() - p.getX()) +    (c.getCenter().getY() - p.getY()) * (c.getCenter().getY() - p.getY());  //计算半径平方  int rDistance = c.getR() * c.getR();  if (distance==rDistance)  {    cout &lt;&lt; "点在圆上" &lt;&lt; endl;  }  else if (distance&gt;rDistance)  {    cout &lt;&lt; "点在圆外" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "点在圆内" &lt;&lt; endl;  }}int main(){  Circle c;  c.setR(10);  Point center;  center.setX(10);  center.setY(0);  c.setCenter(center);  Point p;  p.setX(10);  p.setY(10);  isInCircle(c, p);  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-对象的初始化和清理"><a href="#2-4-2-对象的初始化和清理" class="headerlink" title="2.4.2 对象的初始化和清理"></a>2.4.2 对象的初始化和清理</h4><p>构造函数和析构函数:解决对象的初始化和清理问题</p><p>如果我们不提供构造和析构,编译器会提供编译器提供的构造函数和析构函数是空实现。</p><p><strong>构造函数语法:</strong><code>类名(){}</code><br>1.构造函数无返回值 不用写void<br>2.函数名与类名相同<br>3.可以有参数，可以发生重载<br>4.创建对象时会自动调用构造函数且只调用一次</p><p><strong>析构函数:</strong><code>~类名(){}</code><br>1.无返回值 不用写void<br>2.函数名与类名相同 在名称前加<code>~</code><br>3.不可以有参数，不可以发生重载<br>4.对象在销毁前会自动调用，且只调用一次</p><p>构造函数的分类及调用<br>1.分类</p><ul><li>按参数分:有参构造和无参构造</li><li>按类型分:普通构造和拷贝构造</li></ul><p>2.三种调用方式</p><ul><li>括号法</li><li>显示法</li><li>隐式转换法</li></ul><p>拷贝构造函数调用时机</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p>构造函数调用规则<br>默认情况下,C++编译器至少给一个类添加3个函数<br>1.默认构造函数(无参,函数体为空)<br>2.默认析构函数(无参,函数体为空)<br>3.默认拷贝构造函数,对属性进行值拷贝</p><p>构造函数调用规则如下:</p><ul><li>如果用户定义有参构造函数,C++不在提供默认无参构造,但是会提供默认拷贝构造</li><li>如果用户定义拷贝构造函数,C++不会再提供其他构造函数</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;class Person{public:  //构造函数 初始化/*1构造函数无返回值 不用写void* 2.函数名与类名相同* 3.可以有参数，可以发生重载* 4.创建对象时，构造函数会自动调用，且只调用一次*/  Person()  {    cout &lt;&lt; "无参构造函数调用" &lt;&lt; endl;  }  Person(int a)  {    cout &lt;&lt; "有参构造函数调用" &lt;&lt; endl;  }  //析构函数 清理(作用：将堆区开辟数据做释放操作)  /*  * 1.无返回值 不用写void  * 2.函数名与类名相同 在名称前加~  * 3.不可以有参数，不可以发生重载  * 4.对象在销毁前会自动调用，且只调用一次  */  ~Person()  {    cout &lt;&lt; "析构函数调用" &lt;&lt; endl;  }  //拷贝构造函数  Person(const Person&amp; p)  {    cout &lt;&lt; "拷贝构造函数调用" &lt;&lt; endl;  }};void test01(){  //调用  //1.括号法  //Person p1;//栈上数据，test01执行完毕后会释放这个对象  //Person p2(10);  //Person p3(p2);  //2.显示法  Person p1;  Person p2=Person(10);  Person p3=Person(p2);  Person(10);//匿名对象 (不能用拷贝对象初始化)  //3.隐式转换法  Person p4 = 10;  Person p5 = p4;}int main(){  //test01();  Person p;  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>深拷贝和浅拷贝:<br>浅拷贝:简单的赋值拷贝操作<br>深拷贝:在堆区重新申请空间,进行拷贝操作</p><p>浅拷贝：问题：堆区内存重复释放<br>深拷贝：<code>m_Height=new int(*p.m_Height);</code></p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;class Person{public:  Person()  {    cout &lt;&lt; "Person默认构造函数调用" &lt;&lt; endl;  }  Person(int age,int height)  {    m_Age = age;    m_Height = new int(height);    cout &lt;&lt; "Person有参构造函数调用" &lt;&lt; endl;  }  Person(const Person&amp; p)  {    cout &lt;&lt; "拷贝构造函数的调用" &lt;&lt; endl;    m_Age = p.m_Age;    //m_Height = p.m_Height;编译器默认实现    //深拷贝操作    m_Height = new int(*p.m_Height);  }  ~Person()  {    //析构代码,将堆区开辟的数据释放    if (m_Height != NULL)    {      delete m_Height;      m_Height = NULL;    }    cout &lt;&lt; "Person析构函数调用" &lt;&lt; endl;  }  int m_Age;//年龄  int* m_Height;};void test01(){  Person p1(18,160);  cout &lt;&lt; "p1的年龄:" &lt;&lt; p1.m_Age &lt;&lt;"身高:"&lt;&lt;*p1.m_Height&lt;&lt; endl;  Person p2(p1);  cout &lt;&lt; "p2的年龄:" &lt;&lt; p2.m_Age &lt;&lt; "身高:" &lt;&lt; *p2.m_Height &lt;&lt; endl;}int main(){  test01();  system("pause");  return 0;  /*  Person有参构造函数调用  p1的年龄:18身高:160  拷贝构造函数的调用  p2的年龄:18身高:160  Person析构函数调用  Person析构函数调用  */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>初始化列表:</strong></p><p>作用: C++提供了初始化列表语法,用来初始化属性</p><p>语法: <code>构造函数():属性1(值1),属性2(值2)...{}</code></p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;class Person{public:  //传统初始化  /*Person(int a, int b, int c)  {    m_A = a;    m_B = b;    m_C = c;  }*/  //初始化列表  Person(int a,int b,int c) :m_A(a), m_B(b), m_C(c)  {  }  int m_A;  int m_B;  int m_C;};void test01(){  //Person p(10, 20, 30);  Person p(30, 20, 10);  cout &lt;&lt; "m_A=" &lt;&lt; p.m_A &lt;&lt; endl;  cout &lt;&lt; "m_B=" &lt;&lt; p.m_B &lt;&lt; endl;  cout &lt;&lt; "m_C=" &lt;&lt; p.m_C &lt;&lt; endl;}int main(){  test01();  system("pause");  return 0;}//m_A=30//m_B=20//m_C=10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类对象作为类成员:</strong></p><p>C++类中的成员可以是另一个类的对象,我们称该成员为对象成员</p><p>例如:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class A{}class B{  A a;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B类中有对象A作为成员,A为对象成员</p><p>当其他类对象作为本类成员,构造时先构造类对象,再构造自身<br>构造先构造其他再构造自身，析构与其相反</p><p><strong>静态成员:</strong></p><p>静态成员就是在成员变量和成员函数前加上关键字static,称为静态成员</p><p>静态成员分为:</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明,类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><h4 id="2-4-3-C-对象模型和this指针"><a href="#2-4-3-C-对象模型和this指针" class="headerlink" title="2.4.3 C++对象模型和this指针"></a>2.4.3 C++对象模型和this指针</h4><p>类内的成员变量和成员函数分开存储 只有非静态成员变量才属于类的对象上</p><p>空对象占用内存空间为1<br>C++编译器会给每个空对象分配一个字节的空间,是为了区分空对象占内存的位置<br>每个空对象也应该有一个独一无二的内存空间</p><p><strong>this指针:</strong><br><code>this指针指向被调用的成员函数所属的对象</code></p><p>this指针是隐含每一个非静态的成员函数内的一种指针<br>this指针不需要定义,直接使用即可</p><p>this指针用途:</p><ul><li>当形参和成员变量同名时,可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身,可使用<code>return *this</code></li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//this：指向被调用成员函数所属的对象 class Person{public:  Person(int age)  {    this-&gt;age = age;  }  Person&amp; PersonAddAge(Person &amp;p)//返回引用  {    this-&gt;age += p.age;    return *this;//this 为指向p2的指针  }  int age;};//1.解决名称冲突void test01(){  Person p1(18);  cout &lt;&lt; "p1的年龄为" &lt;&lt; p1.age &lt;&lt; endl;}//2.返回对象本身用*thisvoid test02(){  Person p1(10);  Person p2(10);  p2.PersonAddAge(p1).PersonAddAge(p1).PersonAddAge(p1);//链式编程  cout &lt;&lt; "p2的年龄为" &lt;&lt; p2.age &lt;&lt; endl;}int main(){  test02();  system("pause");  return 0;}//p2的年龄为40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>空指针访问成员函数:</strong><br>C++中空指针也是可以调用成员函数的,但是也要注意有没有用到this指针</p><p>如果用到this指针,需要加以判断保证代码的健壮性</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">if(this==NULL){  return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>const修饰成员函数:</strong></p><p>常函数:</p><ul><li>成员函数后加const后我们称为这个函数为<em>常函数</em></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后,在常函数中依然可以修改</li></ul><p>常对象:</p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//常函数class Person{public:  //this指针本质：指针常量：指针指向不可以修改  //const Person* const this;  void showPerson() const//修饰this指针，让this指向的值也不能修改  {    this-&gt;m_B = 100;  }  int m_A;  mutable int m_B;//即使在常函数中也可以修改};void test01(){  Person p;  p.showPerson();}void test02(){  const Person p;//常对象:只能调用常函数  p.m_B = 100;}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-4-友元"><a href="#2-4-4-友元" class="headerlink" title="2.4.4 友元"></a>2.4.4 友元</h4><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>关键字:<code>friend</code></p><p>友元三种实现:</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//友元：friend/** 1.全局函数做友元：在class 添加：friend 全局函数;(friend void Person(Building* building);)* 2.类做友元：在class 添加：friend 类;(friend class Person;)* 3.成员函数做友元：在class 添加：friend 成员函数;(friend void Person::visit();)*/class Building{  //可以访问Building中私有成员  friend void goodGay(Building* building);public:  Building()  {    m_SittingRoom = "客厅";    m_BedRoom = "卧室";  }public:  string m_SittingRoom;private:  string m_BedRoom;};//全局函数void goodGay(Building *building){  cout &lt;&lt; "访问" &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;  cout &lt;&lt; "访问" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void test01(){  Building building;  goodGay(&amp;building);}int main(){  test01();  //类外构造函数 类名::函数名（）{}  system("pause");  return 0;}//访问客厅//访问卧室<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-5-运算符重载"><a href="#2-4-5-运算符重载" class="headerlink" title="2.4.5 运算符重载"></a>2.4.5 运算符重载</h4><p>对已有的运算符重新进行定义,赋予其另一种功能,以适应不用的数据类型</p><p>加法重载代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//运算符重载也可以发生函数重载//加法#include&lt;iostream&gt;using namespace std;class Person{public:  //1.成员函数  //Person operator+(Person&amp; p)  //{    //Person temp;    //temp.m_A = this-&gt;m_A + p.m_A;    //temp.m_B = this-&gt;m_B + p.m_B;    //return temp;  //}  int m_A;  int m_B;};//全局函数Person operator+(Person&amp; p1,Person &amp;p2){  Person temp;  temp.m_A = p1.m_A + p2.m_A;  temp.m_B = p1.m_B + p2.m_B;  return temp;}void test01(){  Person p1;  p1.m_A = 10;  p1.m_B = 10;  Person p2;  p2.m_A = 10;  p2.m_B = 10;  Person p3 = p1 + p2;  cout &lt;&lt; "p3.m_A=" &lt;&lt; p3.m_A &lt;&lt; endl;  cout &lt;&lt; "p3.m_B=" &lt;&lt; p3.m_B &lt;&lt; endl;}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>左移重载:<br>作用:可以输出自定义数据类型<br>不会利用成员函数重载<code>&lt;&lt;</code>运算符,因为无法实现cout在左边<br>只能利用全局函数重载左移运算符<br>左移重载代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//运算符重载也可以发生函数重载//左移#include&lt;iostream&gt;using namespace std;class Person{  friend ostream&amp; operator&lt;&lt;(ostream&amp; cout, Person&amp; p);public:  Person(int a,int b)  {    m_A = a;    m_B = b;  }    private:  //成员函数:通常不用  int m_A;  int m_B;};//全局函数ostream&amp; operator&lt;&lt;(ostream &amp;cout,Person &amp;p){  cout &lt;&lt; "m_A=" &lt;&lt; p.m_A &lt;&lt; "m_B=" &lt;&lt; p.m_B;  return cout;}void test01(){  Person p(10,10);  cout &lt;&lt; p&lt;&lt;endl;  }int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递增重载:<br>作用:通过重载递增运算符,实现自己的整型数据<br>递增重载代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//运算符重载也可以发生函数重载//递增#include&lt;iostream&gt;using namespace std;class MyInteger{  friend ostream&amp; operator&lt;&lt;(ostream&amp; cout, MyInteger myint);    public:  MyInteger()  {    m_Num = 0;  }  //重载++前置  MyInteger&amp; operator++()//返回引用是为了对一个数据进行++  {    m_Num++;    return *this;  }  //重载++后置  MyInteger operator++(int)//int 表示占位参数 可以用于区分前置和后置递增 返回值  {    //先记录，再递增，最后返回记录值    MyInteger temp = *this;    m_Num++;    return temp;  }private:  int m_Num;};//全局函数ostream&amp; operator&lt;&lt;(ostream&amp; cout, MyInteger myint){  cout &lt;&lt;myint.m_Num;  return cout;}void test01(){  MyInteger myint;  cout &lt;&lt; ++myint &lt;&lt; endl;  cout &lt;&lt; myint &lt;&lt; endl;}void test02(){  MyInteger myint1;  cout &lt;&lt; myint1++ &lt;&lt; endl;  cout &lt;&lt; myint1 &lt;&lt; endl;}int main(){  test01();  test02();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>赋值重载:<br>C++编译器至少给一个类添加4个函数<br>1.默认构造函数(无参,函数体为空)<br>2.默认析构函数(无参,函数体为空)<br>3.默认拷贝构造函数,对属性进行值拷贝<br>4.赋值运算符 operator=,对属性进行值拷贝</p><p>如果类中有属性指向堆区,做赋值操作时也会出现深浅拷贝问题<br>赋值重载代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//运算符重载也可以发生函数重载//赋值#include&lt;iostream&gt;using namespace std;class Person{public:  Person(int age)  {    m_Age = new int(age);  }  ~Person()  {    if (m_Age!= NULL)    {      delete m_Age;      m_Age = NULL;    }  }  //重载赋值  Person&amp; operator=(Person&amp; p)  {    //深拷贝 先判断时是否有属性在堆区，如果有先释放干净，再进行深拷贝    if (m_Age != NULL)    {      delete m_Age;      m_Age = NULL;    }    m_Age = new int(*p.m_Age);//深拷贝    return *this;  }  int *m_Age;};void test01(){  Person p1(18);  Person p2(20);  p2 = p1;//赋值  cout &lt;&lt; "p1的年龄为" &lt;&lt; *p1.m_Age &lt;&lt; endl;  cout &lt;&lt; "p2的年龄为" &lt;&lt; *p2.m_Age &lt;&lt; endl;}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关系运算符重载:<br>作用:重载关系运算符,可以让俩个自定义类型对象进行对比操作<br>关系运算符重载代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//关系运算符#include&lt;iostream&gt;using namespace std;class Person{public:  Person(string name,int age)  {    m_Age = age;    m_Name = name;  }  //重载==  bool operator==(Person&amp; p)  {    if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)    {      return true;    }    return false;  }  //重载!=  bool operator!=(Person&amp; p)  {    if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)    {      return false;    }    return true;  }  string m_Name;  int m_Age;};void test01(){  Person p1("Tom", 18);  Person p2("Tom", 18);  if (p1 == p2)  {    cout &lt;&lt; "p1与p2相等" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "p1与p2不相等" &lt;&lt; endl;  }  if (p1 != p2)  {    cout &lt;&lt; "p1与p2不相等" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "p1与p2相等" &lt;&lt; endl;  }}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数调用运算符重载:</p><ul><li>函数调用运算符()也可以发生重载</li><li>由于重载后使用的方式非常像函数的调用,因此称为仿函数</li><li>仿函数没有固定写法,非常灵活<br>小括号重载代码:</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//小括号 十分灵活#include&lt;iostream&gt;using namespace std;#include&lt;string&gt;class MyPrint{public:  void operator() (string test)  {    cout &lt;&lt; test &lt;&lt; endl;  }};void test01(){  MyPrint myPrint;  myPrint("hello world");}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结:<br>  1.对于内置的数据类型的表达式的运算符是不可能改变的<br>  2.不要滥用运算符重载</p><h4 id="2-4-6-继承"><a href="#2-4-6-继承" class="headerlink" title="2.4.6 继承"></a>2.4.6 继承</h4><p>继承是面向对象三大特性之一</p><p>好处:减少重复代码</p><p>基本语法: <code>class 子类 : 继承方式 父类</code><br>子类也称为派生类<br>父类也称为基类</p><p>派生类中的成员,包含俩大部分:<br>一类是从基类继承过来的,一类是自己增加的成员<br>从基类继承过来的表现其共性,而新增的成员体现了其个性</p><p>继承方式一共有三种:</p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//公共继承class Base1{public:  int m_A;protected:  int m_B;private:  int m_C;};class Son1 :public Base1{public:  void func()  {    m_A = 10;//父类公共，子类公共    m_B = 10;//父类保护，子类保护    //父类私有，子类访问不到  }};void test01(){  Son1 s1;  s1.m_A = 100;}//保护继承class Base2{public:  int m_A;protected:  int m_B;private:  int m_C;};class Son2 :protected Base2{public:  void func()  {    m_A = 10;//父类公共，子类保护    m_B = 10;//父类保护，子类保护    //父类私有，子类访问不到  }};void test02(){  Son2 s2;}//私有继承class Base3{public:  int m_A;protected:  int m_B;private:  int m_C;};class Son3 :private Base3{public:  void func()  {    m_A = 10;//父类公共，子类私有    m_B = 10;//父类保护，子类私有    //父类私有，子类访问不到  }};void test03(){  Son3 s3;}int main(){  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承中的对象模型:<br>父类中所有非静态成员属性都会被子类继承下去<br>父类中的私有成员属性  是被编译器隐藏了 所以访问不到 但是确实被继承下去了</p><p>查看对象模型:打开开发人员命令行工具找到对应.cpp所在的目录,输入<code>cl /dl reportSingleClassLayout所属类名 "对应.cpp"</code></p><p>继承中的构造和析构顺序:<br>先构造父类,再构造子类;析构与构造顺序相反<br>子类继承父类后,当创建子类对象,也会调用父类的构造函数</p><p>继承同名成员(函数)处理方式:</p><ul><li>访问子类同名成员(函数) 直接访问即可</li><li>访问父类同名成员(函数) 需要加作用域  <code>s.Base::m_A</code></li></ul><p>如果子类中出现和父类同名的成员函数,子类的同名成员会隐藏掉父类中所有同名成员函数<br>如果想访问到父类中隐藏的同名成员函数,需要加作用域</p><p>继承同名静态成员处理方式:<br>静态成员和非静态成员出现同名,处理方式一致</p><p>可以通过对象访问,也可以通过类名访问</p><ul><li>访问子类同名成员(函数) 直接访问即可<ul><li>对象:<code>s.m_A</code></li><li>类名:<code>Son::m_A</code></li></ul></li><li>访问父类同名成员(函数) 需要加作用域<ul><li>对象:<code>s.Base::m_A</code></li><li>类名:<code>Son::Base::m_A</code></li></ul></li></ul><p>如果子类中出现和父类同名的成员函数,子类的同名成员会隐藏掉父类中所有同名成员函数<br>如果想访问到父类中隐藏的同名成员函数,需要加作用域</p><p>多继承语法:<br>C++允许一个类继承多个类</p><p>语法:<code>class 子类 : 继承方式 父类1, 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现,需要加作用域区分</p><p>当父类中出现同名函数,需要加作用域区分</p><p><em>C++实际开发中不建议用多继承</em></p><p>菱形继承:<br>概念:</p><ul><li>俩个派生类B、C继承同一个基类A</li><li>又有某个类D同时继承俩个派生类</li><li>这种继承方式被称为菱形继承,或者钻石继承<br>问题:</li></ul><p>1.某个类D使用数据时,会产生二义性<br>2.D继承了A的俩份数据,我们其实只需要一份就行</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//菱形继承:虚继承（继承之前加上virtual）Animal叫做虚基类 可以解决菱形继承问题#include&lt;iostream&gt;using namespace std;//动物类class Animal{public:  int m_Age;};//羊类class Sheep :virtual public Animal{};//驼类class Tuo :virtual public Animal{};//羊驼类class SheepTuo :public Sheep, public Tuo{};void test01(){  SheepTuo st;  st.Sheep::m_Age = 18;  st.Tuo::m_Age = 28;  //菱形继承，俩个父类拥有相同数据，需加作用域区分  cout &lt;&lt; "Sheep::m_Age=" &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;  cout &lt;&lt; "Tuo::m_Age=" &lt;&lt; st.Tuo::m_Age &lt;&lt; endl;  //只需一份数据  cout &lt;&lt; "st.m_Age=" &lt;&lt; st.m_Age &lt;&lt; endl;}int main(){  test01();  system("pause");  return 0;}//Sheep::m_Age=28//Tuo::m_Age=28//st.m_Age=28<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-7-多态"><a href="#2-4-7-多态" class="headerlink" title="2.4.7 多态"></a>2.4.7 多态</h4><p>多态是C++面向对象三大特性之一</p><p>多态分为俩类:</p><ul><li>静态多态:函数重载和运算符重载属于静态重载,复用函数名</li><li>动态多态:派生类和虚函数实现运行时多态<br>条件:<ul><li>1.有继承关系</li><li>2.子类重写父类的虚函数  重写  函数返回值类型  函数名  参数列表  完全相同<br>使用:</li><li>父类的指针或者引用执行子类对象</li></ul></li></ul><p>静态多态和动态多态区别:</p><ul><li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ul><h5 id="案例-计算器类"><a href="#案例-计算器类" class="headerlink" title="案例: 计算器类"></a>案例: 计算器类</h5><p>案例描述:<br>分别利用普通写法和多态技术,设计实现俩个操作数进行运算的计算机类</p><p>多态的优点:</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;string&gt;//重写父类虚函数 virtual+函数名class Calulator{public:  int getResult(string oper)  {    if (oper == "+")    {      return m_Num1 + m_Num2;    }    else if (oper=="-")    {      return m_Num1 - m_Num2;    }    else if (oper=="*")    {      return m_Num1 * m_Num2;    }    //如果想扩展新的功能,需要修改源码    //在真正开发中 提倡 开闭原则    //开闭原则:对扩展进行开发,对修改进行关闭  }  int m_Num1;  int m_Num2;};void test01(){  Calulator c;  c.m_Num1 = 10;  c.m_Num2 = 10;  cout &lt;&lt; c.m_Num1 &lt;&lt; "+" &lt;&lt; c.m_Num2 &lt;&lt; "=" &lt;&lt; c.getResult("+") &lt;&lt; endl;  cout &lt;&lt; c.m_Num1 &lt;&lt; "-" &lt;&lt; c.m_Num2 &lt;&lt; "=" &lt;&lt; c.getResult("-") &lt;&lt; endl;  cout &lt;&lt; c.m_Num1 &lt;&lt; "*" &lt;&lt; c.m_Num2 &lt;&lt; "=" &lt;&lt; c.getResult("*") &lt;&lt; endl;}class AbstractCalculator{public:  virtual int getResult()  {    return 0;  }  int m_Num1;  int m_Num2;};class AddCalculator :public AbstractCalculator{public:  int getResult()  {    return m_Num1+m_Num2;  }};class SubCalculator :public AbstractCalculator{public:  int getResult()  {    return m_Num1 - m_Num2;  }};class MulCalculator :public AbstractCalculator{public:  int getResult()  {    return m_Num1 * m_Num2;  }};void test02(){  AbstractCalculator* abc = new AddCalculator;  abc-&gt;m_Num1 = 10;  abc-&gt;m_Num2 = 12;  cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; "+" &lt;&lt; abc-&gt;m_Num2 &lt;&lt; "=" &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;  //用完后销毁  delete abc;  abc = new SubCalculator;  abc-&gt;m_Num1 = 10;  abc-&gt;m_Num2 = 12;  cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; "-" &lt;&lt; abc-&gt;m_Num2 &lt;&lt; "=" &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;  delete abc;  abc = new MulCalculator;  abc-&gt;m_Num1 = 10;  abc-&gt;m_Num2 = 12;  cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; "*" &lt;&lt; abc-&gt;m_Num2 &lt;&lt; "=" &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;  delete abc;}int main(){  test01();  test02();  system("pause");  return 0;}//10+10=20//10-10=0//10*10=100//10+12=22//10-12=-2//10*12=120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>纯虚函数和抽象类:</p><p>在多态中,通常父类中虚函数的实现是毫无意义的,主要都是调用子类重写的内容,因此可以将虚函数改为<code>纯虚函数</code></p><p>纯虚函数语法: <code>virtual 返回值类型 函数名 (参数列表) = 0;</code></p><p>当类中有了纯虚函数,这个类就称为<code>抽象类</code></p><p>抽象类特点:</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数,否则也属于抽象类</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;class Base//抽象类：无法实例化对象,子类必须重写父类的纯虚函数，否则子类也属于抽象类{public:  virtual void func() = 0;//纯虚函数};class Son :public Base{public:  virtual void func()  {    cout &lt;&lt; "func函数调用" &lt;&lt; endl;  }};void test01(){  Base* base = new Son;  base-&gt;func();  delete base;}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虚析构和纯虚析构:</p><p>多态使用时,如果子类中有属性开辟到堆区,那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式:将父类中的析构函数改为<code>虚析构</code>或者<code>纯虚析构</code></p><p>虚析构和纯虚析构共性:</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构共性:</p><ul><li>如果有纯虚析构,该类属于抽象类,无法实例化对象</li></ul><p>虚析构语法: <code>virtual ~类名(){}</code><br>纯虚析构语法:<br><code>virtual ~类名() = 0;</code><br><code>类名::~类名(){}</code></p><p>如果子类中没有堆区数据,可以不写为虚析构或纯虚析构</p><h5 id="案例-电路组装"><a href="#案例-电路组装" class="headerlink" title="案例: 电路组装"></a>案例: 电路组装</h5><p>案例描述:<br>电脑主要组成部件为CPU(用于计算),显卡(用于显示),内存条(用于存储)<br>将每个零件封装出抽象基类,并且提供不同厂商生产不同的零件,例如Intel厂商和Lenovo厂商<br>创建电脑类提供让电脑工作的函数,并且调用每个零件工作的接口<br>测试时组装三台不同的电脑进行工作</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;class CPU{public:  virtual void calculator() = 0;};class VideoCard{public:  virtual void display() = 0;};class Memory{public:  virtual void storage() = 0;};class Computer{public:  Computer(CPU* cpu, VideoCard* vc, Memory* mem)  {    m_cpu = cpu;    m_vc = vc;    m_mem = mem;  }  void work()  {    m_cpu-&gt;calculator();    m_vc-&gt;display();    m_mem-&gt;storage();  }  ~Computer()  {    if (m_cpu != NULL)    {      delete m_cpu;      m_cpu = NULL;    }    if (m_vc != NULL)    {      delete m_vc;      m_vc = NULL;    }    if (m_mem != NULL)    {      delete m_mem;      m_mem = NULL;    }  }private:  CPU* m_cpu;  VideoCard* m_vc;  Memory* m_mem;};class IntelCPU :public CPU{  virtual void calculator()  {    cout &lt;&lt; "Intel Cpu开始计算" &lt;&lt; endl;  }};class IntelVideoCard :public VideoCard{  virtual void display()  {    cout &lt;&lt; "Intel 显卡开始显示" &lt;&lt; endl;  }};class IntelMemory :public Memory{  virtual void storage()  {    cout &lt;&lt; "Intel 内存条开始存储" &lt;&lt; endl;  }};class LenovoCPU :public CPU{  virtual void calculator()  {    cout &lt;&lt; "Lenovo CPU开始计算" &lt;&lt; endl;  }};class LenovoVideoCard :public VideoCard{  virtual void display()  {    cout &lt;&lt; "Lenovo 显卡开始显示" &lt;&lt; endl;  }};class LenovoMemory :public Memory{  virtual void storage()  {    cout &lt;&lt; "Lenovo 内存条开始存储" &lt;&lt; endl;  }};void test01(){  CPU* intelCpu = new IntelCPU;  VideoCard* intelCard = new IntelVideoCard;  Memory* intelMem = new IntelMemory;  Computer* computer1 = new Computer(intelCpu, intelCard, intelMem);  computer1-&gt;work();  delete computer1;  Computer* computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);  computer2-&gt;work();  delete computer2;}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-文件操作"><a href="#2-5-文件操作" class="headerlink" title="2.5 文件操作"></a>2.5 文件操作</h3><p>程序运行时产生的数据都属于临时数据,程序一旦运行结束都会被释放<br>通过<code>文件可以将数据持久化</code><br>C++中对文件操作需要包含头文件<code>&lt;fstream&gt;</code></p><p>文件类型分为俩种:<br>1.<code>文本文件</code>  - 文件以文本<code>ASCII码</code>形式存储在计算机中<br>2.<code>二进制文件</code>- 文件以文本的<code>二级制</code>形式存储在计算机中,用户一般不能直接读懂他们</p><p>操作文件的三大类:<br>1.ofstream: 写操作<br>2.ifstream: 读操作<br>3.fstream : 读写操作</p><h4 id="2-5-1-文本文件"><a href="#2-5-1-文本文件" class="headerlink" title="2.5.1 文本文件"></a>2.5.1 文本文件</h4><p>一.写文件<br>步骤:<br>1.包含头文件<br>  <code>#include&lt;fstream&gt;</code><br>2.创建流对象<br>  <code>ofstream ofs;</code><br>3.打开文件<br>  <code>ofs.open("文件路径",打开方式);</code><br>4.写数据<br>  <code>ofs&lt;&lt;"写入的数据"</code><br>5.关闭文件<br>  <code>ofs.close();</code></p><p>文件打开方式:<br>|打开方式|解释|<br>|—|—|<br>|ios::in|为读文件而打开文件|<br>|ios::out|为写文件而打开文件|<br>|ios::ate|初始位置:文件尾|<br>|ios::app|追加方式写文件|<br>|ios::trunc|如果文件存在先删除,再创建|<br>|ios::binary|二进制方式|</p><p>注意:文件打开方式可以配合使用,利用<code>|</code>操作符<br>例如:用二进制方式写文件 <code>ios::binary | ios::out</code></p><p>二.读文件</p><p>步骤:</p><p>1.包含头文件 <code>#include&lt;fstream&gt;</code><br>2.创建流对象 <code>ifstream ifs;</code><br>3.打开文件并判断文件是否打开成功 <code>ifs.open("文件路径",打开方式);"</code><br>4.读数据 <code>四种方式读取</code><br>5.关闭文件 <code>ifs.close();</code></p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;fstream&gt;#include&lt;string&gt;void test01(){  ofstream ofs;//创建文件流  ofs.open("test.txt",ios::out);//指定打开方式 写文件  ofs &lt;&lt; "姓名：张三" &lt;&lt; endl;  ofs &lt;&lt; "性别：男" &lt;&lt; endl;  ofs &lt;&lt; "年龄：18" &lt;&lt; endl;  ofs.close();//关闭文件}void test02(){  ifstream ifs;  ifs.open("test.txt", ios::in);  if (!ifs.is_open())  {    cout &lt;&lt; "文件打开失败" &lt;&lt; endl;    return;  }  //读文件  /*1.  char buf[1024] = { 0 };  while (ifs&gt;&gt;buf)  {    cout &lt;&lt; buf &lt;&lt; endl;  }*/  /*2.  char buf[1024] = { 0 };  while (ifs.getline(buf,sizeof(buf)))  {    cout &lt;&lt; buf &lt;&lt; endl;  }*/  /*3.  string buf;  while (getline(ifs,buf))  {    cout &lt;&lt; buf &lt;&lt; endl;  }*/  //4.不推荐  char c;  while ((c=ifs.get())!=EOF) //EOF 文件尾  {    cout &lt;&lt; c &lt;&lt; endl;  }  //关闭文件  ifs.close();}int main(){  test02();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-2-二进制文件"><a href="#2-5-2-二进制文件" class="headerlink" title="2.5.2 二进制文件"></a>2.5.2 二进制文件</h4><p>打开方式:<code>ios::binary</code></p><p>1.写文件主要利用流对象调用成员函数write<br>函数原型: <code>ostream&amp; write(const char * buffer,int len);</code><br>参数:字符指针buffer指向内存中一段空间,len是读写的字节数</p><p>2.读文件主要利用流对象调用成员函数read<br>函数原型: <code>istream&amp; read(char * buffer,int len);</code><br>参数:字符指针buffer指向内存中一段空间,len是读写的字节数</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;fstream&gt;#include&lt;string&gt;//二进制写文件class Person{public:  char m_Name[64];  int m_Age;};void test03(){  ofstream ofs;  ofs.open("person.txt", ios::out | ios::binary);  Person p = { "张三",18 };  ofs.write((const char*)&amp;p, sizeof(Person));  ofs.close();}void test04(){  ifstream ifs;  ifs.open("person.txt", ios::in | ios::binary);  if (!ifs.is_open())  {    cout &lt;&lt; "文件打开失败" &lt;&lt; endl;    return;  }  Person p;  ifs.read((char*)&amp;p, sizeof(Person));  cout &lt;&lt; "姓名：" &lt;&lt; p.m_Name &lt;&lt; "  年龄:" &lt;&lt; p.m_Age &lt;&lt; endl;  ifs.close();}int main(){  test04();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-职工管理系统"><a href="#案例-职工管理系统" class="headerlink" title="案例: 职工管理系统"></a>案例: 职工管理系统</h5><p>案例描述:利用C++来实现一个基于多态的职工管理系统</p><p>公司中职工分为三种:普通职工、经理、老板,显示信息时,需要显示职工编号、职工姓名、职工岗位、以及职责</p><p>普通职工职责:完成经理交给的任务<br>经理职责:完成老板交给的任务,并下发任务给员工<br>老板职责:管理公司所有事物</p><p>管理系统需要实现的功能如下:</p><ul><li>退出管理系统:退出当前管理系统 <code>void ExitSystem();</code></li><li>增加职工信息:实现批量添加职工功能,将信息录入到文件中,职工信息为:职工编号、姓名、部门编号</li><li>显示职工信息:显示公司内部所有职工信息</li><li>删除离职职工:按照编号删除指定的职工</li><li>修改职工信息:按照编号修改职工个人信息</li><li>查找职工信息:按照职工的编号或者职工的姓名进行查找相关的人员信息</li><li>按照编号排序:按照职工编号进行排序,排序规则由用户指定</li><li>清空所有文档:清空文件中记录的所有职工信息(清空前需要再次确定,防止误删)</li></ul><p>代码:</p><p>创建管理类workerManager:</p><ul><li>与用户沟通的菜单界面 <code>void Show_Menu();</code></li><li>对职工增删改查的操作</li><li>与文件的读写交互</li></ul><p>workerManager.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once//防止头文件重复包含#include&lt;iostream&gt;using namespace std;#include"worker.h"#include"employee.h"#include"manager.h"#include"boss.h"#include&lt;fstream&gt;#define FILENAME "empFile.txt"class WorkerManager{public:  WorkerManager();  void Show_Menu();//展示菜单  void ExitSystem();//退出系统  int m_EmpNum;//职工人数  Worker** m_EmpArray;//职工数组指针  //添加职工  void Add_Emp();  //保存文件  void save();  bool m_FileIsEmpty;  //统计文件人数  int get_EmpNum();  void init_Emp();  //显示职工  void Show_Emp();  //删除职工  void Del_Emp();  //判断职工是否存在  int IsExist(int id);  //修改职工  void Mod_Emp();  //查找职工  void Find_Emp();  //排序  void Sort_Emp();  //清空文件  void Clean_File();  ~WorkerManager();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>workerManager.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include"workerManager.h"WorkerManager::WorkerManager(){  //1.文件不存在  ifstream ifs;  ifs.open(FILENAME, ios::in);  if (!ifs.is_open())  {    cout &lt;&lt; "文件不存在" &lt;&lt; endl;    //初始化属性    this-&gt;m_EmpNum = 0;    this-&gt;m_EmpArray = NULL;    this-&gt;m_FileIsEmpty = true;    ifs.close();    return;  }//文件存在但为空  char ch;  ifs &gt;&gt; ch;  if (ifs.eof())  {    //文件为空    cout &lt;&lt; "文件为空" &lt;&lt; endl;    //初始化属性    this-&gt;m_EmpNum = 0;    this-&gt;m_EmpArray = NULL;    this-&gt;m_FileIsEmpty = true;    ifs.close();    return;  }  //3.文件存在并不为空  int num = this-&gt;get_EmpNum();  cout &lt;&lt; "职工人数为:" &lt;&lt; num &lt;&lt; endl;  this-&gt;m_EmpNum = num;  this-&gt;m_EmpArray = new Worker * [this-&gt;m_EmpNum];//开辟空间  this-&gt;init_Emp();//将文件中的数据存储到数组中  //测试代码  /*for (int i = 0; i &lt; this-&gt;m_EmpNum; i++)  {    cout &lt;&lt; "职工编号:" &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id      &lt;&lt; "姓名:" &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Name      &lt;&lt; "部门编号:" &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; endl;  }*/}void WorkerManager::Show_Menu(){  cout &lt;&lt; "******************************" &lt;&lt; endl;  cout &lt;&lt; "**** 欢迎使用职工管理系统 ****" &lt;&lt; endl;  cout &lt;&lt; "******* 0.退出管理系统 *******" &lt;&lt; endl;  cout &lt;&lt; "******* 1.添加职工信息 *******" &lt;&lt; endl;  cout &lt;&lt; "******* 2.显示职工信息 *******" &lt;&lt; endl;  cout &lt;&lt; "******* 3.删除离职职工 *******" &lt;&lt; endl;  cout &lt;&lt; "******* 4.修改职工信息 *******" &lt;&lt; endl;  cout &lt;&lt; "******* 5.查找职工信息 *******" &lt;&lt; endl;  cout &lt;&lt; "******* 6.按照编号排序 *******" &lt;&lt; endl;  cout &lt;&lt; "******* 7.清空所用文档 *******" &lt;&lt; endl;  cout &lt;&lt; "******************************" &lt;&lt; endl;  cout &lt;&lt; endl;}void WorkerManager::ExitSystem(){  cout &lt;&lt; "欢迎下次使用" &lt;&lt; endl;  system("pause");  exit(0);}//添加职工void WorkerManager::Add_Emp(){  cout &lt;&lt; "请输入添加职工数量:" &lt;&lt; endl;  int addNum = 0;  cin &gt;&gt; addNum;  if (addNum&gt;0)  {    //添加    //计算添加空间大小    int newSize = this-&gt;m_EmpNum + addNum;    //开辟新空间    Worker** newSpace = new Worker * [newSize];    //将原来空间数据拷贝到新空间    if (this-&gt;m_EmpArray!=NULL)    {      for (int i = 0; i &lt; this-&gt;m_EmpNum; i++)      {        newSpace[i] = this-&gt;m_EmpArray[i];      }    }    //添加新数据    for (int i = 0; i &lt; addNum; i++)    {      int id;      string name;      int dSelect;//部门选择      cout &lt;&lt; "请输入第" &lt;&lt; i + 1 &lt;&lt; "个新职工编号:" &lt;&lt; endl;      cin &gt;&gt; id;      cout &lt;&lt; "请输入第" &lt;&lt; i + 1 &lt;&lt; "个新职工姓名:" &lt;&lt; endl;      cin &gt;&gt; name;      cout &lt;&lt; "请选择该职工岗位:" &lt;&lt; endl;      cout &lt;&lt; "1.普通员工" &lt;&lt; endl;      cout &lt;&lt; "2.经理" &lt;&lt; endl;      cout &lt;&lt; "3.老板" &lt;&lt; endl;      cin &gt;&gt; dSelect;      Worker* worker = NULL;      switch (dSelect)      {      case 1:        worker = new Employee(id, name, 1);        break;      case 2:        worker = new Manager(id, name, 2);        break;      case 3:        worker = new Boss(id, name, 3);        break;      default:        break;      }      //将创建的职工指针保存到数组中      newSpace[this-&gt;m_EmpNum + i] = worker;    }    //释放原有空间    delete[] this-&gt;m_EmpArray;    //更改新空间指向    this-&gt;m_EmpArray = newSpace;    //更新新的职工人数    this-&gt;m_EmpNum = newSize;    //更新职工不为空    this-&gt;m_FileIsEmpty = false;    //成功添加后保存到文件中    cout &lt;&lt; "成功添加" &lt;&lt; addNum &lt;&lt; "名新职工" &lt;&lt; endl;    this-&gt;save();  }  else  {    cout &lt;&lt; "输入有误" &lt;&lt; endl;  }  system("pause");  system("cls");}//统计文件人数int WorkerManager::get_EmpNum(){  ifstream ifs;  ifs.open(FILENAME, ios::in);  int id;  string name;  int dId;  int num = 0;  while (ifs&gt;&gt;id&amp;&amp;ifs&gt;&gt;name&amp;&amp;ifs&gt;&gt;dId)  {    num++;  }  return num;}void WorkerManager::save(){  ofstream ofs;  ofs.open(FILENAME, ios::out);  for (int i = 0; i &lt; this-&gt;m_EmpNum; i++)  {    ofs &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; " "      &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Name &lt;&lt; " "      &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; endl;  }  ofs.close();}void WorkerManager::init_Emp(){  ifstream ifs;  ifs.open(FILENAME, ios::in);  int id;  string name;  int dId;  int index = 0;  while (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId)  {    Worker* worker = NULL;    if (dId==1)    {      worker = new Employee(id, name, dId);    }else if (dId == 2)    {      worker = new Manager(id, name, dId);    }    else    {      worker = new Boss(id, name, dId);    }    this-&gt;m_EmpArray[index] = worker;    index++;  }  ifs.close();}//显示职工void WorkerManager::Show_Emp(){  //判断文件是否为空  if (this-&gt;m_FileIsEmpty)  {    cout &lt;&lt; "文件不存在或者记录为空" &lt;&lt; endl;  }  else  {    for (int i = 0; i &lt; m_EmpNum; i++)    {      //利用多态调用程序接口      this-&gt;m_EmpArray[i]-&gt;showInfo();    }  }  system("pause");  system("cls");}//删除职工void WorkerManager::Del_Emp(){  if (this-&gt;m_FileIsEmpty)  {    cout &lt;&lt; "文件不存在或记录为空" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "请输入想要删除职工的编号:" &lt;&lt; endl;    int id = 0;    cin &gt;&gt; id;    int index = this-&gt;IsExist(id);    if (index!=-1)    {      //数据前移      for (int i = index; i &lt; this-&gt;m_EmpNum-1; i++)      {        this-&gt;m_EmpArray[i] = this-&gt;m_EmpArray[i + 1];      }      this-&gt;m_EmpNum--;//更新人数      //更新到文件中      this-&gt;save();      cout &lt;&lt; "删除成功" &lt;&lt; endl;    }    else    {      cout &lt;&lt; "未找到职工，删除失败" &lt;&lt; endl;    }  }  system("pause");  system("cls");}//判断职工是否存在int WorkerManager::IsExist(int id){  int index = -1;  for (int i = 0; i &lt; this-&gt;m_EmpNum; i++)  {    if (this-&gt;m_EmpArray[i]-&gt;m_Id == id)    {      //找到职工      index = i;      break;    }  }  return index;}//修改职工void WorkerManager::Mod_Emp(){  if (this-&gt;m_FileIsEmpty)  {    cout &lt;&lt; "文件不存在或记录为空" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "请输入要修改职工的编号:" &lt;&lt; endl;    int id;    cin &gt;&gt; id;    int ret = this-&gt;IsExist(id);    if (ret!=-1)    {      delete this-&gt;m_EmpArray[ret];      int newId = 0;      string newName = "";      int dSelect = 0;      cout &lt;&lt; "查找到" &lt;&lt; id &lt;&lt; "号职工，请输入新的职工号:" &lt;&lt; endl;      cin &gt;&gt; newId;      cout &lt;&lt; "请输入新的姓名:" &lt;&lt; endl;      cin &gt;&gt; newName;      cout &lt;&lt; "请输入新的岗位:" &lt;&lt; endl;      cout &lt;&lt; "1.普通员工" &lt;&lt; endl;      cout &lt;&lt; "2.经理" &lt;&lt; endl;      cout &lt;&lt; "3.老板" &lt;&lt; endl;      cin &gt;&gt; dSelect;      Worker* worker = NULL;      switch (dSelect)      {      case 1:        worker = new Employee(newId, newName, dSelect);        break;      case 2:        worker = new Manager(newId, newName, dSelect);        break;      case 3:        worker = new Boss(newId, newName, dSelect);        break;      default:        break;      }      this-&gt;m_EmpArray[ret] = worker;      cout &lt;&lt; "修改成功" &lt;&lt; endl;      this-&gt;save();    }    else    {      cout &lt;&lt; "查无此人，修改失败" &lt;&lt; endl;    }  }  system("pause");  system("cls");}//查找职工void WorkerManager::Find_Emp(){  if (this-&gt;m_FileIsEmpty)  {    cout &lt;&lt; "文件不存在或记录为空" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "请输入查找的方式:" &lt;&lt; endl;    cout &lt;&lt; "1.按职工编号查找" &lt;&lt; endl;    cout &lt;&lt; "2.按职工姓名查找" &lt;&lt; endl;    int select = 0;    cin &gt;&gt; select;    if (select == 1)    {      int id;      cout &lt;&lt; "请输入查找的职工编号:" &lt;&lt; endl;      cin &gt;&gt; id;      int ret = IsExist(id);      if (ret != -1)      {        cout &lt;&lt; "查找成功!该职工信息如下:" &lt;&lt; endl;        this-&gt;m_EmpArray[ret]-&gt;showInfo();      }      else {        cout &lt;&lt; "查无此人" &lt;&lt; endl;      }    }    else if (select == 2)    {      string name;      cout &lt;&lt; "请输入查找的职工姓名:" &lt;&lt; endl;      cin &gt;&gt; name;      bool flag = false;//添加是否查到的标志      for (int i = 0; i &lt; m_EmpNum; i++)      {        if (this-&gt;m_EmpArray[i]-&gt;m_Name==name)        {          cout &lt;&lt; "查找成功!职工编号为:"             &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id             &lt;&lt; "号职工信息如下" &lt;&lt; endl;          flag = true;          this-&gt;m_EmpArray[i]-&gt;showInfo();        }      }      if (flag == false)      {        cout &lt;&lt; "查找失败，查无此人" &lt;&lt; endl;      }    }    else    {      cout &lt;&lt; "输入有误" &lt;&lt; endl;    }  }  system("pause");  system("cls");}//排序void WorkerManager::Sort_Emp(){  if (this-&gt;m_FileIsEmpty)  {    cout &lt;&lt; "文件不存在或记录为空" &lt;&lt; endl;    system("pause");    system("cls");  }  else  {    cout &lt;&lt; "请选择排序方式" &lt;&lt; endl;    cout &lt;&lt; "1.按照职工号升序" &lt;&lt; endl;    cout &lt;&lt; "2.按照职工号降序" &lt;&lt; endl;    int select = 0;    cin &gt;&gt; select;    for (int i = 0; i &lt; m_EmpNum; i++)    {      int minOrMax = i;//声明最小或最大值下标      for (int  j = i+1; j &lt; this-&gt;m_EmpNum; j++)      {        if (select == 1)        {          if (this-&gt;m_EmpArray[minOrMax]-&gt;m_Id &gt; this-&gt;m_EmpArray[j]-&gt;m_Id)          {            minOrMax = j;          }        }        else if (select == 2)        {          if (this-&gt;m_EmpArray[minOrMax]-&gt;m_Id &lt; this-&gt;m_EmpArray[j]-&gt;m_Id)          {            minOrMax = j;          }        }        else        {          cout &lt;&lt; "输入有误" &lt;&lt; endl;        }      }      if (i!=minOrMax)      {        Worker* temp = this-&gt;m_EmpArray[i];        this-&gt;m_EmpArray[i] = this-&gt;m_EmpArray[minOrMax];        this-&gt;m_EmpArray[minOrMax] = temp;      }    }    cout &lt;&lt; "排序成功,排序后的结果为:" &lt;&lt; endl;    this-&gt;save();    this-&gt;Show_Emp();//展示职工  }}//清空文件void WorkerManager::Clean_File(){  cout &lt;&lt; "确认清空？" &lt;&lt; endl;  cout &lt;&lt; "1.确定" &lt;&lt; endl;  cout &lt;&lt; "2.返回" &lt;&lt; endl;  int select = 0;  cin &gt;&gt; select;  if (select == 1)  {    ofstream ofs(FILENAME,ios::trunc);//删除文件后重新创建    ofs.close();    if (this-&gt;m_EmpArray != NULL)    {      for (int i = 0; i &lt; this-&gt;m_EmpNum; i++)      {        //删除堆区每个对象          delete this-&gt;m_EmpArray[i];          this-&gt;m_EmpArray[i] = NULL;             }//删除堆区数组指针      delete[] this-&gt;m_EmpArray;              this-&gt;m_EmpArray = NULL;      this-&gt;m_EmpNum = 0;      this-&gt;m_FileIsEmpty = true;    }    cout &lt;&lt; "清空成功" &lt;&lt; endl;  }  system("pause");  system("cls");}WorkerManager::~WorkerManager(){  if (this-&gt;m_EmpArray!=NULL)  {    for (int i = 0; i &lt; this-&gt;m_EmpNum; i++)    {      if (this-&gt;m_EmpArray != NULL)      {        delete this-&gt;m_EmpArray[i];      }    }    delete[] this-&gt;m_EmpArray;    this-&gt;m_EmpArray = NULL;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建抽象职工类:</p><p>职工的分类:普通职工、经理、老板<br>将三种职工抽象到一个类(worker)中,利用多态管理不同职工种类<br>职工的属性:职工编号、职工姓名、职工所在部门编号<br>职工的行为:岗位职责描述,获取岗位名称</p><p>worker.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include&lt;string&gt;class Worker//职工抽象类{public:  //显示个人信息  virtual void showInfo() = 0;  //获取岗位名称  virtual string getDeptName() = 0;  int m_Id;  string m_Name;  int m_DeptId;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>老板类:</p><p>boss.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include"worker.h"//老板类class Boss :public Worker{public:  //构造函数  Boss(int id, string name, int dId);  //显示个人信息  virtual void showInfo();  //获取岗位名称  virtual string getDeptName();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>boss.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include"boss.h"//构造函数Boss::Boss(int id, string name, int dId){  this-&gt;m_Id = id;  this-&gt;m_Name = name;  this-&gt;m_DeptId = dId;}//显示个人信息void Boss::showInfo(){  cout &lt;&lt; "职工编号:" &lt;&lt; this-&gt;m_Id    &lt;&lt; "\t\t职工姓名:" &lt;&lt; this-&gt;m_Name    &lt;&lt; "\t\t岗位:" &lt;&lt; this-&gt;getDeptName()    &lt;&lt; "\t\t岗位职责: 管理公司所有事务" &lt;&lt; endl;}//获取岗位名称string Boss::getDeptName(){  return string("老板");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通员工类:</p><p>employee.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//普通员工#pragma once#include&lt;iostream&gt;using namespace std;#include"worker.h"class Employee :public Worker{public:  //构造函数  Employee(int id,string name,int dId);  //显示个人信息  virtual void showInfo();  //获取岗位名称  virtual string getDeptName();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>employee.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include"employee.h"//构造函数Employee::Employee(int id, string name, int dId){  this-&gt;m_Id = id;  this-&gt;m_Name = name;  this-&gt;m_DeptId = dId;}//显示个人信息void Employee::showInfo(){  cout &lt;&lt; "职工编号:" &lt;&lt; this-&gt;m_Id    &lt;&lt; "\t\t职工姓名:" &lt;&lt; this-&gt;m_Name    &lt;&lt; "\t\t岗位:" &lt;&lt; this-&gt;getDeptName()    &lt;&lt; "\t\t岗位职责: 完成经理交给的任务" &lt;&lt; endl;}//获取岗位名称string Employee::getDeptName(){  return string("员工");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经理类:</p><p>manager.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include"worker.h"//经理类class Manager:public Worker{public:  //构造函数  Manager(int id, string name, int dId);  //显示个人信息  virtual void showInfo();  //获取岗位名称  virtual string getDeptName();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>manager.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include"manager.h"//构造函数Manager::Manager(int id, string name, int dId){  this-&gt;m_Id = id;  this-&gt;m_Name = name;  this-&gt;m_DeptId = dId;}//显示个人信息void Manager::showInfo(){  cout &lt;&lt; "职工编号:" &lt;&lt; this-&gt;m_Id    &lt;&lt; "\t\t职工姓名:" &lt;&lt; this-&gt;m_Name    &lt;&lt; "\t\t岗位:" &lt;&lt; this-&gt;getDeptName()    &lt;&lt; "\t\t岗位职责: 完成老板交给的任务，并下发任务给员工" &lt;&lt; endl;}//获取岗位名称string Manager::getDeptName(){  return string("经理");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include"workerManager.h"#include"worker.h";#include"employee.h"#include"manager.h"#include"boss.h"int main(){  //多态测试代码  /*  Worker* worker = NULL;  worker = new Employee(1, "张三", 1);  worker-&gt;showInfo();  worker = new Manager(2, "李四", 2);  worker-&gt;showInfo();  worker = new Boss(3, "王五", 3);  worker-&gt;showInfo();  */    //实例化对象  WorkerManager wm;  int choice = 0;  while (true)  {    wm.Show_Menu();    cout &lt;&lt; "请输入你的选择:" &lt;&lt; endl;    cin &gt;&gt; choice;    switch (choice)    {    case 0://退出系统      wm.ExitSystem();      break;    case 1://添加职工信息      wm.Add_Emp();      break;    case 2://显示职工信息      wm.Show_Emp();      break;    case 3://删除离职职工      wm.Del_Emp();      break;    case 4://修改职工信息      wm.Mod_Emp();      break;    case 5://查找职工信息      wm.Find_Emp();      break;    case 6://按照编号排序      wm.Sort_Emp();      break;    case 7://清空所用文档      wm.Clean_File();      break;    default:      system("cls");      break;    }  }  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-C-提高编程"><a href="#3-C-提高编程" class="headerlink" title="3 C++提高编程"></a>3 C++提高编程</h2><p><code>泛型编程</code>和<code>STL</code></p><h3 id="3-1-模板"><a href="#3-1-模板" class="headerlink" title="3.1 模板"></a>3.1 模板</h3><p>模板就是建立通用的模具,大大提高复用性</p><p>特点:</p><ul><li>模板不可以直接使用,它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h4 id="3-1-1-函数模板"><a href="#3-1-1-函数模板" class="headerlink" title="3.1.1 函数模板"></a>3.1.1 函数模板</h4><ul><li>C++另一种编程思想称为<code>泛型编程</code>,主要利用的技术就是模板</li><li>C++提供俩种模板机制:<code>函数模板</code>和<code>类模板</code></li></ul><p>函数模板作用:<br>建立一个通用函数,其函数返回值类型和形参类型可以不具体制定,用一个<code>虚拟的类型</code>来代表</p><p>语法:<br><code>template&lt;typename T&gt; 函数声明或定义</code></p><p>解释:<br>template –声明创建模板<br>typename –表面其后面的符号是一种数据类型,可以用class代替<br>T –通用的数据类型,名称可以替换,通常为大写字母</p><p>注意事项:</p><ul><li>自动类型推导,必须推导出一致的数据类型T才可以使用</li><li>模板必须要确定出T的数据类型才可以使用</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//函数模板//1.如果函数模板和普通函数都可以调用，优先调用普通函数//2.可以通过空模板参数列表（mySwap&lt;&gt;(a,b)）强制调用函数模板//3.函数模板可以发生函数重载//4.如果函数模板可以发生更好的匹配，优先调用函数模板template&lt;typename T&gt;//声明一个模板，T为通用数据类型void mySwap(T&amp; a, T&amp; b){  T temp = a;  a = b;  b = temp;}template&lt;class T&gt;void func(){  cout &lt;&lt; "func调用" &lt;&lt; endl;}void swapInt(int&amp; a, int&amp; b){  int temp = a;  a = b;  b = temp;}void swapDouble(double&amp; a, double&amp; b){  double temp = a;  a = b;  b = temp;}void test01(){  int a = 10;  int b = 20;  //swapInt(a, b);  //使用  //1.自动类型推导 必须推导出一致的数据类型T才能使用   不可以发生隐式类型转换  //mySwap(a, b);  //2.显示指定类型 可以发生隐式类型转换  mySwap&lt;int&gt;(a, b);  cout &lt;&lt; "a=" &lt;&lt; a &lt;&lt; endl;  cout &lt;&lt; "b=" &lt;&lt; b &lt;&lt; endl;  double c = 1.1;  double d = 2.2;  swapDouble(c, d);  cout &lt;&lt; "c=" &lt;&lt; c &lt;&lt; endl;  cout &lt;&lt; "d=" &lt;&lt; d &lt;&lt; endl;  func&lt;int&gt;();}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通函数与函数模板的区别:</p><ul><li>普通函数调用时可以发生自动类型转换(隐式类型转换)</li><li>函数模板调用时,如果利用自动类型推导,不会发生隐式类型转换</li><li>如果利用显式指定类型的方式,可以发生隐式类型转换</li></ul><p>建议使用显式指定类型</p><p>普通函数与函数模板调用规则:<br>1.如果函数模板和普通函数都可以实现,优先调用普通函数<br>2.可以通过空模板参数列表来强制调用函数模板 <code>func&lt;&gt;();</code><br>3.函数模板也可以发生重载<br>4.如果函数模板可以产生更好的匹配,优先调用函数模板</p><p>模板局限性:<br>传入参数为数组或者自定义数据类型,就无法正常使用<br>解决方法:用特定数据类型提供具体化操作 重载 <code>template&lt;&gt; bool myCompare(Person &amp;p1,Person &amp;p2){函数实现}</code></p><h4 id="3-1-2-类模板"><a href="#3-1-2-类模板" class="headerlink" title="3.1.2 类模板"></a>3.1.2 类模板</h4><p>作用:建立一个通用类,类中的成员数据类型可以不具体制定,用一个<code>虚拟的类型</code>来表示。</p><p>语法:<br><code>template&lt;typename T&gt; 类</code></p><p>解释:<br>template –声明创建模板<br>typename –表面其后面的符号是一种数据类型,可以用class代替<br>T –通用的数据类型,名称可以替换,通常为大写字母</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;string&gt;//类模板//1.没用自动类型推导使用方式//2.类模板在模板参数列表中可以有默认参数//类模板成员函数在调用时创建template&lt;class NameType,class AgeType&gt;class Person{public:  Person(NameType name,AgeType age)  {    this-&gt;m_Name = name;    this-&gt;m_Age = age;  }  void showPerson()  {    cout &lt;&lt; "name:" &lt;&lt; this-&gt;m_Name &lt;&lt; "age:" &lt;&lt; this-&gt;m_Age &lt;&lt; endl;  }  NameType m_Name;  AgeType m_Age;};void test01(){  Person&lt;string, int&gt;p1("张三", 78);  p1.showPerson();}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板和函数模板区别:<br>1.类模板没有自动类型推导的使用方式,只能用显式指定类型<br>2.类模板在模板参数列表中可以有默认参数</p><p>类模板中成员函数创建时机:</p><ul><li>普通类中成员函数一开始就创建</li><li>类模板中成员函数在调用时才创建</li></ul><p>类模板对象做函数参数<br>三种传入方式:<br>1.指定传入的类型    –直接显示对象的数据类型<br>2.参数模板化        –将对象中的参数变为模板进行传递<br>3.整个类模板化      –将这个对象类型模板化进行传递</p><p>代码:</p><p>分文件编写:<br>问题:<br>类模板中成员函数创建时期是在调用阶段,导致文件编写时调用不到<br>解决方法:<br>1.直接包含.cpp源文件</p><p>person.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include"person.h"template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age){  this-&gt;m_Name = name;  this-&gt;m_Age = age;}//成员函数类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson(){  cout &lt;&lt; "姓名:" &lt;&lt; this-&gt;m_Name &lt;&lt; " 年龄:" &lt;&lt; this-&gt;m_Age &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>person.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;template&lt;class T1, class T2&gt;class Person{public:  Person(T1 name, T2 age);  void showPerson();  T1 m_Name;  T2 m_Age;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.将声明和实现写在同一个文件中,并更改后缀名为.hpp,hpp是约定的名称,并不是强制</p><p>person.hpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include&lt;string&gt;//类模板对象做函数参数template&lt;class T1, class T2&gt;class Person{public:  Person(T1 name, T2 age);  /*{    this-&gt;m_Name = name;    this-&gt;m_Age = age;  }*/  void showPerson();  /*{    cout &lt;&lt; "姓名:" &lt;&lt; this-&gt;m_Name &lt;&lt; " 年龄:" &lt;&lt; this-&gt;m_Age &lt;&lt; endl;  }*/  T1 m_Name;  T2 m_Age;};template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age){  this-&gt;m_Name = name;  this-&gt;m_Age = age;}//成员函数类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson(){  cout &lt;&lt; "姓名:" &lt;&lt; this-&gt;m_Name &lt;&lt; " 年龄:" &lt;&lt; this-&gt;m_Age &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//1.//#include"person.cpp"//2.#include"person.hpp"//#include&lt;string&gt;////类模板对象做函数参数//template&lt;class T1,class T2&gt;//class Person//{//public://  Person(T1 name, T2 age);//  /*{//    this-&gt;m_Name = name;//    this-&gt;m_Age = age;//  }*///  void showPerson();//  /*{//    cout &lt;&lt; "姓名:" &lt;&lt; this-&gt;m_Name &lt;&lt; " 年龄:" &lt;&lt; this-&gt;m_Age &lt;&lt; endl;//  }*///  T1 m_Name;//  T2 m_Age;//};//构造函数类外实现//template&lt;class T1, class T2&gt;//Person&lt;T1, T2&gt;::Person(T1 name, T2 age)//{//  this-&gt;m_Name = name;//  this-&gt;m_Age = age;//}////成员函数类外实现//template&lt;class T1, class T2&gt;//void Person&lt;T1,T2&gt;::showPerson()//{//  cout &lt;&lt; "姓名:" &lt;&lt; this-&gt;m_Name &lt;&lt; " 年龄:" &lt;&lt; this-&gt;m_Age &lt;&lt; endl;//}//1.指定传入类型  &lt;最常用&gt;void printPerson1(Person&lt;string ,int&gt;&amp;p){  p.showPerson();}void test01(){  Person&lt;string, int&gt;p("张三", 78);  printPerson1(p);}//2.参数模板化template&lt;class T1,class T2&gt;void printPerson2(Person&lt;T1, T2&gt;&amp; p){  p.showPerson();  cout &lt;&lt; "T1的类型为:" &lt;&lt; typeid(T1).name() &lt;&lt; endl;  cout &lt;&lt; "T2的类型为:" &lt;&lt; typeid(T2).name() &lt;&lt; endl;}void test02(){  Person&lt;string, int&gt;p("李四", 98);  printPerson2(p);}//3.整个类模板化template&lt;class T&gt;void printPerson3(T&amp; p){  p.showPerson();  cout &lt;&lt; "T的类型为:" &lt;&lt; typeid(T).name() &lt;&lt; endl;}void test03(){  Person&lt;string, int&gt;p("王五", 8);  printPerson3(p);}int main(){  test03();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看数据类型:<code>typeid(T).name()</code></p><p>类模板与继承:</p><ul><li>当子类继承的父类是一个类模板时,子类在声明的时候要指定出父类中T的类型</li><li>如果不指定,编译器无法给子类分配内存</li><li>如果想灵活指定出父类中T的类型,子类也需变为类模板</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//类模板与继承template&lt;class T&gt;class Base{  T m;};class Son:public Base&lt;int&gt;{  };void test01(){  Son s1;}//如果想灵活指定父类中T类型，子类也需要变类模板template&lt;class T1,class T2&gt;class Son2 :public Base&lt;T2&gt;{public:  Son2()  {    cout &lt;&lt; "T1的类型为" &lt;&lt; typeid(T1).name() &lt;&lt; endl;    cout &lt;&lt; "T2的类型为" &lt;&lt; typeid(T2).name() &lt;&lt; endl;  }  T1 obj;};void test01(){  Son2&lt;int, char&gt;s2;}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板成员函数类外实现</p><ul><li>加模板参数列表和作用域</li></ul><p>类模板和友元:</p><ul><li>全局函数类内实现 –直接在类内声明友元就行了</li><li>全局函数类外实现 –需要提前让编译器知道全局函数的存在</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;string&gt;//类模板与友元//提前让编译器知道Person类存在template&lt;class T1, class T2&gt;class Person;//通过全局函数 打印Person信息template&lt;class T1, class T2&gt;void print2(Person&lt;T1, T2&gt; p){  cout &lt;&lt; "姓名:" &lt;&lt; p.m_Name &lt;&lt; " 年龄:" &lt;&lt; p.m_Age &lt;&lt; endl;}template&lt;class T1,class T2&gt;class Person{  //全局函数 类内实现  friend void print1(Person&lt;T1,T2&gt; p)  {    cout &lt;&lt; "姓名:" &lt;&lt; p.m_Name &lt;&lt; " 年龄:" &lt;&lt; p.m_Age &lt;&lt; endl;  }  //全局函数 类外实现  //空模板参数列表  //如果全局函数是类外实现，需要让编译器提前知道这个函数的存在  friend void print2&lt;&gt;(Person&lt;T1, T2&gt; p);public:  Person(T1 name, T2 age);  {      this-&gt;m_Name = name;      this-&gt;m_Age = age;  }private:  T1 m_Name;  T2 m_Age;};void test01(){  Person&lt;string, int&gt;p("Tom", 20);  print2(p);}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-类模板案例"><a href="#案例-类模板案例" class="headerlink" title="案例: 类模板案例"></a>案例: 类模板案例</h5><p>案例描述:</p><ul><li>可以对内置函数类型以及自定义数据类型进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator=防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组的容量</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//自己的通用的数组类#pragma once#include&lt;iostream&gt;using namespace std;template&lt;class T&gt;class MyArray{public:  //有参构造 参数 容量  MyArray(int capacity)  {    //cout &lt;&lt; "MyArray的有参构造" &lt;&lt; endl;    this-&gt;m_Capacity = capacity;    this-&gt;m_Size = 0;    this-&gt;pAddress = new T[this-&gt;m_Capacity];  }  //拷贝构造  MyArray(const MyArray&amp; arr)  {    //cout &lt;&lt; "MyArray的拷贝构造" &lt;&lt; endl;    this-&gt;m_Capacity = arr.m_Capacity;    this-&gt;m_Size = arr.m_Size;    //this-&gt;pAddress = arr.pAddress;浅拷贝问题:重复释放内存    this-&gt;pAddress = new T[arr.m_Capacity];//深拷贝    //将arr中的数据都拷贝过来    for (int i = 0; i &lt; this-&gt;m_Size; i++)    {      this-&gt;pAddress[i] = arr.pAddress[i];    }  }  //operator=防止浅拷贝问题 a=b=c  MyArray&amp; operator=(const MyArray&amp; arr)  {    //cout &lt;&lt; "MyArray的operator=" &lt;&lt; endl;    //先判断原来堆区是否有数据,如果有先释放    if (this-&gt;pAddress != NULL)    {      delete[] this-&gt;pAddress;      this-&gt;pAddress = NULL;      this-&gt;m_Capacity = 0;      this-&gt;m_Size = 0;    }    //深拷贝    this-&gt;m_Capacity = arr.m_Capacity;    this-&gt;m_Size = arr.m_Size;    this-&gt;pAddress = new T[arr.m_Capacity];    for (int i = 0; i &lt; this-&gt;m_Size; i++)    {      this-&gt;pAddress[i] = arr.pAddress[i];    }    return *this;  }  //尾插法  void Push_Back(const T&amp; val)  {    //判断容量是否等于大小    if (this-&gt;m_Capacity==this-&gt;m_Size)    {      return;    }    this-&gt;pAddress[this-&gt;m_Size] = val;    this-&gt;m_Size++;  }  //尾删法  void Pop_Back()  {    if (this-&gt;m_Size == 0) {      return;    }    this-&gt;m_Size--;  }  //通过下标访问    T&amp; operator[](int index)  {    return this-&gt;pAddress[index];  }  //返回数组容量  int getCapacity()  {    return this-&gt;m_Capacity;  }  //返回数组大小  int getSize()  {    return this-&gt;m_Size;  }  //析构函数  ~MyArray() {    if (this-&gt;pAddress!=NULL)    {      //cout &lt;&lt; "MyArray的析构函数" &lt;&lt; endl;      delete[] this-&gt;pAddress;      this-&gt;pAddress = NULL;    }  }private:  T* pAddress;//指针指向堆区开辟的真实数组  int m_Capacity;//容量  int m_Size;//数组大小};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include"MyArray.hpp"void printArray(MyArray &lt;int&gt;&amp; arr){  for (int i = 0;i &lt; arr.getSize();i++)  {    cout &lt;&lt; arr[i] &lt;&lt; endl;  }}void Test01(){  MyArray &lt;int&gt;arr1(5);  for (int i = 0;i &lt; 5;i++)  {    arr1.Push_Back(i);//尾插法  }  cout &lt;&lt; "arr1:" &lt;&lt; endl;  printArray(arr1);  cout &lt;&lt; "arr1容量:" &lt;&lt; arr1.getCapacity() &lt;&lt; " 大小:" &lt;&lt; arr1.getSize() &lt;&lt; endl;  MyArray &lt;int&gt;arr2(arr1);  arr2.Pop_Back();  cout &lt;&lt; "arr2:" &lt;&lt; endl;  printArray(arr2);  cout &lt;&lt; "arr2容量:" &lt;&lt; arr2.getCapacity() &lt;&lt; " 大小:" &lt;&lt; arr2.getSize() &lt;&lt; endl;  //MyArray&lt;int&gt;arr3(100);  //arr3 = arr1;}//测试自定义数据类型class Person{public:  Person() {};  Person(string name, int age)  {    this-&gt;m_Name = name;    this-&gt;m_Age = age;  }  string m_Name;  int m_Age;};void printPersonArray(MyArray&lt;Person&gt;&amp; arr){  for (int i = 0;i &lt; arr.getSize();i++)  {    cout &lt;&lt; "姓名:" &lt;&lt; arr[i].m_Name &lt;&lt; " 年龄:" &lt;&lt; arr[i].m_Age &lt;&lt; endl;  }}void Test02(){  MyArray&lt;Person&gt; arr(10);  Person p1("孙悟空", 999);  Person p2("韩信", 20);  Person p3("李白", 25);  Person p4("安其拉", 18);  Person p5("蔡文姬", 12);  arr.Push_Back(p1);  arr.Push_Back(p2);  arr.Push_Back(p3);  arr.Push_Back(p4);  arr.Push_Back(p5);  printPersonArray(arr);  cout &lt;&lt; "arr容量:" &lt;&lt; arr.getCapacity() &lt;&lt; " 大小:" &lt;&lt; arr.getSize() &lt;&lt; endl;}int main() {  Test02();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-STL"><a href="#3-2-STL" class="headerlink" title="3.2 STL"></a>3.2 STL</h3><p>STL(标准模块库)<br>从广义上分为:<code>容器</code>、<code>算法</code>、<code>迭代器</code><br>容器和算法间通过迭代器进行无缝连接</p><p>STL六大组件:容器、算法、迭代器、仿函数、适配器(配接器)、空间配置器<br>1.容器:各种数据结构,如vector、list、deque、set、map等,用来存放数据。<br>2.算法:各种常用的算法,如sort、find、copy、for_each等。<br>3.迭代器:扮演了容器与算法之间的胶合剂。<br>4.仿函数:行为类似函数,可作为算法的某种策略。<br>5.适配器(配接器):一种用来修饰容器或者仿函数或迭代器接口的东西。<br>6.空间配置器:负责空间的配置与管理。</p><h4 id="3-2-1-容器算法迭代器"><a href="#3-2-1-容器算法迭代器" class="headerlink" title="3.2.1 容器算法迭代器"></a>3.2.1 容器算法迭代器</h4><p>容器:置物之所也<br>STL容器就是运用最广泛的一些数据结构实现出来<br>常见的数据结构:数组、链表、树、栈、队列、集合、映射表 等<br>分类:</p><ul><li>序列式容器:强调值的排序,序列式容器中的每个元素有固定的位置。</li><li>关联式容器:二叉树结构,各元素之间没有严格的物理上的顺序关系。</li></ul><p>算法:问题之解法也<br>有限的步骤,解决逻辑或数学上的问题,这一门学科我们叫做算法<br>分类:</p><ul><li>质变算法:是指运算过程中会更改区间内的元素的内容。例如拷贝,替换,删除等等</li><li>非质变算法:是指运算过程中不会更改区间内的元素的内容。例如查找,计数,遍历,寻求极值等等</li></ul><p>迭代器:容器和算法之间粘合剂<br>提供一种方法,使之能够依序寻访某个容器所含的各个元素,而又无需暴露该容器的内部表示方式。<br>每个容器都有自己专属的迭代器<br>迭代器使用非常类似于指针,初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类:</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读,支持<code>++、==、!=</code></td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写,支持<code>++</code></td></tr><tr><td>前向迭代器</td><td>读写操作,并能向前推进迭代器</td><td>读写,支持<code>++、==、!=</code></td></tr><tr><td>双向迭代器</td><td>读写操作,并能向前和向后操作</td><td>读写,支持<code>++、--</code></td></tr><tr><td>随机访问迭代器</td><td>读写操作,可以以跳跃的方式访问任意数据,功能最强的迭代器</td><td>读写,支持<code>++、--、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</code></td></tr></tbody></table><p>常用的容器中迭代器种类为双向迭代器和随机访问迭代器</p><h5 id="vector存放内置数据类型"><a href="#vector存放内置数据类型" class="headerlink" title="vector存放内置数据类型"></a>vector存放内置数据类型</h5><p>容器: <code>vector</code><br>算法: <code>for_each</code><br>迭代器: <code>vector&lt;int&gt;::iterator</code></p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;//标准算法头文件using namespace std;//STL六大组件：容器、算法、迭代器、仿函数、适配器（配接器）、空间配装器//vector容器存放内置数据类型void MyPrint(int val){  cout &lt;&lt; val &lt;&lt; endl;}void test01(){  vector&lt;int&gt; v;  //向容器中插入数据  v.push_back(10);  v.push_back(20);  v.push_back(30);  v.push_back(40);  //通过迭代器访问数据  vector&lt;int&gt;::iterator itBegin = v.begin();//起始迭代器，指向容器中第一个元素  vector&lt;int&gt;::iterator itEnd = v.end();//结束迭代器，指向容器最后一个元素的下一个位置  //第一种遍历方式  while (itBegin!=itEnd)  {    cout &lt;&lt; *itBegin &lt;&lt; endl;    itBegin++;  }  //第二种  for (vector&lt;int&gt;::iterator it = v.begin();it != v.end();it++)  {    cout &lt;&lt; *it &lt;&lt; endl;  }  //第三种 STL(for_each)包含头文件#include&lt;algorithm&gt;  for_each(v.begin(), v.end(), MyPrint);}//容器嵌套容器void test02(){  vector&lt;vector&lt;int&gt;&gt;v;  //创建小容器  vector&lt;int&gt;v1;  vector&lt;int&gt;v2;  vector&lt;int&gt;v3;  vector&lt;int&gt;v4;  //向小容器中添加数据  for (int i = 0;i &lt; 4;i++)  {    v1.push_back(i + 1);    v2.push_back(i + 2);    v3.push_back(i + 3);    v4.push_back(i + 4);  }  //将小容器插入到大容器中  v.push_back(v1);  v.push_back(v2);  v.push_back(v3);  v.push_back(v4);  //通过大容器将所有数据遍历一遍  for (vector&lt;vector&lt;int&gt;&gt;::iterator it= v.begin(); it!=v.end(); it++)  {    //(*it)---容器vector&lt;int&gt;    for (vector&lt;int&gt;::iterator vit = (*it).begin();vit != (*it).end(); vit++)    {      cout &lt;&lt; *vit &lt;&lt; " ";    }    cout &lt;&lt; endl;  }}int main(){  test02();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vector也可以存放自定义数据类型</p><h4 id="3-2-2-string容器"><a href="#3-2-2-string容器" class="headerlink" title="3.2.2 string容器"></a>3.2.2 string容器</h4><p>本质: string 是C++风格的字符串,而string本质上是一个类</p><p>string 和 char* 区别:</p><ul><li>char* 是一个指针</li><li>string 是一个类,类内部封装了char* ,管理这个字符串,是一个 char* 型的容器。</li></ul><p>特点:<br>string类内部封装了很多成员方法<br>例如:查找find,拷贝copy,删除delete,替换replace,插入insert<br>string 管理char* 所分配的内存,不用担心复制越界和取值越界等,由类内部进行负责</p><h5 id="string构造函数"><a href="#string构造函数" class="headerlink" title="string构造函数"></a>string构造函数</h5><p>构造函数原型:</p><ul><li><code>string();</code> //创建一个空的字符串 例如:string str;<br><code>string(const char* s);</code> //使用字符串s初始化</li><li><code>string(const string&amp; str);</code> //使用一个string对象初始化另一个string对象</li><li><code>string(int n,char c);</code> //使用n个字符c初始化</li></ul><h5 id="string赋值操作"><a href="#string赋值操作" class="headerlink" title="string赋值操作"></a>string赋值操作</h5><p>功能:给string字符串进行赋值</p><p>赋值的函数原型:</p><ul><li><code>string&amp; operator=(const char* s);</code> //给char* 类型字符串 赋值给当前字符串</li><li><code>string&amp; operator=(const string &amp;s);</code> //把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code> //字符赋值给当前的字符串</li><li><code>string&amp; assign(const char *s);</code> //把字符串s赋给当前的字符串</li><li><code>string&amp; assign(const char *s,int n);</code> //把字符串s的前n个字符赋值给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code> //把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n,char c);</code> //把n个字符c赋给当前字符串</li></ul><p>operator=方式比较实用</p><h5 id="string字符串拼接"><a href="#string字符串拼接" class="headerlink" title="string字符串拼接"></a>string字符串拼接</h5><p>功能:实现在字符串末尾拼接字符串</p><p>函数原型:</p><ul><li><code>string&amp; operator+=(const char* str);</code> //重载+=操作符</li><li><code>string&amp; operator+=(const char c);</code> //重载+=操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code> //重载+=操作符</li><li><code>string&amp; append(const char *s);</code> //把字符串s拼接到当前字符串结尾</li><li><code>string&amp; append(const char *s,int n);</code> //把字符串s的前n个字符连接到当前的字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code> //同operator+=(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s,int pos,int n);</code> //字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><h5 id="string查找和替换"><a href="#string查找和替换" class="headerlink" title="string查找和替换"></a>string查找和替换</h5><p>功能:</p><ul><li>查找:查找指定字符串是否存在</li><li>替换:在指定的位置替换字符串</li></ul><p>函数原型:</p><ul><li><code>int find(const string&amp; str,int pos = 0) const;</code> //查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s,int pos = 0) const;</code> //查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s,int pos,int n) const;</code> //从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c,int pos = 0) const;</code> //查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str,int pos = npos) const;</code> //查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s,int pos = npos) const;</code> //查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s,int pos,int n) const;</code> //从pos位置查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c,int pos = 0) const;</code> //查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos,int n,const string&amp; str);</code> //替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos,int n,const char* s);</code> //替换从pos开始的n个字符为字符串s</li></ul><h5 id="string字符串比较"><a href="#string字符串比较" class="headerlink" title="string字符串比较"></a>string字符串比较</h5><p>功能:字符串之间的比较</p><p>比较方式:<br>字符串比较是按字符的ASCII码进行对比</p><ul><li>= 返回 0</li><li><blockquote><p>返回 1</p></blockquote></li><li>&lt; 返回 -1</li></ul><p>函数原型:</p><ul><li><code>int compare(const string &amp;s) const;</code> //与字符串s比较</li><li><code>int compare(const char *s) const;</code> //与字符串s比较 </li></ul><p>主要用于比较俩个字符串是否相等</p><h5 id="string字符存取"><a href="#string字符存取" class="headerlink" title="string字符存取"></a>string字符存取</h5><p>存取方式:</p><ul><li><code>char&amp; operator[](int n);</code> //通过<code>[]</code>方式取字符</li><li><code>char&amp; at(int n);</code> //通过at方法获取字符</li></ul><h5 id="string插入和删除"><a href="#string插入和删除" class="headerlink" title="string插入和删除"></a>string插入和删除</h5><p>功能:对string字符串进行插入和删除字符操作</p><p>函数原型:</p><ul><li><code>string&amp; insert(int pos,const char* s);</code> //插入字符串</li><li><code>string&amp; insert(int pos,const string&amp; str);</code> //插入字符串</li><li><code>string&amp; insert(int pos,int n,char c);</code> //在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos,int n = npos);</code> //删除从pos开始的n个字符</li></ul><p>插入和删除下标从0开始</p><h5 id="string子串"><a href="#string子串" class="headerlink" title="string子串"></a>string子串</h5><p>功能:从字符串中获取想要的子串</p><p>函数原型:</p><ul><li><code>string substr(int pos = 0,int n = npos) const;</code> //返回由pos开始的n个字符组成的字符串</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;//string 构造函数void test01(){  string s1;//默认构造  const char* str = "hello world";  string s2(str);  cout &lt;&lt; "s2=" &lt;&lt; s2 &lt;&lt; endl;  string s3(s2);  cout &lt;&lt; "s3=" &lt;&lt; s3 &lt;&lt; endl;  string s4(10, 'a');  cout &lt;&lt; "s4=" &lt;&lt; s4 &lt;&lt; endl;}//string 赋值操作void test02(){  string str1;  str1 = "hello world";  cout &lt;&lt; "str1=" &lt;&lt; str1 &lt;&lt; endl;  string str2;  str2 = str1;  cout &lt;&lt; "str2=" &lt;&lt; str2 &lt;&lt; endl;  string str3;  str3 = 's';  cout &lt;&lt; "str3=" &lt;&lt; str3 &lt;&lt; endl;  string str4;  str4.assign("hello c++");  cout &lt;&lt; "str4=" &lt;&lt; str4 &lt;&lt; endl;  string str5;  str5.assign("hello c++",5);  cout &lt;&lt; "str5=" &lt;&lt; str5 &lt;&lt; endl;  string str6;  str6.assign(str5);  cout &lt;&lt; "str6=" &lt;&lt; str6 &lt;&lt; endl;  string str7;  str7.assign(10, 'w');  cout &lt;&lt; "str7=" &lt;&lt; str7 &lt;&lt; endl;}//string字符串拼接void test03(){  string str1 = "我";  str1 += "爱学习";  cout &lt;&lt; "str1=" &lt;&lt; str1 &lt;&lt; endl;  str1 += ':';  cout &lt;&lt; "str1=" &lt;&lt; str1 &lt;&lt; endl;  string str2=" java,python";  str1 += str2;  cout &lt;&lt; "str1=" &lt;&lt; str1 &lt;&lt; endl;  string str3 = "I";  str3.append(" Love");  cout &lt;&lt; "str3=" &lt;&lt; str3 &lt;&lt; endl;  str3.append(" You,",4);  cout &lt;&lt; "str3=" &lt;&lt; str3 &lt;&lt; endl;  //str3.append(str2);  str3.append(str2, 0, 5);//第二个为开始位置（从0开始）第三个参数为截取长度  cout &lt;&lt; "str3=" &lt;&lt; str3 &lt;&lt; endl;}//string字符串查找void test04(){  string str1 = "abcdefgde";  int pos=str1.find("de");  cout &lt;&lt; "find:pos=" &lt;&lt; pos &lt;&lt; endl;  //rfind和find区别  //rfind从右往左查找，find从左往右查找  pos = str1.rfind("de");  cout &lt;&lt; "rfind:pos=" &lt;&lt; pos &lt;&lt; endl;}//字符串替换void test05(){  string str1 = "abcdefg";  //从1号位置(从0开始)起，3个字符替换为“1111”  str1.replace(1, 3, "1111");  cout &lt;&lt; "str1=" &lt;&lt; str1 &lt;&lt; endl;//a1111efg}//字符串比较void test06(){  string str1 = "xbcd";  string str2 = "abcd";  //主要用于比较是否相等  if (str1.compare(str2) == 0)  {    cout &lt;&lt; "str1=str2" &lt;&lt; endl;  }  else if (str1.compare(str2) &gt; 0)  {    cout &lt;&lt; "str1&gt;str2" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "str1&lt;str2" &lt;&lt; endl;  }}//字符存取void test07(){  string str1 = "hello";  str1[0] = 'x';  str1.at(1) = 'x';  //1.通过[]访问单个字符  for (int i = 0;i &lt; str1.size();i++)  {    cout &lt;&lt; str1[i] &lt;&lt; " ";  }  cout &lt;&lt; endl;  //2.通过at方式访问单个字符  for (int i = 0;i &lt; str1.size();i++)  {    cout &lt;&lt; str1.at(i) &lt;&lt; " ";  }  cout &lt;&lt; endl;}//字符串插入和删除void test08(){  string str1 = "hello";  //插入  str1.insert(1, "111");  cout &lt;&lt; "str1=" &lt;&lt; str1 &lt;&lt; endl;  //删除  str1.erase(1, 3);//第一个参数：从当前位置起,第二个参数：删除多少个  cout &lt;&lt; "str1=" &lt;&lt; str1 &lt;&lt; endl;}//string 子串void test09(){  string str = "abcdefg";  string subStr = str.substr(1, 3);//第一个参数：从当前位置起,第二个参数：截取多少个  cout &lt;&lt; "subStr=" &lt;&lt; subStr &lt;&lt; endl;  /*  string email = "xxx@qq.com";  int pos = email.find("@");  string username = email.substr(0,pos);  */}int main(){  test09();  system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-3-vector容器"><a href="#3-2-3-vector容器" class="headerlink" title="3.2.3 vector容器"></a>3.2.3 vector容器</h4><p>功能: vector数据结构与数组非常相似,也称为单端数组</p><p>vector与普通数组区别: 不同之处在于数组是静态空间,而vector可以<code>动态扩展</code></p><p>动态扩展:</p><ul><li>并不是在原空间之后续接新空间,而是找更大的内存空间,然后将原数据拷贝新空间,释放原空间</li><li>vector容器的迭代器是支持随机访问的迭代器</li></ul><h5 id="vector构造函数"><a href="#vector构造函数" class="headerlink" title="vector构造函数"></a>vector构造函数</h5><p>功能:创建vector容器</p><p>函数原型:</p><ul><li><code>vector&lt;T&gt; v;</code> //采用模板实现类实现,默认构造函数</li><li><code>vector(v.begin(),v.end());</code> //将v[begin(),end())区间中的元素拷贝给本身。</li><li><code>vector(n,elem);</code> //构造函数将n个elem拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code> //拷贝构造函数</li></ul><h5 id="vector赋值操作"><a href="#vector赋值操作" class="headerlink" title="vector赋值操作"></a>vector赋值操作</h5><p>功能:给vector容器进行赋值</p><p>函数原型:</p><ul><li><code>vector&amp; operator=(const vector &amp;vec);</code> //重载等号操作符</li><li><code>assign(begin,end);</code> //将[begin,end)区间中的数据拷贝赋值给本身</li><li><code>assign(n,elem);</code> //将n个elem拷贝赋值给本身</li></ul><h5 id="vector容量和大小"><a href="#vector容量和大小" class="headerlink" title="vector容量和大小"></a>vector容量和大小</h5><p>功能:对vector容器的容量和大小操作</p><p>函数原型:</p><ul><li><code>empty();</code> //判断容器是否为空</li><li><code>capacity();</code> //容器的容量</li><li><code>size();</code> //返回容器中元素的个数</li><li><code>resize(int num);</code> //重新指定容器的长度为num。若容器变长,则以默认值填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li><li><code>resize(int num,elem);</code> //重新指定容器的长度为num。若容器变长,则以elem填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li></ul><h5 id="vector插入和删除"><a href="#vector插入和删除" class="headerlink" title="vector插入和删除"></a>vector插入和删除</h5><p>功能:对vector容器进行插入、删除操作</p><p>函数原型:</p><ul><li><code>push_back(ele);</code> //尾部插入元素ele</li><li><code>pop_back();</code> //删除最后一个元素</li><li><code>insert(const_iterator pos,ele);</code> //迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos,int count,ele);</code> //迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code> //删除迭代器指定的元素</li><li><code>erase(const_iterator start,const_iterator end);</code> //删除迭代器从start到end之间的元素</li><li><code>clear();</code> //删除容器中所有元素</li></ul><h5 id="vector数据读取"><a href="#vector数据读取" class="headerlink" title="vector数据读取"></a>vector数据读取</h5><p>功能:对vector中的数据的存取操作</p><p>函数原型:</p><ul><li><code>at(int idx);</code> //返回索引idx所指的数据</li><li><code>operator[];</code> //返回索引idx所指的数据</li><li><code>front();</code> //返回容器中第一个元素</li><li><code>back();</code> //返回容器中最后一个元素</li></ul><h5 id="vector互换容器"><a href="#vector互换容器" class="headerlink" title="vector互换容器"></a>vector互换容器</h5><p>功能:实现俩个容器中元素进行互换</p><p>函数原型:</p><ul><li><code>swap(vec);</code> //将vec与本身元素互换</li></ul><h5 id="vector预留空间"><a href="#vector预留空间" class="headerlink" title="vector预留空间"></a>vector预留空间</h5><p>功能:减少vector在动态扩展容量时的扩展次数</p><p>函数原型:</p><ul><li><code>reserve(int len);</code> //容器预留len个元素长度,预留位置不初始化,元素不可访问</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;vector&gt;void printVector(vector&lt;int&gt;&amp;v){  for (vector&lt;int&gt;::iterator it = v.begin();it != v.end();it++)  {    cout &lt;&lt; *it &lt;&lt; " ";  }  cout &lt;&lt; endl;}//vector容器构造void test01(){  vector&lt;int&gt;v1;//默认构造 无参构造  for (int i = 0; i &lt; 10; i++)  {    v1.push_back(i);  }  printVector(v1);  //通过区间方式进行构造  vector&lt;int&gt;v2(v1.begin(), v1.end());  printVector(v2);  //n个elem方式构造  vector&lt;int&gt;v3(10, 100);  printVector(v3);  //拷贝构造  vector&lt;int&gt;v4(v3);  printVector(v4);}//vector赋值操作void test02(){  vector&lt;int&gt;v1;  for (int i = 0; i &lt; 10; i++)  {    v1.push_back(i);  }  printVector(v1);  //赋值 operator=  vector&lt;int&gt;v2;  v2 = v1;  printVector(v2);  //assign  vector&lt;int&gt;v3;  v3.assign(v1.begin(), v1.end());  printVector(v3);  //n个elem  vector&lt;int&gt;v4;  v4.assign(10, 100);  printVector(v4);}//vector容量和大小void test03(){  vector&lt;int&gt;v1;  for (int i = 0; i &lt; 10; i++)  {    v1.push_back(i);  }  printVector(v1);  if (v1.empty())  {    cout &lt;&lt; "v1为空" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "v1不为空" &lt;&lt; " 容量为 " &lt;&lt; v1.capacity() &lt;&lt; " 大小 " &lt;&lt; v1.size() &lt;&lt; endl;  }  //重新指定大小  v1.resize(15,100);//默认以0填充 这里指定为100  printVector(v1);  v1.resize(5);  printVector(v1);//超出容器长度的元素被删除}//vector插入和删除void test04(){  vector&lt;int&gt;v1;  v1.push_back(10);  v1.push_back(20);  v1.push_back(30);  v1.push_back(40);  v1.push_back(50);  //遍历  printVector(v1);  //尾删  v1.pop_back();  printVector(v1);  //插入  v1.insert(v1.begin(), 100);  printVector(v1);  v1.insert(v1.begin(), 2, 1000);  printVector(v1);  //删除 参数也是迭代器  v1.erase(v1.begin());  printVector(v1);  //清空  //v1.erase(v1.begin(), v1.end());  //printVector(v1);  v1.clear();  printVector(v1);}//vector数据读取void test05(){  vector&lt;int&gt;v1;  for (int i = 0; i &lt; 10; i++)  {    v1.push_back(i);  }  //利用[]访问元素  for (int i = 0;i &lt; v1.size();i++)  {    cout &lt;&lt; v1[i] &lt;&lt; " ";  }  cout &lt;&lt; endl;  //利用at访问元素  for (int i = 0;i &lt; v1.size();i++)  {    cout &lt;&lt; v1.at(i)&lt;&lt; " ";  }  cout &lt;&lt; endl;  //获取第一个元素  cout &lt;&lt; "第一个元素:" &lt;&lt; v1.front() &lt;&lt; endl;  //获取最后一个元素  cout &lt;&lt; "最后一个元素:" &lt;&lt; v1.back() &lt;&lt; endl;}//vector互换容器//1.基本使用void test06(){  vector&lt;int&gt;v1;  for (int i = 0; i &lt; 10; i++)  {    v1.push_back(i);  }  cout &lt;&lt; "交换前:" &lt;&lt; endl;  printVector(v1);  vector&lt;int&gt;v2;  for (int i = 10; i &gt;0; i--)  {    v2.push_back(i);  }  printVector(v2);  cout &lt;&lt; "交换后:" &lt;&lt; endl;  v1.swap(v2);  printVector(v1);  printVector(v2);}//2.实际用途//巧用swap可以收缩内存空间void test07(){  vector&lt;int&gt;v;  for (int i = 0; i &lt; 100000; i++)  {    v.push_back(i);  }  cout &lt;&lt; "v 的容量:" &lt;&lt; v.capacity() &lt;&lt; endl;  cout &lt;&lt; "v 的大小:" &lt;&lt; v.size() &lt;&lt; endl;  v.resize(3);//重新指定大小  cout &lt;&lt; "v 的容量:" &lt;&lt; v.capacity() &lt;&lt; endl;  cout &lt;&lt; "v 的大小:" &lt;&lt; v.size() &lt;&lt; endl;  //巧用swap可以收缩内存空间  vector&lt;int&gt;(v).swap(v);  cout &lt;&lt; "v 的容量:" &lt;&lt; v.capacity() &lt;&lt; endl;  cout &lt;&lt; "v 的大小:" &lt;&lt; v.size() &lt;&lt; endl;}//vector预留空间void test08(){  vector&lt;int&gt;v;  //利用reserve预留空间  v.reserve(100000);  int num = 0;  int* p = NULL;  for (int i = 0; i &lt; 100000; i++)  {    v.push_back(i);    if (p != &amp;v[0])    {      p = &amp;v[0];      num++;    }  }  cout &lt;&lt; num &lt;&lt; endl;}int main(){  test08();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-4-deque容器"><a href="#3-2-4-deque容器" class="headerlink" title="3.2.4 deque容器"></a>3.2.4 deque容器</h4><p>功能:双端数组,可以对头端进行插入和删除操作</p><p>deque与vector区别:</p><ul><li>vector对于头部的插入删除效率低,数据量越大,效率越低</li><li>deque相对而言,对头部的插入删除速度比vector快</li><li>vector访问元素时的速度比deque快,这和俩者内部实现有关</li></ul><p>deque内部工作原理:<br>deque内部有个<code>中控器</code>,维护每段缓冲区中的内容,缓冲区中存放真实数据<br>中控器维护的是每个缓冲区的地址,使得使用deque时像一片连续的内存空间</p><ul><li>deque容器的迭代器也是支持随机访问的</li></ul><h5 id="deque构造函数"><a href="#deque构造函数" class="headerlink" title="deque构造函数"></a>deque构造函数</h5><p>功能:deque容器构造</p><p>函数原型:</p><ul><li><code>deque&lt;T&gt;deqT;</code> //默认构造形式</li><li><code>deque(beg,end);</code> //构造函数将[beg,end)区间中的元素拷贝给本身</li><li><code>deque(n,elem);</code> //构造函数将n个elem拷贝给本身</li><li><code>deque(const deque &amp;deq);</code> //拷贝构造函数</li></ul><h5 id="deque赋值操作"><a href="#deque赋值操作" class="headerlink" title="deque赋值操作"></a>deque赋值操作</h5><p>功能:给deque容器赋值</p><p>函数原型:</p><ul><li><code>deque&amp; operator=(const deque &amp;deq);</code> //重载等号操作符</li><li><code>assign(beg,end);</code> //将[beg,end)区间中的数据拷贝赋值给本身</li><li><code>assign(n,elem);</code> //将n个elem拷贝赋值给本身</li></ul><h5 id="deque大小操作"><a href="#deque大小操作" class="headerlink" title="deque大小操作"></a>deque大小操作</h5><p>功能:对deque容器的大小进行操作</p><p>函数原型:</p><ul><li><code>deque.empty();</code> //判断容器是否为空</li><li><code>deque.size();</code> //返回容器中元素的个数</li><li><code>deque.resize(num);</code> //重新指定容器的长度为num。若容器变长,则以默认值填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li><li><code>deque.resize(num,elem);</code> //重新指定容器的长度为num。若容器变长,则以elem填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li></ul><h5 id="deque插入和删除"><a href="#deque插入和删除" class="headerlink" title="deque插入和删除"></a>deque插入和删除</h5><p>功能:向deque容器中插入和删除数据</p><p>函数原型:</p><p>俩端插入操作:</p><ul><li><code>push_back(elem);</code> //在容器尾部插入一个数据</li><li><code>push_front(elem);</code> //在容器头部插入一个数据</li><li><code>pop_back();</code> //删除容器最后一个数据</li><li><code>pop_front();</code> //删除容器第一个数据</li></ul><p>指定位置操作:</p><ul><li><code>insert(pos,elem);</code> //在pos位置插入一个elem元素的拷贝,返回新数据的位置</li><li><code>insert(pos,n,elem);</code> //在pos位置插入n个elem数据,无返回值</li><li><code>insert(pos,beg,end);</code> //在pos位置插入[beg,end)区间的数据,无返回值</li><li><code>clear();</code> //删除容器中所有数据</li><li><code>erase(beg,end);</code> //删除[beg,end)区间的数据,返回下一个数据的位置</li><li><code>erase(pos);</code> //删除pos位置的数据,返回下一个数据的位置</li></ul><h5 id="deque数据存取"><a href="#deque数据存取" class="headerlink" title="deque数据存取"></a>deque数据存取</h5><p>功能:对deque中的数据的存取操作</p><p>函数原型:</p><ul><li><code>at(int idx);</code> //返回索引idx所指的数据</li><li><code>operator[];</code> //返回索引idx所指的数据</li><li><code>front();</code> //返回容器中第一个数据元素</li><li><code>back();</code> //返回容器中最后一个数据元素</li></ul><h5 id="deque排序"><a href="#deque排序" class="headerlink" title="deque排序"></a>deque排序</h5><p>功能:利用算法实现对deque容器进行排序</p><p>算法:</p><ul><li><code>sort(iterator beg,iterator end)</code> //对beg和end区间内元素进行排序</li></ul><p>对于支持随机访问的迭代器的容器,都可以利用sort算法直接对其进行排序</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;deque&gt;#include&lt;algorithm&gt;//标准算法头文件void printDeque(const deque&lt;int&gt;&amp; d){  for (deque&lt;int&gt;::const_iterator it = d.begin();it != d.end();it++)  {    //容器里的数据不可以修改    cout &lt;&lt; *it &lt;&lt; " ";  }  cout &lt;&lt; endl;}//deque构造函数void test01(){  deque&lt;int&gt;d1;  for (int i = 0;i &lt; 10;i++)  {    d1.push_back(i);  }  printDeque(d1);  deque&lt;int&gt;d2(d1.begin(),d1.end());  printDeque(d2);  deque&lt;int&gt;d3(10,100);  printDeque(d3);  deque&lt;int&gt;d4(d3);  printDeque(d4);}//deque赋值操作void test02(){  deque&lt;int&gt;d1;  for (int i = 0;i &lt; 10;i++)  {    d1.push_back(i);  }  printDeque(d1);  //operator=赋值  deque&lt;int&gt;d2;  d2 = d1;  printDeque(d2);  //assign 赋值  deque&lt;int&gt;d3;  d3.assign(d1.begin(), d1.end());  printDeque(d3);  deque&lt;int&gt;d4;  d4.assign(10, 100);  printDeque(d4);}//deque大小操作void test03(){  deque&lt;int&gt;d1;  for (int i = 0;i &lt; 10;i++)  {    d1.push_back(i);  }  printDeque(d1);  if (d1.empty())  {    cout &lt;&lt; "d1为空" &lt;&lt; endl;  }  else   {    cout &lt;&lt; "d1不为空" &lt;&lt; endl;    cout &lt;&lt; "d1大小为:" &lt;&lt; d1.size() &lt;&lt; endl;//没有容量概念  }  //重新指定大小  d1.resize(15,1);  printDeque(d1);//默认以0填充  d1.resize(5);  printDeque(d1);}//deque插入和删除void test04(){  deque&lt;int&gt;d1;  //尾插  d1.push_back(10);  d1.push_back(20);  //头插  d1.push_front(100);  d1.push_front(200);  printDeque(d1);//200 100 10 20  //尾删  d1.pop_back();  printDeque(d1);  //头删  d1.pop_front();  printDeque(d1);}//指定位置插入和删除void test05(){  deque&lt;int&gt;d1;  //尾插  d1.push_back(10);  d1.push_back(20);  //头插  d1.push_front(100);  d1.push_front(200);  printDeque(d1);  //insert 插入  d1.insert(d1.begin(), 1000);  printDeque(d1);  d1.insert(d1.begin(), 2, 10000);  printDeque(d1);  //按照区间插入  deque&lt;int&gt;d2;  d2.push_back(1);  d2.push_back(2);  d2.push_back(3);  d1.insert(d1.begin(), d2.begin(), d2.end());  printDeque(d1);  //删除  deque&lt;int&gt;::iterator it = d1.begin();  it++;//第二个元素  d1.erase(it);  printDeque(d1);  //清空  //d1.erase(d1.begin(), d1.end());  d1.clear();  printDeque(d1);}//deque数据存取void test06(){  deque&lt;int&gt;d1;  //尾插  d1.push_back(10);  d1.push_back(20);  d1.push_back(30);  //头插  d1.push_front(100);  d1.push_front(200);  d1.push_front(300);  //通过[]方式访问元素  for (int i = 0;i &lt; d1.size();i++)  {    cout &lt;&lt; d1[i] &lt;&lt; " ";  }  cout &lt;&lt; endl;  //通过at方式访问元素  for (int i = 0;i &lt; d1.size();i++)  {    cout &lt;&lt; d1.at(i) &lt;&lt; " ";  }  cout &lt;&lt; endl;  cout &lt;&lt; "第一个元素:" &lt;&lt; d1.front() &lt;&lt; endl;  cout &lt;&lt; "最后一个元素:" &lt;&lt; d1.back() &lt;&lt; endl;}//deque排序void test07(){  deque&lt;int&gt;d;  //尾插  d.push_back(10);  d.push_back(20);  d.push_back(30);  //头插  d.push_front(100);  d.push_front(200);  d.push_front(300);  printDeque(d);  //排序  #include&lt;algorithm&gt;//标准算法头文件  sort(d.begin(), d.end());  cout &lt;&lt; "排序后:" &lt;&lt; endl;  printDeque(d);}int main(){  test07();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-评委打分"><a href="#案例-评委打分" class="headerlink" title="案例: 评委打分"></a>案例: 评委打分</h5><p>案例描述:<br>有5名选手:选手ABCDE,10个评委分别对每一个选手打分,去除最高分,去除评委最低分,求平均分</p><p>实现步骤:<br>1.创建五名选手,放到vector中<br>2.遍历vector容器,取出每一位选手,执行for循环,可以把10个评分分存到deque容器中<br>3.sort算法对deque容器中的分数进行排序,取出最高和最低分<br>4.deque容器遍历一遍,累加总分<br>5.获取平均分</p><p><a href="https://github.com/liaojie1314/JudgesScore">代码</a></p><h4 id="3-2-5-stack容器"><a href="#3-2-5-stack容器" class="headerlink" title="3.2.5 stack容器"></a>3.2.5 stack容器</h4><p>stack是一种先进后出的数据结构,它只有一个出口</p><p>栈中只有顶端元素才可以被访问,因此不允许有遍历的行为</p><ul><li>入栈:  <code>push</code></li><li>出栈:  <code>pop</code></li></ul><h5 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h5><p>构造函数:</p><ul><li><code>stack&lt;T&gt; stk;</code> //stack采用模板类实现,stack对象的默认构造形式</li><li><code>stack(const stack &amp;stk);</code> //拷贝构造函数</li></ul><p>赋值操作:</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code> //重载等号操作符</li></ul><p>数据存取:</p><ul><li><code>push(elem);</code> //向栈顶添加元素</li><li><code>pop();</code> //从栈顶移除第一个元素</li><li><code>top();</code> //返回栈顶元素</li></ul><p>大小操作:</p><ul><li><code>empty();</code> //判断栈是否为空</li><li><code>size();</code> //返回栈的大小</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;stack&gt;void test01(){  stack&lt;int&gt;s;  //入栈  s.push(10);  s.push(20);  s.push(30);  s.push(40);  if (!s.empty())  {    cout &lt;&lt; "栈顶元素: " &lt;&lt; s.top() &lt;&lt; endl;    s.pop();//出栈  }  cout &lt;&lt; "栈的大小: " &lt;&lt; s.size() &lt;&lt; endl;}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-6-queue容器"><a href="#3-2-6-queue容器" class="headerlink" title="3.2.6 queue容器"></a>3.2.6 queue容器</h4><p>queue是一种先进先出的数据结构,他有2个出口</p><p>队列容器只允许从一端新增数据,从另一端移除数据</p><p>队列中只有队头元素和队尾元才可以被访问,因此不允许有遍历的行为</p><ul><li>入队:  <code>push</code></li><li>出队:  <code>pop</code></li></ul><h5 id="常用接口-1"><a href="#常用接口-1" class="headerlink" title="常用接口"></a>常用接口</h5><p>构造函数:</p><ul><li><code>queue&lt;T&gt; que;</code> //queue采用模板类实现,queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code> //拷贝构造函数</li></ul><p>赋值操作:</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code> //重载等号操作符</li></ul><p>数据存取:</p><ul><li><code>push(elem);</code> //向队尾添加元素</li><li><code>pop();</code> //从队头移除第一个元素</li><li><code>back();</code> //返回最后一个元素</li><li><code>front();</code> //返回第一个元素</li></ul><p>大小操作:</p><ul><li><code>empty();</code> //判断队列是否为空</li><li><code>size();</code> //返回队列的大小</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;queue&gt;void test01(){  queue&lt;int&gt;q;  //入队  q.push(10);  q.push(20);  q.push(30);  q.push(40);  if (!q.empty())  {    cout &lt;&lt; "第一个元素: " &lt;&lt; q.front() &lt;&lt; endl;    cout &lt;&lt; "最后一个元素: " &lt;&lt; q.back() &lt;&lt; endl;    q.pop();//出队    cout &lt;&lt; "第一个元素: " &lt;&lt; q.front() &lt;&lt; endl;    cout &lt;&lt; "最后一个元素: " &lt;&lt; q.back() &lt;&lt; endl;  }  cout &lt;&lt; "队列的大小: " &lt;&lt; q.size() &lt;&lt; endl;}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-7-list容器"><a href="#3-2-7-list容器" class="headerlink" title="3.2.7 list容器"></a>3.2.7 list容器</h4><p>功能:将数据进行链式存储</p><p><code>链表</code>是一种物理存储单元上非连续的存储结构,数据结构的逻辑顺序是通过链表中的指针链接实现的</p><ul><li>优点:可以对任意位置快速插入和删除</li><li>缺点:遍历速度没有数组快,占用空间比数组大</li></ul><p>链表组成:链表由一系列结点组成</p><p>结点的组成:一个是存储数据元素的数据域,另一个是存储下一个结点地址的指针域</p><p>STL中的链表是一个双向循环链表</p><p>list中的迭代器只支持前移和后移,属于<code>双向迭代器</code></p><p>list优点:</p><ul><li>采用动态存储分配,不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便,修改指针即可,不需要移动大量元素</li></ul><p>list缺点:</p><ul><li>空间(指针域)和时间(遍历)耗费较大</li></ul><p>插入和删除操作都不会造成原有list迭代器的失效,这在vector中是不成立的</p><blockquote><p>STL中List和vector是最常使用的容器</p></blockquote><h5 id="list构造函数"><a href="#list构造函数" class="headerlink" title="list构造函数"></a>list构造函数</h5><p>功能:创建list容器</p><p>函数原型:</p><ul><li><code>list&lt;T&gt; lst;</code> //list采用模板类实现,对象的默认构造形式</li><li><code>list(beg,end);</code> //构造函数将[beg,end)区间的元素拷贝给本身</li><li><code>list(n,elem);</code> ////构造函数将n个elem拷贝给本身</li><li><code>list(const list &amp;lst);</code> //拷贝构造函数</li></ul><h5 id="list赋值和交换"><a href="#list赋值和交换" class="headerlink" title="list赋值和交换"></a>list赋值和交换</h5><p>功能:给list容器进行赋值,以及交换list容器</p><p>函数原型:</p><ul><li><code>assign(beg,end);</code> //将[beg,end)区间中的数据拷贝赋值给本身</li><li><code>assign(n,elem);</code> //将n个elem拷贝赋值给本身</li><li><code>list&amp; operator=(const list &amp;lst);</code> //重载等号操作符</li><li><code>swap(lst);</code> //将lst与本身元素互换</li></ul><h5 id="list大小操作"><a href="#list大小操作" class="headerlink" title="list大小操作"></a>list大小操作</h5><p>功能:对list容器的大小进行操作</p><p>函数原型:</p><ul><li><code>size();</code> //返回容器中元素的个数</li><li><code>empty();</code> //判断容器是否为空</li><li><code>resize(num);</code> //重新指定容器的长度为num。若容器变长,则以默认值填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li><li><code>resize(num,elem);</code> //重新指定容器的长度为num。若容器变长,则以elem填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li></ul><h5 id="list插入和删除"><a href="#list插入和删除" class="headerlink" title="list插入和删除"></a>list插入和删除</h5><p>功能:对list容器数据进行插入、删除操作</p><p>函数原型:</p><ul><li><code>push_back(elem);</code> //在容器尾部加入一个元素</li><li><code>pop_back();</code> //删除容器中最后一个元素</li><li><code>push_front(elem);</code> //在容器开头插入一个元素</li><li><code>pop_front();</code> //从容器开头移除第一个元素</li><li><code>insert(pos,elem);</code> //在pos位置插入elem元素的拷贝,返回新数据的位置</li><li><code>insert(pos,n,ele);</code> //在pos位置插入n个elem数据,无返回值</li><li><code>clear();</code> //删除容器中所有数据</li><li><code>erase(beg,end);</code> //删除[beg,end)区间的数据,返回下一个数据的位置</li><li><code>erase(pos);</code> //删除pos位置的数据,返回下一个数据的位置</li><li><code>remove(elem);</code> //删除容器中所有与elem值匹配的元素</li></ul><h5 id="list数据存取"><a href="#list数据存取" class="headerlink" title="list数据存取"></a>list数据存取</h5><p>功能:对list中的数据进行存取</p><p>函数原型:</p><ul><li><code>front();</code> //返回第一个元素</li><li><code>back();</code> //返回最后一个元素</li></ul><h5 id="list反转和排序"><a href="#list反转和排序" class="headerlink" title="list反转和排序"></a>list反转和排序</h5><p>功能:将容器中的元素反转,以及将容器中的数据进行排序</p><p>函数原型:</p><ul><li><code>reverse();</code> //反转链表</li><li><code>sort();</code> //链表排序</li></ul><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;list&gt;void printList(const list&lt;int&gt;&amp; l){  for (list&lt;int&gt;::const_iterator it = l.begin();it != l.end();it++)  {    cout &lt;&lt; *it &lt;&lt; " ";  }  cout &lt;&lt; endl;}void test01(){  //创建list容器  list&lt;int&gt;l1;  //添加数据  l1.push_back(10);  l1.push_back(20);  l1.push_back(30);  l1.push_back(40);  //遍历容器  printList(l1);  //区间方式构造  list&lt;int&gt;l2 (l1.begin(), l1.end());  printList(l2);  //拷贝构造  list&lt;int&gt;l3(l2);  printList(l3);  //n个elem  list&lt;int&gt;l4(10, 1000);  printList(l4);}//list赋值和交换void test02(){  //创建list容器  list&lt;int&gt;l1;  //添加数据  l1.push_back(10);  l1.push_back(20);  l1.push_back(30);  l1.push_back(40);  //遍历容器  printList(l1);  list&lt;int&gt;l2;  l2 = l1;  printList(l2);  list&lt;int&gt;l3;  l3.assign(l2.begin(), l2.end());  printList(l3);  list&lt;int&gt;l4;  l4.assign(10, 1000);  printList(l4);}//交换void test03(){  //创建list容器  list&lt;int&gt;l1;  //添加数据  l1.push_back(10);  l1.push_back(20);  l1.push_back(30);  l1.push_back(40);  list&lt;int&gt;l2;  l2.assign(10, 1000);  cout &lt;&lt; "交换前:" &lt;&lt; endl;  printList(l1);  printList(l2);  cout &lt;&lt; endl;  l1.swap(l2);  cout &lt;&lt; "交换后:" &lt;&lt; endl;  printList(l1);  printList(l2);}//list大小操作void test04(){  //创建list容器  list&lt;int&gt;l1;  //添加数据  l1.push_back(10);  l1.push_back(20);  l1.push_back(30);  l1.push_back(40);  if (l1.empty())  {    cout &lt;&lt; "l1为空" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "l1不为空" &lt;&lt; endl;    cout &lt;&lt; "l1的大小为:" &lt;&lt; l1.size() &lt;&lt; endl;  }  //重新指定大小  l1.resize(10);  printList(l1);  l1.resize(2);  printList(l1);}//list插入和删除void test05(){  //创建list容器  list&lt;int&gt;l1;  //尾插  l1.push_back(10);  l1.push_back(20);  l1.push_back(30);  //头插  l1.push_front(100);  l1.push_front(200);  l1.push_front(300);  printList(l1);  //尾删  l1.pop_back();  printList(l1);  //头删  l1.pop_front();  printList(l1);  //插入  list&lt;int&gt;::iterator it = l1.begin();  l1.insert(++it, 1000);  printList(l1);  //删除  it = l1.begin();  l1.erase(++it);//删除第二个元素  printList(l1);  //移除  l1.push_back(10000);  l1.push_back(10000);  l1.push_back(10000);  printList(l1);  l1.remove(10000);  printList(l1);  //清空  l1.clear();  printList(l1);}//list数据存取void test06(){  //创建list容器  list&lt;int&gt;l1;  //尾插  l1.push_back(10);  l1.push_back(20);  l1.push_back(30);  l1.push_back(40);  //cout&lt;&lt;l1.at(0)&lt;&lt;endl;//错误 不支持at访问数据  //cout&lt;&lt;l1[0]&lt;&lt;endl;//错误 不支持[]访问数据  cout &lt;&lt; "第一个元素:" &lt;&lt; l1.front() &lt;&lt; endl;  cout &lt;&lt; "最后一个元素:" &lt;&lt; l1.back() &lt;&lt; endl;  //list容器的迭代器是双向迭代器,不支持随机访问  list&lt;int&gt;::iterator it = l1.begin();  //it = it + 1;//错误 不可以跳跃访问 即使是+1}//list反转和排序bool myCompare(int val1, int val2){  return val1 &gt; val2;}void test07(){  //创建list容器  list&lt;int&gt;l1;  //尾插  l1.push_back(90);  l1.push_back(30);  l1.push_back(20);  l1.push_back(70);  printList(l1);  //反转  l1.reverse();  printList(l1);  //排序  l1.sort();//默认排序规则 从小到大  printList(l1);  l1.sort(myCompare);//指定规则 从大到小  printList(l1);}int main(){  test07();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-list容器排序"><a href="#案例-list容器排序" class="headerlink" title="案例: list容器排序"></a>案例: list容器排序</h5><p>案例描述:<br>将Person自定义数据类型进行排序,Person中属性有姓名、年龄、身高<br>排序规则: 按照年龄进行升序,如果年龄相同按照身高进行降序</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;list&gt;class Person{public:  Person(string name, int age, int height)  {    this-&gt;m_Name = name;    this-&gt;m_Age = age;    this-&gt;m_Height = height;  }  string m_Name;  int m_Age;  int m_Height;};//指定排序规则bool comparePerson(Person &amp;p1,Person &amp;p2){  if (p1.m_Age == p2.m_Age)  {    //年龄相同 身高降序    return p1.m_Height &gt; p2.m_Height;  }  else  {    //按照年龄升序    return p1.m_Age &lt; p2.m_Age;  }}void test01(){  list&lt;Person&gt;L;  //准备数据  Person p1("刘备", 35, 175);  Person p2("关羽", 45, 180);  Person p3("孙权", 40, 170);  Person p4("赵云", 25, 190);  Person p5("张飞", 35, 160);  Person p6("关羽", 35, 200);  //插入数据  L.push_back(p1);  L.push_back(p2);  L.push_back(p3);  L.push_back(p4);  L.push_back(p5);  L.push_back(p6);  for (list&lt;Person&gt;::iterator it = L.begin();it != L.end();it++)  {    cout &lt;&lt; "姓名: " &lt;&lt; (*it).m_Name &lt;&lt;       " 年龄: " &lt;&lt; it-&gt;m_Age &lt;&lt;       " 身高: " &lt;&lt; it-&gt;m_Height &lt;&lt; endl;  }  //排序  cout &lt;&lt; "排序后:" &lt;&lt; endl;  L.sort(comparePerson);  for (list&lt;Person&gt;::iterator it = L.begin();it != L.end();it++)  {    cout &lt;&lt; "姓名: " &lt;&lt; (*it).m_Name &lt;&lt;      " 年龄: " &lt;&lt; it-&gt;m_Age &lt;&lt;      " 身高: " &lt;&lt; it-&gt;m_Height &lt;&lt; endl;  }}int main(){  test01();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-8-set-multiset容器"><a href="#3-2-8-set-multiset容器" class="headerlink" title="3.2.8 set/multiset容器"></a>3.2.8 set/multiset容器</h4><p>set:<br>所有元素都会在插入时被排序</p><p>本质:set/multiset属于<code>关联式容器</code>,底层结构是用<code>二叉树</code>实现的</p><p>set与multiset区别:</p><ul><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul><h5 id="set构造和赋值"><a href="#set构造和赋值" class="headerlink" title="set构造和赋值"></a>set构造和赋值</h5><p>功能:创建set容器以及赋值</p><p>构造:</p><ul><li><code>set&lt;T&gt; st;</code> //默认构造函数</li><li><code>set(const set &amp;st);</code> //拷贝构造函数</li></ul><p>赋值:</p><ul><li><code>set&amp; operator=(const set &amp;st);</code> //重载等号操作符</li></ul><h5 id="set大小和交换"><a href="#set大小和交换" class="headerlink" title="set大小和交换"></a>set大小和交换</h5><p>功能:统计set容器大小以及交换set容器</p><p>函数原型:</p><ul><li><code>size();</code> //返回容器中元素的数目</li><li><code>empty();</code> //判断容器是否为空</li><li><code>swap(st);</code> //交换俩个集合容器</li></ul><h5 id="set插入和删除"><a href="#set插入和删除" class="headerlink" title="set插入和删除"></a>set插入和删除</h5><p>功能:set容器进行插入和删除数据</p><p>函数原型:</p><ul><li><code>insert(elem);</code> //在容器中插入元素</li><li><code>clear();</code> //清除所有元素</li><li><code>erase(pos);</code> //删除pos迭代器所指的元素,返回下一个元素的迭代器</li><li><code>erase(beg,end);</code> //删除区间[beg,end)的所有元素,返回下一个元素的迭代器</li><li><code>erase(elem);</code> //删除容器中值为elem的元素</li></ul><h5 id="set查找和统计"><a href="#set查找和统计" class="headerlink" title="set查找和统计"></a>set查找和统计</h5><p>功能:对set容器进行查找数据以及统计数据</p><p>函数原型:</p><ul><li><code>find(key);</code> //查找key是否存在,若存在返回该键的元素的迭代器;若不存在返回set.end();</li><li><code>count(key);</code> //统计key的元素个数</li></ul><h5 id="set与multiset区别"><a href="#set与multiset区别" class="headerlink" title="set与multiset区别"></a>set与multiset区别</h5><p>区别:</p><ul><li>set不允许插入重复元素,而multiset可以</li><li>set插入数据的同时会返回插入结果,表示插入是否成功</li><li>multiset不会检测数据,因此可以插入重复数据</li></ul><h5 id="pair对组创建"><a href="#pair对组创建" class="headerlink" title="pair对组创建"></a>pair对组创建</h5><p>功能:成对出现的数据,利用对组可以返回俩个数据</p><p>创建方式:</p><ul><li><code>pair&lt;type,type&gt; p (value1,value2);</code></li><li><code>pair&lt;type,type&gt; p = make_pair(value1,value2);</code></li></ul><h5 id="set容器排序"><a href="#set容器排序" class="headerlink" title="set容器排序"></a>set容器排序</h5><p>1.内置数据类型</p><p>2.自定义数据类型</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;set&gt;#include&lt;string&gt;void printSet(set&lt;int&gt;&amp; s){  for (set&lt;int&gt;::iterator it = s.begin();it != s.end();it++)  {    cout &lt;&lt; *it &lt;&lt; " ";  }  cout &lt;&lt; endl;}//set构造和赋值void test01(){  set&lt;int&gt;s1;  //插入数据只有insert方法  s1.insert(10);  s1.insert(20);  s1.insert(40);  s1.insert(30);  //遍历容器  //set容器特点:所有元素插入时候自动排序  //不允许插入重复值  printSet(s1);  //拷贝构造  set&lt;int&gt;s2(s1);  printSet(s2);  //赋值  set&lt;int&gt;s3;  s3 = s2;  printSet(s3);}//set大小和交换void test02(){  set&lt;int&gt;s1;  //插入数据只有insert方法  s1.insert(10);  s1.insert(20);  s1.insert(40);  s1.insert(30);  if (s1.empty())  {    cout &lt;&lt; "s1为空" &lt;&lt; endl;  }  else {    cout &lt;&lt; "s1不为空" &lt;&lt; endl;    cout &lt;&lt; "s1大小为:" &lt;&lt; s1.size() &lt;&lt; endl;  }  set&lt;int&gt;s2;  s2.insert(1);  s2.insert(2);  s2.insert(9);  s2.insert(3);  cout &lt;&lt; "交换前:" &lt;&lt; endl;  printSet(s1);  printSet(s2);  cout &lt;&lt; "交换后:" &lt;&lt; endl;  s1.swap(s2);  printSet(s1);  printSet(s2);}//set插入和删除void test03(){  set&lt;int&gt;s1;  //插入数据只有insert方法  s1.insert(10);  s1.insert(20);  s1.insert(40);  s1.insert(30);  printSet(s1);  //删除 排序后的  s1.erase(s1.begin());  printSet(s1);  s1.erase(30);  printSet(s1);  //清空  //s1.erase(s1.begin(), s1.end());  s1.clear();  printSet(s1);}//set查找和统计void test04(){  set&lt;int&gt;s1;  //插入数据只有insert方法  s1.insert(10);  s1.insert(20);  s1.insert(40);  s1.insert(30);  s1.insert(30);  s1.insert(30);  printSet(s1);  set&lt;int&gt;::iterator pos = s1.find(30);  if (pos != s1.end()) {    cout &lt;&lt; "找到元素:" &lt;&lt; *pos &lt;&lt; endl;  }  else  {    cout &lt;&lt; "没找到" &lt;&lt; endl;  }  //统计30 的个数 对于set而言结果只能为0或者1  int num = s1.count(30);  cout &lt;&lt; num &lt;&lt; endl;}//set与multiset区别void test05(){  set&lt;int&gt;s1;  //插入数据只有insert方法  pair&lt;set&lt;int&gt;::iterator,bool&gt; ret =  s1.insert(10);  if (ret.second)  {    cout &lt;&lt; "第一次插入成功" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "第一次插入失败" &lt;&lt; endl;  }  ret = s1.insert(10);  if (ret.second)  {    cout &lt;&lt; "第二次插入成功" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "第二次插入失败" &lt;&lt; endl;  }  multiset&lt;int&gt;ms;  ms.insert(10);  ms.insert(10);  for (multiset&lt;int&gt;::iterator it = ms.begin();it != ms.end();it++)  {    cout &lt;&lt; *it &lt;&lt; " ";  }  cout &lt;&lt; endl;}//pair对组创建void test06(){  //1  pair&lt;string, int&gt;p1("Tom", 20);  cout &lt;&lt; "姓名:" &lt;&lt; p1.first &lt;&lt; "年龄:" &lt;&lt; p1.second &lt;&lt; endl;  //2  pair&lt;string, int&gt;p2 = make_pair("Jory", 18);  cout &lt;&lt; "姓名:" &lt;&lt; p2.first &lt;&lt; "年龄:" &lt;&lt; p2.second &lt;&lt; endl;}//set排序//内置数据类型class MyCompare{public:  bool operator()(int v1,int v2) const  {    return v1 &gt; v2;  }};void test07(){  set&lt;int&gt;s1;  s1.insert(10);  s1.insert(40);  s1.insert(20);  s1.insert(50);  s1.insert(30);  printSet(s1);  //指定排序规则为从大到小 在插数据之前  set&lt;int,MyCompare&gt;s2;  s2.insert(10);  s2.insert(40);  s2.insert(20);  s2.insert(50);  s2.insert(30);  for (set&lt;int, MyCompare&gt;::iterator it = s2.begin();it != s2.end();it++)  {    cout &lt;&lt; *it &lt;&lt; " ";  }  cout &lt;&lt; endl;}//自定义数据类型class Person{public:  Person(string name, int age)  {    this-&gt;m_Name = name;    this-&gt;m_Age = age;  }  string m_Name;  int m_Age;};class comparePerson{public:  bool operator()(const Person&amp; p1, const Person&amp; p2) const  {    //按照年龄降序    return p1.m_Age &gt; p2.m_Age;  }};void test08(){  //自定义数据类型都会指定排序规则  set&lt;Person,comparePerson&gt;s;  Person p1("刘备", 24);  Person p2("关羽", 28);  Person p3("张飞", 25);  Person p4("赵云", 21);  s.insert(p1);  s.insert(p2);  s.insert(p3);  s.insert(p4);  for (set&lt;Person,comparePerson&gt;::iterator it = s.begin();it != s.end();it++)  {    cout &lt;&lt; "姓名:" &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄:" &lt;&lt; it-&gt;m_Age &lt;&lt; endl;;  }}int main(){  test08();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-9-map-multimap容器"><a href="#3-2-9-map-multimap容器" class="headerlink" title="3.2.9 map/multimap容器"></a>3.2.9 map/multimap容器</h4><ul><li>map中所有元素都是pair</li><li>pair中第一个元素位key(键值),起索引作用,第二个元素为value(实值)</li><li>所有元素都会根据元素的键值自动排序</li></ul><p>本质: map/multimap属于<code>关联式容器</code>,底层结构是用二叉树实现</p><p>优点:</p><ul><li>可以根据key值快速找到value值</li></ul><p>map和multimap区别:</p><ul><li>map不允许容器中有重复的key值元素</li><li>multimap允许容器中有重复的key值元素</li></ul><h5 id="map构造和赋值"><a href="#map构造和赋值" class="headerlink" title="map构造和赋值"></a>map构造和赋值</h5><p>功能:对map容器进行构造和赋值操作</p><p>构造:</p><ul><li><code>map&lt;T1,T2&gt; mp;</code> //默认构造函数</li><li><code>map(const map &amp;mp);</code> //拷贝构造函数</li></ul><p>赋值:</p><ul><li><code>map&amp; operator=(const map &amp;map);</code> //重载等号操作符</li></ul><h5 id="map大小和交换"><a href="#map大小和交换" class="headerlink" title="map大小和交换"></a>map大小和交换</h5><p>功能:统计map容器大小以及交换map容器</p><p>函数原型:</p><ul><li><code>size();</code> //返回容器中元素的数目</li><li><code>empty();</code> //判断容器是否为空</li><li><code>swap(st);</code> //交换俩个集合容器</li></ul><h5 id="map插入和删除"><a href="#map插入和删除" class="headerlink" title="map插入和删除"></a>map插入和删除</h5><p>功能:map容器进行插入和删除数据</p><p>函数原型:</p><ul><li><code>insert(elem);</code> //在容器中插入元素</li><li><code>clear();</code> //清除所有元素</li><li><code>erase(pos);</code> //删除pos迭代器所指的元素,返回下一个元素的迭代器</li><li><code>erase(beg,end);</code> //删除区间[beg,end)的所有元素,返回下一个元素的迭代器</li><li><code>erase(key);</code> //删除容器中值为key的元素</li></ul><h5 id="map查找和统计"><a href="#map查找和统计" class="headerlink" title="map查找和统计"></a>map查找和统计</h5><p>功能:对map容器进行查找数据以及统计数据</p><p>函数原型:</p><ul><li><code>find(key);</code> //查找key是否存在,若存在返回该键的元素的迭代器;若不存在返回map.end();</li><li><code>count(key);</code> //统计key的元素个数</li></ul><h5 id="map容器排序"><a href="#map容器排序" class="headerlink" title="map容器排序"></a>map容器排序</h5><p>默认按照key值进行从小到大排序</p><p>利用仿函数</p><p>代码:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;map&gt;#include&lt;string&gt;void printMap(map&lt;int, int&gt;&amp; m){  for (map&lt;int, int&gt;::iterator it = m.begin();it != m.end();it++)  {    cout &lt;&lt; "key = " &lt;&lt; (*it).first &lt;&lt; " value = " &lt;&lt; it-&gt;second &lt;&lt; endl;  }  cout &lt;&lt; endl;}//map构造和赋值void test01(){  //创建map容器  map&lt;int, int&gt;m;  m.insert(pair&lt;int, int&gt;(1, 10));  m.insert(pair&lt;int, int&gt;(2, 20));  m.insert(pair&lt;int, int&gt;(3, 30));  m.insert(pair&lt;int, int&gt;(4, 40));  printMap(m);  //拷贝构造  map&lt;int, int&gt;m2(m);  printMap(m2);  map&lt;int, int&gt;m3;  m3 = m2;  printMap(m3);}//map大小和交换void test02(){  //创建map容器  map&lt;int, int&gt;m;  m.insert(pair&lt;int, int&gt;(1, 10));  m.insert(pair&lt;int, int&gt;(2, 20));  m.insert(pair&lt;int, int&gt;(3, 30));  m.insert(pair&lt;int, int&gt;(4, 40));  if (m.empty())  {    cout &lt;&lt; "m为空" &lt;&lt; endl;  }  else  {    cout &lt;&lt; "m不为空" &lt;&lt; endl;    cout &lt;&lt; "m的大小为:" &lt;&lt; m.size() &lt;&lt; endl;  }  map&lt;int, int&gt;m2;  m2.insert(pair&lt;int, int&gt;(1, 230));  m2.insert(pair&lt;int, int&gt;(2, 130));  m2.insert(pair&lt;int, int&gt;(3, 340));  m2.insert(pair&lt;int, int&gt;(4, 240));  cout &lt;&lt; "交换前:" &lt;&lt; endl;  printMap(m);  printMap(m2);  cout &lt;&lt; "交换后:" &lt;&lt; endl;  m.swap(m2);  printMap(m);  printMap(m2);}//map插入和删除void test03(){  //创建map容器  map&lt;int, int&gt;m;  //插入4种方式  m.insert(pair&lt;int, int&gt;(1, 10));  m.insert(make_pair(2, 20));  m.insert(map&lt;int, int&gt;::value_type(3, 30));  //[]不建议去插入 可以使用[]通过key访问value  m[4] = 40;  printMap(m);  //删除  m.erase(m.begin());  printMap(m);  m.erase(3);//按照key删除  printMap(m);  //清空  //m.erase(m.begin(), m.end());  m.clear();  printMap(m);}//map查找和统计void test04(){  map&lt;int, int&gt;m;  m.insert(pair&lt;int, int&gt;(1, 10));  m.insert(pair&lt;int, int&gt;(2, 20));  m.insert(pair&lt;int, int&gt;(3, 30));  map&lt;int, int&gt;::iterator pos = m.find(3);  if (pos != m.end())  {    cout &lt;&lt; "找到元素: key = " &lt;&lt; (*pos).first &lt;&lt; " value = " &lt;&lt; pos-&gt;second &lt;&lt; endl;  }  else  {    cout &lt;&lt; "未找到元素" &lt;&lt; endl;  }  //统计 结果只能为0或1 因为map不允许插入重复key  //multimap的统计结果可能大于1  int num = m.count(3);  cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;}//map容器排序class MyCompare{public:  bool operator()(int v1,int v2) const  {    //降序    return v1 &gt; v2;  }};void test05(){  //在插入数据前修改排序规则  map&lt;int, int,MyCompare&gt;m;  m.insert(pair&lt;int, int&gt;(1, 10));  m.insert(pair&lt;int, int&gt;(2, 20));  m.insert(pair&lt;int, int&gt;(3, 30));    m.insert(pair&lt;int, int&gt;(4, 40));    m.insert(pair&lt;int, int&gt;(5, 50));    for (map&lt;int, int, MyCompare&gt;::iterator it = m.begin();it != m.end();it++)  {    cout &lt;&lt; "key = " &lt;&lt; it-&gt;first &lt;&lt; " value = " &lt;&lt; it-&gt;second &lt;&lt; endl;  }  cout &lt;&lt; endl;}int main(){  test05();  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="案例-员工分组"><a href="#案例-员工分组" class="headerlink" title="案例: 员工分组"></a>案例: 员工分组</h5><p>案例描述:</p><ul><li>公司今天招聘了10个员工(ABCDEFGHIJ),10名员工进入公司之后,需要指派员工去哪个部门工作</li><li>员工信息有:姓名、工资组成;部门分为:策划、美术、研发</li><li>随机给10名员工分配部门和工资</li><li>通过multimap进行信息的插入 key(部门编号) value(员工)</li><li>分部门显示员工信息</li></ul><p>步骤:<br>1.创建10名员工,放到vector中<br>2.遍历vector容器,取出每个员工,进行随机分组<br>3.分组后将员工部门编号作为key,具体员工为value,放入到multimap容器中<br>4.分部门显示员工信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include&lt;vector&gt;#include&lt;string&gt;#include&lt;map&gt;#include&lt;ctime&gt;#define CEHUA 0#define MEISHU 1#define YANFA 2class Worker{public:  string m_Name;  int m_Salary;};void createWorker(vector&lt;Worker&gt;&amp;v){  string nameSeed = "ABCDEFGHIJ";  for (int i = 0;i &lt; 10;i++)  {    Worker worker;    worker.m_Name = "员工";    worker.m_Name += nameSeed[i];    worker.m_Salary = rand() % 10000 + 10000;//10000~19999    //将员工放入容器中    v.push_back(worker);  }}void setGroup(vector&lt;Worker&gt;&amp; v, multimap&lt;int, Worker&gt;&amp; m){  for (vector&lt;Worker&gt;::iterator it = v.begin();it != v.end();it++)  {    //产生随机编号    int deptId = rand() % 3;    m.insert(make_pair(deptId, *it));  }}void showWorkerByGroup(multimap&lt;int, Worker&gt;&amp; m){  cout &lt;&lt; "策划部门:" &lt;&lt; endl;  multimap&lt;int, Worker&gt;::iterator pos = m.find(CEHUA);  int count = m.count(CEHUA);//统计具体人数  int index = 0;  for (;pos != m.end() &amp;&amp; index &lt; count;pos++, index++)  {    cout &lt;&lt; "姓名: " &lt;&lt; pos-&gt;second.m_Name &lt;&lt; " 工资: " &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;  }  cout &lt;&lt; "美术部门:" &lt;&lt; endl;  pos = m.find(MEISHU);  count = m.count(MEISHU);//统计具体人数  index = 0;  for (;pos != m.end() &amp;&amp; index &lt; count;pos++, index++)  {    cout &lt;&lt; "姓名: " &lt;&lt; pos-&gt;second.m_Name &lt;&lt; " 工资: " &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;  }  cout &lt;&lt; "研发部门:" &lt;&lt; endl;  pos = m.find(YANFA);  count = m.count(YANFA);//统计具体人数  index = 0;  for (;pos != m.end() &amp;&amp; index &lt; count;pos++, index++)  {    cout &lt;&lt; "姓名: " &lt;&lt; pos-&gt;second.m_Name &lt;&lt; " 工资: " &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;  }}int main(){  srand((unsigned int)time(NULL));  //1.创建员工  vector&lt;Worker&gt;vWorker;  createWorker(vWorker);  //2.员工分组  multimap&lt;int, Worker&gt;mWorker;  setGroup(vWorker,mWorker);  //3.分组显示员工  showWorkerByGroup(mWorker);  system("pause");  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-STL函数对象"><a href="#3-3-STL函数对象" class="headerlink" title="3.3 STL函数对象"></a>3.3 STL函数对象</h3><p>概念:</p><ul><li>重载函数调用操作符的类,其对象常称为函数对象</li><li>函数对象使用<code>重载的()</code>时,行为类似函数调用,也叫仿函数</li></ul><p>本质:函数对象是一个类,不是一个函数</p><p>使用特点:</p><ul><li>函数对象在使用时,可以像普通函数那样调用,可以有参数和返回值</li><li>函数对象超出普通函数概念,函数对象可以有自己的状态<ul><li>可以使用成员属性记录状态</li></ul></li><li>函数对象可以作为参数传递</li></ul><h4 id="3-3-1-谓词"><a href="#3-3-1-谓词" class="headerlink" title="3.3.1 谓词"></a>3.3.1 谓词</h4><p>概念:</p><ul><li>返回<code>bool类型</code>的仿函数称为谓词</li><li>如果operator()接收一个参数,那么就叫一元谓词</li><li>如果operator()接收二个参数,那么就叫二元谓词</li></ul><h4 id="3-3-2-内建函数对象"><a href="#3-3-2-内建函数对象" class="headerlink" title="3.3.2 内建函数对象"></a>3.3.2 内建函数对象</h4><p>概念:STL内建了一些函数对象</p><p>分类:</p><ul><li>算术仿函数</li><li>关系仿函数</li><li>逻辑仿函数</li></ul><p>用法:</p><ul><li>这些仿函数所产生的对象用法和一般函数完全相同</li><li>使用内建函数对象,需要引入头文件<code>#include&lt;functional&gt;</code></li></ul><h5 id="算术仿函数"><a href="#算术仿函数" class="headerlink" title="算术仿函数"></a>算术仿函数</h5><p>功能描述:</p><ul><li>实现四则运算</li><li>其中negate是一元运算,其他都是二元运算</li></ul><p>仿函数原型:</p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt;</code> //加法仿函数</li><li><code>template&lt;class T&gt; T minus&lt;T&gt;</code> //减法仿函数</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code> //乘法仿函数</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;</code> //除法仿函数</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code> //取模仿函数</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;</code> //取反仿函数</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//一元运算 negatenegate&lt;int&gt;n;cout &lt;&lt; n(50) &lt;&lt; endl;//二元运算 plusplus&lt;int&gt;p;cout &lt;&lt; p(10, 20) &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="关系仿函数"><a href="#关系仿函数" class="headerlink" title="关系仿函数"></a>关系仿函数</h5><p>功能描述:</p><ul><li>实现关系比较</li></ul><p>仿函数原型:</p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code> //等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code> //不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code> //大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code> //大于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;</code> //小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code> //小于等于</li></ul><h5 id="逻辑仿函数"><a href="#逻辑仿函数" class="headerlink" title="逻辑仿函数"></a>逻辑仿函数</h5><p>功能描述:</p><ul><li>实现逻辑运算</li></ul><p>仿函数原型:</p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code> //逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code> //逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code> //逻辑非</li></ul><h3 id="3-4-STL常用算法"><a href="#3-4-STL常用算法" class="headerlink" title="3.4 STL常用算法"></a>3.4 STL常用算法</h3><p>概述:</p><ul><li>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code> 组成</li><li><code>&lt;algorithm&gt;</code> 是所有STL头文件中最大的一个,范围涉及到比较、交换、查找、遍历操作、复制、修改等等</li><li><code>&lt;functional&gt;</code> 体积很小,只包括几个在序列上面进行的简单数学运算的模板函数</li><li><code>&lt;numeric&gt;</code> 定义了一些模板类,用以声明函数对象</li></ul><h4 id="3-4-1-常用遍历算法"><a href="#3-4-1-常用遍历算法" class="headerlink" title="3.4.1 常用遍历算法"></a>3.4.1 常用遍历算法</h4><ul><li><code>for_each</code> //遍历容器</li></ul><p>函数原型:</p><ul><li><p><code>for_each(iterator beg,iterator end,_func);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>_func</code>函数或者函数对象</p></li><li><p><code>transform</code> //搬运容器到另一个容器</p><p>函数原型:</p><ul><li><code>transform(iterator beg1,iterator end1,iterator beg2,_func);</code><br>//<code>beg1</code>源容器开始迭代器<br>//<code>end1</code>源容器结束迭代器<br>//<code>beg2</code>目标容器开始迭代器<br>//<code>_func</code>函数或者函数对象</li></ul></li></ul><p>目标容器需要提前开辟空间</p><h4 id="3-4-2-常用查找算法"><a href="#3-4-2-常用查找算法" class="headerlink" title="3.4.2 常用查找算法"></a>3.4.2 常用查找算法</h4><ul><li><p><code>find</code> //查找元素</p><p>函数原型:</p><ul><li><code>find(iterator beg,iterator end,value);</code><br>//按值查找元素,找到返回指定位置迭代器,找不到返回结束迭代器位置<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>value</code>查找的元素</li></ul></li><li><p><code>find_if</code> //按条件查找元素</p><p>函数原型:</p><ul><li><code>find_if(iterator beg,iterator end,_Pred);</code><br>//按值查找元素,找到返回指定位置迭代器,找不到返回结束迭代器位置<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>_Pred</code>函数或者谓词(返回bool类型的仿函数)</li></ul></li><li><p><code>adjacent_find</code> //查找相邻重复元素</p><p>函数原型:</p><ul><li><code>adjacent_find(iterator beg,iterator end);</code><br>//查找相邻重复元素,返回相邻元素的第一个位置的迭代器<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器</li></ul></li><li><p><code>binary_search</code> //二分查找法</p><p>函数原型:</p><ul><li><code>bool binary_search(iterator beg,iterator end,value);</code><br>//查找指定的元素 找到返回true 否则返回false<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>value</code>查找的元素</li></ul></li><li><p><code>count</code> //统计元素个数</p><p>函数原型:</p><ul><li><code>count(iterator beg,iterator end,value);</code><br>//统计元素出现次数<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>value</code>统计的元素</li></ul></li><li><p><code>count_if</code> //按条件统计元素个数</p><p>函数原型:</p><ul><li><code>count_if(iterator beg,iterator end,_Pred);</code><br>//按条件统计元素出现次数<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>_Pred</code>谓词</li></ul></li></ul><h4 id="3-4-3-常用排序算法"><a href="#3-4-3-常用排序算法" class="headerlink" title="3.4.3 常用排序算法"></a>3.4.3 常用排序算法</h4><ul><li><p><code>sort</code> //对容器内元素进行排序</p><p>函数原型:</p><ul><li><code>sort(iterator beg,iterator end,_Pred);</code><br>//对容器内元素进行排序<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>_Pred</code>谓词</li></ul></li><li><p><code>random_shuffle</code> //洗牌 指定范围内的元素随机调整次序</p><p>函数原型:</p><ul><li><code>random_shuffle(iterator beg,iterator end);</code><br>//指定范围内的元素随机调整次序<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器</li></ul><p>可以添加随机数种子: <code>srand((unsigned int)time(NULL))</code></p></li><li><p><code>merge</code> //容器元素合并,并存储到另一个容器中</p><p>函数原型:</p><ul><li><code>merge(iterator beg1,iterator end1,iterator beg2,iterator end2,iterator dest);</code><br>//注意:俩个容器必须是有序且一致(同升同降)的<br>//<code>beg1</code>容器1开始迭代器<br>//<code>end1</code>容器1结束迭代器<br>//<code>beg2</code>容器2开始迭代器<br>//<code>end2</code>容器2结束迭代器<br>//目标容器需要提前分配空间<br>//<code>dest</code>目标容器开始迭代器</li></ul></li><li><p><code>reverse</code> //反转指定范围的元素</p><p>函数原型:</p><ul><li><code>reverse(iterator beg,iterator end);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器</li></ul></li></ul><h4 id="3-4-4-常用拷贝和构造算法"><a href="#3-4-4-常用拷贝和构造算法" class="headerlink" title="3.4.4 常用拷贝和构造算法"></a>3.4.4 常用拷贝和构造算法</h4><ul><li><p><code>copy</code> //容器内指定范围的元素拷贝到另一个容器中</p><p>函数原型:</p><ul><li><code>copy(iterator beg,iterator end,iterator dest);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//目标容器需要提前分配空间<br>//<code>dest</code>目标容器起始迭代器</li></ul></li><li><p><code>replace</code> //将容器内指定范围的旧元素修改为新元素</p><p>函数原型:</p><ul><li><code>replace(iterator beg,iterator end,oldvalue,newvalue);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>oldvalue</code>旧元素<br>//<code>newvalue</code>新元素</li></ul></li><li><p><code>replace_if</code> //容器内指定范围满足条件的元素替换为新元素</p><p>函数原型:</p><ul><li><code>replace_if(iterator beg,iterator end,_pred,newvalue);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>_pred</code>谓词<br>//<code>newvalue</code>新元素</li></ul></li><li><p><code>swap</code> //互换俩个容器的元素</p><p>函数原型:</p><ul><li><code>swap(container c1,container c2);</code><br>//注意c1、c2必须为同一种容器<br>//<code>c1</code>容器1<br>//<code>c2</code>容器2</li></ul></li></ul><h4 id="3-4-5-常用算术生成算法"><a href="#3-4-5-常用算术生成算法" class="headerlink" title="3.4.5 常用算术生成算法"></a>3.4.5 常用算术生成算法</h4><p>包含头文件<code>#include&lt;numeric&gt;</code></p><ul><li><p><code>accumulate</code> //计算容器元素累计总和</p><p>函数原型:</p><ul><li><code>accumulate(iterator beg,iterator end,value);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>value</code>起始值</li></ul></li><li><p><code>fill</code> //向容器中添加元素</p><p>函数原型:</p><ul><li><code>fill(iterator beg,iterator end,value);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>value</code>填充的值</li></ul></li></ul><h4 id="3-4-6-常用集合算法"><a href="#3-4-6-常用集合算法" class="headerlink" title="3.4.6 常用集合算法"></a>3.4.6 常用集合算法</h4><ul><li><p><code>set_intersection</code> //求俩个容器的交集</p><p>函数原型:</p><ul><li><code>set_intersection(iterator beg1,iterator end1,iterator beg2,iterator end2,iterator dest);</code><br>//注意:俩个容器必须是有序序列且一致(同升同降)的<br>//<code>beg1</code>容器1开始迭代器<br>//<code>end1</code>容器1结束迭代器<br>//<code>beg2</code>容器2开始迭代器<br>//<code>end2</code>容器2结束迭代器<br>//目标容器需要提前分配空间 resize<br>//最特殊情况  大容器包含小容器 开辟空间 取小容器size即可: <code>resize(min(v1.size(),v2.size()));</code><br>//遍历时结束迭代器使用返回回来的迭代器<code>dest</code><br>//<code>dest</code>目标容器开始迭代器</li></ul></li><li><p><code>set_union</code> //求俩个容器的并集</p><p>函数原型:</p><ul><li><code>set_union(iterator beg1,iterator end1,iterator beg2,iterator end2,iterator dest);</code><br>//注意:俩个容器必须是有序序列且一致(同升同降)的<br>//<code>beg1</code>容器1开始迭代器<br>//<code>end1</code>容器1结束迭代器<br>//<code>beg2</code>容器2开始迭代器<br>//<code>end2</code>容器2结束迭代器<br>//目标容器需要提前分配空间 resize<br>//最特殊情况  俩容器没有交集 开辟空间 取俩容器size之和即可: <code>resize(v1.size()+v2.size());</code><br>//遍历时结束迭代器使用返回回来的迭代器<code>dest</code><br>//<code>dest</code>目标容器开始迭代器</li></ul></li><li><p><code>set_difference</code> //求俩个容器的差集</p><p>函数原型:</p><ul><li><code>set_union(iterator beg1,iterator end1,iterator beg2,iterator end2,iterator dest);</code><br>//注意:俩个容器必须是有序序列且一致(同升同降)的<br>//<code>beg1</code>容器1开始迭代器<br>//<code>end1</code>容器1结束迭代器<br>//<code>beg2</code>容器2开始迭代器<br>//<code>end2</code>容器2结束迭代器<br>//目标容器需要提前分配空间 resize<br>//最特殊情况  俩容器没有交集 开辟空间 取大容器size即可: <code>resize(max(v1.size(),v2.size());</code><br>//遍历时结束迭代器使用返回回来的迭代器<code>dest</code><br>//<code>dest</code>目标容器开始迭代器</li></ul></li></ul><h5 id="案例-演讲比赛流程管理系统"><a href="#案例-演讲比赛流程管理系统" class="headerlink" title="案例: 演讲比赛流程管理系统"></a>案例: 演讲比赛流程管理系统</h5><p>比赛规则:</p><ul><li>学校举行一场演讲比赛,共有<code>12人</code>参加。<code>比赛共俩轮</code>,第一轮为淘汰赛,第二轮为决赛</li><li>每名选手都有对应的<code>编号</code>:如10001 ~ 10012</li><li>比赛方式:<code>分组比赛每组6人</code></li><li>每一轮分为俩个小组,整体按照选手编号进行<code>抽签</code>后顺序演讲</li><li>十个评委分别给每个选手打分,去除最高分和最低分,求的平均分为本轮选手的成绩</li><li>当小组演讲完后,淘汰组内排名最后的三个选手,<code>前三名晋级</code>,进入下一轮比赛</li><li>第二轮为决赛,<code>前三名胜出</code></li><li>每轮比赛过后需要<code>显示晋级选手的信息</code></li></ul><p>程序功能:</p><ul><li>开始演讲比赛:完成整届比赛的流程,每个比赛阶段需要给用户一个提示,用户按任意键后继续下一个阶段</li><li>查看往届记录:查看之前比赛前三名结果,每次比赛都会记录到文件中,文件用.csv后缀名保存</li><li>清空比赛记录:将文件中数据清空</li><li>退出比赛程序:可以退出当前程序</li></ul><p><a href="https://github.com/liaojie1314/SpeechSystem">代码</a></p><h5 id="机房预约系统"><a href="#机房预约系统" class="headerlink" title="机房预约系统"></a>机房预约系统</h5><p>身份简介</p><ul><li>学生代表:申请使用机房</li><li>教师:审核学生的预约申请</li><li>管理员:给学生老师创建账号</li></ul><p>机房简介</p><ul><li>1号机房:最大容量20人</li><li>2号机房:最大容量50人</li><li>3号机房:最大容量100人</li></ul><p>申请简介</p><ul><li>申请的订单每周由管理员清空</li><li>学生可以预约未来一周内的机房使用,预约的日期为周一至周五,预约时需要选择时间段(上午、下午)</li><li>教师来审核预约,依据实际情况审核预约通过或者不通过</li></ul><p>系统具体要求</p><ul><li>首先进入登录界面,可选身份有:<ul><li>学生代表</li><li>老师</li><li>管理员</li><li>退出</li></ul></li><li>每个身份都需要进型验证后,进入子菜单<ul><li>学生需要输入:学号、姓名、登录密码</li><li>老师需要输入:职工号、姓名、登录密码</li><li>学生需要输入:管理员姓名、登录密码</li></ul></li><li>学生具体功能<ul><li>申请预约 — 预约机房</li><li>查看自身的预约 — 查看自身的预约状态</li><li>查看所有预约 — 查看全部预约信息以及预约状态</li><li>取消预约 — 取消自身的预约,预约成功或审核中的预约都可以取消</li><li>注销登录 — 退出登录</li></ul></li><li>教师具体功能<ul><li>查看所有预约 — 查看全部预约信息以及预约状态</li><li>审核预约 — 对学生的预约进行审核</li><li>注销登录 — 退出登录</li></ul></li><li>管理员具体功能<ul><li>添加账号 — 添加学生或教师账号,需要检测学生编号和教师职工编号是否重复</li><li>查看账号 — 可以选择查看学生或老师的全部信息</li><li>查看机房 — 查看所有机房的消息</li><li>清空预约 — 清空所有预约记录</li><li>注销登录 — 退出登录</li></ul></li></ul><p><a href="https://github.com/liaojie1314/ComputerRoomReservationSystem/tree/master">代码</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter notebook安装</title>
      <link href="/liaojie.github.io/2021/12/29/jupyter-notebook-an-zhuang/"/>
      <url>/liaojie.github.io/2021/12/29/jupyter-notebook-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>首先找到python-&gt;Scripts目录下,在该目录下执行<code>cmd</code>命令</p><p>安装:</p><blockquote><p>pip install jupyter notebook</p></blockquote><p>初始化jupyter notebook</p><blockquote><p>jupyter notebook –generate-config</p></blockquote><p>找到Default config位置,修改jupyter_notebook_config.py文件,使用记事本打开,找到<code># c.NotebookApp.notebook_dir = ''</code>,去掉注释<code>#</code>,将你的工作目录放在<code>''</code>中保存即可。</p>]]></content>
      
      
      <categories>
          
          <category> 安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter-notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy</title>
      <link href="/liaojie.github.io/2021/12/15/numpy/"/>
      <url>/liaojie.github.io/2021/12/15/numpy/</url>
      
        <content type="html"><![CDATA[<h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h2 id="Numpy优势"><a href="#Numpy优势" class="headerlink" title="Numpy优势"></a>Numpy优势</h2><h3 id="Numpy介绍"><a href="#Numpy介绍" class="headerlink" title="Numpy介绍"></a>Numpy介绍</h3><p>Numpy（Numerical Python）是一个开源的Python科学计算库，用于快速处理任意维度的数组。</p><p>Numpy支持常见的数组和矩阵操作。对于同样的数值计算任务，使用Numpy比直接使用Python要简洁的多。</p><p>Numpy使用ndarray对象来处理多维数组，该对象是一个快速而灵活的大数据容器。</p><h3 id="ndarray介绍"><a href="#ndarray介绍" class="headerlink" title="ndarray介绍"></a>ndarray介绍</h3><blockquote><p>NumPy provides an N-dimensional array type, the ndarray,<br>which describes a collection of “items” of the same type.</p></blockquote><p>NumPy提供了一个N维数组类型ndarray，它描述了相同类型的“items”的集合。</p><p>用ndarray进行存储：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 创建ndarray</span>score <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回结果：</p><pre class="line-numbers language-none"><code class="language-none">array([[80, 89, 86, 67, 79],[78, 97, 89, 67, 81],[90, 94, 78, 67, 74],[91, 91, 90, 67, 69],[76, 87, 75, 67, 86],[70, 79, 84, 67, 84],[94, 92, 93, 67, 64],[86, 85, 83, 67, 80]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提问:<br>使用Python列表可以存储一维数组，通过列表的嵌套可以实现多维数组，那么为什么还需要使用Numpy的ndarray呢？</p><h3 id="ndarray与Python原生list运算效率对比"><a href="#ndarray与Python原生list运算效率对比" class="headerlink" title="ndarray与Python原生list运算效率对比"></a>ndarray与Python原生list运算效率对比</h3><p>在这里我们通过一段代码运行来体会到ndarray的好处</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 通过%time魔法方法, 查看当前行的代码运行一次所花费的时间</span><span class="token operator">%</span>time sum1<span class="token operator">=</span><span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>b<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">%</span>time sum2<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中第一个时间显示的是使用原生Python计算时间,第二个内容是使用numpy计算时间:</p><pre class="line-numbers language-none"><code class="language-none">CPU times: user 852 ms, sys: 262 ms, total: 1.11 sWall time: 1.13 sCPU times: user 133 ms, sys: 653 µs, total: 133 msWall time: 134 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从中我们看到ndarray的计算速度要快很多，节约了时间。</p><p>机器学习的最大特点就是大量的数据运算，那么如果没有一个快速的解决方案，那可能现在python也在机器学习领域达不到好的效果。</p><p>Numpy专门针对ndarray的操作和运算进行了设计，所以数组的存储效率和输入输出性能远优于Python中的嵌套列表，数组越大，Numpy的优势就越明显。</p><p>思考：<br>ndarray为什么可以这么快？</p><h3 id="ndarray的优势"><a href="#ndarray的优势" class="headerlink" title="ndarray的优势"></a>ndarray的优势</h3><h4 id="4-1-内存块风格"><a href="#4-1-内存块风格" class="headerlink" title="4.1 内存块风格"></a>4.1 内存块风格</h4><p>ndarray到底跟原生python列表有什么不同呢，请看一张图：</p><p><img src="/liaojie.github.io/medias/ndarray%E7%9A%84%E4%BC%98%E5%8A%BF.png"></p><p>从图中我们可以看出ndarray在存储数据的时候，数据与数据的地址都是连续的，这样就给使得批量操作数组元素时速度更快。</p><p>这是因为ndarray中的所有元素的类型都是相同的，而Python列表中的元素类型是任意的，所以ndarray在存储元素时内存可以连续，而python原生list就只能通过寻址方式找到下一个元素，这虽然也导致了在通用性能方面Numpy的ndarray不及Python原生list，但在科学计算中，Numpy的ndarray就可以省掉很多循环语句，代码使用方面比Python原生list简单的多。</p><h4 id="ndarray支持并行化运算（向量化运算）"><a href="#ndarray支持并行化运算（向量化运算）" class="headerlink" title="ndarray支持并行化运算（向量化运算）"></a>ndarray支持并行化运算（向量化运算）</h4><p>numpy内置了并行运算功能，当系统有多个核心时，做某种计算时，numpy会自动做并行计算</p><h4 id="效率远高于纯Python代码"><a href="#效率远高于纯Python代码" class="headerlink" title="效率远高于纯Python代码"></a>效率远高于纯Python代码</h4><p>Numpy底层使用C语言编写，内部解除了GIL（全局解释器锁），其对数组的操作速度不受Python解释器的限制，所以，其效率远高于纯Python代码。</p><h2 id="N维数组-ndarray"><a href="#N维数组-ndarray" class="headerlink" title="N维数组-ndarray"></a>N维数组-ndarray</h2><h3 id="ndarray的属性"><a href="#ndarray的属性" class="headerlink" title="ndarray的属性"></a>ndarray的属性</h3><p>数组属性反映了数组本身固有的信息。</p><table><thead><tr><th>属性名字</th><th>属性解释</th></tr></thead><tbody><tr><td>ndarray.shape</td><td>数组维度的元组</td></tr><tr><td>ndarray.ndim</td><td>数组维数</td></tr><tr><td>ndarray.size</td><td>数组中的元素数量</td></tr><tr><td>ndarray.itemsize</td><td>一个数组元素的长度（字节）</td></tr><tr><td>ndarray.dtype</td><td>数组元素的类型</td></tr></tbody></table><h3 id="ndarray的形状"><a href="#ndarray的形状" class="headerlink" title="ndarray的形状"></a>ndarray的形状</h3><p>首先创建一些数组。</p><pre class="line-numbers language-none"><code class="language-none"># 创建不同形状的数组&gt;&gt;&gt; a = np.array([[1,2,3],[4,5,6]])&gt;&gt;&gt; b = np.array([1,2,3,4])&gt;&gt;&gt; c = np.array([[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分别打印出形状</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; a.shape&gt;&gt;&gt; b.shape&gt;&gt;&gt; c.shape(2, 3) # 二维数组(4,) # 一维数组(2, 2, 3) # 三维数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何理解数组的形状？<br>二维数组：</p><p><img src="/liaojie.github.io/medias/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84.png"></p><p>三维数组：</p><p><img src="/liaojie.github.io/medias/%E4%B8%89%E7%BB%B4%E6%95%B0%E7%BB%84.png"></p><h3 id="ndarray的类型"><a href="#ndarray的类型" class="headerlink" title="ndarray的类型"></a>ndarray的类型</h3><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; type(score.dtype)&lt;type 'numpy.dtype'&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>dtype是numpy.dtype类型，先看看对于数组来说都有哪些类型</p><table><thead><tr><th>名称</th><th>描述</th><th>简写</th></tr></thead><tbody><tr><td>np.bool</td><td>用一个字节存储的布尔类型（True或False）</td><td>‘b’</td></tr><tr><td>np.int8</td><td>一个字节大小，-128 至 127</td><td>‘i’</td></tr><tr><td>np.int16</td><td>整数，-32768 至 32767</td><td>‘i2’</td></tr><tr><td>np.int32</td><td>整数，-2^31 至 2^32 -1</td><td>‘i4’</td></tr><tr><td>np.int64</td><td>整数，-2^63 至 2^63 - 1</td><td>‘i8’</td></tr><tr><td>np.uint8</td><td>无符号整数，0 至 255</td><td>‘u’</td></tr><tr><td>np.uint16</td><td>无符号整数，0 至 65535</td><td>‘u2’</td></tr><tr><td>np.uint32</td><td>无符号整数，0 至 2^32 - 1</td><td>‘u4’</td></tr><tr><td>np.uint64</td><td>无符号整数，0 至 2^64 - 1</td><td>‘u8’</td></tr><tr><td>np.float16</td><td>半精度浮点数：16位，正负号1位，指数5位，精度10位</td><td>‘f2’</td></tr><tr><td>np.float32</td><td>单精度浮点数：32位，正负号1位，指数8位，精度23位</td><td>‘f4’</td></tr><tr><td>np.float64</td><td>双精度浮点数：64位，正负号1位，指数11位，精度52位</td><td>‘f8’</td></tr><tr><td>np.complex64</td><td>复数，分别用两个32位浮点数表示实部和虚部</td><td>‘c8’</td></tr><tr><td>np.complex128</td><td>复数，分别用两个64位浮点数表示实部和虚部</td><td>‘c16’</td></tr><tr><td>np.object_</td><td>python对象</td><td>‘O’</td></tr><tr><td>np.string_</td><td>字符串</td><td>‘S’</td></tr><tr><td>np.unicode_</td><td>unicode类型</td><td>‘U’</td></tr></tbody></table><p>创建数组的时候指定类型</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; a = np.array([[1, 2, 3],[4, 5, 6]], dtype=np.float32)&gt;&gt;&gt; a.dtypedtype('float32')&gt;&gt;&gt; arr = np.array(['python', 'tensorflow', 'scikit-learn', 'numpy'], dtype = np.string_)&gt;&gt;&gt; arrarray([b'python', b'tensorflow', b'scikit-learn', b'numpy'], dtype='|S12')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：若不指定，整数默认int64，小数默认float6</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="生成数组的方法"><a href="#生成数组的方法" class="headerlink" title="生成数组的方法"></a>生成数组的方法</h3><h4 id="1-1-生成0和1的数组"><a href="#1-1-生成0和1的数组" class="headerlink" title="1.1 生成0和1的数组"></a>1.1 生成0和1的数组</h4><ul><li>np.ones(shape, dtype)</li><li>np.ones_like(a, dtype)</li><li>np.zeros(shape, dtype)</li><li>np.zeros_like(a, dtype)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">ones <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ones<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回结果:</p><pre class="line-numbers language-none"><code class="language-none">array([[1., 1., 1., 1., 1., 1., 1., 1.],[1., 1., 1., 1., 1., 1., 1., 1.],[1., 1., 1., 1., 1., 1., 1., 1.],[1., 1., 1., 1., 1., 1., 1., 1.]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>ones<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回结果:</p><pre class="line-numbers language-none"><code class="language-none">array([[0., 0., 0., 0., 0., 0., 0., 0.],[0., 0., 0., 0., 0., 0., 0., 0.],[0., 0., 0., 0., 0., 0., 0., 0.],[0., 0., 0., 0., 0., 0., 0., 0.]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2从现有数组生成"><a href="#1-2从现有数组生成" class="headerlink" title="1.2从现有数组生成"></a>1.2从现有数组生成</h4><p>1.2.1 生成方式</p><ul><li>np.array(object, dtype)</li><li>np.asarray(a, dtype)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 从现有的数组当中创建</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 相当于索引的形式，并没有真正的创建一个新的</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.2.2 关于array和asarray的不同</p><h4 id="1-3-生成固定范围的数组"><a href="#1-3-生成固定范围的数组" class="headerlink" title="1.3 生成固定范围的数组"></a>1.3 生成固定范围的数组</h4><p>1.3.1 np.linspace (start, stop, num, endpoint)</p><p>创建等差数组 — 指定数量</p><p>参数:</p><ul><li>start:序列的起始值</li><li>stop:序列的终止值</li><li>num:要生成的等间隔样例数量，默认为50</li><li>endpoint:序列中是否包含stop值，默认为ture</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成等间隔的数组</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回结果：</p><pre class="line-numbers language-none"><code class="language-none">array([ 0., 10., 20., 30., 40., 50., 60., 70., 80., 90., 100.])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.3.2 np.arange(start,stop, step, dtype)</p><p>创建等差数组 — 指定步长<br>参数</p><ul><li>step:步长,默认值为1</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回结果：</p><pre class="line-numbers language-none"><code class="language-none">array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,44, 46, 48])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1.3.3 np.logspace(start,stop, num)</p><p>创建等比数列<br>参数:</p><ul><li>num:要生成的等比数列数量，默认为50</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成10^x</span>np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回结果:</p><pre class="line-numbers language-none"><code class="language-none">array([ 1., 10., 100.])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-生成随机数组"><a href="#1-4-生成随机数组" class="headerlink" title="1.4 生成随机数组"></a>1.4 生成随机数组</h4><p>1.4.1 使用模块介绍</p><p>np.random模块</p><p>1.4.2 正态分布</p><p>一、基础概念复习：正态分布（理解）</p><p>a. 什么是正态分布</p><p>正态分布是一种概率分布。正态分布是具有两个参数μ和σ的连续型随机变量的分布，第一参数μ是服从正态分布的随机变量的均值，第二个参数σ是此随机变量的标准差，所以正态分布记作N(μ，σ )。</p><p><img src="/liaojie.github.io/medias/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83.png"></p><p>b. 正态分布的应用</p><p>生活、生产与科学实验中很多随机变量的概率分布都可以近似地用正态分布来描述。</p><p>c. 正态分布特点</p><p>μ决定了其位置，其标准差σ决定了分布的幅度。当μ = 0,σ = 1时的正态分布是标准正态分布。<br>标准差如何来？</p><ul><li>方差</li></ul><p>是在概率论和统计方差衡量一组数据时离散程度的度量</p><p><img src="/liaojie.github.io/medias/%E6%96%B9%E5%B7%AE.png"></p><ul><li>标准差与方差的意义</li></ul><p>可以理解成数据的一个离散程度的衡量</p><p>二、正态分布创建方式</p><ul><li><p>np.random.randn(d0, d1, …, dn)</p><p>功能：从标准正态分布中返回一个或多个样本值</p></li><li><p>np.random.normal(loc=0.0, scale=1.0, size=None)</p><p>loc：float</p><p>此概率分布的均值（对应着整个分布的中心centre）</p><p>scale：float</p><p>此概率分布的标准差（对应于分布的宽度，scale越大越矮胖，scale越小，越瘦高）</p><p>size：int or tuple of ints</p><p>输出的shape，默认为None，只输出一个值</p></li><li><p>np.random.standard_normal(size=None)</p><p>返回指定形状的标准正态分布的数组。</p></li></ul><p>举例1：生成均值为1.75，标准差为1的正态分布数据，100000000个</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">1.75</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回结果：</p><pre class="line-numbers language-none"><code class="language-none">array([2.90646763, 1.46737886, 2.21799024, ..., 1.56047411, 1.87969135,0.9028096 ])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成均匀分布的随机数</span>x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">1.75</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span class="token comment"># 画图看分布状况</span><span class="token comment"># 1）创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 2）绘制直方图</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment"># 3）显示图像</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：我们可以模拟生成一组股票的涨跌幅的数据</p><p>举例2：随机生成4支股票1周的交易日涨幅数据</p><p>4支股票，一周(5天)的涨跌幅数据，如何获取？</p><ul><li>随机生成涨跌幅在某个正态分布内，比如均值0，方差1</li></ul><p>股票涨跌幅数据的创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建符合正态分布的4只股票5天的涨跌幅数据</span>stock_change <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>stock_change<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>返回结果：</p><pre class="line-numbers language-none"><code class="language-none">array([[ 0.0476585 , 0.32421568, 1.50062162, 0.48230497, -0.59998822],[-1.92160851, 2.20430374, -0.56996263, -1.44236548, 0.0165062 ],[-0.55710486, -0.18726488, -0.39972172, 0.08580347, -1.82842225],[-1.22384505, -0.33199305, 0.23308845, -1.20473702, -0.31753223]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.4.2 均匀分布</p><p>np.random.rand(d0, d1, …, dn)</p><ul><li>返回[0.0，1.0)内的一组均匀分布的数。</li></ul><p>np.random.uniform(low=0.0, high=1.0, size=None)</p><ul><li><p>功能：从一个均匀分布[low,high)中随机采样，注意定义域是左闭右开，即包含low，不包含high.</p></li><li><p>参数介绍:</p><ul><li>low: 采样下界，float类型，默认值为0；</li><li>high: 采样上界，float类型，默认值为1；</li><li>size: 输出样本数目，为int或元组(tuple)类型，例如，size=(m,n,k), 则输出mnk个样本，缺省时输出1个值。</li></ul></li><li><p>返回值：ndarray类型，其形状和参数size中描述一致。</p></li></ul><p>np.random.randint(low, high=None, size=None, dtype=’l’)</p><ul><li>从一个均匀分布中随机采样，生成一个整数或N维整数数组，</li><li>取数范围：若high不为None时，取[low,high)之间随机整数，否则取值[0,low)之间随机整数。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成均匀分布的随机数</span>x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回结果：</p><pre class="line-numbers language-none"><code class="language-none">array([ 0.22411206, 0.31414671, 0.85655613, ..., -0.92972446,0.95985223, 0.23197723])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>画图看分布状况：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 生成均匀分布的随机数</span>x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span class="token comment"># 画图看分布状况</span><span class="token comment"># 1）创建画布</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 2）绘制直方图</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token operator">=</span>x2<span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment"># x代表要使用的数据，bins表示要划分区间数</span><span class="token comment"># 3）显示图像</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组的索引、切片"><a href="#数组的索引、切片" class="headerlink" title="数组的索引、切片"></a>数组的索引、切片</h3><p>一维、二维、三维的数组如何索引？</p><ul><li>直接进行索引,切片</li><li>对象<code>[:, :]</code> – 先行后列</li></ul><p>二维数组索引方式：</p><p>举例：获取第一个股票的前3个交易日的涨跌幅数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 二维的数组，两个维度</span>stock_change<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回结果：</p><pre class="line-numbers language-none"><code class="language-none">array([-0.03862668, -1.46128096, -0.75596237])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>三维数组索引方式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 三维</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 返回结果</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 索引、切片</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 输出: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="形状修改"><a href="#形状修改" class="headerlink" title="形状修改"></a>形状修改</h3><h4 id="3-1-ndarray-reshape-shape-order"><a href="#3-1-ndarray-reshape-shape-order" class="headerlink" title="3.1 ndarray.reshape(shape, order)"></a>3.1 ndarray.reshape(shape, order)</h4><ul><li>返回一个具有相同数据域，但shape不一样的视图</li><li>行、列不进行互换</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在转换形状的时候，一定要注意数组的元素匹配</span>stock_change<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>stock_change<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 数组的形状被修改为: (2, 10), -1: 表示通过待计算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-ndarray-resize-new-shape"><a href="#3-2-ndarray-resize-new-shape" class="headerlink" title="3.2 ndarray.resize(new_shape)"></a>3.2 ndarray.resize(new_shape)</h4><ul><li>修改数组本身的形状（需要保持元素个数前后相同）</li><li>行、列不进行互换</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">stock_change<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 查看修改后结果</span>stock_change<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-ndarray-T"><a href="#3-3-ndarray-T" class="headerlink" title="3.3 ndarray.T"></a>3.3 ndarray.T</h4><ul><li>数组的转置</li><li>将数组的行、列进行互换</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">stock_change<span class="token punctuation">.</span>T<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="类型修改"><a href="#类型修改" class="headerlink" title="类型修改"></a>类型修改</h3><h4 id="4-1-ndarray-astype-type"><a href="#4-1-ndarray-astype-type" class="headerlink" title="4.1 ndarray.astype(type)"></a>4.1 ndarray.astype(type)</h4><ul><li>返回修改了类型之后的数组</li></ul><blockquote><p>stock_change.astype(np.int32)</p></blockquote><h4 id="4-2-ndarray-tostring-order-或者ndarray-tobytes-order"><a href="#4-2-ndarray-tostring-order-或者ndarray-tobytes-order" class="headerlink" title="4.2 ndarray.tostring([order])或者ndarray.tobytes([order])"></a>4.2 <code>ndarray.tostring([order])</code>或者<code>ndarray.tobytes([order])</code></h4><ul><li>构造包含数组中原始数据字节的Python字节</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-3-jupyter输出太大可能导致崩溃问题【了解】"><a href="#4-3-jupyter输出太大可能导致崩溃问题【了解】" class="headerlink" title="4.3 jupyter输出太大可能导致崩溃问题【了解】"></a>4.3 jupyter输出太大可能导致崩溃问题【了解】</h4><p>如果遇到</p><pre class="line-numbers language-none"><code class="language-none">IOPub data rate exceeded.The notebook server will temporarily stop sending outputto the client in order to avoid crashing it.To change this limit, set the config variable`--NotebookApp.iopub_data_rate_limit`.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个问题是在jupyer当中对输出的字节数有限制，需要去修改配置文件</p><p>创建配置文件</p><pre class="line-numbers language-none"><code class="language-none">jupyter notebook --generate-configvi ~/.jupyter/jupyter_notebook_config.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>取消注释,多增加</p><pre class="line-numbers language-none"><code class="language-none">## (bytes/sec) Maximum rate at which messages can be sent on iopub before they# are limited.c.NotebookApp.iopub_data_rate_limit = 10000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是不建议这样去修改，jupyter输出太大会崩溃</p><h3 id="数组的去重"><a href="#数组的去重" class="headerlink" title="数组的去重"></a>数组的去重</h3><h4 id="5-1-np-unique"><a href="#5-1-np-unique" class="headerlink" title="5.1 np.unique()"></a>5.1 np.unique()</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">temp <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="ndarray运算"><a href="#ndarray运算" class="headerlink" title="ndarray运算"></a>ndarray运算</h2><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成10名同学，5门功课的数据</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> score <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 取出最后4名同学的成绩，用于逻辑判断</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test_score <span class="token operator">=</span> score<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token comment"># 逻辑判断, 如果成绩大于60就标记为True 否则为False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test_score <span class="token operator">&gt;</span> <span class="token number">60</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># BOOL赋值, 将满足条件的设置为指定的值-布尔索引</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test_score<span class="token punctuation">[</span>test_score <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test_scorearray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通用判断函数"><a href="#通用判断函数" class="headerlink" title="通用判断函数"></a>通用判断函数</h3><ul><li>np.all()</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 判断前两名同学的成绩[0:2, :]是否全及格</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> np<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>np.any()</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 判断前两名同学的成绩[0:2, :]是否有大于90分的</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> np<span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span>score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="np-where（三元运算符）"><a href="#np-where（三元运算符）" class="headerlink" title="np.where（三元运算符）"></a>np.where（三元运算符）</h3><p>通过使用np.where能够进行更加复杂的运算</p><ul><li>np.where()</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 判断前四名学生,前四门课程中，成绩中大于60的置为1，否则为0</span>temp <span class="token operator">=</span> score<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>temp <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>复合逻辑需要结合np.logical_and和np.logical_or使用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 判断前四名学生,前四门课程中，成绩中大于60且小于90的换为1，否则为0</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>temp <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">,</span> temp <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 判断前四名学生,前四门课程中，成绩中大于90或小于60的换为1，否则为0</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_or<span class="token punctuation">(</span>temp <span class="token operator">&gt;</span> <span class="token number">90</span><span class="token punctuation">,</span> temp <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="统计运算"><a href="#统计运算" class="headerlink" title="统计运算"></a>统计运算</h3><p>如果想要知道学生成绩最大的分数，或者做小分数应该怎么做？</p><h4 id="4-1-统计指标"><a href="#4-1-统计指标" class="headerlink" title="4.1 统计指标"></a>4.1 统计指标</h4><p>在数据挖掘/机器学习领域，统计指标的值也是我们分析问题的一种方式。常用的指标如下：</p><ul><li>min(a, axis)</li><li>Return the minimum of an array or minimum along an axis.</li><li>max(a, axis])<ul><li>Return the maximum of an array or maximum along an axis.</li></ul></li><li>median(a, axis)<ul><li>Compute the median along the specified axis.</li></ul></li><li>mean(a, axis, dtype)<ul><li>Compute the arithmetic mean along the specified axis.</li></ul></li><li>std(a, axis, dtype)<ul><li>Compute the standard deviation along the specified axis.</li></ul></li><li>var(a, axis, dtype)<ul><li>Compute the variance along the specified axis.</li></ul></li></ul><h4 id="4-2-案例：学生成绩统计运算"><a href="#4-2-案例：学生成绩统计运算" class="headerlink" title="4.2 案例：学生成绩统计运算"></a>4.2 案例：学生成绩统计运算</h4><p>进行统计的时候，axis 轴的取值并不一定，Numpy中不同的API轴的值都不一样，在这里，axis 0代表列, axis 1代表行去进行统计</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 接下来对于前四名学生,进行一些统计运算</span><span class="token comment"># 指定列 去统计</span>temp <span class="token operator">=</span> score<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"前四名学生,各科成绩的最大分：{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"前四名学生,各科成绩的最小分：{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"前四名学生,各科成绩波动情况：{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"前四名学生,各科成绩的平均分：{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">前四名学生,各科成绩的最大分：[96 97 72 98 89]前四名学生,各科成绩的最小分：[55 57 45 76 77]前四名学生,各科成绩波动情况：[16.25576821 14.92271758 10.40432602 8.0311892 4.32290412]前四名学生,各科成绩的平均分：[78.5 75.75 62.5 85. 82.25]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要统计出某科最高分对应的是哪个同学？</p><ul><li>np.argmax(temp, axis=)</li><li>np.argmin(temp, axis=)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"前四名学生，各科成绩最高分对应的学生下标：{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">前四名学生，各科成绩最高分对应的学生下标：[0 2 0 0 1]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数组间运算"><a href="#数组间运算" class="headerlink" title="数组间运算"></a>数组间运算</h2><h3 id="数组与数的运算"><a href="#数组与数的运算" class="headerlink" title="数组与数的运算"></a>数组与数的运算</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr <span class="token operator">+</span> <span class="token number">1</span>arr <span class="token operator">/</span> <span class="token number">2</span><span class="token comment"># 可以对比python列表的运算，看出区别</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>a <span class="token operator">*</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组与数组的运算"><a href="#数组与数组的运算" class="headerlink" title="数组与数组的运算"></a>数组与数组的运算</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面这个能进行运算吗，结果是不行的！</p><h4 id="2-1-广播机制"><a href="#2-1-广播机制" class="headerlink" title="2.1 广播机制"></a>2.1 广播机制</h4><p>数组在进行矢量化运算时，要求数组的形状是相等的。当形状不相等的数组执行算术运算的时候，就会出现广播机制，该机制会对数组进行扩展，使数组的shape属性值一样，这样，就可以进行矢量化运算了。下面通过一个例子进行说明：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr1<span class="token punctuation">.</span>shape<span class="token comment"># (4, 1)</span>arr2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr2<span class="token punctuation">.</span>shape<span class="token comment"># (3,)</span>arr1<span class="token operator">+</span>arr2<span class="token comment"># 结果是：</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，数组arr1是4行1列，arr2是1行3列。这两个数组要进行相加，按照广播机制会对数组arr1和arr2都进行扩展，使得数组arr1和arr2都变成4行3列。</p><p>下面通过一张图来描述广播机制扩展数组的过程：</p><p>这句话乃是理解广播的核心。广播主要发生在两种情况，一种是两个数组的维数不相等，但是它们的后缘维度的轴长相符，另外一种是有一方的长度为1。</p><p>广播机制实现了时两个或两个以上数组的运算，即使这些数组的shape不是完全相同的，只需要满足如下任意一个条件即可。</p><ul><li>如果两个数组的后缘维度（trailing dimension，即从末尾开始算起的维度）的轴长度相符</li><li>或其中的一方的长度为1。</li></ul><p>广播会在缺失和（或）长度为1的维度上进行。</p><p>广播机制需要扩展维度小的数组，使得它与维度最大的数组的shape值相同，以便使用元素级函数或者运算符进行运算。</p><p>如果是下面这样，则不匹配：</p><pre class="line-numbers language-none"><code class="language-none">A (1d array): 10B (1d array): 12A (2d array): 2 x 1B (3d array): 8 x 4 x 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>思考：下面两个ndarray是否能够进行运算？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数学：矩阵"><a href="#数学：矩阵" class="headerlink" title="数学：矩阵"></a>数学：矩阵</h2><h3 id="矩阵和向量"><a href="#矩阵和向量" class="headerlink" title="矩阵和向量"></a>矩阵和向量</h3><p><img src="/liaojie.github.io/medias/%E7%9F%A9%E9%98%B5%E5%92%8C%E5%90%91%E9%87%8F.png"></p><h3 id="加法和标量乘法"><a href="#加法和标量乘法" class="headerlink" title="加法和标量乘法"></a>加法和标量乘法</h3><p><img src="/liaojie.github.io/medias/%E5%8A%A0%E6%B3%95%E5%92%8C%E6%A0%87%E9%87%8F%E4%B9%98%E6%B3%95.png"></p><h3 id="矩阵向量乘法"><a href="#矩阵向量乘法" class="headerlink" title="矩阵向量乘法"></a>矩阵向量乘法</h3><p>矩阵和向量的乘法如图：m×n 的矩阵乘以 n×1 的向量，得到的是 m×1 的向量<br>例:</p><p><img src="/liaojie.github.io/medias/%E7%9F%A9%E9%98%B5%E5%90%91%E9%87%8F%E4%B9%98%E6%B3%95.png"></p><p>矩阵乘法遵循准则：<br><code>(M行, N列)*(N行, L列) = (M行, L列)</code></p><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p><img src="/liaojie.github.io/medias/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95.png"></p><h3 id="矩阵乘法的性质"><a href="#矩阵乘法的性质" class="headerlink" title="矩阵乘法的性质"></a>矩阵乘法的性质</h3><p>矩阵的乘法不满足交换律：A×B≠B×A</p><p>矩阵的乘法满足结合律。即：A×（B×C）=（A×B）×C</p><p>单位矩阵：在矩阵的乘法中，有一种矩阵起着特殊的作用，如同数的乘法中的 1,我们称 这种矩阵为单位矩阵．它是个方阵，一般用 I 或者 E 表示，从 左上角到右下角的对角线（称为主对角线）上的元素均为 1 以外全都为 0。</p><h3 id="逆、转置"><a href="#逆、转置" class="headerlink" title="逆、转置"></a>逆、转置</h3><p>矩阵的逆：如矩阵 A 是一个 m×m 矩阵（方阵），如果有逆矩阵，则：<br>AA^(-1) = A^(-1)A = I</p><p>低阶矩阵求逆的方法:</p><p>1.待定系数法<br>2.初等变换</p><p>矩阵的转置：设 A 为 m×n 阶矩阵（即 m 行 n 列），第 i 行 j 列的元素是 a(i,j)，即：<br>A=a(i,j)</p><p>定义 A 的转置为这样一个 n×m 阶矩阵 B，满足 B=a(j,i)，即 b (i,j)=a (j,i)（B 的第 i 行第 j 列元素是 A 的第 j 行第 i 列元素），记 A =B。<br>直观来看，将 A 的所有元素绕着一条从第 1 行第 1 列元素出发的右下方 45 度的射线作 镜面反转，即得到 A 的转置。</p><p><img src="/liaojie.github.io/medias/%E8%BD%AC%E7%BD%AE.png"></p><h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><h4 id="7-1-矩阵乘法api："><a href="#7-1-矩阵乘法api：" class="headerlink" title="7.1 矩阵乘法api："></a>7.1 矩阵乘法api：</h4><p><img src="/liaojie.github.io/medias/%E7%9F%A9%E9%98%B5%E9%A2%84%E7%AE%97.png"></p><ul><li>np.matmul</li><li>np.dot</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token punctuation">[</span><span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token punctuation">[</span><span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> np<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">81.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">81.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">82.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">84.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">84.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">78.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">92.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">81.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">81.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">82.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">84.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">84.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">78.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">92.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>np.matmul和np.dot的区别:</p><p>二者都是矩阵乘法。 np.matmul中禁止矩阵与标量的乘法。 在矢量乘矢量的內积运算中，np.matmul与np.dot没有区别。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> random<span class="token punctuation">,</span> mat<span class="token punctuation">,</span> eye<span class="token triple-quoted-string string">'''numpy 矩阵和数组的区别  numpy存在俩种不同的数据类型：    1.矩阵： matrix    2.数组： array  相似点：    都可以处理行列表示的数字元素  不同点：    1.2个数据类型上执行相同的数据运算可能得到不同的结果。    2.numpy函数库中 matrix 与 MATLAB 中 matrices 等价。'''</span><span class="token comment"># 生成一个4*4的随机数组</span>randArray <span class="token operator">=</span> random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment"># 转化关系，书序转化为矩阵</span>randMat <span class="token operator">=</span> mat<span class="token punctuation">(</span>randArray<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''.I 表示对矩阵求逆(可以利用矩阵的初等变换)  意义：逆矩阵是一个判断相似性的工具。逆矩阵A和列向量p相乘后，将得到列向量q，q的第i个分量表示p与A的第i个列向量的相似度。  参考案例链接：  https://www.zhihu.com/question/33258489  https://blog.csdn.net/vernice/article/details/48506027.T 表示对矩阵转置(行列颠倒)  * 等同于： .transpose().A 返回矩阵基于的数组  参考案列链接：  http://blog.csdn.net/qq403977698/article/details/47254539'''</span>invRandMat <span class="token operator">=</span> randMat<span class="token punctuation">.</span>ITranRandMat <span class="token operator">=</span> randMat<span class="token punctuation">.</span>TArrRandMat <span class="token operator">=</span> randMat<span class="token punctuation">.</span>A<span class="token comment"># 输出结果</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'randArray ='</span><span class="token punctuation">,</span> randArray<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'randMat ='</span><span class="token punctuation">,</span> randMat<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'invRandMat ='</span><span class="token punctuation">,</span> invRandMat<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'TranRandMat ='</span><span class="token punctuation">,</span> TranRandMat<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ArrRandMat ='</span><span class="token punctuation">,</span> ArrRandMat<span class="token punctuation">)</span><span class="token comment"># 矩阵和逆矩阵 进行求积 (单位矩阵，对角线都为1)</span>myEye <span class="token operator">=</span> randMat <span class="token operator">*</span> invRandMat<span class="token comment"># 误差</span><span class="token keyword">print</span><span class="token punctuation">(</span>myEye <span class="token operator">-</span> eye<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''randArray = [[0.69496971 0.80785621 0.14613897 0.44497852] [0.9898142  0.12447908 0.55108304 0.97096995] [0.50682931 0.40793015 0.8064524  0.33701136] [0.44393002 0.97126688 0.41540243 0.99870403]]randMat = [[0.69496971 0.80785621 0.14613897 0.44497852] [0.9898142  0.12447908 0.55108304 0.97096995] [0.50682931 0.40793015 0.8064524  0.33701136] [0.44393002 0.97126688 0.41540243 0.99870403]]invRandMat = [[ 1.35980462  0.61662061 -0.05675973 -1.18621256] [ 0.77822709 -0.84108847  0.23133207  0.39292498] [-0.82230479 -0.22920418  1.50345799  0.08188204] [-1.01925781  0.63922537 -0.82509724  1.11238797]]TranRandMat = [[0.69496971 0.9898142  0.50682931 0.44393002] [0.80785621 0.12447908 0.40793015 0.97126688] [0.14613897 0.55108304 0.8064524  0.41540243] [0.44497852 0.97096995 0.33701136 0.99870403]]ArrRandMat = [[0.69496971 0.80785621 0.14613897 0.44497852] [0.9898142  0.12447908 0.55108304 0.97096995] [0.50682931 0.40793015 0.8064524  0.33701136] [0.44393002 0.97126688 0.41540243 0.99870403]][[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 -5.55111512e-17] [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00] [-2.22044605e-16 -1.11022302e-16  0.00000000e+00 -5.55111512e-17] [-2.22044605e-16  0.00000000e+00  0.00000000e+00  0.00000000e+00]]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow</title>
      <link href="/liaojie.github.io/2021/12/12/tensorflow/"/>
      <url>/liaojie.github.io/2021/12/12/tensorflow/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras</title>
      <link href="/liaojie.github.io/2021/12/12/keras/"/>
      <url>/liaojie.github.io/2021/12/12/keras/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scikit-Learn</title>
      <link href="/liaojie.github.io/2021/12/12/scikit-learn/"/>
      <url>/liaojie.github.io/2021/12/12/scikit-learn/</url>
      
        <content type="html"><![CDATA[<h2 id="多种多样的机器学习"><a href="#多种多样的机器学习" class="headerlink" title="多种多样的机器学习"></a>多种多样的机器学习</h2><p>通常来说, 机器学习的方法包括:</p><ul><li>监督学习 supervised learning;</li><li>非监督学习 unsupervised learning;</li><li>半监督学习 semi-supervised learning;</li><li>强化学习 reinforcement learning;</li><li>遗传算法 genetic algorithm.</li></ul><p><a href="https://scikit-learn.org/stable/">sklearn 官网</a></p><p>pip 安装</p><p>安装 Scikit-learn (sklearn) 最简单的方法就是使用 pip 安装它.</p><p>首先确认自己电脑中有安装</p><blockquote><p>Python (&gt;=2.6 或 &gt;=3.3 版本)  Numpy (&gt;=1.6.1)  Scipy (&gt;=0.9)</p></blockquote><p>然后找到你的 Terminal (MacOS or Linux), 或者 CMD (Windows). 输入以下语句:</p><pre class="line-numbers language-pip" data-language="pip"><code class="language-pip"># python 2+ 版本复制:pip install -U scikit-learn# python 3+ 版本复制:pip3 install -U scikit-learn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="看图选方法"><a href="#看图选方法" class="headerlink" title="看图选方法"></a>看图选方法</h2><p>安装完 Sklearn 后，不要直接去用，先了解一下都有什么模型方法，然后选择适当的方法，来达到你的目标。</p><p>Sklearn 官网提供了一个流程图， 蓝色圆圈内是判断条件，绿色方框内是可以选择的算法：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/scikit_learn.png"></p><p>从 START 开始，首先看数据的样本是否 <code>&gt;50</code>，小于则需要收集更多的数据。</p><p>由图中，可以看到算法有四类，<code>分类，回归，聚类，降维</code>。</p><p>其中 分类和回归是监督式学习，即每个数据对应一个 label。 聚类 是非监督式学习，即没有 label。 另外一类是 降维，当数据集有很多很多属性的时候，可以通过 降维 算法把属性归纳起来。例如 20 个属性只变成 2 个，注意，这不是挑出 2 个，而是压缩成为 2 个，它们集合了 20 个属性的所有特征，相当于把重要的信息提取的更好，不重要的信息就不要了。</p><p>然后看问题属于哪一类问题，是分类还是回归，还是聚类，就选择相应的算法。 当然还要考虑数据的大小，例如 <code>100K</code> 是一个阈值。</p><p>可以发现有些方法是既可以作为分类，也可以作为回归，例如 <code>SGD</code>。</p><h2 id="通用学习模式"><a href="#通用学习模式" class="headerlink" title="通用学习模式"></a>通用学习模式</h2><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><p>Sklearn 把所有机器学习的模式整合统一起来了，学会了一个模式就可以通吃其他不同类型的学习模式。</p><p>例如，分类器，</p><p>Sklearn 本身就有很多数据库，可以用来练习。 以 Iris 的数据为例，这种花有四个属性，花瓣的长宽，茎的长宽，根据这些属性把花分为三类。</p><p>我们要用 分类器 去把四种类型的花分开。</p><p>今天用 <code>KNN classifier</code>，就是选择几个临近点，综合它们做个平均来作为预测值。</p><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建数据</p><p>加载 <code>iris</code> 的数据，把属性存在 <code>X</code>，类别标签存在 <code>y</code>： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">iris <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>iris_X <span class="token operator">=</span> iris<span class="token punctuation">.</span>datairis_y <span class="token operator">=</span> iris<span class="token punctuation">.</span>target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>观察一下数据集，<code>X</code> 有四个属性，<code>y</code> 有 0，1，2 三类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>iris_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>iris_y<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[ 5.1  3.5  1.4  0.2] [ 4.9  3.   1.4  0.2]][0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2] """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把数据集分为训练集和测试集，其中 <code>test_size=0.3</code>，即测试集占总数据的 30%：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>    iris_X<span class="token punctuation">,</span> iris_y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到分开后的数据集，顺序也被打乱，这样更有利于学习模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>y_train<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[2 1 0 1 0 0 1 1 1 1 0 0 1 2 1 1 1 0 2 2 1 1 1 1 0 2 2 0 2 2 2 2 2 0 1 2 2 2 2 2 2 0 1 2 2 1 1 1 0 0 1 2 0 1 0 1 0 1 2 2 0 1 2 2 2 1 1 1 1 2 2 2 1 0 1 1 0 0 0 2 0 1 0 0 1 2 0 2 2 0 0 2 2 2 1 2 0 0 2 1 2 0 0 1 2] """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建立模型－训练－预测"><a href="#建立模型－训练－预测" class="headerlink" title="建立模型－训练－预测"></a>建立模型－训练－预测</h3><p>定义模块方式 <code>KNeighborsClassifier()</code>， 用 <code>fit</code> 来训练 <code>training data</code>，这一步就完成了训练的所有步骤， 后面的 knn 就已经是训练好的模型，可以直接用来 <code>predict</code> 测试集的数据， 对比用模型预测的值与真实的值，可以看到大概模拟出了数据，但是有误差，是不会完完全全预测正确的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">knn <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_test<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[2 0 0 1 2 2 0 0 0 1 2 2 1 1 2 1 2 1 0 0 0 2 1 2 0 0 0 0 1 0 2 0 0 2 1 0 1 0 0 1 0 1 2 0 1][2 0 0 1 2 1 0 0 0 1 2 2 1 1 2 1 2 1 0 0 0 2 1 2 0 0 0 0 1 0 2 0 0 2 1 0 1 0 0 1 0 1 2 0 1] """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token comment"># 处理数据</span><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets  <span class="token comment"># 使用数据库</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier  <span class="token comment"># 选择附近几个点作为邻居,用邻居来得到数据的预测值</span>iris <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>iris_X <span class="token operator">=</span> iris<span class="token punctuation">.</span>datairis_Y <span class="token operator">=</span> iris<span class="token punctuation">.</span>target<span class="token comment"># print(iris_X[:2, :])</span><span class="token comment"># print(iris_Y)</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span> Y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>    iris_X<span class="token punctuation">,</span> iris_Y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment"># print(Y_train)  # 打乱数据,减少连续的影响,乱的数据在机器学习中是一种很好的形式</span>knn <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 用属性预测值</span><span class="token keyword">print</span><span class="token punctuation">(</span>Y_test<span class="token punctuation">)</span>  <span class="token comment"># 真实值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sklearn-强大数据库"><a href="#sklearn-强大数据库" class="headerlink" title="sklearn 强大数据库"></a>sklearn 强大数据库</h2><h3 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h3><p>eg: boston 房价, 糖尿病, 数字, Iris 花。</p><p>也可以生成虚拟的数据，例如用来训练线性回归模型的数据，可以用函数来生成。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dataset1.png"></p><p>例如，点击进入 boston 房价的数据，可以看到 <code>sample</code> 的总数，属性，以及 <code>label</code> 等信息。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dataset2.png"></p><p>如果是自己生成数据，按照函数的形式，输入 <code>sample，feature，target</code> 的个数等等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sklearn<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>make_regression<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> n_informative<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> n_targets<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> effective_rank<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> tail_strength<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> noise<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> coef<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">[</span>source<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入模块-1"><a href="#导入模块-1" class="headerlink" title="导入模块"></a>导入模块</h3><p>导入 <code>datasets</code> 包，本文以 <code>Linear Regression</code> 为例。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入数据－训练模型"><a href="#导入数据－训练模型" class="headerlink" title="导入数据－训练模型"></a>导入数据－训练模型</h3><p>用 <code>datasets.load_boston()</code> 的形式加载数据，并给 <code>X</code> 和 <code>y</code> 赋值，这种形式在 <code>Sklearn</code> 中都是高度统一的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loaded_data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_boston<span class="token punctuation">(</span><span class="token punctuation">)</span>data_X <span class="token operator">=</span> loaded_data<span class="token punctuation">.</span>datadata_y <span class="token operator">=</span> loaded_data<span class="token punctuation">.</span>target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义模型。</p><p>可以直接用默认值去建立 <code>model</code>，默认值也不错，也可以自己改变参数使模型更好。 然后用 <code>training data</code> 去训练模型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data_X<span class="token punctuation">,</span> data_y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再打印出预测值，这里用 <code>X</code> 的前 4 个来预测，同时打印真实值，作为对比，可以看到是有些误差的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>data_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[ 30.00821269  25.0298606   30.5702317   28.60814055][ 24.   21.6  34.7  33.4]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了提高准确度，可以通过尝试不同的 <code>model</code>，不同的参数，不同的预处理等方法，入门的话可以直接用默认值。</p><p>创建虚拟数据－可视化</p><p>下面是创造数据的例子。</p><p>用函数来建立 100 个 <code>sample</code>，有一个 <code>feature</code>，和一个 <code>target</code>，这样比较方便可视化。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X<span class="token punctuation">,</span> y <span class="token operator">=</span> datasets<span class="token punctuation">.</span>make_regression<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n_targets<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> noise<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用 <code>scatter</code> 的形式来输出结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dataset3.png"></p><p>可以看到用函数生成的 <code>Linear Regression</code> 用的数据。</p><p><code>noise</code> 越大的话，点就会越来越离散，例如 <code>noise</code> 由 10 变为 50.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X<span class="token punctuation">,</span> y <span class="token operator">=</span> datasets<span class="token punctuation">.</span>make_regression<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n_targets<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> noise<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dataset4.png"></p><h2 id="sklearn-常用属性与功能"><a href="#sklearn-常用属性与功能" class="headerlink" title="sklearn 常用属性与功能"></a>sklearn 常用属性与功能</h2><p>上次学了 <code>Sklearn</code> 中的 <code>data sets</code>，今天来看 Model 的属性和功能。</p><p>这里以 <code>LinearRegressor</code> 为例，所以先导入包，数据，还有模型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegressionloaded_data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_boston<span class="token punctuation">(</span><span class="token punctuation">)</span>data_X <span class="token operator">=</span> loaded_data<span class="token punctuation">.</span>datadata_y <span class="token operator">=</span> loaded_data<span class="token punctuation">.</span>targetmodel <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练和预测"><a href="#训练和预测" class="headerlink" title="训练和预测"></a>训练和预测</h3><p>接下来 <code>model.fit</code> 和 <code>model.predict</code> 就属于 Model 的功能，用来训练模型，用训练好的模型预测。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data_X<span class="token punctuation">,</span> data_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>data_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[ 30.00821269  25.0298606   30.5702317   28.60814055]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数和分数"><a href="#参数和分数" class="headerlink" title="参数和分数"></a>参数和分数</h3><p>然后，<code>model.coef_</code> 和 <code>model.intercept_</code> 属于 Model 的属性， 例如对于 <code>LinearRegressor</code> 这个模型，这两个属性分别输出模型的斜率和截距（与y轴的交点）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>coef_<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>intercept_<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[ -1.07170557e-01   4.63952195e-02   2.08602395e-02   2.68856140e+00  -1.77957587e+01   3.80475246e+00   7.51061703e-04  -1.47575880e+00   3.05655038e-01  -1.23293463e-02  -9.53463555e-01   9.39251272e-03  -5.25466633e-01]36.4911032804"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>model.get_params()</code> 也是功能，它可以取出之前定义的参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>get_params<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""{'copy_X': True, 'normalize': False, 'n_jobs': 1, 'fit_intercept': True}"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>model.score(data_X, data_y)</code> 它可以对 Model 用 <code>R^2</code> 的方式进行打分，输出精确度。关于 <code>R^2 coefficient of determination</code> 可以查看 <a href="https://en.wikipedia.org/wiki/Coefficient_of_determination">wiki</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>data_X<span class="token punctuation">,</span> data_y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># R^2 coefficient of determination</span><span class="token triple-quoted-string string">"""0.740607742865"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltloaded_data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_boston<span class="token punctuation">(</span><span class="token punctuation">)</span>data_X <span class="token operator">=</span> loaded_data<span class="token punctuation">.</span>datadata_y <span class="token operator">=</span> loaded_data<span class="token punctuation">.</span>targetmodel <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data_X<span class="token punctuation">,</span> data_y<span class="token punctuation">)</span><span class="token comment"># print(model.coef_)  # y=0.1x+0.3 输出:0.1</span><span class="token comment"># print(model.intercept_)  # 输出:0.3</span><span class="token comment"># print(model.get_params())</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>data_X<span class="token punctuation">,</span> data_y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># R^2 coefficient of determination</span><span class="token comment"># print(model.predict(data_X[:4, :]))</span><span class="token comment"># print(data_y[:4])</span><span class="token comment"># X, y = datasets.make_regression(n_samples=100, n_features=1, n_targets=1, noise=10)</span><span class="token comment"># plt.scatter(X, y)</span><span class="token comment"># plt.show()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正规化-Normalization"><a href="#正规化-Normalization" class="headerlink" title="正规化 Normalization"></a>正规化 Normalization</h2><p>由于资料的<code>偏差</code>与<code>跨度</code>会影响机器学习的成效，因此正规化(标准化)数据可以提升机器学习的成效。首先由例子来讲解:</p><h3 id="数据标准化"><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing <span class="token comment">#标准化数据模块</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#建立Array</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span class="token comment">#将normalized后的a打印出</span><span class="token keyword">print</span><span class="token punctuation">(</span>preprocessing<span class="token punctuation">.</span>scale<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [[ 0.         -0.85170713 -0.55138018]</span><span class="token comment">#  [-1.22474487 -0.55187146 -0.852133  ]</span><span class="token comment">#  [ 1.22474487  1.40357859  1.40351318]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据标准化对机器学习成效的影响"><a href="#数据标准化对机器学习成效的影响" class="headerlink" title="数据标准化对机器学习成效的影响"></a>数据标准化对机器学习成效的影响</h3><p>加载模块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 标准化数据模块</span><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 将资料分割成train与test的模块</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token comment"># 生成适合做classification资料的模块</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>samples_generator <span class="token keyword">import</span> make_classification <span class="token comment"># Support Vector Machine中的Support Vector Classifier</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC <span class="token comment"># 可视化数据的模块</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成适合做Classification数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#生成具有2种属性的300笔数据</span>X<span class="token punctuation">,</span> y <span class="token operator">=</span> make_classification<span class="token punctuation">(</span>    n_samples<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>    n_redundant<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> n_informative<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>     random_state<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> n_clusters_per_class<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>     scale<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#可视化数据</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/normalization.png"></p><p>数据标准化前</p><p>标准化前的预测准确率只有<code>0.477777777778</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>clf <span class="token operator">=</span> SVC<span class="token punctuation">(</span><span class="token punctuation">)</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0.477777777778</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据标准化后</p><p>数据的单位发生了变化, <code>X</code> 数据也被压缩到差不多大小范围.</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/normalization1.png"></p><p>标准化后的预测准确率提升至<code>0.9</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>scale<span class="token punctuation">(</span>X<span class="token punctuation">)</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>clf <span class="token operator">=</span> SVC<span class="token punctuation">(</span><span class="token punctuation">)</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Scikit-Learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure</title>
      <link href="/liaojie.github.io/2021/11/29/datastructure/"/>
      <url>/liaojie.github.io/2021/11/29/datastructure/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h2><p>数据结构是一门研究非数值计算的程序设计问题中的操作对象,以及他们之间的关系和操作等相关问题的学科。</p><p>程序设计=数据结构+算法</p><h3 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><blockquote><p>数据是描述客观事物的符号,是计算机中可以操作的对象,是能被计算机识别,并输入给计算机处理的符号集合。</p></blockquote><h4 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h4><blockquote><p>数据元素是组成数据的、有一定意义的基本单位,在计算机中通常作为整体处理,也被称为记录。</p></blockquote><h4 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h4><blockquote><p>一个数据元素可以由若干个数据项组成。</p></blockquote><p>数据项是数据不可分割的最小单位。</p><h4 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h4><blockquote><p>数据对象是性质相同的数据元素的集合,是数据的子集。</p></blockquote><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><blockquote><p>不同数据元素之间不是独立的,而是存在特定的关系,我们将这些关系称为结构。数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</p></blockquote><h3 id="逻辑结构与物理结构"><a href="#逻辑结构与物理结构" class="headerlink" title="逻辑结构与物理结构"></a>逻辑结构与物理结构</h3><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><blockquote><p>逻辑结构是指数据对象中数据元素之间的相互关系。</p></blockquote><p>1.集合结构:集合结构中的数据元素除了同属于一个集合外,它们之间没有其他关系。</p><p>2.线性结构:线性结构中的数据元素之间是一对一的关系。</p><p>3.树形结构:树形结构中的数据元素之间存在一种一对多的层次结构。</p><p>4.图形结构:图形结构的数据结构是多对多的关系。</p><h4 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h4><blockquote><p>物理结构是指数据的逻辑结构在计算机中的存储形式。</p></blockquote><p>1.顺序存储结构:顺序存储结构是把数据元素存放在地址连续的存储单元中,其数据间的存储关系和物理关系是一致的。</p><p>2.链式存储结构:链式存储结构是把数据元素存放在任意的存储单元里,这组存储单元可以是连续的,也可以是不连续的。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型</p><blockquote><p>数据类型是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</p></blockquote><p>抽象是指抽取出事物具有的普遍性的本质。</p><h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><blockquote><p>抽象数据类型:一个数学模型及定义在该模型上的一组操作。</p></blockquote><p>抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</p><p>描述抽象数据类型的标准格式:</p><pre class="line-numbers language-none"><code class="language-none">ADT 抽象数据类型名Data  数据元素之间逻辑关系的定义Operation  操作1         初始条件         操作结果描述  操作2       ......  操作n       ......endADT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h3><p>算法是解决特定问题求解步骤的描述,在计算机中表现为指令的有限序列,并且每条指令表示一个或多个操作。</p><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>算法具有零个或多个输入,至少有一个或多个输出。</p><h4 id="有穷性"><a href="#有穷性" class="headerlink" title="有穷性"></a>有穷性</h4><p>有穷性指算法在执行有限的步骤之后,自动结束而不会出现无限循环,并且每一个步骤在可接受的时间内完成。</p><h4 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h4><p>确定性:算法的每一步骤都具有确定的定义,不会出现二义性。</p><h4 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h4><p>可行性:算法的每一步都必须是可行的,也就是说,每一步都能够通过执行有限次数完成。</p><h3 id="算法设计的要求"><a href="#算法设计的要求" class="headerlink" title="算法设计的要求"></a>算法设计的要求</h3><h4 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h4><p>正确性:算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性,能正确反映问题的需求,能够得到问题的正确答案。</p><h4 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h4><p>可读性:算法设计的另一个目的是为了便于阅读、理解和交流。</p><h4 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h4><p>健壮性:当输入数据不合法时,算法也能做出相关处理,而不是产生异常或莫名其妙的结果。</p><h4 id="时间效率高和存储量低"><a href="#时间效率高和存储量低" class="headerlink" title="时间效率高和存储量低"></a>时间效率高和存储量低</h4><p>设计算法应该尽量满足时间效率高和存储量低的要求。</p><h3 id="算法效率的度量方法"><a href="#算法效率的度量方法" class="headerlink" title="算法效率的度量方法"></a>算法效率的度量方法</h3><p>事后统计方法:这种方法主要是通过设计好的测试程序和数据,利用计算机计时器对不同算法编制的程序的运行时间进行比较,从而确定算法效率的高低。</p><p>事前分析估算方法:在计算机程序编制前,依据统计方法对算法进行估算。</p><p>一个程序的运行时间,依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。</p><p>最终,在分析程序的运行时间时,最重要的是把程序看成是独立于程序设计语言的算法或一系列步骤。</p><h3 id="函数的渐近增长"><a href="#函数的渐近增长" class="headerlink" title="函数的渐近增长"></a>函数的渐近增长</h3><p>函数的渐近增长:给定俩个函数f(n)和g(n),如果存在一个整数N,使得对于所有的n&gt;N,f(n)总是比g(n)大,那么,我们说f(n)的增长渐近快于g(n)。</p><ul><li>我们可以忽略加法常数。</li><li>与最高次项相乘的常数并不重要。</li><li>最高次项的指数大的,函数随着n的增长,结果也会增长更快。</li></ul><p>判断一个算法的效率时,函数中的常数和其他次要项常常可以忽略,而更应该关注主项(最高阶项)的阶数。</p><p>某个算法,随着n的增大,它会越来越优于另一算法,或者越来越差于另一算法。</p><h3 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><h4 id="算法时间复杂度定义"><a href="#算法时间复杂度定义" class="headerlink" title="算法时间复杂度定义"></a>算法时间复杂度定义</h4><p>在进行算法分析时,语句总的执行次数T(n)是关于问题规模n的函数,进而分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度,也就是算法的时间度量,记作T(n)=O(f(n))。它表示随时间规模n的增大,算法执行时间的增长率和f(n)的增长率相同,称为算法的渐近时间复杂度,简称为时间复杂度。其中f(n)是问题规模n的某个函数。</p><h4 id="推导大O阶方法"><a href="#推导大O阶方法" class="headerlink" title="推导大O阶方法"></a>推导大O阶方法</h4><p>推导大O阶:<br>(1)用常数1取代运行时间中的所有加法常数。<br>(2)在修改后的运行次数函数中,只保留最高阶项。<br>(3)如果最高阶项存在且其系数不是1,则去除与这个项相乘的系数。得到的结果就是大O阶。</p><h4 id="常数阶-O-1"><a href="#常数阶-O-1" class="headerlink" title="常数阶:O(1)"></a>常数阶:O(1)</h4><h4 id="线性阶-O-n"><a href="#线性阶-O-n" class="headerlink" title="线性阶:O(n)"></a>线性阶:O(n)</h4><p>分析算法的复杂度,关键就是要分析循环结构的运行情况。</p><h4 id="对数阶-O-logn"><a href="#对数阶-O-logn" class="headerlink" title="对数阶:O(logn)"></a>对数阶:O(logn)</h4><p>eg:O(logn)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    count <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">/* 时间复杂度为O(1)的程序步骤序列 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="平方阶-O-n-2"><a href="#平方阶-O-n-2" class="headerlink" title="平方阶:O(n^2)"></a>平方阶:O(n^2)</h4><p>eg:O(m*n)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token comment">/* 时间复杂度为O(1)的程序步骤序列 */</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么下面算法的时间复杂度为多少呢？</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token comment">/* 时间复杂度为O(1)的程序步骤序列 */</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于当i=0时,内循环执行了n次,当i=1时,执行了n-1次,……当i=n-1时,执行了1次。所以总的执行次数为:</p><blockquote><p>n+(n-1)+(n-2)+…+1=n(n+1)/2=n^2/2+n/2</p></blockquote><p>根据大O阶方法得出这段代码的时间复杂度为O(n^2)。</p><p>此外还有nlogn阶、立方阶、指数阶</p><p>常见的时间复杂度所耗费的时间从小到大依次是:</p><p><code>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</code></p><h3 id="最坏情况和平均情况"><a href="#最坏情况和平均情况" class="headerlink" title="最坏情况和平均情况"></a>最坏情况和平均情况</h3><p>最坏情况和平均情况:</p><p>平均运行时间是所有情况中最有意义的,因为它是期望的运行时间。</p><p>一般在没有特殊说明的情况下,都是指最坏时间复杂度。</p><h3 id="算法空间复杂度"><a href="#算法空间复杂度" class="headerlink" title="算法空间复杂度"></a>算法空间复杂度</h3><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><p>线性表(List):零个或多个数据元素的有限序列。</p><p>若将线性表记为(a1,…ai-1,ai,ai+1,…ai+n),则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的<code>直接前驱元素</code>,ai+1是ai的<code>直接后继元素</code>。线性表元素的个数n(n&gt;=0)定义为<code>线性表的长度</code>,当n=0时,称为<code>空表</code>。称i为数据元素ai在线性表中的<code>位序</code>。</p><p>在较复杂的线性表中,一个数据元素可以由若干个数据项组成。</p><h3 id="线性表的抽象数据类型"><a href="#线性表的抽象数据类型" class="headerlink" title="线性表的抽象数据类型"></a>线性表的抽象数据类型</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">ADT 线性表<span class="token punctuation">(</span>List<span class="token punctuation">)</span>Data      线性表的数据对象集合为<span class="token punctuation">{</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>an<span class="token punctuation">}</span><span class="token punctuation">,</span>每个元素的类型均为DataType。其中<span class="token punctuation">,</span>除第一个元素a1外<span class="token punctuation">,</span>每一个元素有且只有一个直接前驱元素<span class="token punctuation">,</span>除了最后一个元素an外<span class="token punctuation">,</span>每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。Operation       <span class="token function">InitList</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">:</span>初始化操作<span class="token punctuation">,</span>建立一个空的线性表L。       <span class="token function">ListEmpty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">:</span>若线性表为空<span class="token punctuation">,</span>返回true<span class="token punctuation">,</span>否则返回false。       <span class="token function">ClearList</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">:</span>将线性表清空。       <span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token operator">:</span>将线性表L中的第i个位置元素值返回给e。       <span class="token function">LocateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token operator">:</span>在线性表L中查找与给定值e相等的元素<span class="token punctuation">,</span>如果查找成功<span class="token punctuation">,</span>返回该元素在表中序号表示成功<span class="token punctuation">;</span>否则<span class="token punctuation">,</span>返回<span class="token number">0</span>表示失败。       <span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token operator">:</span>在线性表L中的第i个位置插入新元素e。       <span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token operator">:</span>删除线性表L中第i个位置元素<span class="token punctuation">,</span>并用e返回其值。       <span class="token function">ListLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">:</span>返回线性表L的元素个数。endADT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:</p><ul><li><p>当传递一个参数给函数的时候,这个参数会不会在函数内被改动决定了使用什么参数形式。</p></li><li><p>如果需要被改动,则需要传递指向这个参数的指针。</p></li><li><p>如果不用被改动,可以直接传递这个参数。</p></li></ul><h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3><h4 id="顺序存储定义"><a href="#顺序存储定义" class="headerlink" title="顺序存储定义"></a>顺序存储定义</h4><p>线性表的顺序存储结构,指的是用一段地址连续的存储单元依次存储线性表的数据元素。</p><h4 id="顺序存储表示"><a href="#顺序存储表示" class="headerlink" title="顺序存储表示"></a>顺序存储表示</h4><p>一维数组来实现顺序存储结构</p><p>线性表的顺序存储的结构代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">20</span>    </span><span class="token comment">/* 存储空间初始分配量 */</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token comment">/* ElemType类型根据实际情况而定,这里为int */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* 数组,存储数据元素 */</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>            <span class="token comment">/* 线性表当前长度 */</span><span class="token punctuation">}</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据长度与线性表长度的区别"><a href="#数据长度与线性表长度的区别" class="headerlink" title="数据长度与线性表长度的区别"></a>数据长度与线性表长度的区别</h4><h4 id="地址计算方法"><a href="#地址计算方法" class="headerlink" title="地址计算方法"></a>地址计算方法</h4><p>存储器中每个存储单元都有自己的编号,这个编号称为地址。</p><p>线性表中第i+1个数据元素的存储位置和第i个数据元素的存储位置满足下列关系：</p><blockquote><p>LOC(ai+1)=LOC(ai)+c</p></blockquote><p>所以对于第i个数据元素ai的存储位置可以由a1推算得出:</p><blockquote><p>LOC(ai)=LOC(a1)+(i-1) * c</p></blockquote><h3 id="顺序存储结构的插入和删除"><a href="#顺序存储结构的插入和删除" class="headerlink" title="顺序存储结构的插入和删除"></a>顺序存储结构的插入和删除</h3><h4 id="获取元素操作"><a href="#获取元素操作" class="headerlink" title="获取元素操作"></a>获取元素操作</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OK</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ERROR</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token comment">/* Status是函数的类型,其值是函数结果状态代码,如OK等 */</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token comment">/* 初始条件:顺序线性表L已存在,1&lt;=i&lt;=ListLength(L) */</span><span class="token comment">/* 操作结果:用e返回L中第i个数据元素的值,注意i是指位置,第1个位置的数组是从0开始 */</span>Status <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e<span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>插入算法的思路:</p><p>1.如果插入位置不合理,抛出异常;</p><p>2.如果线性表长度大于等于数组长度,则抛出异常或动态增加容量;</p><p>3.从最后一个元素开始向前遍历到第i个位置,分别将它们都向后移动一个位置;</p><p>4.将要插入元素填入位置i处;</p><p>5.表长加1。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 初始条件:顺序线性表L已存在,1&lt;=i&lt;=ListLength(L) */</span><span class="token comment">/* 操作结果:在L中第i个位置之前插入新的数据元素e,L的长度加1 */</span>Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>length<span class="token operator">==</span>MAXSIZE<span class="token punctuation">)</span><span class="token comment">/* 顺序线性表已经满 */</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token operator">-&gt;</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">/* 当i比第一位置小或者比最后一位置后一位置还要大时 */</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>L<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token comment">/* 若插入数据位置不在表尾 */</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span>L<span class="token operator">-&gt;</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&gt;=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">/* 将要插入位置后的元素向后移一位 */</span>        <span class="token punctuation">{</span>            L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token comment">/* 将新元素插入 */</span>    L<span class="token operator">-&gt;</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>删除算法的思路:</p><p>1.如果删除位置不合理,抛出异常;</p><p>2.取出删除元素;</p><p>3.从删除元素位置开始遍历到最后一个元素位置,分别将它们都向前移动一个位置;</p><p>4.表长减1。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 初始条件:顺序线性表L已存在,1&lt;=i&lt;=ListLength(L) */</span><span class="token comment">/* 操作结果:删除L的第i个数据元素,并用e返回其值,L的长度减1 */</span>Status <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">/* 线性表为空*/</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token comment">/* 删除位置不正确 */</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span>L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>L<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token comment">/* 如果删除不是最后位置 */</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span> k<span class="token operator">&lt;</span>L<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">/* 将删除位置后继元素前移 */</span>        <span class="token punctuation">{</span>            L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        L<span class="token operator">-&gt;</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线性表顺序存储结构的优缺点"><a href="#线性表顺序存储结构的优缺点" class="headerlink" title="线性表顺序存储结构的优缺点"></a>线性表顺序存储结构的优缺点</h4><h3 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3><h4 id="线性表的链式存储结构定义"><a href="#线性表的链式存储结构定义" class="headerlink" title="线性表的链式存储结构定义"></a>线性表的链式存储结构定义</h4><p>n个结点(ai的存储映像)链结成一个链表,即为线性表(a1,a2,…,an)的链式存储结构叫做<code>单链表</code>。</p><p>链表中第一个结点的存储位置叫做头指针。</p><p>在单链表的第一个结点前附设一个结点,称为头结点。</p><h4 id="头指针和头结点的异同"><a href="#头指针和头结点的异同" class="headerlink" title="头指针和头结点的异同"></a>头指针和头结点的异同</h4><h4 id="线性表的链式存储结构代码描述"><a href="#线性表的链式存储结构代码描述" class="headerlink" title="线性表的链式存储结构代码描述"></a>线性表的链式存储结构代码描述</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 线性表的单链表存储结构 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">/* 定义LinkList */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结点是存放数据元素的数据域和存放后继结点地址的指针域组成。</p><h3 id="单链表的读取"><a href="#单链表的读取" class="headerlink" title="单链表的读取"></a>单链表的读取</h3><p>获得链表第i个数据的算法思路:</p><p>1.声明一个指针p指向链表第一个结点,初始化j从1开始;</p><p>2.当j &lt; i时,就遍历链表,让p的指针向后移动,不断指向下一结点,j累加1;</p><p>3.若到链表末尾p为空,则说明第i个结点不存在;</p><p>4.否则查找成功,返回结点p的数据。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 初始条件:链式线性表L已存在,1&lt;=i&lt;=ListLength(L) */</span><span class="token comment">/* 操作结果:用e返回L中第i个数据元素的值 */</span>Status <span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    LinkList p<span class="token punctuation">;</span><span class="token comment">/* 声明一结点p */</span>    p <span class="token operator">=</span> L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">/* 让p指向链表L的第一个结点 */</span>    j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">/* j为计数器 */</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token comment">/* p不为空或者计数器j还没有等于i时,循环继续 */</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">/* 让p指向下一个结点 */</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">||</span>j<span class="token operator">&gt;</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment">/* 第i个元素不存在 */</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span><span class="token comment">/* 取第i个元素的数据 */</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单链表的插入与删除"><a href="#单链表的插入与删除" class="headerlink" title="单链表的插入与删除"></a>单链表的插入与删除</h3><h4 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h4><p>单链表第i个数据插入结点的算法思路:</p><p>1.声明一指针p指向链表头结点,初始化j从1开始;</p><p>2.当j &lt; i时,就遍历链表,让p的指针向后移动,不断指向下一结点,j累加1;</p><p>3.若到链表末尾p为空,则说明第i个结点不存在;</p><p>4.否则查找成功,在系统中生成一个空结点s;</p><p>5.将数据元素e赋值给s-&gt;data;</p><p>6.单链表的插入标准语句s-&gt;next=p-&gt;next; p-&gt;next=s;</p><p>7.返回成功。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 初始条件:链式线性表L已存在,1&lt;=i&lt;=ListLength(L) */</span><span class="token comment">/* 操作结果:在L中第i个位置之前插入新的数据元素e,L的长度加1 */</span>Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    LinkList p<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">*</span>L<span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">)</span><span class="token comment">/* 寻找第i个结点 */</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment">/* 第i个元素不存在 */</span>    <span class="token punctuation">}</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 生成新结点(C语言标准函数) */</span>    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">/* 将p的后继结点赋值给s的后继 */</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">/* 将s赋值给p的后继 */</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h4><p>单链表第i个数据删除结点的算法思路:</p><p>1.声明一指针p指向链表头结点,初始化j从1开始;</p><p>2.当j &lt; i时,就遍历链表,让p的指针向后移动,不断指向下一结点,j累加1;</p><p>3.若到链表末尾p为空,则说明第i个结点不存在;</p><p>4.否则查找成功,将欲删除的结点p-&gt;next赋值给q;</p><p>5.单链表的删除标准语句p-&gt;next=q-&gt;next;</p><p>6.将q结点中的数据赋值给e,作为返回;</p><p>7.释放q结点;</p><p>8.返回成功。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 初始条件:链式线性表L已存在,1&lt;=i&lt;=ListLength(L) */</span><span class="token comment">/* 操作结果:删除L的第i个数据元素,并用e返回其值,L的长度减1 */</span>Status <span class="token function">ListDelete</span><span class="token punctuation">(</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    LinkList p<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">*</span>L<span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token operator">&amp;&amp;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">)</span><span class="token comment">/* 遍历寻找第i个元素 */</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment">/* 第i个元素不存在 */</span>    <span class="token punctuation">}</span>    q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">/* 将q的后继结点赋值给p的后继 */</span>    <span class="token operator">*</span>e <span class="token operator">=</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span><span class="token comment">/* 将q结点中的数据给e */</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 让系统回收此结点,释放内存 */</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于插入和删除数据越频繁的操作,单链表的效率优势就越明显。</p><h2 id="单链表的整表创建"><a href="#单链表的整表创建" class="headerlink" title="单链表的整表创建"></a>单链表的整表创建</h2><p>单链表整表创建的算法思路:</p><p>(1).</p><p>(2).</p><p>(3).</p><p>(4).</p><p>  1.<br>  2.<br>  3.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="单链表的整表删除"><a href="#单链表的整表删除" class="headerlink" title="单链表的整表删除"></a>单链表的整表删除</h2><hr><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="查找概论"><a href="#查找概论" class="headerlink" title="查找概论"></a>查找概论</h3><p>查找表(Search Table)是由同一类型的数据元素(或记录)构成的集合。</p><p>关键字(Key)是数据元素中某个数据项的值。</p><p>若此关键字可以唯一地标志一个记录,则称此关键字为主关键字(Primary Key)。对于那些可以识别多个数据元素(或记录)的关键字,我们称为次关键字(Secondary Key)。</p><p>查找就是根据给定的某个值,在查找表中确定一个其关键字等于给定值的数据元素(或记录)。</p><p>查找表按照操作方式来分有俩大种:静态查找表和动态查找表。</p><ul><li>静态查找表(Static Search Table):只作查找操作的查找表。它的主要操作有:</li></ul><p>1.查询某个”特定的”数据元素是否在表中。<br>2.检索某个”特定的”数据元素和各种属性。</p><ul><li>动态查找表(Dynamic Search Table):在查找过程中同时插入查找表中不存在的数据元素,或者从查找表中删除已经存在的某个数据元素。</li></ul><h3 id="顺序查找表"><a href="#顺序查找表" class="headerlink" title="顺序查找表"></a>顺序查找表</h3><p>针对线性表进行查找操作就是静态查找表。</p><p>顺序查找(Sequential Search)又叫线性查找,是最基本的查找技术,它的查找过程是:从表中第一个(或最后一个)记录开始,逐个进行记录的关键字和给定值比较,若某个记录的关键字和给定值相等,则查找成功,找到所查的记录;如果直到最后一个(或第一个)记录,其关键字和给定值比较都不等时,则表中没有所查的记录,查找不成功。</p><h4 id="顺序表查找算法"><a href="#顺序表查找算法" class="headerlink" title="顺序表查找算法"></a>顺序表查找算法</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 顺序查找,a为数组,n为要查找的数组个数,key为要查找的关键字 */</span><span class="token keyword">int</span> <span class="token function">Sequential_Search</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/liaojie.github.io/2021/11/21/python/"/>
      <url>/liaojie.github.io/2021/11/21/python/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/python1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/python2.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android网络编程</title>
      <link href="/liaojie.github.io/2021/11/20/android-wang-luo-bian-cheng/"/>
      <url>/liaojie.github.io/2021/11/20/android-wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>什么是网络编程?</p><p>网络编程从大的方面就是说对信息的发送接收。</p><p>通过操作相应API调度计算机资源硬件，并且利用管道(网线)进行数据交互的过程。</p><p>更为具体的涉及：网络模型、套接字、数据包</p><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>接口:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/downloadfile.png"></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void downFile(View view) {       new Thread(new Runnable() {           @Override           public void run() {               InputStream inputStream = null;               FileOutputStream fileOutputStream = null;               try {                   URL url = new URL(BASE_URL + "/download/11");                   HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();                   httpURLConnection.setConnectTimeout(10000);                   httpURLConnection.setRequestMethod("GET");                   httpURLConnection.setRequestProperty("Accept-Language","zh-CN,zh;q=0.9");                   httpURLConnection.setRequestProperty("Accept","*/*");                   httpURLConnection.connect();                   int responseCode = httpURLConnection.getResponseCode();                   Log.d(TAG,"responseCode == &gt; " + responseCode);                   if(responseCode == HttpURLConnection.HTTP_OK) {                       String headerField = httpURLConnection.getHeaderField("Content-disposition");                       Log.d(TAG,"headerField == &gt; " + headerField);                       //                        int index = headerField.indexOf("filename=");                       //                        String fileName = headerField.substring(index + "filename=".length());                       //                        Log.d(TAG,"fileName -- &gt; " + fileName);                       String fileName = headerField.replace("attachment; filename=","");                       Log.d(TAG,"fileName -- &gt; " + fileName);                       File picFile = RequestTestActivity.this.getExternalFilesDir(Environment.DIRECTORY_PICTURES);                       if(!picFile.exists()) {                           picFile.mkdirs();                       }                       File file = new File(picFile + File.separator + fileName);                       if(!file.exists()) {                           file.createNewFile();                       }                       fileOutputStream = new FileOutputStream(file);                       inputStream = httpURLConnection.getInputStream();                       byte[] buffer = new byte[1024];                       int len;                       while((len = inputStream.read(buffer,0,buffer.length)) != -1) {                           fileOutputStream.write(buffer,0,len);                       }                       fileOutputStream.flush();                   }               } catch(Exception e) {                   e.printStackTrace();               } finally {                   IOUtils.ioClose(inputStream);                   IOUtils.ioClose(fileOutputStream);               }           }       }).start();   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Url携带参数"><a href="#Url携带参数" class="headerlink" title="Url携带参数"></a>Url携带参数</h2><p>接口<br>get方法</p><blockquote><p>/get/param<br>参数：</p></blockquote><ul><li>keyword 关键字</li><li>page 页码</li><li>order 0 顺序 1 逆序</li></ul><p>eg:</p><blockquote><p>/get/param?keyword=你好&amp;page=1&amp;order=0</p></blockquote><p>参数在Url上,我们可以直接对其进行拼接即可。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void startRequest(final Map&lt;String,String&gt; params,final String method,final String api) {       new Thread(new Runnable() {           @Override           public void run() {               BufferedReader bufferedReader = null;               try {                   //组装参数                   StringBuilder sb = new StringBuilder();                   if(params != null &amp;&amp; params.size() &gt; 0) {                       sb.append("?");                       Iterator&lt;Map.Entry&lt;String,String&gt;&gt; iterator = params.entrySet().iterator();                       while(iterator.hasNext()) {                           Map.Entry&lt;String,String&gt; next = iterator.next();                           sb.append(next.getKey());                           sb.append("=");                           sb.append(next.getValue());                           if(iterator.hasNext()) {                               sb.append("&amp;");                           }                       }                       Log.d(TAG,"sb result -- &gt; " + sb.toString());                   }                   String params = sb.toString();                   URL url;                   if(params != null &amp;&amp; params.length() &gt; 0) {                       url = new URL(BASE_URL + api + params);                   } else {                       url = new URL(BASE_URL + api);                   }                   Log.d(TAG,"url -=-- &gt; " + url.toString());                   HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();                   httpURLConnection.setRequestMethod(method);                   httpURLConnection.setRequestProperty("Accept-Language","zh-CN,zh;q=0.9");                   httpURLConnection.setRequestProperty("Accept","*/*");                   httpURLConnection.connect();                   int responseCode = httpURLConnection.getResponseCode();                   if(responseCode == HttpURLConnection.HTTP_OK) {                       InputStream inputStream = httpURLConnection.getInputStream();                       bufferedReader = new BufferedReader(new InputStreamReader(inputStream));                       String json = bufferedReader.readLine();                       Log.d(TAG,"result -=-=- &gt; " + json);                   }               } catch(Exception e) {                   e.printStackTrace();               } finally {                   if(bufferedReader != null) {                       try {                           bufferedReader.close();                       } catch(IOException e) {                           e.printStackTrace();                       }                   }               }           }       }).start();   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><p>post/get</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void getWithParams(View view) {    Map&lt;String,String&gt; params = new HashMap&lt;&gt;();    params.put("keyword","这是我的关键字Keyword");    params.put("page","12");    params.put("order","0");    startRequest(params,"GET","/get/param");}public void postWithParams(View view) {    Map&lt;String,String&gt; params = new HashMap&lt;&gt;();    params.put("string","这是我提交的字符串");    startRequest(params,"POST","/post/string");    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="请求图片"><a href="#请求图片" class="headerlink" title="请求图片"></a>请求图片</h2><p>网络权限和配置</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;uses-permission android:name="android.permission.INTERNET" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建xml文件夹,在其中新建network_security_config.xml</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;network-security-config&gt;    &lt;domain-config&gt;        &lt;domain includeSubdomains="true"&gt;example.com&lt;/domain&gt;        &lt;domain-config cleartextTrafficPermitted="true"&gt;            &lt;domain includeSubdomains="true"&gt;www.example.net&lt;/domain&gt;            &lt;domain includeSubdomains="true"&gt;imgs.example.com&lt;/domain&gt;        &lt;/domain-config&gt;    &lt;/domain-config&gt;&lt;/network-security-config&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/security_config.png"></p><p>请求图片内容</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void requestImage(View view) {      new Thread(new Runnable() {          @Override          public void run() {              loadImage();          }      }).start();  }  private void loadImage() {      try {          URL url = new URL("https://imgs.example.com/group1/M00/00/05/rBsADV2rEz-AIzSoAABi-6nfiqs456.png");          HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();          httpURLConnection.setRequestMethod("GET");          httpURLConnection.setConnectTimeout(10000);          httpURLConnection.connect();          InputStream is = httpURLConnection.getInputStream();          final Bitmap bitmap = BitmapFactory.decodeStream(is);          runOnUiThread(new Runnable() {              @Override              public void run() {                  ImageView resultView = findViewById(R.id.image_result);                  resultView.setImageBitmap(bitmap);              }          });      } catch(Exception e) {          e.printStackTrace();      }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加布局UI:一个Button和一个ImageView</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="https://schemas.android.com/apk/res/android"    android:layout_width="match_parent"    android:layout_height="match_parent"    android:orientation="vertical"&gt;    &lt;Button        android:layout_width="match_parent"        android:layout_height="wrap_content"        android:onClick="requestImage"        android:text="请求图片" /&gt;    &lt;ImageView        android:id="@+id/image_result"        android:layout_width="match_parent"        android:layout_height="match_parent" /&gt;&lt;/LinearLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面其实就是把图片流通过一个BitmapFactory来对流进行编码转成图片内容显示到控件上</p><hr><h2 id="post提交文本内容"><a href="#post提交文本内容" class="headerlink" title="post提交文本内容"></a>post提交文本内容</h2><p>接口地址</p><blockquote><p>/post/comment</p></blockquote><p>提交内容：</p><p>{<br>    “articleId”:”234123”,<br>    “commentContent”:”这是评论内容”<br>}</p><p>请求代码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void postRequest(View view) {    new Thread(new Runnable() {        @Override        public void run() {            OutputStream outputStream = null;            InputStream inputStream = null;            try {                URL url = new URL(BASE_URL + "/post/comment");                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();                httpURLConnection.setRequestMethod("POST");                httpURLConnection.setConnectTimeout(10000);                httpURLConnection.setRequestProperty("Content-Type","application/json;charset=UTF-8");                httpURLConnection.setRequestProperty("Accept-Language","zh-CN,zh;q=0.9");                httpURLConnection.setRequestProperty("Accept","application/json, text/plain, */*");                CommentItem commentItem = new CommentItem("234134123","你的文章写得也太好了！");                Gson gson = new Gson();                String jsonStr = gson.toJson(commentItem);                byte[] bytes = jsonStr.getBytes("UTF-8");                Log.d(TAG,"jsonStr length -- &gt; " + bytes.length);                httpURLConnection.setRequestProperty("Content-Length",String.valueOf(bytes.length));                //连接                httpURLConnection.connect();                //把数据给到服务                outputStream = httpURLConnection.getOutputStream();                outputStream.write(bytes);                outputStream.flush();                //拿结果                int responseCode = httpURLConnection.getResponseCode();                if(responseCode == HttpURLConnection.HTTP_OK) {                    inputStream = httpURLConnection.getInputStream();                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));                    Log.d(TAG,"result -- &gt; " + bufferedReader.readLine());                }            } catch(Exception e) {                e.printStackTrace();            } finally {                IOUtils.ioClose(inputStream);                IOUtils.ioClose(outputStream);            }        }    }).start();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用GsonFormat生成以下类：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class CommentItem {    public CommentItem(String articleId,String commentContent) {        this.articleId = articleId;        this.commentContent = commentContent;    }    private String articleId;    private String commentContent;    public String getArticleId() {        return articleId;    }    public void setArticleId(String articleId) {        this.articleId = articleId;    }    public String getCommentContent() {        return commentContent;    }    public void setCommentContent(String commentContent) {        this.commentContent = commentContent;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><blockquote><p>result – &gt; {“success”:true,”code”:10000,”message”:”评论成功:你的文章写得也太好了！”,”data”:null}</p></blockquote><hr><h2 id="单-多-文件上传"><a href="#单-多-文件上传" class="headerlink" title="单(多)文件上传"></a>单(多)文件上传</h2><h3 id="接口地址"><a href="#接口地址" class="headerlink" title="接口地址"></a>接口地址</h3><p>方法：post</p><blockquote><p>/file/upload</p></blockquote><p>参数file</p><p>多文件上传</p><blockquote><p>/files/upload</p></blockquote><p>方法post 参数 files</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>用postMan上传一个文件进行抓包去拼接内容</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void uploadFile(File file,String fileKey,String fileName,String fileType,String BOUNDARY,                                   OutputStream outputStream,boolean isLast) throws IOException {       //准备数据       StringBuilder headerSbInfo = new StringBuilder();       headerSbInfo.append("--");       headerSbInfo.append(BOUNDARY);       headerSbInfo.append("\r\n");       headerSbInfo.append("Content-Disposition: form-data; name=\"" + fileKey + "\"; filename=\"" + fileName + "\"");       headerSbInfo.append("\r\n");       headerSbInfo.append("Content-Type: " + fileType);       headerSbInfo.append("\r\n");       headerSbInfo.append("\r\n");       byte[] headerInfoBytes = headerSbInfo.toString().getBytes("UTF-8");       outputStream.write(headerInfoBytes);       //文件内容       FileInputStream fos = new FileInputStream(file);       BufferedInputStream bfi = new BufferedInputStream(fos);       byte[] buffer = new byte[1024];       int len;       while((len = bfi.read(buffer,0,buffer.length)) != -1) {           outputStream.write(buffer,0,len);       }       //写尾部信息       StringBuilder footerSbInfo = new StringBuilder();       footerSbInfo.append("\r\n");       footerSbInfo.append("--");       footerSbInfo.append(BOUNDARY);       if(isLast) {           footerSbInfo.append("--");           footerSbInfo.append("\r\n");       }       footerSbInfo.append("\r\n");       outputStream.write(footerSbInfo.toString().getBytes("UTF-8"));   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是多文件,我们只需要向body里多添加几个文件而已,格式一样的。</p><p>多文件上传调用</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">OutputStream outputStream = null;try {    File fileOne = new File("/storage/emulated/0/Download/1.jpg");    File fileTwo = new File("/storage/emulated/0/Download/rBsADV2rEz-AIzSoAABi-6nfiqs456.png");    File fileThree = new File("/storage/emulated/0/Download/2.jpg");    File fileFour = new File("/storage/emulated/0/Download/rBPLFV2A8POASi1aAAE-PgvGzOo723.jpg");    String fileKey = "files";    String fileType = "image/jpeg";    String BOUNDARY = "--------------------------954555323792164398227139";    //String BOUNDARY = "----------------------------954555323792164398227139--";    //String BOUNDARY = "----------------------------954555323792164398227139";    URL url = new URL(BASE_URL + "/files/upload");    HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();    httpURLConnection.setRequestMethod("POST");    httpURLConnection.setConnectTimeout(10000);    httpURLConnection.setRequestProperty("User-Agent", "Android/" + Build.VERSION.SDK_INT);    httpURLConnection.setRequestProperty("Accept", "*/*");    httpURLConnection.setRequestProperty("Cache-Control", "no-cache");    httpURLConnection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + BOUNDARY);    httpURLConnection.setRequestProperty("Connection", "keep-alive");    httpURLConnection.setDoOutput(true);    httpURLConnection.setDoInput(true);    //连接    httpURLConnection.connect();    outputStream = httpURLConnection.getOutputStream();    uploadFile(fileOne, fileKey, fileOne.getName(), fileType, BOUNDARY, outputStream, false);    uploadFile(fileTwo, fileKey, fileTwo.getName(), fileType, BOUNDARY, outputStream, false);    uploadFile(fileFour, fileKey, fileFour.getName(), fileType, BOUNDARY, outputStream, false);    uploadFile(fileThree, fileKey, fileThree.getName(), fileType, BOUNDARY, outputStream, true);    outputStream.flush();    //获取返回的结果    int responseCode = httpURLConnection.getResponseCode();    Log.d(TAG, "responseCode -- &gt; " + responseCode);    if (responseCode == HttpURLConnection.HTTP_OK) {        InputStream inputStream = httpURLConnection.getInputStream();        BufferedReader bf = new BufferedReader(new InputStreamReader(inputStream));        String result = bf.readLine();        Log.d(TAG, "result -- &gt; " + result);    }} catch (Exception e) {    e.printStackTrace();} finally {    if (outputStream != null) {        try {            outputStream.close();        } catch (IOException e) {            e.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>关于java的网络编程,其实也没什么的,先说一下网络模型：OSI参考模型&amp;TCP/IP参考模型</p><p>通常来讲,这个做开发的在这个传输层和网际层混,而应用层则是FTP/HTTP协议等,传输层就是这个TCP或者这个UDP,这个经常问到,面试的时候,说什么TCP和UDP的区别？</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png"></p><p>用户在这个应用层,我们在这个传输层和网际层。那么用户在操作数据时,是怎么样的过程呢？其实呀,数据先是从用户的应用层向下封装打包,再经过网络传输到接收端,接收端自下而上拆包,最后得到用户发送的数据。</p><p>大概是这样一个模式：A——-&gt;B——-&gt;B——–&gt;A</p><h3 id="网络通信的三要素"><a href="#网络通信的三要素" class="headerlink" title="网络通信的三要素"></a>网络通信的三要素</h3><p>IP地址、端口、传输协议</p><p>首先是IP地址,其实它是一个网络设备标识,就像你家的地址一样,只是它用数字表示,或者说像门号一样。假如把酒店看成网络，那么每间房门号就是一个IP地址啦。看看它的英文:Internet Protocol,也就是网络协议的意思</p><p>说到IP,还要说到域名。因为IP纯数字,不好记忆,那么就用域名与之对应,这个呢DNS服务器来解决,域名与IP地址是映射关系。比如说,我们可以通过百度的IP地址来找到百度的网页：202.108.22.5 ,也可以通过<a href="http://www.baidu.com/">www.baidu.com</a> 来找到同样的页面,这里百度公司就是通过DNS服务器把域名<a href="http://www.baidu.com/">www.baidu.com</a> 解析到202.108.22.5,所以他们存在映射关系,这样的话,是不是网民记<a href="http://www.baidu.com/">www.baidu.com</a> 比记202.108.22.5这个好多啦！</p><p>还有就是特殊的IP地址：本地的IP地址,或者说是本地的回环地址：127.0.0.1，主机名是：localHost</p><p>你也可以打开这个DOC命令行,输入ipconfig查看网络配置。</p><p>知道了IP地址,那在JAVA中如何获取IP地址呢？其实很简单,在JAVA中IP地址对应的是：InetAddress类,在java.net包中放着,需要用的话,就不用客气地把它导入。</p><p>InetAddress这个类没有构造方法,所以不能实例化,但可以通过它本身的方法获取到对象,还记得单例设计模式也是这样吗？</p><p>其主要的方法：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/InetAddress.png"></p><p>由上面的表子可以看出,要获取到IP地址:首先要得到这个InetAddress,然后通过这个InetAddress对象的getHostAddress方法就可以获取到这个IP地址。</p><blockquote><p>get：获得, Host：主机,Address：地址,也就是获取主机地址的意思</p></blockquote><p>那么,如何获取这个InetAddress对象呢？从上面的表子也可以看出有好几个静态的方法呢！这里的前提是我们不知道这个IP地址要获取的是IP地址,所以我们用这个方法来获取InetAddress对象,然后通过getHostAddress()方法来获取IP地址！</p><p>代码：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//导包import java.net.*;public class Demo{public static void main(String[] args)throws Exception{//获取InetAddress对象InetAddress ia = InetAddress.getByName("www.example.net");//然后调用InetAddress对象中的getHostAddress()方法获得IPString ip = ia.getHostAddress();//输出到控制台上看看结果吧：System.out.println("www.example.net的IP地址是："+ip);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取本地的IP地址</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//导包import java.net.*;public class Demo{public static void main(String[] args)throws Exception{//获取InetAddress对象InetAddress ia = InetAddress.getLocalHost();//获取IP地址String ip = ia.getHostAddress();//在实际开发中，一般简写为：                //InetAddress ia = InetAddress.getLocalHost().getHostAddress();System.out.println("本机IP地址为："+ip);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK,搞定完IP之后就到这个端口</p><p>我们通过IP找到了主机对吧！但是这个主机上有很多的软件吧,他们都在运行,当我们发送一个数据到主机上,那这个数据到底是给哪个软件的呢,这样就出现问题了！解决这个问题当然是用端口啦,这个端口并不是物理端口,所谓的物理端口就是计算机硬件上的插口,这里的端口是逻辑端口,关于端口的几点说明如下：</p><p>1.端口的范围从0<del>65535（2的16次方减1）<br>2.系统保留端口为：0</del>1024<br>3.一些常用的端口,FTP：21,SMTP：25,HTTP：80</p><p>最后一个是:协议</p><p>顾名思义,协议就是一起商量好共同来往的相关规定,或者说是传输规则。传输协议、UDP和TCP协议。</p><p>重点:UDP和TCP传输协议的区别</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/UDP.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/TCP.png"></p><p>解释一下上面的三次握手:</p><p>Client说：服务端哥，我想联你，在吗？—————&gt;请求链接</p><p>Server说：客户端弟，我在的，你联过来吧！———-&gt;服务端确认链接</p><p>Client说：那好，我真的联上来啦！——————–&gt;客户端确认链接</p><p>计算机与计算机之间的通信步骤:</p><p>1、通过IP地址找到主机;2、通过端口找到接收的程序;3、通过协议发送数据。</p><h3 id="传输协议-UDP"><a href="#传输协议-UDP" class="headerlink" title="传输协议:UDP"></a>传输协议:UDP</h3><p>UDP:不面向链接、不可靠、速度快,一般用于聊天、视频、通话之类的一次性数据传输,不需要精确数据或者永久数据的情况下使用。</p><p>在说这两个传输协议之前,要提到的是Socket,Socket大概是插座的意思,那么这里呢可以理解为网线插口,也就是一个端点。</p><p>现在有两台主机之间要传输数据,所以呢,首先要有码头,那我们看看如何创建码头。</p><p>UDP的码头是DatagramSocket,它可以接受和发送数据”包”。一般发送的话要指定IP地址,还有端口,而接受端可以不指定IP,但要监视端口。下面是DatagramSocket的常用构造方法：</p><blockquote><p>DatagramSocket() 构造数据报套接字并将其绑定到本地主机上任何可用的端口。 DatagramSocket(int port) 创建数据报套接字并将其绑定到本地主机上的指定端口。 DatagramSocket(int port, InetAddress laddr) 创建数据报套接字，将其绑定到指定的本地地址。</p></blockquote><p>第一个一般用于接收端,第二个用于发送端。</p><p>常用方法：<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/functions.png"></p><p>主要用到的还是接收和发送,另外就是获取IP地址,我们还需要一个类DatagramPacket.这个类是用于把数据打包的。常用的构造方法列一下：<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/DatagramPacket.png"></p><p>有了码头,有了数据包,接下来就是形象生动地说说步骤：</p><p>发送端的操作：</p><p>1.建立Socket服务,随便你指不指定端口,不指定系统分配。另外就是端口顺延,如果这次端口是1555,下次就是1556,因为当你运行完程序后,不能保证端口也释放了,为了防止出错,所以就这样顺延下去咯！</p><p>2.将要发送的数据封装到包中,准备发送.</p><p>3.发送数据,通过send方法发送出去.</p><p>4.最后,不要忘记关闭资源！</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%8F%91%E9%80%81%E7%AB%AF.png"></p><p>发送端代码:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//发送端//导包import java.net.*;public class Demo{public static void main(String[] args)throws Exception{//创建Socket服务DatagramSocket ds = new DatagramSocket();                //不指定端口也行，稍后在数据里指定。//把数据打包String data = "example：example.com";byte[] buf = data.getBytes();                //把数据转换成字节数组DatagramPacket dp = new DatagramPacket(buf,                                  buf.length,                                  InetAddress.getByName("PresidentsPC"),                                  10000);//通过名字获取IP，并指定端口//发送数据ds.send(dp);//关闭资源ds.close();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接受端的步骤</p><p>1.建立服务</p><p>2.定义一个缓冲区来接受数据</p><p>3.调用DatagramPacket中的各种方法来达到我们的需求</p><p>4.关闭资源</p><p>接收端的代码:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//接收端//导包import java.net.*;public class Server{public static void main(String[] args)throws Exception{//建立服务监视这个端口DatagramSocket ds = new DatagramSocket(10000);//定义一个缓冲区用于接收数据byte[] buf = new byte[1024];//可以乘以64，因为一个包在64K以内。DatagramPacket dp = new DatagramPacket(buf,buf.length);ds.receive(dp);//获取IP，这是一个习惯，因为要知道这数据是从那里来的String ip = dp.getAddress().getHostAddress();System.out.println("来自"+ip+"的数据是");//把数据弄出来吧System.out.println(new String(buf,0,dp.getLength()));//关闭资源ds.close();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>eg:先是发送键盘录入的程序,下面分析一下：</p><p>1.首先,要建立服务</p><p>2.获取资源,从控制台中获取,这个可以用高效的方法BufferedReader,读一行。</p><p>3.把资源打成包发送出去</p><p>4.关闭资源。</p><p>PS:这次我们进行异常处理</p><p>第一个是发送端(客户端)：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//客户端，用来发送从键盘录入的资源//导包import java.net.*;import java.io.*;public class Demo{public static void main(String[] args){//建立服务DatagramSocket ds = null;//获取输入字符BufferedReader br = null;try{if(ds==null)ds =  new DatagramSocket();if(br==null)br = new BufferedReader(new InputStreamReader(System.in));//获取键盘录入信息//把读取的资源打包byte[] buf = br.readLine().getBytes();//合在一起写啦。DatagramPacket dp =                         new DatagramPacket(buf,buf.length,                        InetAddress.getByName("PresidentsPC"),                        10004);// 打包数据并指定IP和端口//发送出去ds.send(dp);}catch(Exception e){System.out.println("数据发送失败");}finally{//关闭资源ds.close();if(br!=null)try{br.close();}catch(Exception e){System.out.println("流关不了，坏了！");}}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来是接收端(服务端):</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//接收端//导包import java.net.*;public class Server{public static void main(String[] args){//创建服务DatagramSocket ds = null;DatagramPacket dp = null;try{if(ds==null)ds = new DatagramSocket(10004);//创建缓冲区byte[] buf  = new byte[1024];//接收数据if(dp==null)dp = new DatagramPacket(buf,buf.length);ds.receive(dp);String ip  = dp.getAddress().getHostName();//输出数据到控制台上System.out.println(ip+" :"+new String(buf,                                     0,                                     dp.getLength()));//关闭资源}catch(Exception e){System.out.println("哎呀，妈呀，出问题了！");}finally{ds.close();}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来,我们要写一个多线程的,不断地接收数据</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">// 导包import java.io.*;import java.net.*;public class ChatDemo {public static void main(String[] args) {//创建读取线程new Thread(new ChatThread()).start();// 创建服务DatagramSocket ds = null;BufferedReader br = null;try {if (ds == null)ds = new DatagramSocket();// 读取键盘录入if (br == null)br =                        new BufferedReader(new InputStreamReader(System.in));// 读取数据String line = null;while ((line = br.readLine()) != null) {// 发送数据byte[] buf = line.getBytes();DatagramPacket dp = new DatagramPacket(buf, buf.length, InetAddress.getByName("PresidentsPC"), 10000);ds.send(dp);}} catch (Exception e) {System.out.println(e.toString());} finally {ds.close();if (br != null)try {br.close();} catch (Exception e) {System.out.println(e.toString());}}}}//搞一个线程来接受数据class ChatThread implements Runnable {public void run(){while(true){DatagramSocket ds = null;try {                      ds = new DatagramSocket(10000);//监视10000端口                        //获取数据                        byte[] buf = new byte[1024];                                                DatagramPacket dp = new DatagramPacket(buf,buf.length);                        ds.receive(dp);                                                                       //获取IP                        String ip = dp.getAddress().getHostAddress();                                                //输出数据                        System.out.println(ip+" :"+new String(buf,0,dp.getLength()));                                                                   } catch (Exception e) {                        System.out.println(e.toString());                        }finally{                        ds.close();                        }}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="传输协议：TCP"><a href="#传输协议：TCP" class="headerlink" title="传输协议：TCP"></a>传输协议：TCP</h3><p>TCP第一步也是创建服务,但是这服务稍微有点不同:客户端的服务是Sokcet,服务端的服务是ServerSocket。无论是UDP,还是TCP,只要多写几次就熟悉了。</p><p>先看看Socket的常用的构造方法和普通方法</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/Socket.png"></p><p>客户端的步骤:</p><p>1.建立服务Socket</p><p>2.获取输出流,把数据变成字节数组,通过输出流发送给服务端。</p><p>3.关闭输出流,获取输入流,获取反馈信息</p><p>4.关闭资源</p><p>代码体现:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//导包import java.io.*;import java.net.*;public class Client {public static void main(String[] args) {// 创建服务Socket s = null;try {if (s == null)s = new Socket("PresidentsPC", 13000);//把数据转换成字节数组byte[] buf = "example".getBytes();//获取输出流OutputStream out = s.getOutputStream();//发送数据out.write(buf);//关闭发送流s.shutdownOutput();//获取输入流，获取反馈信息InputStream in = s.getInputStream();byte[] buffer  = new byte[1024];int len = in.read(buffer);//打印反馈信息System.out.println(new String(buffer,0,len));} catch (Exception e) {System.out.println(e.toString());}finally{if(s!=null){try{s.close();}catch(Exception e){System.out.println(e.toString());}}}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端又如何呢,其实还是大同小异的,要是IO知识掌握了,一点问题都没有.</p><p>步骤如下:</p><p>1.建立服务ServerSocket服务,然后用ServerSocket的accept()方法得到Socket服务</p><p>2.获取输入流,然后可以得到数据</p><p>3.对读到的数据进行处理,该干嘛干嘛去</p><p>4.反馈信息给客户端</p><p>5.各种关闭资源</p><p>代码:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//导包import java.io.*;import java.net.*;public class Server {public static void main(String[] args)throws Exception {//创建服务ServerSocket ss = new ServerSocket(13000);Socket s = ss.accept();//先搞到IP地址String ip = s.getInetAddress().getHostAddress();//输出链接上来的机器System.out.println(ip+"-----connected");//获取输入流InputStream in  = s.getInputStream();//读取数据byte[] buf = new byte[1024];int len = 0;while((len = in.read(buf))!=-1){//打印到控制台上吧System.out.println(new String(buf,0,len));}s.shutdownInput();//发送反馈信息OutputStream out = s.getOutputStream();out.write("服务端收到啦".getBytes());//关闭资源s.close();ss.close();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子也搞定了,接下来就可以更深入发学习TCP其他场景的应用了。比如说,上传图片并发上传图片,还要追求高效,这可以采用缓冲技术。</p><h3 id="网络传输应用"><a href="#网络传输应用" class="headerlink" title="网络传输应用"></a>网络传输应用</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.io.*;import java.net.*;class ServerForAll {public static void main(String[] args) throws Exception {// 创建服务ServerSocket ss = new ServerSocket(19000);// 创建线程while (true) {Socket s = ss.accept();new Thread(new ServerThread(s)).start();}}}class ServerThread implements Runnable {// 持有s的引用private Socket s;public ServerThread(Socket s) {this.s = s;}public void run() {// 获取流InputStream in = null;OutputStream out = null;// 把上传的文件直接入到目录下OutputStream outPutFile = null;String ip = s.getInetAddress().getHostAddress();System.out.println(ip+"---connected");int count = 0;try {in = s.getInputStream();out = s.getOutputStream();File file = new File("Data.jpg");if (file.exists())file = new File("Data" + "(" + (count++) + ")");outPutFile = new FileOutputStream(file);// 读取文件byte[] buf = new byte[1024];int len = 0;while ((len = in.read(buf)) != -1) {// 写数据outPutFile.write(buf, 0, len);}// 反馈信息out.write("上传成功！".getBytes());s.close();outPutFile.close();} catch (Exception e) {System.out.println(e.toString());}}}class Client {public static void main(String[] args) {// 把路径直接用参数传入if (args.length == 0) {System.out.println("请传入jpg图片的路径参数");return;}if (!args[0].endsWith(".jpg")) {System.out.println("图片格式不正确");return;}File file = new File(args[0]);if (!file.exists()) {System.out.println("文件不存在");return;}// 创建服务Socket s = null;InputStream in = null;try {s = new Socket("PresidentsPC", 19000);in = new FileInputStream(file);// 获取输出流OutputStream out = s.getOutputStream();byte[] buf = new byte[1024];int len = 0;while ((len = in.read(buf)) != -1) {// 发送数据out.write(buf, 0, len);}// 关闭发送流s.shutdownOutput();// 获取输入流，获取反馈信息InputStream input = s.getInputStream();byte[] buffer = new byte[1024];int length = input.read(buffer);// 打印反馈信息System.out.println(new String(buffer, 0, length));} catch (Exception e) {System.out.println(e.toString());} finally {if (s != null) {try {s.close();} catch (Exception e) {System.out.println(e.toString());}if (in != null)try {in.close();} catch (Exception e) {System.out.println(e.toString());}}}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><h3 id="什么是http协议？"><a href="#什么是http协议？" class="headerlink" title="什么是http协议？"></a>什么是http协议？</h3><p>http是什么意思？HyperText Transfer Protocol 翻译过来就是超文本传输协议<br>协议就是约定的意思,内容是Http相关的格式</p><p>http协议是基于TCP/IP协议之上的应用层协议<br>http工作流程</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/response.png"></p><p>客户端发起一个请求,然后服务器处理请求,做出响应。</p><p>这个流程是一定的,换句话说,请求一定是客户端请求,响应一定是服务端响应。不可以是服务端向客户端发起请求,也不可以是客户端做出响应。</p><p>这种情况是有的,但是当发起请求那一刻,你就要把它看成客户端了。</p><p>这是充要条件</p><p>客户端=&gt;发起请求，发起请求=&gt;客户端</p><p>响应结果=&gt;服务端。服务端=&gt;响应结果</p><h3 id="http不保存状态"><a href="#http不保存状态" class="headerlink" title="http不保存状态"></a>http不保存状态</h3><p>当一个请求,一个响应完成时,那么一个http的请求就完成了。当然也有特殊情况,就是无网了,你发不起请求。然后服务器处理超时了,你也得不到结果。</p><p>http是无状态协议,什么意思呢？也就是不保存状态。一次请求完成后,下一次再发起请求,又是新的。该设置什么内容设置什么内容,要给什么参数给什么参数。</p><p>http无状态,那怎么知道这个请求用户已经登录了呢？登录状态保存在哪里呢？所以就引入了cookies这个东西了。在cookies里可以保存一个令牌,每次请求的时候,把这个令牌作为参数给服务器校验,这样子就可以知道这个用户的登录状态啦。<br>http的8种请求方式</p><ul><li>get</li><li>post</li><li>put</li><li>delete</li><li>head</li><li>trace</li><li>options</li><li>connect</li></ul><p>作为Android开发人员知道前面四个就够了。</p><p>通常情况下：</p><blockquote><p>get：用于请求数据 post：用于提交数据 put：用于更新数据 delete：用于删除数据</p></blockquote><p>同一个接口,不同的请求方式作用就不一样了</p><p>请求文章的CRUD接口</p><ul><li>请求：/article/{articleId} 请求方式：get请求</li><li>删除：/article/{articleId} 请求方式：deleted请求</li><li>更新：/article/{articleId} 请求方式：put请求</li><li>提交(发表文章)：/article/ 请求方式：post请求</li></ul><h3 id="http响应码"><a href="#http响应码" class="headerlink" title="http响应码"></a>http响应码</h3><p>响应码:说明是服务器给客户端结果码</p><p>相信大家在浏览某些网站时应该见过404吧,那么404是什么意思呢？<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%93%8D%E5%BA%94%E7%A0%81.png"></p><p>404也就是4xx,4开头的表示服务器无法请求<br>而5开头的,比如说500,服务器崩溃了指的是服务器的问题</p><h3 id="http请求格式"><a href="#http请求格式" class="headerlink" title="http请求格式"></a>http请求格式</h3><p>当我们使用http向服务器发起一个请求时,它的格式是怎么样子的呢？</p><p>首先这个请求是包含了：</p><ul><li>请求行</li><li>请求头</li><li>空行</li><li>请求体<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E8%AF%B7%E6%B1%82%E6%A0%BC%E5%BC%8F.png"></li></ul><p>比如说我们用fiddler抓个get请求看看</p><p>get请求:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/get.png"></p><p>post或者put请求:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/post.png"></p><p>请求行</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E8%AF%B7%E6%B1%82%E8%A1%8C.png"><br>请求头</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E8%AF%B7%E6%B1%82%E5%A4%B4.png"></p><ul><li>Host 要访问的主机</li><li>Connection 连接保持，http1.1有，1.0没有这个。keep-alive可以提高效率，在一定时间里不断开tcp连接，进行下一个请求</li><li>Content-Length 内容长度，指的是后面请求正文的数据长度</li><li>Accept 响应内容格式，也就是返回内容格式</li><li>Origin 这个是源（不是标准http里的内容，因为我访问用的是chrome，是chrome加的）</li><li>User-Agent 用户客户端相关的信息，比如说浏览器呀，操作系统信息之类的</li><li>Content-Type 提交的内容类型，我提及的是json,编码是utf-8</li><li>Referer 来源，访问入口，比如说你在搜索引擎百度里搜索，进入到网站，那么这个来源就是百度了</li><li>Accept-Encoding 响应内容的编码格式</li><li>Accept-Language 响应内容的语言</li><li>Cookie cookies</li></ul><p>请求体</p><blockquote><p>{“state”:”0”,”msg”:”审核通过.”}</p></blockquote><p>请求正文内容</p><h3 id="http响应格式"><a href="#http响应格式" class="headerlink" title="http响应格式"></a>http响应格式</h3><ul><li>响应行</li><li>响应头</li><li>空行</li><li>响应体</li></ul><hr><h2 id="使用Java的API发起网络请求"><a href="#使用Java的API发起网络请求" class="headerlink" title="使用Java的API发起网络请求"></a>使用Java的API发起网络请求</h2><p>前面我们了解了Http协议,Android应用是用java编写的,到framework层还是用java编写的,而Android的网络请求,其实是对java的网络请求进行了封装。</p><p>在android6.0以前,有apache的HttpClient,使用简单</p><p>但是<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/HTTP.png"></p><p>所以,如果同学们以后打开别人的项目时报错,就是没有httpclient的时候就需要加上这个了。</p><pre class="line-numbers language-none"><code class="language-none">android {    useLibrary 'org.apache.http.legacy'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>推荐使用HttpURLConnection<br><a href="https://developer.android.google.cn/reference/java/net/HttpURLConnection?hl=en">官方文档</a></p><p>我们先看看java是如何进行网络请求的</p><p>代码:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static void loadData(String baseUrl, Map&lt;String, String&gt; params) {       try {           //拼接URL           StringBuilder sb = new StringBuilder(baseUrl);           if (params.size() &gt; 0) {               sb.append("?");               Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = params.entrySet();               for (Map.Entry&lt;String, String&gt; entry : entries) {                   sb.append(entry.getKey());                   sb.append("=");                   sb.append(entry.getValue());               }           }           String resultUrl = sb.toString();           URL url = new URL(resultUrl);           //打开连接           HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();           urlConnection.setRequestMethod("GET");           //设置请求超时时间           urlConnection.setConnectTimeout(1000);           urlConnection.setRequestProperty("accept", "*/*");           urlConnection.setRequestProperty("connection", "keep-alive");           urlConnection.setRequestProperty("Accept-Language", "zh-CN,zh");           //开始连接           urlConnection.connect();           //获取返回内容           Map&lt;String, List&lt;String&gt;&gt; headerFields = urlConnection.getHeaderFields();           Set&lt;Map.Entry&lt;String, List&lt;String&gt;&gt;&gt; entries = headerFields.entrySet();           for (Map.Entry&lt;String, List&lt;String&gt;&gt; entry : entries) {               System.out.println(entry.getKey() + " === " + entry.getValue());           }           InputStream inputStream = urlConnection.getInputStream();           BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));           String line;           while ((line = bufferedReader.readLine()) != null) {               System.out.println(line);           }           bufferedReader.close();       } catch (Exception e) {           e.printStackTrace();       }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void main(String[] args) {    Map&lt;String, String&gt; params = new HashMap&lt;&gt;();    loadData("https://www.example.net", params);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就把网页的内容获取到了<br>获取一个json数据:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void main(String[] args) {    Map&lt;String, String&gt; params = new HashMap&lt;&gt;();    //loadData("https://www.example.net", params);    //获取动态列表    // https://www.example.net/content/content/moment/list/1153952789488054272/1    loadData("https://www.example.net/content/content/moment/list/1153952789488054272/1", params);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将获取到的结果复制出来格式化一下,这样数据就回来了</p><p>我们先搞定请求先,然后转到Android上,把数据请求回来,显示在UI上。</p><h3 id="Android上使用java的API请求数据"><a href="#Android上使用java的API请求数据" class="headerlink" title="Android上使用java的API请求数据"></a>Android上使用java的API请求数据</h3><p>网络配置</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;uses-permission android:name="android.permission.INTERNET" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请求的代码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;public class MainActivity extends AppCompatActivity {    private static final String TAG = "MainActivity";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);    }    public void startRequest(View view) {        new Thread(new Runnable() {            @Override            public void run() {                loadData();            }        }).start();    }    private void loadData() {        try {            URL url = new URL("https://www.example.net/content/content/moment/list/1153952789488054272/1");            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();            int responseCode = httpURLConnection.getResponseCode();            if(responseCode == 200) {                httpURLConnection.setConnectTimeout(1000);                InputStream inputStream = httpURLConnection.getInputStream();                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream,"UTF-8"));                String line;                while((line = bufferedReader.readLine()) != null) {                    Log.d(TAG,line);                }                bufferedReader.close();            }        } catch(Exception e) {            e.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将请求回来的数据用Gson将结果格式化,用列表显示不在UI上。</p><p>MainActivity:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import android.annotation.SuppressLint;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.View;import com.google.gson.Gson;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.List;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;public class MainActivity extends AppCompatActivity {    private static final String TAG = "MainActivity";    public static final int WHAT_LOADER_RESULT = 1;    private static Handler mHandler;    private RecyclerView mResultList;    private ResultAdapter mResultAdapter;    @SuppressLint("HandlerLeak")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        mHandler = new Handler() {            @Override            public void handleMessage(Message msg) {                switch(msg.what) {                    case WHAT_LOADER_RESULT:                        MomentItem result = (MomentItem) msg.obj;                        refreshResultList(result);                        break;                }            }        };        initView();    }    private void initView() {        mResultList = findViewById(R.id.result_list);        mResultList.setLayoutManager(new LinearLayoutManager(this));        mResultAdapter = new ResultAdapter();        mResultList.setAdapter(mResultAdapter);    }    private void refreshResultList(MomentItem result) {        Log.d(TAG,"refreshResultList -- ");        mResultAdapter.setData(result);    }    public void startRequest(View view) {        new Thread(new Runnable() {            @Override            public void run() {                loadData();            }        }).start();    }    private void loadData() {        try {            URL url = new URL("https://网站");            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();            httpURLConnection.setRequestMethod("GET");            httpURLConnection.setConnectTimeout(1000);            int responseCode = httpURLConnection.getResponseCode();            if(responseCode == 200) {                InputStream inputStream = httpURLConnection.getInputStream();                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream,"UTF-8"));                String line = bufferedReader.readLine();                Log.d(TAG,"line -- &gt; " + line);                bufferedReader.close();                Message message = mHandler.obtainMessage();                message.what = WHAT_LOADER_RESULT;                Gson gson = new Gson();                message.obj = gson.fromJson(line,MomentItem.class);                mHandler.sendMessage(message);            }        } catch(Exception e) {            e.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bean类:通过GsonFormat自动生成</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.util.List;public class MomentItem {    private boolean success;    private int code;    private String message;    private DataBean data;    public boolean isSuccess() {        return success;    }    public void setSuccess(boolean success) {        this.success = success;    }    public int getCode() {        return code;    }    public void setCode(int code) {        this.code = code;    }    public String getMessage() {        return message;    }    public void setMessage(String message) {        this.message = message;    }    public DataBean getData() {        return data;    }    public void setData(DataBean data) {        this.data = data;    }    public static class DataBean {        private PageableBean pageable;        private int totalPages;        private int totalElements;        private boolean last;        private boolean first;        private SortBeanX sort;        private int numberOfElements;        private int size;        private int number;        private List&lt;ContentBean&gt; content;        public PageableBean getPageable() {            return pageable;        }        public void setPageable(PageableBean pageable) {            this.pageable = pageable;        }        public int getTotalPages() {            return totalPages;        }        public void setTotalPages(int totalPages) {            this.totalPages = totalPages;        }        public int getTotalElements() {            return totalElements;        }        public void setTotalElements(int totalElements) {            this.totalElements = totalElements;        }        public boolean isLast() {            return last;        }        public void setLast(boolean last) {            this.last = last;        }        public boolean isFirst() {            return first;        }        public void setFirst(boolean first) {            this.first = first;        }        public SortBeanX getSort() {            return sort;        }        public void setSort(SortBeanX sort) {            this.sort = sort;        }        public int getNumberOfElements() {            return numberOfElements;        }        public void setNumberOfElements(int numberOfElements) {            this.numberOfElements = numberOfElements;        }        public int getSize() {            return size;        }        public void setSize(int size) {            this.size = size;        }        public int getNumber() {            return number;        }        public void setNumber(int number) {            this.number = number;        }        public List&lt;ContentBean&gt; getContent() {            return content;        }        public void setContent(List&lt;ContentBean&gt; content) {            this.content = content;        }        public static class PageableBean {            /**             * sort : {"unsorted":false,"sorted":true}             * pageSize : 15             * pageNumber : 0             * offset : 0             * unpaged : false             * paged : true             */            private SortBean sort;            private int pageSize;            private int pageNumber;            private int offset;            private boolean unpaged;            private boolean paged;            public SortBean getSort() {                return sort;            }            public void setSort(SortBean sort) {                this.sort = sort;            }            public int getPageSize() {                return pageSize;            }            public void setPageSize(int pageSize) {                this.pageSize = pageSize;            }            public int getPageNumber() {                return pageNumber;            }            public void setPageNumber(int pageNumber) {                this.pageNumber = pageNumber;            }            public int getOffset() {                return offset;            }            public void setOffset(int offset) {                this.offset = offset;            }            public boolean isUnpaged() {                return unpaged;            }            public void setUnpaged(boolean unpaged) {                this.unpaged = unpaged;            }            public boolean isPaged() {                return paged;            }            public void setPaged(boolean paged) {                this.paged = paged;            }            public static class SortBean {                /**                 * unsorted : false                 * sorted : true                 */                private boolean unsorted;                private boolean sorted;                public boolean isUnsorted() {                    return unsorted;                }                public void setUnsorted(boolean unsorted) {                    this.unsorted = unsorted;                }                public boolean isSorted() {                    return sorted;                }                public void setSorted(boolean sorted) {                    this.sorted = sorted;                }            }        }        public static class SortBeanX {            /**             * unsorted : false             * sorted : true             */            private boolean unsorted;            private boolean sorted;            public boolean isUnsorted() {                return unsorted;            }            public void setUnsorted(boolean unsorted) {                this.unsorted = unsorted;            }            public boolean isSorted() {                return sorted;            }            public void setSorted(boolean sorted) {                this.sorted = sorted;            }        }        public static class ContentBean {            /**             * _id : 1200696538762956800             * content : content             * type : 1             * thumbUpCount : 0             * commentCount : 0             * url : /a/1200681268338085888             * covers : https://imgs.example.com/group1/M00/00/0B/rBsADV3iHb2AR2ktAABV8LFIYGU029.png|https://imgs.example.com/group1/M00/00/0B/rBsADV3iKCqAYWxCAAEp3Frp3bI477.png|https://imgs.example.com/group1/M00/00/0B/rBsADV3iAymAO-J8AABCRyG8suI326.png             * subContent : null             * subUserName : null             * subUserAvatar : null             * subUserId : null             * userName :              * userId : 1153952789488054272             * userAvatar : https://imgs.example.com/group1/M00/00/07/rBsADV22ZymAV8BwAABVL9XtNSU926.png             * publishTime : 2019-11-30T08:42:17.361+0000             * thumbList : []             * subTitle : Android网络访问不同版本的差异，看完这篇文章你就茅厕顿开了。             * position : 第一个用户             * company : example             * hasThumbUp : false             * images : ["https://imgs.example.com/group1/M00/00/0B/rBsADV3iHb2AR2ktAABV8LFIYGU029.png","https://imgs.example.com/group1/M00/00/0B/rBsADV3iKCqAYWxCAAEp3Frp3bI477.png","https://imgs.example.com/group1/M00/00/0B/rBsADV3iAymAO-J8AABCRyG8suI326.png"]             */            private String _id;            private String content;            private int type;            private int thumbUpCount;            private int commentCount;            private String url;            private String covers;            private Object subContent;            private Object subUserName;            private Object subUserAvatar;            private Object subUserId;            private String userName;            private String userId;            private String userAvatar;            private String publishTime;            private String subTitle;            private String position;            private String company;            private boolean hasThumbUp;            private List&lt;?&gt; thumbList;            private List&lt;String&gt; images;            public String get_id() {                return _id;            }            public void set_id(String _id) {                this._id = _id;            }            public String getContent() {                return content;            }            public void setContent(String content) {                this.content = content;            }            public int getType() {                return type;            }            public void setType(int type) {                this.type = type;            }            public int getThumbUpCount() {                return thumbUpCount;            }            public void setThumbUpCount(int thumbUpCount) {                this.thumbUpCount = thumbUpCount;            }            public int getCommentCount() {                return commentCount;            }            public void setCommentCount(int commentCount) {                this.commentCount = commentCount;            }            public String getUrl() {                return url;            }            public void setUrl(String url) {                this.url = url;            }            public String getCovers() {                return covers;            }            public void setCovers(String covers) {                this.covers = covers;            }            public Object getSubContent() {                return subContent;            }            public void setSubContent(Object subContent) {                this.subContent = subContent;            }            public Object getSubUserName() {                return subUserName;            }            public void setSubUserName(Object subUserName) {                this.subUserName = subUserName;            }            public Object getSubUserAvatar() {                return subUserAvatar;            }            public void setSubUserAvatar(Object subUserAvatar) {                this.subUserAvatar = subUserAvatar;            }            public Object getSubUserId() {                return subUserId;            }            public void setSubUserId(Object subUserId) {                this.subUserId = subUserId;            }            public String getUserName() {                return userName;            }            public void setUserName(String userName) {                this.userName = userName;            }            public String getUserId() {                return userId;            }            public void setUserId(String userId) {                this.userId = userId;            }            public String getUserAvatar() {                return userAvatar;            }            public void setUserAvatar(String userAvatar) {                this.userAvatar = userAvatar;            }            public String getPublishTime() {                return publishTime;            }            public void setPublishTime(String publishTime) {                this.publishTime = publishTime;            }            public String getSubTitle() {                return subTitle;            }            public void setSubTitle(String subTitle) {                this.subTitle = subTitle;            }            public String getPosition() {                return position;            }            public void setPosition(String position) {                this.position = position;            }            public String getCompany() {                return company;            }            public void setCompany(String company) {                this.company = company;            }            public boolean isHasThumbUp() {                return hasThumbUp;            }            public void setHasThumbUp(boolean hasThumbUp) {                this.hasThumbUp = hasThumbUp;            }            public List&lt;?&gt; getThumbList() {                return thumbList;            }            public void setThumbList(List&lt;?&gt; thumbList) {                this.thumbList = thumbList;            }            public List&lt;String&gt; getImages() {                return images;            }            public void setImages(List&lt;String&gt; images) {                this.images = images;            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适配器的代码:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import android.text.TextUtils;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import com.bumptech.glide.Glide;import java.util.ArrayList;import java.util.List;import androidx.annotation.NonNull;import androidx.recyclerview.widget.RecyclerView;public class ResultAdapter extends RecyclerView.Adapter&lt;ResultAdapter.InnerAdapter&gt; {    private List&lt;MomentItem.DataBean.ContentBean&gt; mData = new ArrayList&lt;&gt;();    @NonNull    @Override    public InnerAdapter onCreateViewHolder(@NonNull ViewGroup parent,int viewType) {        View itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_moment,parent,false);        return new InnerAdapter(itemView);    }    @Override    public void onBindViewHolder(@NonNull InnerAdapter holder,int position) {        View itemView = holder.itemView;        TextView momentTitle = itemView.findViewById(R.id.moment_title);        ImageView avatar = itemView.findViewById(R.id.user_avatar);        TextView userInfo = itemView.findViewById(R.id.user_info);        TextView userName = itemView.findViewById(R.id.user_name);        MomentItem.DataBean.ContentBean contentBean = mData.get(position);        String subTitle = contentBean.getSubTitle();        if(!TextUtils.isEmpty(subTitle)) {            momentTitle.setText(subTitle);        } else {            momentTitle.setText(contentBean.getContent());        }        userName.setText(contentBean.getUserName());        userInfo.setText(contentBean.getPosition() + "@" + contentBean.getCompany());   //图片我们借助于Glide        Glide.with(itemView.getContext()).load(contentBean.getUserAvatar()).into(avatar);    }    @Override    public int getItemCount() {        return mData.size();    }    public void setData(MomentItem result) {        mData.clear();        mData.addAll(result.getData().getContent());        notifyDataSetChanged();    }    public class InnerAdapter extends RecyclerView.ViewHolder {        public InnerAdapter(@NonNull View itemView) {            super(itemView);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>item的布局:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="https://schemas.android.com/apk/res/android"    android:layout_width="match_parent"    android:layout_height="wrap_content"    android:orientation="vertical"    android:padding="10dp"&gt;    &lt;LinearLayout        android:layout_width="match_parent"        android:layout_height="wrap_content"        android:orientation="horizontal"&gt;        &lt;ImageView            android:id="@+id/user_avatar"            android:layout_width="50dp"            android:layout_height="50dp"            android:src="@mipmap/ic_launcher" /&gt;        &lt;LinearLayout            android:layout_width="match_parent"            android:layout_height="wrap_content"            android:layout_marginLeft="10dp"            android:orientation="vertical"&gt;            &lt;TextView                android:id="@+id/user_name"                android:layout_width="match_parent"                android:layout_height="wrap_content"                android:layout_marginTop="2dp"                android:text="用户名称"                android:textColor="#0086FF"                android:textSize="18sp" /&gt;            &lt;TextView                android:id="@+id/user_info"                android:layout_width="match_parent"                android:layout_height="wrap_content"                android:layout_marginTop="2dp"                android:text="用户信息" /&gt;        &lt;/LinearLayout&gt;    &lt;/LinearLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://docs.oracle.com/javase/8/docs/api/">Java8api文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quartus</title>
      <link href="/liaojie.github.io/2021/11/17/quartus/"/>
      <url>/liaojie.github.io/2021/11/17/quartus/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>一、官网下载(可下载Windows,linux版本. 需注册):<br><a href="http://fpgasoftware.intel.com/?edition=lite">点击</a></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/FPGAs%E4%B8%8B%E8%BD%BD%E4%B8%AD%E5%BF%83.png"></p><p>二、网盘下载<br>9.1版本下载地址：<br>链接：<a href="https://pan.baidu.com/s/1CE_TPvpIwLXiwXtNMdSJ-A">https://pan.baidu.com/s/1CE_TPvpIwLXiwXtNMdSJ-A</a><br>提取码：cpj9</p><p>13.0版本下载地址：<br>链接：<a href="https://pan.baidu.com/s/1f-0-3VclXivQFzFX83BeCg">https://pan.baidu.com/s/1f-0-3VclXivQFzFX83BeCg</a><br>提取码：d1yd</p><p>13.1版本下载地址：<br>链接：<a href="https://pan.baidu.com/s/1V4hcfuNhY0EQ7oGmnjlpVQ">https://pan.baidu.com/s/1V4hcfuNhY0EQ7oGmnjlpVQ</a><br>提取码：k39z </p><p>18.1lite版本下载地址：<br>链接：<a href="https://pan.baidu.com/s/1JMH75Y7l1cW8x_uveJ1pVg">https://pan.baidu.com/s/1JMH75Y7l1cW8x_uveJ1pVg</a><br>提取码：i83y</p><p>版本推荐:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%89%88%E6%9C%AC.jpg"></p><p>注意安装路径仅限字母数字下划线,不能出现中文等特殊字符,连空格都不行</p><h2 id="EDA"><a href="#EDA" class="headerlink" title="EDA"></a>EDA</h2><p>什么是EDA？</p><blockquote><p>EDA(Electronic Design Automation)技术作为现代电子设计技术的核心,依赖功能强大的计算机软件。它是一门综合性学科。利用EDA技术进行电子系统设计的最后目标,是完成专用集成电路ASIC或者印刷电路板PCB的设计和实现。</p></blockquote><p>硬件描述语言Verilog:</p><ul><li><p>硬件描述语言HDL是EDA技术的重要组成部分,目前常用的主要有<code>VHDL</code>、<code>HDL</code>等。</p></li><li><p>2001年,Verilog成为基层电路建模与设计中最流行的硬件描述语言。</p></li><li><p>Verilog部分语法参照C语言语法设立(但与C有本质区别)。在语言易读性、层次化和结构化设计方面表现了强大的生命力和应用潜力,大大简化硬件设计任务，且具有良好的适应性。</p></li></ul><p>常见HDL:</p><ul><li>另一重要的硬件描述语言是VHDL(超高速集成电路硬件描述语言)。</li><li>VHDL具有与具体硬件电路无关和设计平台无关的特性,并且具有良好的电路行为能力和系统描述能力。</li><li>Verilog与VHDL各有优缺点。</li><li>综合(Synthesis):把抽象的实体结合成单个统一的实体。将用行为和功能层次表达的电子系统转换为低层次的便于具体实现的模块组合装配的过程。【类比编写大型程序】</li><li>综合器:能自动将一种设计表述形式向另一种转换的软件,或者协助进行手工转换的软件。</li></ul><p>自顶向下设计技术<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B.jpg"></p><p>EDA优点<br>1.保证设计过程的正确性，大大降低设计成本，缩短设计周期。<br>2.有各类库的支持。<br>3.极大地简化设计文档的管理。<br>4.日益强大的逻辑设计仿真测试技术。<br>5.设计者拥有完全的自主权，再无受制于人之虞。<br>6.良好的可移植与可测试性，为系统开发提供了可靠的保证。<br>7.能将所有设计环节纳入统一的自顶向下的设计方案中。<br>8.EDA不但在整个设计流程上充分利用计算机的自动设计能力，而且在各个设计层次上利用计算机完成不同内容的仿真模拟，在系统板设计结束后仍可利用计算机对硬件系统进行完整的测试。</p><ul><li>手工设计有缺陷，EDA技术则不同。</li><li>设计输入、综合、适配、仿真、编程下载、硬件测试</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/EDA%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.jpg"></p><p>ASIC及其设计流程:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/ASIC.jpg"></p><p>常见EDA工具:</p><ul><li>设计输入编辑器</li><li>HDL综合器:Quartus2</li><li>仿真器:modelsim</li><li>适配器(布局布线器):Altium Designer</li><li>下载器:Quartus2</li><li>其他<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/Quartus2%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B.jpg" alt="Quartus2设计流程"></li></ul><p>1.新建:<br>点击:File-&gt;New,选择Block Diagram/Schematic File,点击OK<br>2.点击连接库()或者左键空白处:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E8%BF%9E%E6%8E%A5%E5%BA%93.png"></p><p>找到libraries-&gt;primitives-&gt;logic,选择需要的芯片;libraries-&gt;primitives-&gt;pin,输入输出端.(megafunctions:包括一些参数可设置的功能模块.others:maxplus2(Quartus软件前身:74系列芯片).primitives:logic:xnor:同或门;xor:异或门;pin:引脚(bibdr:双向引脚);storage:触发器:dff:D触发器)<br>如果发现有虚的芯片在动,说明点击了重复模式,点击Esc取消即可<br>3.连线:鼠标左键点住拖动就行<br>4.双击输入/输出端口，可重新命名端口名，将输入端口命名为 clk，输出端口命名为 q[3..0]。此时<br>输出端口为总线模式，可同时观察 4 个输出。特别注意：QA、QB、QC、QD 4 个输出端需要命名为<br>q[0]、q[1]、 q[2]、 q[3]，与总线输出 q[3..0]对应。<br>5.点击左上角保存:出现:Do you want to create a new project with this file?点击Yes,点击Next,<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/devicesettings.png"></p><p>根据要求设置就行,然后点击Next,最后Finish。<br>6.然后点击紫色三角进行编译(默认编译顶层设计实体,如果要编译其他设计文件需要将其置顶:点击Files下的文件,右键选择Set as Top_Level Entity)<br>7.点击File-&gt;New-&gt;University Program VWF,然后点击Edt-&gt;Insert-&gt;Insert Node or Bus(或者将鼠标放到左边Name下面的空白处,双击左键),点击Node Finder,点击List,全部移入(&gt;&gt;),点击OK<br>8.设置:选中,然后点击:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/clock.png"><br>设置相关属性:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/clocksetting.png"><br>点击功能仿真(只仿真功能)(它的右边为时序仿真:会考虑芯片的时延):<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E4%BB%BF%E7%9C%9F.png"><br>建议:采用时序仿真<br>点击Yes,最后保存,等待仿真结束.</p><p>放大:Ctrl+鼠标滚轮<br>移位:选中+拖拽</p><h2 id="Verilog语言编程基础"><a href="#Verilog语言编程基础" class="headerlink" title="Verilog语言编程基础"></a>Verilog语言编程基础</h2><p>1.模块语句及其表达式</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">module 模块名 (模块端口名表);模块端口和模块功能描述.endmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.端口语句、端口信号名和端口模式</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">input 端口名1,端口名2,...;output 端口名1,端口名2,...;inout 端口名1,端口名2,...;input[msb:lsb] 端口名1,端口名2,...;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.逻辑操作符<br>4.连续赋值语句</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">assign 目标变量名 = 驱动表达式;assign [延时] 目标变量名 = 驱动表达式;eg:assign #6 R1 = A&amp;B;//延时6个时间单元<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.关键字<br>6.标识符<br>7.注释符号<br>8.规范的程序书写格式<br>9.文件取名和存盘</p><p>eg:半加器电路的Verilog描述</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">module h_adder (A,B,SO,CO);input A,B;output SO,CO;assign SO = A^B;//^异或assign CO = A&amp;B;//与endmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多路选择器:<br>1.reg型变量定义</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">reg 变量名1,变量名2,...;reg [msb:lsb] 变量名1,变量名2,...;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.过程语句</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">always@ (敏感信号及敏感信号列表或表达式)包括块语句的各类顺序语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.块语句begin_end</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">begin [:块名]语句1;语句2;...;语句n;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.case条件语句</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">case (表达式)取值1 : begin 语句1;语句2;...;语句n;  end取值2 : begin 语句n+1;语句n+2;...;语句n+m;  end...default : begin 语句n+m+1;...;  endendcase<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.Verilog的四种逻辑状态:0,1,z,x<br>6.并位操作运算符</p><blockquote><p>{a1,b1,4{a2,b2}}={a1,b1,{a2,b2},{a2,b2},{a2,b2},{a2,b2}}={a1,b1,a2,b2,a2,b2,a2,b2,a2,b2}<br>7.Verilog的数字表达式</p></blockquote><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">&lt;位宽&gt;'&lt;进制&gt;&lt;数字&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>eg:4选1多路选择器</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">//case:module MUX41a(a,b,c,d,s1,s0,y);input a,b,c,d;input s1,s0;output y;reg y;always @ (a or b or c or d or s1 or s0)begin : MUX41//块语句开始case({s1,s0})2'b00 : y&lt;=a;2'b01 : y&lt;=b;2'b10 : y&lt;=c;2'b11 : y&lt;=d;default : y&lt;=a;endcaseendendmodule//assignmodule MUX41a(a,b,c,d,s1,s0,y);input a,b,c,d,s1,s0;output y;wire [1:0] SEL;//定义2元素位矢量SEL为网线型变量wirewire AT,BT,CT,DT;//定义中间变量,以作连线或信号节点assign SEL = {s1,s0};//对s1,s0进行并位操作,即SEL[1]=s1;SEL[0]=s0;assign AT = (SEL==2'D0);assign BT = (SEL==2'D1);assign CT = (SEL==2'D2);assign DT = (SEL==2'D3);assign y = (a &amp; AT)|(b &amp; BT)|(c &amp; CT)|(d &amp; DT);//4个逻辑信号相或endmodule//条件语句module MUX41a(A,B,C,D,S1,S0,Y);input A,B,C,D,S1,S0;output Y;reg [1:0] SEL;reg Y;always @ (A,B,C,D,SEL)begin : MUX41//块语句开始SEL = {S1,S0};if(SEL==0) Y=A;else if(SEL==1) Y=B;else if(SEL==2) Y=C;else            Y=D;endendmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.新建:File-&gt;New-&gt;Verilog HDL File-&gt;OK<br>2.保存:File-&gt;Save,文件名需与模块名一致,其他按之前保存步骤<br>设置要更改为:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/EP3C40Q240C8.png"><br>选择Cyclone 3 -&gt; EP3C40Q240C8,最后点击紫色三角进行编译</p><p>3.点击File-&gt;New-&gt;University Program VWF,然后点击Edt-&gt;Insert-&gt;Insert Node or Bus,点击Node Finder,点击3个点(…),选中MUX41a,按下OK,然后点击List,然后点击 &gt;&gt; ,点击OK就行了</p><p>4.然后设置终止时间:Edt-&gt;Set End Time (10us)<br>5.点击:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/clock.png"><br>设置相关属性:<br>a: period:90ns;Duty Cycle:50%(b:200ns,70%;c:400ns,20%;d:780ns,85%;s0:4us,50%;s1:2us,50%),,点击OK;<br>6.然后点击仿真,出现叫你保存的页面:点击Yes保存即可</p><p>1.按位逻辑操作符<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.jpg"><br>2.等式操作符<br>等于(==)不等于(!=)全等(===)不全等(!==)<br>3.wire定义网线型变量</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">wire 变量名1,变量名2,...;wire [msb:lsb] 变量名1,变量名2,...;eg:wire a1,a2;assign Y = a1^a2;上面俩个式子等价于wire Y = a1^a2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>条件语句<br>1.if条件语句</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">if(s) Y=A; else Y=B;if(s) Y=A; else begin Y=B; Z=C; Q=1'b0; end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.过程赋值语句<br>(1)阻塞式赋值(=)用于assign语句<br>(2)非阻塞式赋值(&lt;=)块语句 </p><p>3.数据类型表示方式</p><h2 id="时序电路的Verilog表达"><a href="#时序电路的Verilog表达" class="headerlink" title="时序电路的Verilog表达"></a>时序电路的Verilog表达</h2><p>eg:D触发器</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">module DFF1(CLK,D,Q);output Q;input CLK,D;reg Q;always @ (posedge CLK)//posedge检测上升沿;negedge检测下降沿Q &lt;= D;//将Q更新为D的状态endmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用UDP表述D触发器</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">primitive EDGE_UDP(Q,D, CLK,RST) ;input D,CLK, RST; output Q;reg Q; table // D CLK RST:9 : Q+ 0 (01) 0 :? : 0; 1 (01) 0 :? : 1;      ? (1?) 0 :? : -;  ? (?0) 0 :? : -; 1  0   1 :? : 0;  1  1   11:? : 0; 0  0   1 :? : 0; 0  1   1 :? : 0;endtableendprimitive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">module DFF_UDP (Q,D,CLK, RST) ;input D,CLK, RST;output Q;EDGE_UDP U1(Q,D, CLK,RST); Endmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%90%AB%E5%BC%82%E6%AD%A5%E5%A4%8D%E4%BD%8DD%E8%A7%A6%E5%8F%91%E5%99%A8.jpg"></p><h3 id="含异步复位和时钟使能的D触发器及其Verilog表述"><a href="#含异步复位和时钟使能的D触发器及其Verilog表述" class="headerlink" title="含异步复位和时钟使能的D触发器及其Verilog表述"></a>含异步复位和时钟使能的D触发器及其Verilog表述</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%BC%82%E6%AD%A5%E5%A4%8D%E4%BD%8D%E6%97%B6%E9%92%9F%E4%BD%BF%E8%83%BDD%E8%A7%A6%E5%8F%91%E5%99%A8.jpg"><br>RST:异步复位端;EN:时钟使能端</p><h3 id="含同步复位-同步清零-控制的D触发器及其Verilog表述"><a href="#含同步复位-同步清零-控制的D触发器及其Verilog表述" class="headerlink" title="含同步复位(同步清零)控制的D触发器及其Verilog表述"></a>含同步复位(同步清零)控制的D触发器及其Verilog表述</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%90%8C%E6%AD%A5%E5%A4%8D%E4%BD%8DD%E8%A7%A6%E5%8F%91%E5%99%A8.jpg"></p><h3 id="基本锁存器及其Verilog描述"><a href="#基本锁存器及其Verilog描述" class="headerlink" title="基本锁存器及其Verilog描述"></a>基本锁存器及其Verilog描述</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%9F%BA%E6%9C%AC%E9%94%81%E5%AD%98%E5%99%A8.jpg"></p><h3 id="含清0控制的锁存器及其Verilog表述"><a href="#含清0控制的锁存器及其Verilog表述" class="headerlink" title="含清0控制的锁存器及其Verilog表述"></a>含清0控制的锁存器及其Verilog表述</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%B8%850%E6%8E%A7%E5%88%B6%E9%94%81%E5%AD%98%E5%99%A8.jpg"></p><h3 id="异步时序电路的Verilog表述特点"><a href="#异步时序电路的Verilog表述特点" class="headerlink" title="异步时序电路的Verilog表述特点"></a>异步时序电路的Verilog表述特点</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%BC%82%E6%AD%A5%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF.jpg"></p><h3 id="时钟过程表述的特点和规律"><a href="#时钟过程表述的特点和规律" class="headerlink" title="时钟过程表述的特点和规律"></a>时钟过程表述的特点和规律</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%97%B6%E9%92%9F%E8%BF%87%E7%A8%8B.jpg"><br>always @ (posedge CLK or DIN):不允许在敏感信号表中定义除了异步时序控制信号以外的信号</p><h3 id="电路原理图设计流程"><a href="#电路原理图设计流程" class="headerlink" title="电路原理图设计流程"></a>电路原理图设计流程</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%94%B5%E8%B7%AF%E5%8E%9F%E7%90%861.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%94%B5%E8%B7%AF%E5%8E%9F%E7%90%862.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%94%B5%E8%B7%AF%E5%8E%9F%E7%90%863.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%94%B5%E8%B7%AF%E5%8E%9F%E7%90%864.jpg"></p><h3 id="封装设计"><a href="#封装设计" class="headerlink" title="封装设计"></a>封装设计</h3><p>在已经设计好锁存器的基础上:<br>File-&gt;Create/Update-&gt;Create Symbol Files for Current File<br>这时新建一个工程:File-&gt;New-&gt;Block Diagram/Schematic File;然后保存;保存过后点击File-&gt;New Project Wizard;<br>选择新建的项目:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/LOCK02.png"><br>添加文件进去:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/LOCK02file.png"><br>还要将之前的文件添加进去:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/LOCKfile.png"></p><p>然后选择芯片:Cyclone 3-&gt;EP3C40Q240C8(实验室使用:EP3C16Q240C8);点击Next,一直到Finish.<br>右键:选择Insert-&gt;Symbol<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/InsertSymbol.png"></p><p>然后点击左下角3个点(…);选择LOCK.bsf文件(原理图设计文件);即可以插入了,添加输入输出端,编译,然后进行仿真即可.</p><h2 id="Verilog加法器设计"><a href="#Verilog加法器设计" class="headerlink" title="Verilog加法器设计"></a>Verilog加法器设计</h2><h3 id="全加器设计"><a href="#全加器设计" class="headerlink" title="全加器设计"></a>全加器设计</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%85%A8%E5%8A%A0%E5%99%A8.jpg"></p><p>3.Verilog例化语句及其用法</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">&lt;模块元件名&gt; &lt;例化元件名&gt; (.例化元件端口 (例化元件外接端口名),...);h_adder U2(.A(net1),.SO(sum),.B(cin),.CO(net3));//端口名关联法h_adder U2(.B(cin),.CO(net3),.A(net1),.S0(sum));//端口名关联法h_adder U1(ain,bin,net1,net2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="半加器的UDP结构建模描述方法"><a href="#半加器的UDP结构建模描述方法" class="headerlink" title="半加器的UDP结构建模描述方法"></a>半加器的UDP结构建模描述方法</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E5%8D%8A%E5%8A%A0%E5%99%A8.jpg"></p><h3 id="利用UDP元件设计多路选择器"><a href="#利用UDP元件设计多路选择器" class="headerlink" title="利用UDP元件设计多路选择器"></a>利用UDP元件设计多路选择器</h3><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">primitive MUX41_UDP(Y,D3,D2,D1,D0,S1,S0) ;input D3,D2,D1,D0,S1,S0; output Y;table // D3 D2 D1 D0 S1 S0 : Y ?  ?  ?  1  0  0  : 1; ?  ?  ?  0  0  0  : 0;      ?  ?  1  ?  0  1  : 1;  ?  ?  0  ?  0  1  : 0; ?  1  ?  ?  1  0  : 1; ?  0  ?  ?  1  0  : 0; 1  ?  ?  ?  1  1  : 1; 0  ?  ?  ?  1  1  : 0;endtableendprimitive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">module MUX41UDP (D,S,DOUT);input [3:0] D;input [1:0] S;output DOUT;MUX41_UDP (DOUT,D[3],D[2],D[1],D[0],S[1],S[0]);endmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8位加法器设计及其算术操作符应用"><a href="#8位加法器设计及其算术操作符应用" class="headerlink" title="8位加法器设计及其算术操作符应用"></a>8位加法器设计及其算术操作符应用</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/8%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Quartus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>launchMode</title>
      <link href="/liaojie.github.io/2021/11/14/launchmode/"/>
      <url>/liaojie.github.io/2021/11/14/launchmode/</url>
      
        <content type="html"><![CDATA[<p>activity 的 android:launchMode</p><ul><li>standard</li><li>singleTop</li><li>singleTask</li><li>singleInstance</li></ul><p>startActivity()时的Intent.FLAG_ACTIVITY_XXX</p><ul><li>FLAG_ACTIVITY_NEW_TASK</li><li>FLAG_ACTIVITY_SINGLE_TOP</li><li>FLAG_ACTIVITY_CLEAR_TOP</li><li>FLAG_ACTIVITY_MULTIPLE_TASK</li><li>FLAG_ACTIVITY_NEW_DOCUMENT</li><li>FLAG_ACTIVITY_REORDER_TO_FRONT</li><li>FLAG_ACTIVITY_PREVIOUS_IS_TOP</li><li>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</li><li>FLAG_ACTIVITY_RETAIN_IN_RECENTS</li><li>FLAG_ACTIVITY_TASK_ON_HOME</li></ul><p>activity 的 android:taskAffinity<br>activity 的 android:allowTaskReparenting<br>activity 的 android:clearTaskOnLaunch<br>Activity的回退栈(Task)<br>Android的最近任务列表(Recents/overview)切换<br>启动器(桌面)的App图标点击</p><p>当我们在桌面上点击App图标时,App的默认Activity(MAIN+LAUNCHER intent-filter)会被启动,并且这个Activity会被放进系统刚创建的一个 Task 里,我们通过最近任务键可以在做个App之间进行切换(其实更精确的说,我们是在多个Task之间切换,每个Task都有一个自己的回退栈,它按顺序记录了用户打开的每个Activity,这样就可以在用户按返回键的时候按照倒序来依次关闭这些Activity,当回退栈里最后一个Activity被关闭,这个Task生命也就结束了,但它并不会在最近列表里消失,系统依然会保留这个Task的一个残影给用户,目的是让用户可以方便地切回去,只是这时候的切回去其实是对Appd的重新启动,因为原先的Task已经不存在了,在最近任务里看到的Task未必是”活着”的).Activity是一个可以跨线程跨应用的组件,当你在 A App里打开 B App的Activity的时候,这个Activity会被直接放进 A 的Task里,而对于 B 的Task是没有任何影响的.</p><p>Android默认规则:</p><blockquote><p>在不同Task中打开同一个Activity,Activity会被创建多个实例,分别放进每一个Task</p></blockquote><p>在Manifest.xml里 activity 中:</p><h3 id="android-launchMode-”singleTask”"><a href="#android-launchMode-”singleTask”" class="headerlink" title="android:launchMode=”singleTask”"></a>android:launchMode=”singleTask”</h3><blockquote><p>singleTask可以让Activity被别的App启动时不会进入启动它的Task里,而是会在属于他自己的Task里创建,放在自己的栈顶,然后把这整个Task一起拿过来压在启动它的Task的上面.这种逻辑可以保证不管是从哪个App启动,被标记为singleTask的Activity总会被放在自己的Task里.(这种方式打开的Activity的入场动画是应用间切换的动画,而不是普通的Activity的入场动画)</p></blockquote><blockquote><p>如果启动时这个Task栈里已经有了这个Activity,那么就不再创建新的对象,而是直接复用这个已有的对象.同时,因为Activity没有被重建,系统也就不会调用它的onCreate()方法,而是调用它的onNewIntent()方法,让他可以从Intent里解析数据来刷新界面.另外在调用onNewIntent()之前如果这个Activity上面压着有其他Activity,系统也会把这些Activity全部清掉,来确保我们的Activity出现在栈顶</p></blockquote><p>Task由前台进入后台<br>1.按Home键回到桌面<br>2.按最近任务键(方块键)查看最近任务</p><ul><li>注意:前台Task在最近任务列表显示出来的时候就已经进入后台,而不是在切换到其他应用之后</li></ul><h3 id="android-allowTaskReparenting-”true”"><a href="#android-allowTaskReparenting-”true”" class="headerlink" title="android:allowTaskReparenting=”true”"></a>android:allowTaskReparenting=”true”</h3><p>简单可理解为:你打开我的时候,我在你的Task里,而稍后我也可以回到我原本所属的Task里.<br>与singleTask相比,因为Activity刚被打开的时候并未发生Task切换,所以也没有Task切换的夸张的入场动画,并且因为只有一个Task,所以也不会像singleTask那样被切断自己的回退路径<br>但是从Android 9之后这个属性失效了.但在Android 11上又可以使用了.</p><h3 id="android-launchMode-”singleInstance”"><a href="#android-launchMode-”singleInstance”" class="headerlink" title="android:launchMode=”singleInstance”"></a>android:launchMode=”singleInstance”</h3><p>singleInstance的行为逻辑和singleTask是基本一致的,只是它多了一个更严格的限制:他要求这个Activity所在的Task里只有一个Activity</p><p>taskAffinity(相似,有关联):默认为包名</p><ul><li>默认情况下,Activity会直接进入当前Task</li><li>但对于设置了launchMode=”singleTask”的Activity,系统会比对Activity和当前的Task的taskAffinity是否相同<ul><li>如果相同,依然正常入栈</li><li>如果不同,Activity会去寻找和他的taskAffinity相同的Task后入栈<ul><li>或者如果找不到,系统就会为他创建一个新的Task</li></ul></li></ul></li></ul><p>taskAffinity和最近任务列表<br>最近任务列表会列出现有的Task(任务)</p><ul><li>但他们的taskAffinity需要不一样</li><li>当多个Task具有相同taskAffinity的时候,最近任务列表里只会显示最新展示过的那一个</li></ul><h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><ul><li>和默认的(即standard)几乎一样,启动时不考虑taskAffinity</li><li>唯一的区别是singleTop会重用栈顶的Activity</li></ul><h3 id="实战的通常选择"><a href="#实战的通常选择" class="headerlink" title="实战的通常选择"></a>实战的通常选择</h3><ul><li>默认(standard)和singleTop:多用于App内部</li><li>singleInstance:多用于开放给外部App来共享使用</li><li>singleTask:内部交互和外部交互都能用得上</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning</title>
      <link href="/liaojie.github.io/2021/11/14/machinelearning/"/>
      <url>/liaojie.github.io/2021/11/14/machinelearning/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习概述"><a href="#机器学习概述" class="headerlink" title="机器学习概述"></a>机器学习概述</h1><h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><p>Arthur Samuel对机器学习的定义:</p><blockquote><p>在没有明确设置的情况下使计算机具有学习能力的研究领域<br>Tom Mitchell对机器学习的定义:<br>计算机程序从经验E中学习解决某一任务T进行某一性能度量P通过P测定在T上的表现因经验E而提高</p></blockquote><h2 id="为什么使用机器学习"><a href="#为什么使用机器学习" class="headerlink" title="为什么使用机器学习"></a>为什么使用机器学习</h2><ul><li><p>有解决方案(但解决方案需要进行大量人工微调或需要遵循大量规则)的问题:机器学习算法通常可以简化代码,相比传统方法有更好的性能。</p></li><li><p>传统方法难以解决的复杂问题:最好的机器学习技术也许可以找到解决方案。</p></li><li><p>环境有波动:机器学习算法可以适应新数据。</p></li><li><p>洞察复杂问题和大量数据。</p></li></ul><h2 id="机器学习系统的类型"><a href="#机器学习系统的类型" class="headerlink" title="机器学习系统的类型"></a>机器学习系统的类型</h2><ul><li><p>是否在人类监督下训练(有监督学习、无监督学习、半监督学习和强化学习)。</p></li><li><p>是否可以动态地进行增量学习(在线学习和批量学习)。 </p></li><li><p>是简单地将新的数据点和已知的数据点进行匹配,还是像科学家那样,对训练数据进行模式检测然后建立一个预测模型(基于实例的学习和基于模型的学习)。</p></li></ul><h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><p>监督学习是指:利用一组已知类别的样本调整分类器的参数,使其达到所要求性能的过程,也称为监督训练或有教师学习。<br>监督学习是从标记的训练数据来推断一个功能的机器学习任务.训练数据包括一套训练示例.在监督学习中,每个实例都是由一个输入对象（通常为矢量）和一个期望的输出值（也称为监督信号）组成.监督学习算法是分析该训练数据,并产生一个推断的功能,其可以用于映射出新的实例.一个最佳的方案将允许该算法来正确地决定那些看不见的实例的类标签.这就要求学习算法是在一种”合理”的方式从一种从训练数据到看不见的情况下形成.</p><p>在有监督学习中,提供给算法的包含所需的解决方案的训练集称为标签。</p><p>分类任务是一个典型的有监督学习任务。另一个典型的任务是通过给定一组称为预测器的特征(里程、使用年限、品牌等)来预测一个目标数值(例如汽车的价格)。这种类型的任务称为回归。</p><blockquote><p>eg:判断良性和恶性肿瘤的概率</p></blockquote><p>最重要的有监督学习算法:</p><ul><li><p>k-近邻算法</p></li><li><p>线性回归</p></li><li><p>逻辑回归</p></li><li><p>支持向量机(SVM)</p></li><li><p>决策树和随机森林</p></li><li><p>神经网络</p></li></ul><h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>无监督学习的训练数据都是未经标记的。</p><p>无监督学习算法可能判定该数据集包含俩个不同的簇(聚类算法)</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0.jpg" alt="无监督学习概述图"></p><p>现实生活中常常会有这样的问题:缺乏足够的先验知识,因此难以人工标注类别或进行人工类别标注的成本太高.很自然地,我们希望计算机能代我们完成这些工作,或至少提供一些帮助.根据类别未知(没有被标记)的训练样本解决模式识别中的各种问题,称之为无监督学习.</p><p>最重要的无监督学习算法:</p><ul><li><p>聚类算法</p><ul><li><p>k-均值算法</p></li><li><p>DBSCAN</p></li><li><p>分层聚类分析(HCA)</p></li></ul></li><li><p>异常检测和新颖性检测</p><ul><li><p>单类SVM</p></li><li><p>孤立森林</p></li></ul></li><li><p>可视化和降维</p><ul><li><p>主成分分析(PCA)</p></li><li><p>核主成分分析</p></li><li><p>局部线性嵌入(LLE)</p></li><li><p>t-分布随机近邻嵌入(t-SNE)</p></li></ul></li><li><p>关联规则学习</p><ul><li><p>Apriori</p></li><li><p>Eclat</p></li></ul></li></ul><h3 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h3><p>由于通常给数据做标记是非常耗时和昂贵的,你往往会有很多未标记的数据而很少有已标记的数据。有些算法可以处理部分已标记的数据。这被称为半监督学习。</p><p>大多数半监督学习算法是无监督算法和有监督算法的结合。例如,深度信念网络(DBN)基于一种互相堆叠的无监督组件,这个组件叫做受限玻尔兹曼机(RBM)。受限玻尔兹曼机以无监督方式进行训练,然后使用有监督学习技术对整个系统进行微调。</p><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>强化学习的学习系统(在其语境中称为智能体)能够观察环境,做出选择,执行动作,并获得回报(或者是以负面回报的形式获得惩罚)。所以它必须自行学习什么是最好的策略,从而随着时间的推移获得最大的回报。策略代表智能体在特定情况下应该选择的动作。</p><h3 id="批量学习"><a href="#批量学习" class="headerlink" title="批量学习"></a>批量学习</h3><p>在批量学习中系统无法进行增量学习–即必须使用所有可用数据进行训练。这需要大量时间和计算资源,所以通常都是离线完成的。离线学习就是先训练系统,然后将其投入生产系统,这时学习过程停止,它只是将其所学到的应用出来。</p><p>如果希望批量学习系统学习新数据(例如新型垃圾邮件),需要在完整数据集(包括新数据和旧数据)的基础上重新训练系统的新版本,然后停用旧系统,用新系统取而代之。</p><p>幸运的是,整个训练、评估和启动机器学习系统的过程可以很轻松的实现自动化,所以即使是批量学习系统也能够适应变化。只是需要不断地更新数据,并根据需要频繁地训练系统的新版本。<br>这个解决方案比较简单,通常也都能正常工作,只是每次都使用完整数据集进行训练可能需要花上好几个小时,所以,你很有可能会选择每天甚至每周训练一次新系统。如果系统需要应对快速变化的数据(例如,预测股票价格),那么你需要一个更具响应力的解决方案。<br>此外,使用完整数据集训练需要耗费大量的计算资源(CPU、内存空间、磁盘空间、磁盘I/O、网络I/O等)。如果你的数据量非常大,并且每天从零开始自动执行训练系统,那最终你将为此花费大量的金钱。而假如你面对的是海量数据,甚至可能无法再应用批量学习算法。<br>所以如果你的资源有限(例如,一个智能手机应用程序或一个火星上的漫游器),而系统需要实现自主学习,那么像这样携带大量训练数据,占用大量资源,动辄每天耗费几小时来进行训练的方式,肯定会让你心有余而力不足。<br>幸运的是,在所有这些情况下,我们有一个更好的选择——能够进行增量学习的算法。</p><h3 id="在线学习"><a href="#在线学习" class="headerlink" title="在线学习"></a>在线学习</h3><p>在在线学习中,你可以循序渐进地给系统提供训练数据,逐步积累学习成果。这种提供进数据的方式可以是单独的,也可以采用小批量的小组数据来进行训练。每一步学习都很快速并且便宜,这样系统就可以根据飞速写入的最新数据进行学习。</p><p>对于需要接收持续的数据流的系统(例如股票价格),同时对数据流的变化做出快速或自主的反应,或者你的计算资源有限,又或者对于超大数据集,使用在线学习都是一个非常好的方式。</p><h3 id="基于实例的学习"><a href="#基于实例的学习" class="headerlink" title="基于实例的学习"></a>基于实例的学习</h3><p>系统用心学习示例,然后通过使用相似度度量来比较新实例和已经学习的实例(或他们的子集),从而泛化新实例。</p><h3 id="基于模型的学习"><a href="#基于模型的学习" class="headerlink" title="基于模型的学习"></a>基于模型的学习</h3><p>从一组示例集中实现泛化的另一种方法是构建这些示例,然后使用该模型进行预测。这称为基于模型的学习。</p><p>对于线性回归问题,通常的选择是使用成本函数来衡量线性模型的预测与训练实例之间的差距,目的在于尽量使这个差距最小化。</p><p>这正是线性回归算法的意义所在:通过你提供的训练样本,找出最符合提供数据的线性模型的参数,这称为训练模型。</p><h2 id="机器学习的主要挑战"><a href="#机器学习的主要挑战" class="headerlink" title="机器学习的主要挑战"></a>机器学习的主要挑战</h2><h3 id="训练数据的数量不足"><a href="#训练数据的数量不足" class="headerlink" title="训练数据的数量不足"></a>训练数据的数量不足</h3><h3 id="训练数据不具代表性"><a href="#训练数据不具代表性" class="headerlink" title="训练数据不具代表性"></a>训练数据不具代表性</h3><h3 id="低质量数据"><a href="#低质量数据" class="headerlink" title="低质量数据"></a>低质量数据</h3><h3 id="无关特征"><a href="#无关特征" class="headerlink" title="无关特征"></a>无关特征</h3><h3 id="过拟合训练数据"><a href="#过拟合训练数据" class="headerlink" title="过拟合训练数据"></a>过拟合训练数据</h3><p>可能的解决方法:</p><ul><li><p>简化模型:可以选择参数较少的模型(例如选择线性模型而不是高阶多项式模型)也可以减少训练数据中的属性数量,或者是约束模型。</p></li><li><p>收集更多的训练数据</p></li><li><p>减少训练数据中的噪音(例如,修复数据错误和消除异常项)</p></li></ul><p>通过约束模型使其更简单,并降低过拟合的风险,这个过程称为正则化。</p><p>正则化可降低过拟合风险。</p><h3 id="欠拟合训练数据"><a href="#欠拟合训练数据" class="headerlink" title="欠拟合训练数据"></a>欠拟合训练数据</h3><p>解决这个问题的主要方式有:</p><ul><li><p>选择一个带有更多参数、更强大的模型。</p></li><li><p>给学习算法提供更好的特征集(特征工程)。</p></li><li><p>减少模型中的约束(例如,减少正则化超参数)。</p></li></ul><h2 id="测试与验证"><a href="#测试与验证" class="headerlink" title="测试与验证"></a>测试与验证</h2><p>将数据分割为俩部分:训练集(一般80%)和测试集(一般20%)。</p><h3 id="超参数调整和模型选择"><a href="#超参数调整和模型选择" class="headerlink" title="超参数调整和模型选择"></a>超参数调整和模型选择</h3><h3 id="数据不匹配"><a href="#数据不匹配" class="headerlink" title="数据不匹配"></a>数据不匹配</h3><p>没有免费的午餐定理:如果你对数据绝对没有任何假设,那么就没有理由更偏好于某个模型。</p><h1 id="端到端的机器学习项目"><a href="#端到端的机器学习项目" class="headerlink" title="端到端的机器学习项目"></a>端到端的机器学习项目</h1><h2 id="使用真实数据"><a href="#使用真实数据" class="headerlink" title="使用真实数据"></a>使用真实数据</h2><p>获得数据的地方:</p><ul><li><p>流行的开放数据存储库</p><ul><li>UC Irvine Machine Learning Repository (<a href="http://archive.ics.uci.edu/ml/">http://archive.ics.uci.edu/ml/</a>)</li><li>Kaggle datasets (<a href="https://www.kaggle.com/datasets">https://www.kaggle.com/datasets</a>)</li><li>Amazon’s AWS datasets (<a href="http://aws.amazon.com/fr/datasets/">http://aws.amazon.com/fr/datasets/</a>)</li></ul></li><li><p>元门户站点(它们会列出开放的数据存储库)</p><ul><li>Data Portals (<a href="http://dataportals.org/">http://dataportals.org/</a>)</li><li>OpenDataMonitor (<a href="http://opendatamonitor.eu/">http://opendatamonitor.eu/</a>)</li><li>Quandl (<a href="http://quandl.com/">http://quandl.com/</a>)</li></ul></li><li><p>其他一些列出流行的开放数据存储库的页面:</p><ul><li>Wikipedia’s list of Machine Learning datasets (<a href="https://goo.gl/SJHN2k">https://goo.gl/SJHN2k</a>)</li><li>Quora.com (<a href="http://goo.gl/zDR78y">http://goo.gl/zDR78y</a>)</li><li>The datasets subreddit (<a href="https://www.reddit.com/r/datasets">https://www.reddit.com/r/datasets</a>)</li></ul></li></ul><h3 id="观察大局"><a href="#观察大局" class="headerlink" title="观察大局"></a>观察大局</h3><h4 id="框架问题"><a href="#框架问题" class="headerlink" title="框架问题"></a>框架问题</h4><h4 id="选择性能指标"><a href="#选择性能指标" class="headerlink" title="选择性能指标"></a>选择性能指标</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%871.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%872.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%873.jpg"></p><h4 id="检查假设"><a href="#检查假设" class="headerlink" title="检查假设"></a>检查假设</h4><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><hr><h2 id="机器学习概述-1"><a href="#机器学习概述-1" class="headerlink" title="机器学习概述"></a>机器学习概述</h2><h3 id="人工智能应用场景"><a href="#人工智能应用场景" class="headerlink" title="人工智能应用场景"></a>人工智能应用场景</h3><p><img src="/liaojie.github.io/medias/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png"></p><h3 id="人工智能小案例"><a href="#人工智能小案例" class="headerlink" title="人工智能小案例"></a>人工智能小案例</h3><ol><li>你画我猜</li></ol><p>参考链接：<a href="https://quickdraw.withgoogle.com/">https://quickdraw.withgoogle.com</a></p><ol start="2"><li>识别</li></ol><p>参考链接：<a href="https://pjreddie.com/darknet/yolo/">https://pjreddie.com/darknet/yolo/</a></p><ol start="3"><li>风格迁移</li></ol><p>查看更多：<a href="https://deepdreamgenerator.com/">https://deepdreamgenerator.com/</a></p><h3 id="人工智能发展必备三要素："><a href="#人工智能发展必备三要素：" class="headerlink" title="人工智能发展必备三要素："></a>人工智能发展必备三要素：</h3><ul><li>数据</li><li>算法</li><li>计算力<ul><li>CPU,GPU,TPU</li></ul></li></ul><p>计算力之CPU、GPU对比：</p><ul><li>CPU主要适合I\O密集型的任务</li><li>GPU主要适合计算密集型任务</li></ul><p>提问：什么类型的程序适合在GPU上运行？</p><p>（1）计算密集型的程序。<br>所谓计算密集型(Compute-intensive)的程序，就是其大部分运行时间花在了寄存器运算上，寄存器的速度和处理器的速度相当，从寄存器读写<br>数据几乎没有延时。可以做一下对比，读内存的延迟大概是几百个时钟周期；读硬盘的速度就不说了，即便是SSD, 也实在是太慢了。<br>（2）易于并行的程序。<br>GPU其实是一种SIMD(Single Instruction Multiple Data)架构， 他有成百上千个核，每一个核在同一时间最好能做同样的事情。</p><p>CPU和GPU的区别：<br><a href="http://www.sohu.com/a/201309334_468740">http://www.sohu.com/a/201309334_468740</a></p><p>Google TPU 介绍：<br><a href="https://buzzorange.com/techorange/2017/09/27/what-intel-google-nvidia-microsoft-do-for-ai-chips/">https://buzzorange.com/techorange/2017/09/27/what-intel-google-nvidia-microsoft-do-for-ai-chips/</a></p><h3 id="人工智能、机器学习和深度学习"><a href="#人工智能、机器学习和深度学习" class="headerlink" title="人工智能、机器学习和深度学习"></a>人工智能、机器学习和深度学习</h3><p><img src="/liaojie.github.io/medias/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0.png"></p><p>人工智能和机器学习，深度学习的关系</p><ul><li>机器学习是人工智能的一个实现途径</li><li>深度学习是机器学习的一个方法发展而来</li></ul><h2 id="人工智能发展历程"><a href="#人工智能发展历程" class="headerlink" title="人工智能发展历程"></a>人工智能发展历程</h2><h3 id="人工智能的起源"><a href="#人工智能的起源" class="headerlink" title="人工智能的起源"></a>人工智能的起源</h3><h4 id="1-1-图灵测试"><a href="#1-1-图灵测试" class="headerlink" title="1.1 图灵测试"></a>1.1 图灵测试</h4><p>测试者与被测试者（一个人和一台机器）隔开的情况下，通过一些装置（如键盘）向被测试者随意提问。<br>多次测试（一般为5min之内），如果有超过30%的测试者不能确定被测试者是人还是机器，那么这台机器就通过了测试，并被认为具有人类智能。</p><h4 id="1-2-达特茅斯会议"><a href="#1-2-达特茅斯会议" class="headerlink" title="1.2 达特茅斯会议"></a>1.2 达特茅斯会议</h4><p>1956年8月，在美国汉诺斯小镇宁静的达特茅斯学院中，<br>约翰·麦卡锡（John McCarthy）<br>马文·闵斯基（Marvin Minsky，人工智能与认知学专家）<br>克劳德·香农（Claude Shannon，信息论的创始人）<br>艾伦·纽厄尔（Allen Newell，计算机科学家）<br>赫伯特·西蒙（Herbert Simon，诺贝尔经济学奖得主）等科学家正聚在一起，讨论着一个完全不食人间烟火的主题：<br>用机器来模仿人类学习以及其他方面的智能。<br>会议足足开了两个月的时间，虽然大家没有达成普遍的共识，但是却为会议讨论的内容起了一个名字：<br>人工智能<br>因此，1956年也就成为了人工智能元年。</p><h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h3><p>人工智能充满未知的探索道路曲折起伏。如何描述人工智能自1956年以来60余年的发展历程，学术界可谓仁者见仁、智者见智。我们将人工智<br>能的发展历程划分为以下6个阶段：</p><ul><li><p>第一是起步发展期：1956年—20世纪60年代初。<br>人工智能概念提出后，相继取得了一批令人瞩目的研究成果，如机器定理证明、跳棋程序等，掀起人工智能发展的第一个高潮。</p></li><li><p>第二是反思发展期：20世纪60年代—70年代初。<br>人工智能发展初期的突破性进展大大提升了人们对人工智能的期望，人们开始尝试更具挑战性的任务，并提出了一些不切实际的研发目标。然而，接二连三的失败和预期目标的落空（例如，无法用机器证明两个连续函数之和还是连续函数、机器翻译闹出笑话等），使人工智能的发展走入低谷。</p></li><li><p>第三是应用发展期：20世纪70年代初—80年代中。<br>20世纪70年代出现的专家系统模拟人类专家的知识和经验解决特定领域的问题，实现了人工智能从理论研究走向实际应用、从一般推理策略探讨转向运用专门知识的重大突破。专家系统在医疗、化学、地质等领域取得成功，推动人工智能走入应用发展的新高潮。</p></li><li><p>第四是低迷发展期：20世纪80年代中—90年代中。<br>随着人工智能的应用规模不断扩大，专家系统存在的应用领域狭窄、缺乏常识性知识、知识获取困难、推理方法单一、缺乏分布式功能、难以与现有数据库兼容等问题逐渐暴露出来。</p></li><li><p>第五是稳步发展期：20世纪90年代中—2010年。<br>由于网络技术特别是互联网技术的发展，加速了人工智能的创新研究，促使人工智能技术进一步走向实用化。1997年国际商业机器公司（简称IBM）深蓝超级计算机战胜了国际象棋世界冠军卡斯帕罗夫，2008年IBM提出“智慧地球”的概念。以上都是这一时期的标志性事件。</p></li><li><p>第六是蓬勃发展期：2011年至今。<br>随着大数据、云计算、互联网、物联网等信息技术的发展，泛在感知数据和图形处理器等计算平台推动以深度神经网络为代表的人工智能技术飞速发展，大幅跨越了科学与应用之间的“技术鸿沟”，诸如图像分类、语音识别、知识问答、人机对弈、无人驾驶等人工智能技术实现了从“不能用、不好用”到“可以用”的技术突破，迎来爆发式增长的新高潮。</p></li></ul><p><img src="/liaojie.github.io/medias/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B.png"></p><h2 id="人工智能主要分支"><a href="#人工智能主要分支" class="headerlink" title="人工智能主要分支"></a>人工智能主要分支</h2><h3 id="主要分支介绍"><a href="#主要分支介绍" class="headerlink" title="主要分支介绍"></a>主要分支介绍</h3><p>通讯、感知与行动是现代人工智能的三个关键能力，在这里我们将根据这些能力/应用对这三个技术领域进行介绍：</p><ul><li>计算机视觉(CV)、</li><li>自然语言处理(NLP)<ul><li>在 NLP 领域中，将覆盖文本挖掘/分类、机器翻译和语音识别。</li></ul></li><li>机器人</li></ul><h4 id="1-1-分支一：计算机视觉"><a href="#1-1-分支一：计算机视觉" class="headerlink" title="1.1 分支一：计算机视觉"></a>1.1 分支一：计算机视觉</h4><p>计算机视觉(CV)是指机器感知环境的能力。这一技术类别中的经典任务有图像形成、图像处理、图像提取和图像的三维推理。物体检测和人脸识别是其比较成功的研究领域。</p><p>当前阶段：</p><p>计算机视觉现已有很多应用，这表明了这类技术的成就，也让我们将其归入到应用阶段。随着深度学习的发展，机器甚至能在特定的案例中实现超越人类的表现。但是，这项技术离社会影响阶段还有一定距离，那要等到机器能在所有场景中都达到人类的同等水平才行(感知其环境的所有相关方面)。</p><p>发展历史：</p><p><img src="/liaojie.github.io/medias/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2.png"></p><h4 id="1-2-分支二：语音识别"><a href="#1-2-分支二：语音识别" class="headerlink" title="1.2 分支二：语音识别"></a>1.2 分支二：语音识别</h4><p>语音识别是指识别语音(说出的语言)并将其转换成对应文本的技术。相反的任务(文本转语音/TTS)也是这一领域内一个类似的研究主题。</p><p>当前阶段：</p><p>语音识别已经处于应用阶段很长时间了。最近几年，随着大数据和深度学习技术的发展，语音识别进展颇丰，现在已经非常接近社会影响阶段了。<br>语音识别领域仍然面临着声纹识别和「鸡尾酒会效应」等一些特殊情况的难题。<br>现代语音识别系统严重依赖于云，在离线时可能就无法取得理想的工作效果。</p><p>发展历史：</p><p><img src="/liaojie.github.io/medias/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B21.png"><br><img src="/liaojie.github.io/medias/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B22.png"></p><h4 id="1-3-分支三：文本挖掘-分类"><a href="#1-3-分支三：文本挖掘-分类" class="headerlink" title="1.3 分支三：文本挖掘/分类"></a>1.3 分支三：文本挖掘/分类</h4><p>这里的文本挖掘主要是指文本分类，该技术可用于理解、组织和分类结构化或非结构化文本文档。其涵盖的主要任务有句法分析、情绪分析和垃圾信息检测。</p><p>当前阶段：</p><p>我们将这项技术归类到应用阶段，因为现在有很多应用都已经集成了基于文本挖掘的情绪分析或垃圾信息检测技术。文本挖掘技术也在智能投顾的开发中有所应用，并且提升了用户体验。<br>文本挖掘和分类领域的一个瓶颈出现在歧义和有偏差的数据上。</p><p>发展历史：</p><p><img src="/liaojie.github.io/medias/%E6%96%87%E6%9C%AC%E6%8C%96%E6%8E%98%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2.png"></p><h4 id="1-4-分支四：机器翻译"><a href="#1-4-分支四：机器翻译" class="headerlink" title="1.4 分支四：机器翻译"></a>1.4 分支四：机器翻译</h4><p>机器翻译(MT)是利用机器的力量自动将一种自然语言(源语言)的文本翻译成另一种语言(目标语言)。</p><p>当前阶段：</p><p>机器翻译是一个见证了大量发展历程的应用领域。该领域最近由于神经机器翻译而取得了非常显著的进展，但仍然没有全面达到专业译者的水平；但是，我们相信在大数据、云计算和深度学习技术的帮助下，机器翻译很快就将进入社会影响阶段。<br>在某些情况下，俚语和行话等内容的翻译会比较困难(受限词表问题)。<br>专业领域的机器翻译(比如医疗领域)表现通常不好。</p><p>发展历史：</p><p><img src="/liaojie.github.io/medias/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2.png"></p><h4 id="1-5-分支五：机器人"><a href="#1-5-分支五：机器人" class="headerlink" title="1.5 分支五：机器人"></a>1.5 分支五：机器人</h4><p>机器人学(Robotics)研究的是机器人的设计、制造、运作和应用，以及控制它们的计算机系统、传感反馈和信息处理。</p><p>机器人可以分成两大类:固定机器人和移动机器人。固定机器人通常被用于工业生产(比如用于装配线)。常见的移动机器人应用有货运机器人、空中机器人和自动载具。机器人需要不同部件和系统的协作才能实现最优的作业。其中在硬件上包含传感器、反应器和控制器；另外还有能够实现感知能力的软件，比如定位、地图测绘和目标识别。</p><p>当前阶段：</p><p>自上世纪「Robot」一词诞生以来，人们已经为工业制造业设计了很多机器人。工业机器人是增长最快的应用领域，它们在 20 世纪 80 年代将这一领域带入了应用阶段。在安川电机、Fanuc、ABB、库卡等公司的努力下，我们认为进入 21 世纪之后，机器人领域就已经进入了社会影响阶段，此时各种工业机器人已经主宰了装配生产线。此外，软体机器人在很多领域也有广泛的应用，比如在医疗行业协助手术或在金融行业自动执行承销过程。但是，法律法规和「机器人威胁论」可能会妨碍机器人领域的发展。还有设计和制造机器人需要相对较高的投资。</p><p>发展历史：</p><p><img src="/liaojie.github.io/medias/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2.png"></p><p>总的来说，人工智能领域的研究前沿正逐渐从搜索、知识和推理领域转向机器学习、深度学习、计算机视觉和机器人领域。</p><p>大多数早期技术至少已经处于应用阶段了，而且其中一些已经显现出了社会影响力。一些新开发的技术可能仍处于工程甚至研究阶段，但是我们可以看到不同阶段之间转移的速度变得越来越快。</p><h2 id="机器学习工作流程"><a href="#机器学习工作流程" class="headerlink" title="机器学习工作流程"></a>机器学习工作流程</h2><h3 id="什么是机器学习-1"><a href="#什么是机器学习-1" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h3><p>机器学习是从数据中自动分析获得模型，并利用模型对未知数据进行预测。</p><p><img src="/liaojie.github.io/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.png"></p><h3 id="机器学习工作流程-1"><a href="#机器学习工作流程-1" class="headerlink" title="机器学习工作流程"></a>机器学习工作流程</h3><p><img src="/liaojie.github.io/medias/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p><p>机器学习工作流程总结<br>1.获取数据<br>2.数据基本处理<br>3.特征工程<br>4.机器学习(模型训练)<br>5.模型评估</p><ul><li>结果达到要求，上线服务</li><li>没有达到要求，重新上面步骤</li></ul><h4 id="2-1-获取到的数据集介绍"><a href="#2-1-获取到的数据集介绍" class="headerlink" title="2.1 获取到的数据集介绍"></a>2.1 获取到的数据集介绍</h4><p>数据简介</p><p>在数据集中一般：</p><ul><li>一行数据我们称为一个样本</li><li>一列数据我们成为一个特征</li><li>有些数据有目标值（标签值），有些数据没有目标值（如上表中，电影类型就是这个数据集的目标值）</li></ul><p>数据类型构成：</p><ul><li>数据类型一：特征值+目标值（目标值是连续的和离散的）</li><li>数据类型二：只有特征值，没有目标值</li></ul><p>数据分割：</p><ul><li><p>机器学习一般的数据集会划分为两个部分：</p><ul><li>训练数据：用于训练，构建模型</li><li>测试数据：在模型检验时使用，用于评估模型是否有效</li></ul></li><li><p>划分比例：</p><ul><li>训练集：70% 80% 75%</li><li>测试集：30% 20% 25%</li></ul></li></ul><h4 id="2-2-数据基本处理"><a href="#2-2-数据基本处理" class="headerlink" title="2.2 数据基本处理"></a>2.2 数据基本处理</h4><p>即对数据进行缺失值、去除异常值等处理</p><h4 id="2-3-特征工程"><a href="#2-3-特征工程" class="headerlink" title="2.3 特征工程"></a>2.3 特征工程</h4><p>2.3.1什么是特征工程</p><p>特征工程是使用专业背景知识和技巧处理数据，使得特征能在机器学习算法上发挥更好的作用的过程。</p><p>意义：会直接影响机器学习的效果</p><p>2.3.2 为什么需要特征工程(Feature Engineering)</p><blockquote><p>机器学习领域的大神Andrew Ng(吴恩达)老师说“Coming up with features is difficult, time-consuming, requires expert knowledge.“Applied machine learning” is basically feature engineering. ”<br>注：业界广泛流传：数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。</p></blockquote><p>2.3.3 特征工程包含内容</p><ul><li>特征提取</li><li>特征预处理</li><li>特征降维</li></ul><p>2.3.4 各概念具体解释</p><ul><li>特征提取<ul><li>将任意数据（如文本或图像）转换为可用于机器学习的数字特征</li></ul></li><li>特征预处理<ul><li>通过一些转换函数将特征数据转换成更加适合算法模型的特征数据过程<br><img src="/liaojie.github.io/medias/%E7%89%B9%E5%BE%81%E9%A2%84%E5%A4%84%E7%90%86.png"></li></ul></li><li>特征降维<ul><li>指在某些限定条件下，降低随机变量(特征)个数，得到一组“不相关”主变量的过程</li></ul></li></ul><h4 id="2-4-机器学习"><a href="#2-4-机器学习" class="headerlink" title="2.4 机器学习"></a>2.4 机器学习</h4><p>选择合适的算法对模型进行训练（具体内容见1.5）</p><h4 id="2-5-模型评估"><a href="#2-5-模型评估" class="headerlink" title="2.5 模型评估"></a>2.5 模型评估</h4><p>对训练好的模型进行评估（具体内容见1.6）</p><p>拓展阅读：<br>完整机器学习项目的流程</p><h2 id="机器学习算法分类"><a href="#机器学习算法分类" class="headerlink" title="机器学习算法分类"></a>机器学习算法分类</h2><h3 id="监督学习-1"><a href="#监督学习-1" class="headerlink" title="监督学习"></a>监督学习</h3><p>定义：</p><ul><li>输入数据是由输入特征值和目标值所组成。<ul><li>函数的输出可以是一个连续的值(称为回归），</li><li>或是输出是有限个离散值（称作分类）。</li></ul></li></ul><h4 id="1-1-回归问题"><a href="#1-1-回归问题" class="headerlink" title="1.1 回归问题"></a>1.1 回归问题</h4><p>例如：预测房价，根据样本集拟合出一条连续曲线。</p><p><img src="/liaojie.github.io/medias/%E9%A2%84%E6%B5%8B%E6%88%BF%E4%BB%B7.png"></p><h4 id="1-2-分类问题"><a href="#1-2-分类问题" class="headerlink" title="1.2 分类问题"></a>1.2 分类问题</h4><p>例如：根据肿瘤特征判断良性还是恶性，得到的是结果是“良性”或者“恶性”，是离散的。</p><p><img src="/liaojie.github.io/medias/%E5%88%A4%E6%96%AD%E8%82%BF%E7%98%A4.png"></p><h3 id="无监督学习-1"><a href="#无监督学习-1" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>定义：</p><ul><li>输入数据是由输入特征值组成，没有目标值<ul><li>输入数据没有被标记，也没有确定的结果。样本数据类别未知；</li><li>需要根据样本间的相似性对样本集进行类别划分。</li></ul></li></ul><p>有监督，无监督算法对比：</p><p><img src="/liaojie.github.io/medias/%E6%9C%89%E6%97%A0%E7%9B%91%E7%9D%A3%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94.png"></p><h3 id="半监督学习-1"><a href="#半监督学习-1" class="headerlink" title="半监督学习"></a>半监督学习</h3><p>定义：</p><ul><li>训练集同时包含有标记样本数据和未标记样本数据。</li></ul><p>举例：<br>监督学习训练方式：</p><p><img src="/liaojie.github.io/medias/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E6%96%B9%E5%BC%8F.png"></p><p>半监督学习训练方式</p><p><img src="/liaojie.github.io/medias/%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%E6%96%B9%E5%BC%8F.png"></p><h3 id="强化学习-1"><a href="#强化学习-1" class="headerlink" title="强化学习"></a>强化学习</h3><p>定义：</p><ul><li>实质是make decisions 问题，即自动进行决策，并且可以做连续决策。</li></ul><p>举例：</p><p>小孩想要走路，但在这之前，他需要先站起来，站起来之后还要保持平衡，接下来还要先迈出一条腿，是左腿还是右腿，迈出一步后还要迈出下一步。</p><p>小孩就是 agent，他试图通过采取行动（即行走）来操纵环境（行走的表面），并且从一个状态转变到另一个状态（即他走的每一步），当他完成任务的子任务（即走了几步）时，孩子得到奖励（给巧克力吃），并且当他不能走路时，就不会给巧克力。</p><p>主要包含五个元素：agent, action, reward, environment, observation；</p><p><img src="/liaojie.github.io/medias/agentactionrewardenvironmentobservation.png"></p><p>强化学习的目标就是获得最多的累计奖励。</p><p>监督学习和强化学习的对比</p><table><thead><tr><th></th><th>监督学习</th><th>强化学习</th></tr></thead><tbody><tr><td>反馈映射</td><td>输出的是之间的关系，可以告诉算法什么样的输入对应着什么样的输出。</td><td>输出的是给机器的反馈 reward function，即用来判断这个行为是好是坏。</td></tr><tr><td>反馈时间</td><td>做了比较坏的选择会立刻反馈给算法。</td><td>结果反馈有延时，有时候可能需要走了很多步以后才知道以前的某一步的选择是好还是坏。</td></tr><tr><td>输入特征</td><td>输入是独立同分布的。</td><td>面对的输入总是在变化，每当算法做出一个行为，它影响下一次决策的输入。</td></tr></tbody></table><p>拓展概念：什么是独立同分布：</p><p>独立同分布概念</p><p>拓展阅读：Alphago进化史 漫画告诉你Zero为什么这么牛：</p><p><a href="http://sports.sina.com.cn/chess/weiqi/2017-10-21/doc-ifymyyxw4023875.shtm">http://sports.sina.com.cn/chess/weiqi/2017-10-21/doc-ifymyyxw4023875.shtm</a></p><h2 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h2><p>模型评估是模型开发过程不可或缺的一部分。它有助于发现表达数据的最佳模型和所选模型将来工作的性能如何。<br>按照数据集的目标值不同，可以把模型评估分为分类模型评估和回归模型评估。</p><h3 id="分类模型评估"><a href="#分类模型评估" class="headerlink" title="分类模型评估"></a>分类模型评估</h3><p>准确率</p><ul><li>预测正确的数占样本总数的比例。</li></ul><p>其他评价指标：精确率、召回率、F1-score、AUC指标等</p><h2 id="回归模型评估"><a href="#回归模型评估" class="headerlink" title="回归模型评估"></a>回归模型评估</h2><p>均方根误差（Root Mean Squared Error，RMSE）</p><ul><li>RMSE是一个衡量回归模型误差率的常用公式。 不过，它仅能比较误差是相同单位的模型</li></ul><p><img src="/liaojie.github.io/medias/RMSE.png"></p><h2 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h2><p>模型评估用于评价训练好的的模型的表现效果，其表现效果大致可以分为两类：过拟合、欠拟合。</p><p>在训练过程中，你可能会遇到如下问题：<br>训练数据训练的很好啊，误差也不大，为什么在测试集上面有问题呢？<br>当算法在某个数据集当中出现这种情况，可能就出现了拟合问题。</p><h3 id="3-1-欠拟合"><a href="#3-1-欠拟合" class="headerlink" title="3.1 欠拟合"></a>3.1 欠拟合</h3><p><img src="/liaojie.github.io/medias/%E6%AC%A0%E6%8B%9F%E5%90%88.png"></p><p>因为机器学习到的天鹅特征太少了，导致区分标准太粗糙，不能准确识别出天鹅。</p><p>欠拟合（under-fitting）：模型学习的太过粗糙，连训练集中的样本数据特征关系都没有学出来。</p><h3 id="3-2-过拟合"><a href="#3-2-过拟合" class="headerlink" title="3.2 过拟合"></a>3.2 过拟合</h3><p><img src="/liaojie.github.io/medias/%E8%BF%87%E6%8B%9F%E5%90%88.png"></p><p>机器已经基本能区别天鹅和其他动物了。然后，很不巧已有的天鹅图片全是白天鹅的，于是机器经过学习后，会认为天鹅的羽毛都是白的，以后看到羽毛是黑的天鹅就会认为那不是天鹅。</p><p>过拟合（over-fitting）：所建的机器学习模型或者是深度学习模型在训练样本中表现得过于优越，导致在测试数据集中表现不佳。</p><p>上问题解答：</p><p>训练数据训练的很好啊，误差也不大，为什么在测试集上面有问题呢？</p><h2 id="Azure机器学习模型搭建实验"><a href="#Azure机器学习模型搭建实验" class="headerlink" title="Azure机器学习模型搭建实验"></a>Azure机器学习模型搭建实验</h2><p>Azure平台简介</p><p><img src="/liaojie.github.io/medias/Azure%E5%B9%B3%E5%8F%B0%E7%AE%80%E4%BB%8B.png"></p><p>Azure Machine Learning（简称“AML”）是微软在其公有云Azure上推出的基于Web使用的一项机器学习服务，机器学习属人工智能的一个分支，它技术借助算法让电脑对大量流动数据集进行识别。这种方式能够通过历史数据来预测未来事件和行为，其实现方式明显优于传统的商业智能形式。</p><p>微软的目标是简化使用机器学习的过程，以便于开发人员、业务分析师和数据科学家进行广泛、便捷地应用。<br>这款服务的目的在于“将机器学习动力与云计算的简单性相结合”。<br>AML目前在微软的Global Azure云服务平台提供服务，用户可以通过站点：<a href="https://studio.azureml.net/">https://studio.azureml.net/</a> 申请免费试用。</p><p><img src="/liaojie.github.io/medias/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B7%A5%E4%BD%9C%E5%AE%A4.png"></p><p>Azure机器学习实验</p><p>实验目的：了解机器学习从数据到建模并最终评估预测的整个流程。</p><p><a href="https://github.com/liaojie1314/Azure">Azure机器学习实验操作文档</a></p><h2 id="深度学习简介"><a href="#深度学习简介" class="headerlink" title="深度学习简介"></a>深度学习简介</h2><h3 id="深度学习-——-神经网络简介"><a href="#深度学习-——-神经网络简介" class="headerlink" title="深度学习 —— 神经网络简介"></a>深度学习 —— 神经网络简介</h3><p>深度学习（Deep Learning）（也称为深度结构学习【Deep Structured Learning】、层次学习【Hierarchical Learning】或者是深度机器学习</p><p>【Deep Machine Learning】）是一类算法集合，是机器学习的一个分支。</p><p>深度学习方法近年来，在会话识别、图像识别和对象侦测等领域表现出了惊人的准确性。<br>但是，“深度学习”这个词语很古老，它在1986年由Dechter在机器学习领域提出，然后在2000年有Aizenberg等人引入到人工神经网络中。而现在，由于Alex Krizhevsky在2012年使用卷积网络结构赢得了ImageNet比赛之后受到大家的瞩目。</p><p>卷积网络之父：Yann LeCun</p><p>深度学习演示</p><p>链接:<a href="http://playground.tensorflow.org/">http://playground.tensorflow.org</a></p><h3 id="深度学习各层负责内容"><a href="#深度学习各层负责内容" class="headerlink" title="深度学习各层负责内容"></a>深度学习各层负责内容</h3><p>神经网络各层负责内容：</p><p>1层：负责识别颜色及简单纹理</p><p>2层：一些神经元可以识别更加细化的纹理，布纹，刻纹，叶纹等</p><p>3层：一些神经元负责感受黑夜里的黄色烛光，高光，萤火，鸡蛋黄色等</p><p>4层：一些神经元识别萌狗的脸，宠物形貌，圆柱体事物，七星瓢虫等的存在。</p><p>5层：一些神经元负责识别花，黑眼圈动物，鸟，键盘，原型屋顶等。</p><h1 id="机器学习基础环境安装与使用"><a href="#机器学习基础环境安装与使用" class="headerlink" title="机器学习基础环境安装与使用"></a>机器学习基础环境安装与使用</h1><h2 id="库的安装"><a href="#库的安装" class="headerlink" title="库的安装"></a>库的安装</h2><p>整个机器学习基础阶段会用到Matplotlib、Numpy、Pandas等库，为了统一版本号在环境中使用，将所有的库及其版本放到了文件requirements.txt当中，然后统一安装</p><p>新建一个用于人工智能环境的虚拟环境</p><blockquote><p>mkvirtualenv ai</p></blockquote><pre class="line-numbers language-none"><code class="language-none">matplotlib==2.2.2numpy==1.14.2pandas==0.20.3tables==3.4.2jupyter==1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>每个包安装的过程中，尽量指定稳定版本进行安装</p><p>使用pip命令安装</p><blockquote><p>pip3 install -r requirements.txt</p></blockquote><h2 id="Jupyter-Notebook使用"><a href="#Jupyter-Notebook使用" class="headerlink" title="Jupyter Notebook使用"></a>Jupyter Notebook使用</h2><h3 id="Jupyter-Notebook介绍"><a href="#Jupyter-Notebook介绍" class="headerlink" title="Jupyter Notebook介绍"></a>Jupyter Notebook介绍</h3><p>Jupyter项目是一个非盈利的开源项目，源于2014年的ipython项目，因为它逐渐发展为支持跨所有编程语言的交互式数据科学和科学计算</p><ul><li>Jupyter Notebook，原名IPython Notbook，是IPython的加强网页版，一个开源Web应用程序</li><li>名字源自Julia、Python 和 R（数据科学的三种开源语言）</li><li>是一款程序员和科学工作者的编程/文档/笔记/展示软件</li><li>.ipynb文件格式是用于计算型叙述的JSON文档格式的正式规范</li></ul><h3 id="为什么使用Jupyter-Notebook"><a href="#为什么使用Jupyter-Notebook" class="headerlink" title="为什么使用Jupyter Notebook?"></a>为什么使用Jupyter Notebook?</h3><p>传统软件开发：工程／目标明确</p><ul><li>需求分析，设计架构，开发模块，测试<br>数据挖掘：艺术／目标不明确</li><li>目的是具体的洞察目标，而不是机械的完成任务</li><li>通过执行代码来理解问题</li><li>迭代式地改进代码来改进解决方法</li></ul><p>实时运行的代码、叙事性的文本和可视化被整合在一起，方便使用代码和数据来讲述故事</p><p>对比Jupyter Notebook和Pycharm</p><ul><li>画图</li><li>数据展示</li></ul><p>总结：Jupyter Notebook 相比 Pycharm 在画图和数据展示方面更有优势。</p><h3 id="Jupyter-Notebook的使用-helloworld"><a href="#Jupyter-Notebook的使用-helloworld" class="headerlink" title="Jupyter Notebook的使用-helloworld"></a>Jupyter Notebook的使用-helloworld</h3><h4 id="3-1-界面启动、创建文件"><a href="#3-1-界面启动、创建文件" class="headerlink" title="3.1 界面启动、创建文件"></a>3.1 界面启动、创建文件</h4><p>3.1.1 界面启动</p><p>环境搭建好后，本机输入jupyter notebook命令，会自动弹出浏览器窗口打开Jupyter Notebook</p><pre class="line-numbers language-none"><code class="language-none"># 进入虚拟环境workon ai# 输入命令jupyter notebook<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本地notebook的默认URL为：<a href="http://localhost:8888/">http://localhost:8888</a><br>想让notebook打开指定目录，只要进入此目录后执行命令即可</p><p>3.1.2 新建notebook文档</p><ul><li>notebook的文档格式是 <code>.ipynb</code></li></ul><p>3.1.3 内容界面操作</p><p>标题栏：点击标题（如Untitled）修改文档名<br>编辑栏：</p><h4 id="3-2-cell操作"><a href="#3-2-cell操作" class="headerlink" title="3.2 cell操作"></a>3.2 cell操作</h4><p>什么是cell？</p><ul><li>cell：一对In Out会话被视作一个代码单元，称为cell</li><li>cell行号前的 * ，表示代码正在运行</li></ul><p>Jupyter支持两种模式：</p><p>编辑模式（Enter）</p><ul><li>命令模式下 回车Enter 或 鼠标双击 cell进入编辑模式</li><li>可以操作cell内文本或代码，剪切／复制／粘贴移动等操作</li></ul><p>命令模式（Esc）</p><ul><li>按 Esc 退出编辑，进入命令模式</li><li>可以操作cell单元本身进行剪切／复制／粘贴／移动等操作</li></ul><p>3.2.1 鼠标操作</p><p><img src="/liaojie.github.io/medias/%E9%BC%A0%E6%A0%87%E6%93%8D%E4%BD%9C.png"></p><p>3.2.2 快捷键操作</p><p>两种模式通用快捷键</p><ul><li><code>Shift+Enter</code> ，执行本单元代码，并跳转到下一单元</li><li><code>Ctrl+Enter</code> ，执行本单元代码，留在本单元</li></ul><p>命令模式：按ESC进入</p><ul><li>Y ，cell切换到Code模式</li><li>M ，cell切换到Markdown模式</li><li>A ，在当前cell的上面添加cell</li><li>B ，在当前cell的下面添加cell</li></ul><p>其他(了解)</p><ul><li>双击D ：删除当前cell</li><li>Z ，回退</li><li>L ，为当前cell加上行号</li><li><code>Ctrl+Shift+P</code> ，对话框输入命令直接运行</li><li>快速跳转到首个cell， <code>Crtl+Home</code></li><li>快速跳转到最后一个cell， <code>Crtl+End</code></li></ul><p>编辑模式：按Enter进入</p><ul><li>补全代码：变量、方法后跟 Tab键</li><li>为一行或多行代码添加/取消注释： <code>Ctrl+/</code> （Mac:CMD+/）</li></ul><p>其他(了解)：</p><ul><li>多光标操作： <code>Ctrl键点击鼠标</code> （Mac:CMD+点击鼠标）</li><li>回退： <code>Ctrl+Z</code> （Mac:CMD+Z）</li><li>重做： <code>Ctrl+Y</code> （Mac:CMD+Y)</li></ul><h4 id="3-3-markdown演示"><a href="#3-3-markdown演示" class="headerlink" title="3.3 markdown演示"></a>3.3 markdown演示</h4><p>掌握标题和缩进即可</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><ul><li>缩进<ul><li>二级缩进<ul><li>三级缩进</li></ul></li></ul></li></ul><h3 id="Jupyter-Notebook中自动补全代码等相关功能拓展【了解】"><a href="#Jupyter-Notebook中自动补全代码等相关功能拓展【了解】" class="headerlink" title="Jupyter Notebook中自动补全代码等相关功能拓展【了解】"></a>Jupyter Notebook中自动补全代码等相关功能拓展【了解】</h3><h4 id="4-1-安装jupyter-contrib-nbextensions库"><a href="#4-1-安装jupyter-contrib-nbextensions库" class="headerlink" title="4.1 安装jupyter_contrib_nbextensions库"></a>4.1 安装jupyter_contrib_nbextensions库</h4><p>安装该库的命令如下：</p><blockquote><p>python -m pip install jupyter_contrib_nbextensions</p></blockquote><p>然后执行：</p><blockquote><p>jupyter contrib nbextension install –user –skip-running-check</p></blockquote><p>在原来的基础上勾选： “Table of Contents” 以及 “Hinterland”</p><p>部分功能：</p><p><img src="/liaojie.github.io/medias/jupyter%E5%AE%89%E8%A3%85%E5%BA%93.png"></p><h2 id="完整机器学习项目的流程（拓展阅读）"><a href="#完整机器学习项目的流程（拓展阅读）" class="headerlink" title="完整机器学习项目的流程（拓展阅读）"></a>完整机器学习项目的流程（拓展阅读）</h2><h3 id="1-抽象成数学问题"><a href="#1-抽象成数学问题" class="headerlink" title="1 抽象成数学问题"></a>1 抽象成数学问题</h3><p>明确问题是进行机器学习的第一步。机器学习的训练过程通常都是一件非常耗时的事情，胡乱尝试时间成本是非常高的。这里的抽象成数学问题，指的明确我们可以获得什么样的数据，抽象出的问题，是一个分类还是回归或者是聚类的问题。</p><h3 id="2-获取数据"><a href="#2-获取数据" class="headerlink" title="2 获取数据"></a>2 获取数据</h3><p>数据决定了机器学习结果的上限，而算法只是尽可能逼近这个上限。<br>数据要有代表性，否则必然会过拟合。<br>而且对于分类问题，数据偏斜不能过于严重，不同类别的数据数量不要有数量级的差距。<br>而且还要对数据的量级有一个评估，多少个样本，多少个特征，可以估算出其对内存的消耗程度，判断训练过程中内存是否能够放得下。如果放不下就得考虑改进算法或者使用一些降维的技巧了。如果数据量实在太大，那就要考虑分布式了。</p><h3 id="3-特征预处理与特征选择"><a href="#3-特征预处理与特征选择" class="headerlink" title="3 特征预处理与特征选择"></a>3 特征预处理与特征选择</h3><p>良好的数据要能够提取出良好的特征才能真正发挥作用。<br>特征预处理、数据清洗是很关键的步骤，往往能够使得算法的效果和性能得到显著提高。归一化、离散化、因子化、缺失值处理、去除共线性等，数据挖掘过程中很多时间就花在它们上面。这些工作简单可复制，收益稳定可预期，是机器学习的基础必备步骤。</p><p>筛选出显著特征、摒弃非显著特征，需要机器学习工程师反复理解业务。这对很多结果有决定性的影响。特征选择好了，非常简单的算法也能得出良好、稳定的结果。这需要运用特征有效性分析的相关技术，如相关系数、卡方检验、平均互信息、条件熵、后验概率、逻辑回归权重等方法。</p><h3 id="4-训练模型与调优"><a href="#4-训练模型与调优" class="headerlink" title="4 训练模型与调优"></a>4 训练模型与调优</h3><p>直到这一步才用到我们上面说的算法进行训练。现在很多算法都能够封装成黑盒供人使用。但是真正考验水平的是调整这些算法的（超）参数，使得结果变得更加优良。这需要我们对算法的原理有深入的理解。理解越深入，就越能发现问题的症结，提出良好的调优方案。</p><h3 id="5-模型诊断"><a href="#5-模型诊断" class="headerlink" title="5 模型诊断"></a>5 模型诊断</h3><p>如何确定模型调优的方向与思路呢？这就需要对模型进行诊断的技术。</p><p>过拟合、欠拟合 判断是模型诊断中至关重要的一步。常见的方法如交叉验证，绘制学习曲线等。过拟合的基本调优思路是增加数据量，降低模型复杂度。欠拟合的基本调优思路是提高特征数量和质量，增加模型复杂度。</p><p>误差分析 也是机器学习至关重要的步骤。通过观察误差样本全面分析产生误差的原因:是参数的问题还是算法选择的问题，是特征的问题还是数据本身的问题……</p><p>诊断后的模型需要进行调优，调优后的新模型需要重新进行诊断，这是一个反复迭代不断逼近的过程，需要不断地尝试， 进而达到最优状态。</p><h3 id="6-模型融合"><a href="#6-模型融合" class="headerlink" title="6 模型融合"></a>6 模型融合</h3><p>一般来说，模型融合后都能使得效果有一定提升。而且效果很好。<br>工程上，主要提升算法准确度的方法是分别在模型的前端（特征清洗和预处理，不同的采样模式）与后端（模型融合）上下功夫。因为他们比较标准可复制，效果比较稳定。而直接调参的工作不会很多，毕竟大量数据训练起来太慢了，而且效果难以保证。</p><h3 id="7-上线运行"><a href="#7-上线运行" class="headerlink" title="7 上线运行"></a>7 上线运行</h3><p>这一部分内容主要跟工程实现的相关性比较大。工程上是结果导向，模型在线上运行的效果直接决定模型的成败。 不单纯包括其准确程度、误差等情况，还包括其运行的速度(时间复杂度)、资源消耗程度（空间复杂度）、稳定性是否可接受。<br>这些工作流程主要是工程实践上总结出的一些经验。并不是每个项目都包含完整的一个流程。这里的部分只是一个指导性的说明，只有大家自己多实践，多积累项目经验，才会有自己更深刻的认识。</p><h2 id="独立同分布IID-independent-and-identically-distributed"><a href="#独立同分布IID-independent-and-identically-distributed" class="headerlink" title="独立同分布IID(independent and identically distributed)"></a>独立同分布IID(independent and identically distributed)</h2><h3 id="1-独立同分布-i-i-d"><a href="#1-独立同分布-i-i-d" class="headerlink" title="1.独立同分布(i.i.d.)"></a>1.独立同分布(i.i.d.)</h3><p>在概率统计理论中，如果变量序列或者其他随机变量有相同的概率分布，并且互相独立，那么这些随机变量是独立同分布。</p><p>在西瓜书中解释是：输入空间中的所有样本服从一个隐含未知的分布，训练数据所有样本都是独立地从这个分布上采样而得。</p><h3 id="2-简单解释-—-独立、同分布、独立同分布"><a href="#2-简单解释-—-独立、同分布、独立同分布" class="headerlink" title="2.简单解释 — 独立、同分布、独立同分布"></a>2.简单解释 — 独立、同分布、独立同分布</h3><p>（1）独立：每次抽样之间没有关系，不会相互影响<br>举例：给一个骰子，每次抛骰子抛到几就是几，这是独立；如果我要抛骰子两次之和大于8，那么第一次和第二次抛就不独立，因为第二次抛的结果和第一次相关。</p><p>（2）同分布：每次抽样，样本服从同一个分布<br>举例：给一个骰子，每次抛骰子得到任意点数的概率都是六分之一，这个就是同分布</p><p>（3）独立同分布：i.i.d.，每次抽样之间独立而且同分布</p><h3 id="3-机器学习领域的重要假设"><a href="#3-机器学习领域的重要假设" class="headerlink" title="3.机器学习领域的重要假设"></a>3.机器学习领域的重要假设</h3><p>IID独立同分布即假设训练数据和测试数据是满足相同分布的，它是通过训练数据获得的模型能够在测试集获得好的效果的一个基本保障。</p><h3 id="4-目前发展"><a href="#4-目前发展" class="headerlink" title="4.目前发展"></a>4.目前发展</h3><p>机器学习并不总要求独立同分布，在不少问题中要求样本数据采样自同一个分布是因为希望用训练数据集得到的模型可以合理的用于测试数据集，使用独立同分布假设能够解释得通。</p><p>目前一些机器学习内容已经不再囿于独立同分布假设下，一些问题会假设样本没有同分布。</p><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><h3 id="回归问题概述"><a href="#回归问题概述" class="headerlink" title="回归问题概述"></a>回归问题概述</h3><p>来源:<a href="https://blog.csdn.net/iqdutao/article/details/109402570?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163774011816780255279611%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163774011816780255279611&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109402570.first_rank_v2_pc_rank_v29&amp;utm_term=%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B&amp;spm=1018.2226.3001.4187">线性回归模型详解</a><br>回归分析的主要算法包括：</p><p>1.线性回归(Linear Regression)<br>2.逻辑回归（Logistic regressions）<br>3.多项式回归(Polynomial Regression)<br>4.逐步回归(Step Regression)<br>5.岭回归(Ridge Regression)<br>6.套索回归(Lasso Regression)<br>7.弹性网回归(ElasticNet)</p><p>线性与非线性</p><ul><li>线性：两个变量之间的关系是一次函数关系的——图象<code>是直线</code>,叫做线性。<br><code>注意：线性是指广义的线性,也就是数据与数据之间的关系</code>。</li><li>非线性：两个变量之间的关系不是一次函数关系的——图象<code>不是直线</code>,叫做非线性。</li></ul><p>那到底什么时候可以使用线性回归呢？统计学家安斯库姆给出了四个数据集,被称为安斯库姆四重奏。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%921png.png"></p><p>从这四个数据集的分布可以看出,并不是所有的数据集都可以用一元线性回归来建模。现实世界中的问题往往更复杂,变量几乎不可能非常理想化地符合线性模型的要求。因此使用线性回归,需要遵守下面几个假设：</p><ul><li>线性回归是一个回归问题。</li><li>要预测的变量 y 与自变量 x 的关系是线性的（图2 是一个非线性）。</li><li>各项误差服从正太分布,均值为0,与 x 同方差（图4 误差不是正太分布）。</li><li>变量 x 的分布要有变异性。</li><li>多元线性回归中不同特征之间应该相互独立,避免线性相关。</li></ul><p>参考：<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%922.png"></p><h5 id="回归问题与分类问题"><a href="#回归问题与分类问题" class="headerlink" title="回归问题与分类问题"></a>回归问题与分类问题</h5><p>与回归相对的是分类问题（classification）,分类问题要预测的变量y输出集合是有限的,预测值只能是有限集合内的一个。当要预测的变量y输出集合是无限且连续,我们称之为回归。比如,天气预报预测明天是否下雨,是一个二分类问题；预测明天的降雨量多少,就是一个回归问题。</p><h5 id="变量之间是线性关系"><a href="#变量之间是线性关系" class="headerlink" title="变量之间是线性关系"></a>变量之间是线性关系</h5><p>线性通常是指变量之间保持等比例的关系,从图形上来看,变量之间的形状为直线,斜率是常数。这是一个非常强的假设,数据点的分布呈现复杂的曲线,则不能使用线性回归来建模。可以看出,四重奏右上角的数据就不太适合用线性回归的方式进行建模。</p><h5 id="误差服从均值为零的正态分布"><a href="#误差服从均值为零的正态分布" class="headerlink" title="误差服从均值为零的正态分布"></a>误差服从均值为零的正态分布</h5><p>前面最小二乘法求解过程已经提到了误差的概念,误差可以表示为误差 = 实际值 - 预测值。</p><p>可以这样理解这个假设：线性回归允许预测值与真实值之间存在误差,随着数据量的增多,这些数据的误差平均值为0；从图形上来看,各个真实值可能在直线上方,也可能在直线下方,当数据足够多时,各个数据上上下下相互抵消。如果误差不服从均值为零的正太分布,那么很有可能是出现了一些异常值,数据的分布很可能是安斯库姆四重奏右下角的情况。</p><p>这也是一个非常强的假设,如果要使用线性回归模型,那么必须假设数据的误差均值为零的正太分布。</p><h5 id="变量-x-的分布要有变异性"><a href="#变量-x-的分布要有变异性" class="headerlink" title="变量 x 的分布要有变异性"></a>变量 x 的分布要有变异性</h5><p>线性回归对变量 x也有要求,要有一定变化,不能像安斯库姆四重奏右下角的数据那样,绝大多数数据都分布在一条竖线上。</p><h5 id="多元线性回归不同特征之间相互独立"><a href="#多元线性回归不同特征之间相互独立" class="headerlink" title="多元线性回归不同特征之间相互独立"></a>多元线性回归不同特征之间相互独立</h5><p>如果不同特征不是相互独立,那么可能导致特征间产生共线性,进而导致模型不准确。举一个比较极端的例子,预测房价时使用多个特征：房间数量,房间数量x2,-房间数量等,特征之间是线性相关的,如果模型只有这些特征,缺少其他有效特征,虽然可以训练出一个模型,但是模型不准确,预测性差。<br>线性回归<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BA%BF%E6%80%A73.jpg"><br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%924.jpg"><br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%925.jpg"><br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%926.jpg"><br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%927.jpg"><br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%928.jpg"><br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%929.jpg"></p><h3 id="多重共线性"><a href="#多重共线性" class="headerlink" title="多重共线性"></a>多重共线性</h3><p>在多元线性回归模型经典假设中,其重要假定之一是回归模型的解释变量之间不存在线性关系,也就是说,解释变量X1,X2,……,Xk中的任何一个都不能是其他解释变量的线性组合。如果违背这一假定,即线性回归模型中某一个解释变量与其他解释变量间存在线性关系,就称线性回归模型中存在多重共线性。严重的多重共线性可能会产生问题,因为它可以增大回归系数的方差,使它们变得不稳定。以下是不稳定系数导致的一些后果：</p><ul><li>即使预测变量和响应之间存在显著关系,系数也可能看起来并不显著。</li><li>高度相关的预测变量的系数在样本之间差异很大。</li><li>从模型中去除任何高度相关的项都将大幅影响其他高度相关项的估计系数。高度相关项的系数甚至会包含错误的符号。</li></ul><h5 id="共线性出现的原因"><a href="#共线性出现的原因" class="headerlink" title="共线性出现的原因"></a>共线性出现的原因</h5><p>多重共线性问题就是指一个解释变量的变化引起另一个解释变量地变化。</p><p>原本自变量应该是各自独立的,根据回归分析结果,能得知哪些因素对因变量Y有显著影响,哪些没有影响。如果各个自变量x之间有很强的线性关系,就无法固定其他变量,也就找不到x和y之间真实的关系了。除此以外,多重共线性的原因还可能包括：</p><ul><li>数据不足。在某些情况下,收集更多数据可以解决共线性问题。</li><li>错误地使用虚拟变量。（比如,同时将男、女两个虚拟变量都放入模型,此时必定出现共线性,称为完全共线性）</li></ul><h5 id="共线性的判别指标"><a href="#共线性的判别指标" class="headerlink" title="共线性的判别指标"></a>共线性的判别指标</h5><p>有多种方法可以检测多重共线性,较常使用的是回归分析中的VIF值,VIF值越大,多重共线性越严重。一般认为VIF大于10时（严格是5）,代表模型存在严重的共线性问题。有时候也会以容差值作为标准,容差值=1/VIF,所以容差值大于0.1则说明没有共线性(严格是大于0.2),VIF和容差值有逻辑对应关系,两个指标任选其一即可。</p><p>除此之外,直接对自变量进行相关分析,查看相关系数和显著性也是一种判断方法。如果一个自变量和其他自变量之间的相关系数显著,则代表可能存在多重共线性问题。</p><p>如存在严重的多重共线性问题,可以考虑使用以下几种方法处理：</p><h5 id="（1）手动移除出共线性的变量"><a href="#（1）手动移除出共线性的变量" class="headerlink" title="（1）手动移除出共线性的变量"></a>（1）手动移除出共线性的变量</h5><p>先做下相关分析,如果发现某两个自变量X（解释变量）的相关系数值大于0.7,则移除掉一个自变量（解释变量）,然后再做回归分析。此方法是最直接的方法,但有的时候我们不希望把某个自变量从模型中剔除,这样就要考虑使用其他方法。</p><h5 id="（2）逐步回归法"><a href="#（2）逐步回归法" class="headerlink" title="（2）逐步回归法"></a>（2）逐步回归法</h5><p>让系统自动进行自变量的选择剔除,使用逐步回归将共线性的自变量自动剔除出去。此种解决办法有个问题是,可能算法会剔除掉本不想剔除的自变量,如果有此类情况产生,此时最好是使用岭回归进行分析。</p><h5 id="（3）增加样本容量"><a href="#（3）增加样本容量" class="headerlink" title="（3）增加样本容量"></a>（3）增加样本容量</h5><p>增加样本容量是解释共线性问题的一种办法,但在实际操作中可能并不太适合,原因是样本量的收集需要成本时间等。</p><h5 id="（4）岭回归"><a href="#（4）岭回归" class="headerlink" title="（4）岭回归"></a>（4）岭回归</h5><p>上述第1和第2种解决办法在实际研究中使用较多,但问题在于,如果实际研究中并不想剔除掉某些自变量,某些自变量很重要,不能剔除。此时可能只有岭回归最为适合了。岭回归是当前解决共线性问题最有效的解释办法。</p><h3 id="常用的回归模型评估指标"><a href="#常用的回归模型评估指标" class="headerlink" title="常用的回归模型评估指标"></a>常用的回归模型评估指标</h3><ul><li>解释方差（ Explained variance score）</li><li>绝对平均误差（Mean absolute error）</li><li>均方误差（Mean squared error）</li><li>决定系数（R² score）</li></ul><h3 id="算法优缺点"><a href="#算法优缺点" class="headerlink" title="算法优缺点"></a>算法优缺点</h3><p>　　优点：</p><p>　　　　（1）思想简单,实现容易。建模迅速,对于小数据量、简单的关系很有效；</p><p>　　　　（2）是许多强大的非线性模型的基础。</p><p>　　　　（3）线性回归模型十分容易理解,结果具有很好的可解释性,有利于决策分析。</p><p>　　　　（4）蕴含机器学习中的很多重要思想。</p><p>　　　　（5）能解决回归问题。</p><p>　　缺点：</p><p>　　　　（1）对于非线性数据或者数据特征间具有相关性多项式回归难以建模.</p><p>　　　　（2）难以很好地表达高度复杂的数据。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h5 id="简单的线性回归算法"><a href="#简单的线性回归算法" class="headerlink" title="简单的线性回归算法"></a>简单的线性回归算法</h5><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npimport matplotlib.pyplot as plt x=np.array([1,2,3,4,5],dtype=np.float)y=np.array([1,3.0,2,3,5])plt.scatter(x,y) x_mean=np.mean(x)y_mean=np.mean(y)num=0.0d=0.0for x_i,y_i in zip(x,y):    num+=(x_i-x_mean)*(y_i-y_mean)    d+=(x_i-x_mean)**2    a=num/d    b=y_mean-a*x_meany_hat=a*x+b plt.figure(2)plt.scatter(x,y)plt.plot(x,y_hat,c='r')x_predict=4.8y_predict=a*x_predict+bprint(y_predict)plt.scatter(x_predict,y_predict,c='b',marker='+')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="基于sklearn的简单线性回归"><a href="#基于sklearn的简单线性回归" class="headerlink" title="基于sklearn的简单线性回归"></a>基于sklearn的简单线性回归</h5><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as np import matplotlib.pyplot as plt  from sklearn.linear_model import LinearRegression  # 线性回归  # 样本数据集,第一列为x,第二列为y,在x和y之间建立回归模型data=[    [0.067732,3.176513],[0.427810,3.816464],[0.995731,4.550095],[0.738336,4.256571],[0.981083,4.560815],    [0.526171,3.929515],[0.378887,3.526170],[0.033859,3.156393],[0.132791,3.110301],[0.138306,3.149813],    [0.247809,3.476346],[0.648270,4.119688],[0.731209,4.282233],[0.236833,3.486582],[0.969788,4.655492],    [0.607492,3.965162],[0.358622,3.514900],[0.147846,3.125947],[0.637820,4.094115],[0.230372,3.476039],    [0.070237,3.210610],[0.067154,3.190612],[0.925577,4.631504],[0.717733,4.295890],[0.015371,3.085028],    [0.335070,3.448080],[0.040486,3.167440],[0.212575,3.364266],[0.617218,3.993482],[0.541196,3.891471]]  #生成X和y矩阵dataMat = np.array(data)X = dataMat[:,0:1]   # 变量xy = dataMat[:,1]   #变量y  # ========线性回归========model = LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)model.fit(X, y)   # 线性回归建模print('系数矩阵:\n',model.coef_)print('线性回归模型:\n',model)# 使用模型预测predicted = model.predict(X) plt.scatter(X, y, marker='x')plt.plot(X, predicted,c='r') plt.xlabel("x")plt.ylabel("y")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>系数矩阵:<br>  [ 1.6314263]<br>线性回归模型:<br>  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之SpringCloud</title>
      <link href="/liaojie.github.io/2021/11/12/springcloud/"/>
      <url>/liaojie.github.io/2021/11/12/springcloud/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android启动页</title>
      <link href="/liaojie.github.io/2021/11/10/android-qi-dong-ye/"/>
      <url>/liaojie.github.io/2021/11/10/android-qi-dong-ye/</url>
      
        <content type="html"><![CDATA[<p>Android中几乎所有app都有启动页这一基本功能,但是用途都不相同。<br>有的app的启动页用于加载广告,有的启动页用于加载后台,一旦后台数据加载好了才把启动页去了,不过想来很多app是两者兼顾的。<br>需求:</p><ul><li>展示 logo 页面3秒</li><li>服务端可以控制是否播放广告</li><li>服务端可以控制播放广告的秒数</li><li>服务端可以控制广告的内容（图片）和广告详情页面的链接</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/splash.png"></p><p>注意:从服务端请求数据是在展示 3 秒启动页的时候获取的</p><h3 id="启动页"><a href="#启动页" class="headerlink" title="启动页"></a>启动页</h3><p>启动包括冷启动和热启动:</p><ul><li>冷启动：是指进程从无到有的过程。因为要进行页面初始化,所以相对其他两个启动方式,消耗的时间是相对比较多的。</li><li>热启动：是指之前的进程还在,在之前进程的基础上创建 Activity 的过程,耗时相对少一点。<br>　　我们可以通过 Activity 的 theme 来修改这个白屏所显示的界面。根据上面的需求,我们需要显示3秒 logo 的页面。那么我们干脆将我们的logo设置为背景图就行了。</li></ul><p>新建一个activity为SplashActivity,其对应布局文件为activity_splash.xml<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/newEmptyActivity.png"><br>并在AndroidManifest.xml中将SplashActivity设置为主入口:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;activity android:name=".MainActivity"&gt;&lt;/activity&gt;&lt;activity android:name=".SplashActivity"    android:theme="@style/Theme.AppCompat.NoActionBar.NoActionBarWithBackGround"&gt;    &lt;intent-filter&gt;        &lt;action android:name="android.intent.action.MAIN" /&gt;        &lt;category android:name="android.intent.category.LAUNCHER" /&gt;    &lt;/intent-filter&gt;&lt;/activity&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在values中的themes.xml中添加:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/themes.png"></p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;style name="Theme.AppCompat.NoActionBar.NoActionBarWithBackGround"&gt;    &lt;item name="windowActionBar"&gt;false&lt;/item&gt;//取消Actionbar    &lt;item name="windowNoTitle"&gt;true&lt;/item&gt;    &lt;item name="android:windowFullscreen"&gt;true&lt;/item&gt;//设置全屏    &lt;item name="android:windowBackground"&gt;@drawable/splash&lt;/item&gt;//设置背景图片&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在AndroidManifest.xml中需要主题的Activity添加:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"    package="com.example.splashactivity"&gt;    &lt;application        android:allowBackup="true"        android:icon="@mipmap/ic_launcher"        android:label="@string/app_name"        android:roundIcon="@mipmap/ic_launcher_round"        android:supportsRtl="true"        android:theme="@style/Theme.SplashActivity"&gt;        &lt;activity android:name=".MainActivity"&gt;        &lt;/activity&gt;        &lt;activity android:name=".SplashActivity"            android:theme="@style/Theme.AppCompat.NoActionBar.NoActionBarWithBackGround"&gt;            &lt;intent-filter&gt;                &lt;action android:name="android.intent.action.MAIN" /&gt;                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SplashActivity:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.view.WindowManager;public class SplashActivity extends Activity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);//隐藏状态栏        //getSupportActionBar().hide();//隐藏标题栏        setContentView(R.layout.activity_splash);        Thread myThread = new Thread() {//创建子线程            @Override            public void run() {                try {                    sleep(5000);//使程序休眠五秒                    Intent intent = new Intent(getApplicationContext(), MainActivity.class);//启动MainActivity                    startActivity(intent);                    finish();//关闭当前活动                } catch (Exception e) {                    e.printStackTrace();                }            }        };        myThread.start();//启动线程    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="广告页"><a href="#广告页" class="headerlink" title="广告页"></a>广告页</h3><p>广告页我尝试过两种方式：<br>1.glide 加载<br>2.通过下载文件，然后再加载<br>如果使用glide加载广告图片,如果网络比较差,会存在广告页面空白的情况,因为使用 glide 无法判断在 3 秒展示 logo 的页面是否加载好了广告图片。这给用户的体验是比较差的,也是不太友好的,因为用户在空白界面拜拜等待了 3 秒。所以后面使用了将广告图片下载到本地的方法。</p><h3 id="动画开屏"><a href="#动画开屏" class="headerlink" title="动画开屏"></a>动画开屏</h3><p>新建EmptyActivity–AnimatedActivity<br>在build.gradle(:app)的dependencies中添加glide依赖:</p><blockquote><p>implementation ‘com.github.bumptech.glide:glide:4.12.0’<br>然后点击sync now</p></blockquote><p>新建动画所需的VectorAsset:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/VectorAsset.png"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/assetSet.png"></p><p>然后点击next,最后点击finish<br><a href="https://www.online-convert.com/">转换svg的网站</a></p><p>或者去<a href="https://www.iconfont.cn/">iconfont</a>查找</p><h4 id="activity-animated"><a href="#activity-animated" class="headerlink" title="activity_animated"></a>activity_animated</h4><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="match_parent"    android:layout_height="match_parent"    tools:context=".AnimatedActivity"&gt;    &lt;ImageView        android:layout_width="match_parent"        android:layout_height="wrap_content"        android:id="@+id/iv_top"        android:adjustViewBounds="true"        android:src="@drawable/ic_top_vector"/&gt;    &lt;LinearLayout        android:layout_width="match_parent"        android:layout_height="match_parent"        android:orientation="vertical"        android:gravity="center"        android:padding="16dp"&gt;        &lt;ImageView            android:layout_width="match_parent"            android:layout_height="180dp"            android:id="@+id/iv_heart"            android:adjustViewBounds="true"            android:src="@drawable/ic_heart"/&gt;        &lt;TextView            android:layout_width="wrap_content"            android:layout_height="wrap_content"            android:id="@+id/text_view"            android:textSize="48sp"            android:textStyle="bold"            android:textColor="#D75A4A"            android:layout_marginTop="8dp"/&gt;        &lt;ImageView            android:layout_width="match_parent"            android:layout_height="wrap_content"            android:id="@+id/iv_beat"            android:adjustViewBounds="true"/&gt;    &lt;/LinearLayout&gt;    &lt;ImageView        android:layout_width="match_parent"        android:layout_height="wrap_content"        android:id="@+id/iv_bottom"        android:adjustViewBounds="true"        android:layout_alignParentBottom="true"        android:src="@drawable/ic_bottom_vector"/&gt;&lt;/RelativeLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建ResourceFile<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/resourceFile.png"></p><p>设置:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/resourceFileSet.png"></p><h4 id="top-wave-xml"><a href="#top-wave-xml" class="headerlink" title="top_wave.xml"></a>top_wave.xml</h4><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;    &lt;translate        android:fromXDelta="-50%"        android:fromYDelta="0%"        android:duration="2500"/&gt;    &lt;alpha        android:fromAlpha="1.0"        android:toAlpha="0.5"        android:duration="2500"/&gt;&lt;/set&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="bottom-wave-xml"><a href="#bottom-wave-xml" class="headerlink" title="bottom_wave.xml"></a>bottom_wave.xml</h4><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;    &lt;translate        android:duration="2500"        android:fromXDelta="50%"        android:fromYDelta="0%" /&gt;    &lt;alpha        android:duration="2500"        android:fromAlpha="1.0"        android:toAlpha="0.5" /&gt;&lt;/set&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AnimatedActivity"><a href="#AnimatedActivity" class="headerlink" title="AnimatedActivity"></a>AnimatedActivity</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import android.animation.ObjectAnimator;import android.animation.PropertyValuesHolder;import android.animation.ValueAnimator;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.ImageView;import android.widget.TextView;import androidx.appcompat.app.AppCompatActivity;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;public class AnimatedActivity extends AppCompatActivity {    //Initialize variable    ImageView ivTop, ivHeart, ivBeat, ivBottom;    TextView textView;    CharSequence charSequence;    int index;    long delay = 200;    Handler mHandler = new Handler();    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_animated);        //Assign variable        ivTop = findViewById(R.id.iv_top);        ivHeart = findViewById(R.id.iv_heart);        ivBottom = findViewById(R.id.iv_bottom);        textView = findViewById(R.id.text_view);        //set full screen        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN                , WindowManager.LayoutParams.FLAG_FULLSCREEN);        //Initialize top animation        Animation animation1 = AnimationUtils.loadAnimation(this                , R.anim.top_wave);        //start top animation        ivTop.setAnimation(animation1);        //Initialize object animation        ObjectAnimator objectAnimator = ObjectAnimator.ofPropertyValuesHolder(                ivHeart,                PropertyValuesHolder.ofFloat("scaleX", 1.2f),                PropertyValuesHolder.ofFloat("scaleY", 1.2f)        );        //Set duration        objectAnimator.setDuration(500);        //Set repeat count        objectAnimator.setRepeatCount(ValueAnimator.INFINITE);        //Set repeat mode        objectAnimator.setRepeatMode(ValueAnimator.REVERSE);        //Start animator        objectAnimator.start();        //Set animate text        animateText("Heart Beat");        //Load GIF        Glide.with(this).load("https://firebasestorage.googleapis.com/v0/b/demoapp-ae96a.appspot.com/o/heart_beat.gif?alt=media&amp;token=b21dddd8-782c-457c-babd-f2e922ba172b")                .diskCacheStrategy(DiskCacheStrategy.ALL)                .into(ivBottom);        //Initialize bottom animation        Animation animation2 = AnimationUtils.loadAnimation(this                , R.anim.bottom_wave);        //start bottom animation        ivBottom.setAnimation(animation2);        //Initialize handler        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                //Redirect to main activity                startActivity(new Intent(AnimatedActivity.this                        , MainActivity.class)                        .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));                //Finish activity                finish();            }        }, 4000);    }    Runnable mRunnable = new Runnable() {        @Override        public void run() {            //When runnable is run            //Set text            textView.setText(charSequence.subSequence(0, index++));            //Check condition            if (index &lt;= charSequence.length()) {                //When index is equal to text length                //Run handler                mHandler.postDelayed(mRunnable, delay);            }        }    };    //Create animated text method    public void animateText(CharSequence cs) {        //Set text        charSequence = cs;        //Clear index        index = 0;        //Clear text        textView.setText("");        //Remove call back        mHandler.removeCallbacks(mRunnable);        //Run handler        mHandler.postDelayed(mRunnable, delay);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在AndroidManifest.xml中添加权限:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;uses-permission android:name="android.permission.INTERNET"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不要忘记将AnimatedActivity设置为主入口.</p><p><a href="https://github.com/liaojie1314/SplashActivity.git">完整项目</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android四大组件之广播</title>
      <link href="/liaojie.github.io/2021/10/24/android-si-da-zu-jian-zhi-guang-bo/"/>
      <url>/liaojie.github.io/2021/10/24/android-si-da-zu-jian-zhi-guang-bo/</url>
      
        <content type="html"><![CDATA[<p>在Android中,Broadcast是一种广泛运用的在应用程序之间传输信息的机制.我们拿广播电台来做个比方.我们平常使用收音机收音是这样的:许许多多不同的广播电台通过特定的频率来发送他们的内容,而我们用户只需要将频率调成和广播电台的一样就可以收听他们的内容了.Android中的广播机制就和这个是差不多的道理.</p><p>1.电台发送的内容是语音,而在Android中我们要发送的广播内容是一个Intent.这个Intent中可以携带我们要传送的数据.</p><p>2.电台通过大功率的发射器发送内容,而在Android中则是通过sendBroadcast这个方法来发送。       </p><p>3.用户通过调整到具体的电台频率接受电台的内容.而在Android中要接受广播中的内容则是通过注册一个BroadCastReceiver来接收的.只有发送广播的action和接收广播的action相同,接受者才能接受这个广播. </p><h2 id="什么是广播接收者？"><a href="#什么是广播接收者？" class="headerlink" title="什么是广播接收者？"></a>什么是广播接收者？</h2><p>什么是收听广播呢？打开收音机,调频就可以收到对应的广播节目了。其实我们在Android开发中也有类似的概念,所以就称之为广播了。</p><p>广播包括发广播和广播接收者,这就类似于我们的广播发射塔和收音机。</p><p>因些,在Android开发中,我们主要研究的就是发广播和接收广播了。</p><h2 id="监听电量变化状态-例子"><a href="#监听电量变化状态-例子" class="headerlink" title="监听电量变化状态(例子)"></a>监听电量变化状态(例子)</h2><p>我们先从一个例子开始吧,后面我们从这个例子里头分析里面的各种知识点。</p><p>首先,我们创建一个Receiver类:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastreceiverdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">BroadcastReceiver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatteryStatusReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"BatteryStatusReceiver"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"action is == "</span> <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_BATTERY_CHANGED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"电量改变了的广播..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_BATTERY_LOW<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"电池低电量广播..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_BATTERY_OKAY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"电池充电完成。..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码呢,是继承自己一个广播接收者BroadcastReceiver,这就类似于这个就是我们的收音机了,我们收听的频道是什么呢？由这个Action决定,在那里添加Action频道呢？这就是第二步：</p><p>在AndroidManifest.xml配置文件里添加权限<code>&lt;uses-permission android:name="android.permission.BATTERY_STATS"/&gt;</code></p><p>第三步,我们在ManiActivity里注册一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastreceiverdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">IntentFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"MainActivity"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BatteryStatusReceiver</span> mReceiver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntentFilter</span> intentFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置频道,也就是设置要监听的广播action.</span>        intentFilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_BATTERY_CHANGED<span class="token punctuation">)</span><span class="token punctuation">;</span>        intentFilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_BATTERY_OKAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        intentFilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_BATTERY_LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        mReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatteryStatusReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册广播</span>        <span class="token function">registerReceiver</span><span class="token punctuation">(</span>mReceiver<span class="token punctuation">,</span> intentFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"register receive.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//取消广播注册,释放资源</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mReceiver <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>mReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>            mReceiver <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"unregister receive.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上这些代码的意思就是我们需要注册一下这个广播接收者,有没有觉得它中回调有点类似呢？但是我们是有条件地接受广播。这其实就类似于我们的收音机需要设置一个频道,收到这个频道的相关广播。而我们广播则是设置action,接下来的话,我们就把这个应用跑起来看看能不能接收到广播。我们监听着Android手机的电量变化情况</p><p>我们把这个程序跑起来,然后通过模拟器去模拟电量的变化,然后就可以收到了电量改变的广播了…</p><p>要注意的地方：</p><p>我们的应用需要跑在前台,因为我们是动态注册广播接收者。我们的Activity创建的时候,会注册,在onDestory的时候会取消注册。所以我们要保持这个我们的这个应用活着（返回键可以退出程序,前提是没有覆写onBackPress事件/onKeyEvent方法）才可以接收到广播。</p><p>至于什么是动态注册和静态注册,后面我们会讨论到 。大家先完成这个例子。<br>广播的分类</p><p>从发广播者上面分,可以分为系统广播和第三方广播。 从接收的顺序上分,可以分为有序广播和无序广播。 常见的系统发出的广播有那些呢：比如说系统的开机完成广播、Wifi状态改变的广播、SD卡挂载的广播、电量的改变广播…</p><h2 id="广播的注册方式"><a href="#广播的注册方式" class="headerlink" title="广播的注册方式"></a>广播的注册方式</h2><p>广播有两种方式注册：静态注册和动态注册。</p><h3 id="静态注册："><a href="#静态注册：" class="headerlink" title="静态注册："></a>静态注册：</h3><p>1、注册方式：在AndroidManifest里进行注册。</p><p>首先在Application节点里头,添加一个receiver节点。name则是我们的广播接收者。</p><p>比如说,我们监听开机广播,那么我们跟前面一样,创建一个收音机,也就是广播接收者：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastreceiverdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">BroadcastReceiver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootCompletedReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"BootCompletedReceiver"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"actions -- &gt;"</span> <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_BOOT_COMPLETED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"开机完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着,这就是静态注册了,在AndroidMainfest.xml里的application节点里添加receiver节点,并且添加意图过滤的action：</p><pre class="line-numbers language-none"><code class="language-none">&lt;receiver android:name=".BootCompletedReceiver"&gt;          &lt;intent-filter&gt;               &lt;action android:name="android.intent.action.BOOT_COMPLETED"/&gt;          &lt;/intent-filter&gt; &lt;/receiver&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且需要添加权限：<code>&lt;uses-permission android:name="android.permission.BATTERY_STATS"/&gt;</code>和<code>&lt;uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/&gt;</code></p><p>OK,我们把程序跑起来,这个是静态注册,即使我们写的应用不在前台,也能接收到广播。</p><h6 id="静态注册内部类广播要注意什么呢？"><a href="#静态注册内部类广播要注意什么呢？" class="headerlink" title="静态注册内部类广播要注意什么呢？"></a>静态注册内部类广播要注意什么呢？</h6><p>首先是静态注册,其次是内部广播接收者！</p><p>1、这个内部广播接收者需要声明为静态的;</p><p>2、这个内部的静态接收者必须是public的;</p><p>3、在receiver的name里是外部类的名字$内部类的名字</p><p>这就是静态注册方式啦！接下来,咱们再来一个动态注册,其实前面的话,我们已经进行了动态注册的例子了,就是我们开头那个。</p><h3 id="动态注册："><a href="#动态注册：" class="headerlink" title="动态注册："></a>动态注册：</h3><p>假设我们做一个地图软件 ,当我们知道屏幕锁定以后,那么就不去更新数据,如果是屏幕打开了,就去更新数据。为什么要这么做呢,一是省电,二是省流量,对吧</p><p>怎么做呢？</p><p>首先,我们编写一个广播接收者：</p><p>我是在MainActivity这个类里头创建了这个广播接收者,一般来说,动态接收的广播多数情况下是内部类,这样子可以操作外部类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ScreenStatusReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SCREEN_OFF<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//屏幕关闭</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"屏幕关闭...停止数据更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SCREEN_ON<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//屏幕打开</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"屏幕关闭...继续数据更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着呢,就是注册广播了：</p><p>我们在onCreate方法里进行注册：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册广播</span>        <span class="token comment">//第一步,创建意图过滤器</span>        <span class="token class-name">IntentFilter</span> intentFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二步,添加要监听的广播action</span>        intentFilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SCREEN_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>        intentFilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SCREEN_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第三步,创建广播接收者,并且设置成成员变量,以便于取消注册,释放资源</span>        mScreenStatusReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScreenStatusReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第四步,注册广播接收者</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerReceiver</span><span class="token punctuation">(</span>mScreenStatusReceiver<span class="token punctuation">,</span> intentFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>广播注册以后,要记得在不用的时候进行销毁,这个应用于对我们来说,就是在退出的时候,我们就不需要地广播进行监听了,所以我们直接在onDestroy的时候,去取消注册即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//取消广播注册</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>mScreenStatusReceiver <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>mScreenStatusReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>           mScreenStatusReceiver <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">BroadcastReceiver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">IntentFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"MainActivity"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ScreenStatusReceiver</span> mScreenStatusReceiver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册广播</span>        <span class="token comment">//第一步,创建意图过滤器</span>        <span class="token class-name">IntentFilter</span> intentFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二步,添加要监听的广播action</span>        intentFilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SCREEN_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>        intentFilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SCREEN_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第三步,创建广播接收者,并且设置成成员变量,以便于取消注册,释放资源</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mScreenStatusReceiver <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mScreenStatusReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScreenStatusReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//第四步,注册广播接收者</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerReceiver</span><span class="token punctuation">(</span>mScreenStatusReceiver<span class="token punctuation">,</span> intentFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ScreenStatusReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SCREEN_OFF<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//屏幕关闭</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"屏幕关闭...停止数据更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SCREEN_ON<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//屏幕打开</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"屏幕关闭...继续数据更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//取消广播注册</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mScreenStatusReceiver <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>mScreenStatusReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>            mScreenStatusReceiver <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接收这个广播不需要权限,一般来说,在我们的action里会说明。如果以后你自己写广播,在自己的action里也要说明一下需要什么权限了。</p><h3 id="两种注册方式的区别"><a href="#两种注册方式的区别" class="headerlink" title="两种注册方式的区别"></a>两种注册方式的区别</h3><p>静态注册可以一直监听着,即使应用没有起来,也可以监听着,但是耗资源,长期监听着。</p><p>静态注册的广播优先级高于动态注册的广播。</p><p>动态注册的优点就是省资源,需要的时候才监听,不需要的时候需要取消注册。</p><h2 id="不可以静态注册的广播"><a href="#不可以静态注册的广播" class="headerlink" title="不可以静态注册的广播"></a>不可以静态注册的广播</h2><ul><li>android.intent.action.SCREEN_ON</li><li>android.intent.action.SCREEN_OFF</li><li>android.intent.action.BATTERY_CHANGED</li><li>android.intent.action.CONFIGURATION_CHANGED</li><li>android.intent.action.TIME_TICK</li></ul><p>为什么不可以静态注册呢？</p><blockquote><p>如果不是必须一直监听着的广播,如果一直监听着会消耗资源,所以静态注册会提高系统的效率。而动态注册的话需要释放资源取消注册,否则会报错的。这样子有利于提高系统的速度。</p></blockquote><h2 id="如何发送广播"><a href="#如何发送广播" class="headerlink" title="如何发送广播"></a>如何发送广播</h2><p>前面我们都是接收系统发出来的广播,接下来我们自己也发广播。</p><p>假设你做一个应用需要对多个进行通知,做这类应用有两种情况：</p><p>第一种是做sdk开发的,也就是开发sdk给别人使用的。</p><p>第二种是应用内广播,其实就是通知。</p><p>我们学习android的广播机制有什么用呢,其实就是用于通知。如果在应用内,我们常用的通知方式是回调和广播。这两者之前,回调的速度快,保障性高,而广播则简单,但是速度没有回调高。什么情况下使用广播呢？当有多个地方使用等待通知的时候,可以使用广播。原理上广播和回调差不多的,广播的原理就是使用Binder机制,把action注册到ActivityManagerService里头,然后广播的时候,就去里面寻找符合规则的,再调用onReceive这个方法。</p><p>另外一种情况就是跨进程通讯,后面我们会学习到AIDL,这里的话是广播,广播是可以跨应用通知的。</p><p>这是我们的布局文件,就一个按钮,当我们点击按钮的时候,就去发送广播。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendBroadcast<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>发送广播<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是Activity的内容,从代码我们可以看出是怎么发送广播的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Activity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendBroadcastActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_broadcast<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendBroadcast</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//action只能有一个,所以叫setAction而不是addActon。</span>        <span class="token comment">//而广播接收者可以监听多个广播,所以是addAction</span>        <span class="token comment">//action的命名一般是报名+动作名,这样子比较唯一</span>        intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"com.example.broadcastdemo.SEND_BROADCAST_CLICK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//也可以携带数据</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"Content"</span><span class="token punctuation">,</span> <span class="token string">"这是我点击按钮发送的广播!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后呢,我们再写一个广播接收者来接收广播,这个接收者可以是在第三方应用,也可以是我们本应用。我们写一个静态注册来注册它。这里的话我们写一个内部类来接收。要注意的是,内部广播接收者类,需要是静态的,Public的,注册的时候是<code>外部类名$内部类名</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Activity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">BroadcastReceiver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendBroadcastActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_broadcast<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendBroadcast</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//action只能有一个,所以叫setAction而不是addActon。</span>        <span class="token comment">//而广播接收者可以监听多个广播,所以是addAction</span>        <span class="token comment">//action的命名一般是报名+动作名,这样子比较唯一</span>        intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"com.example.broadcastdemo.SEND_BROADCAST_CLICK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//也可以携带数据</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"Content"</span><span class="token punctuation">,</span> <span class="token string">"这是我点击按钮发送的广播!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"InnerReceiver"</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Inner receiver 接收到的actions... "</span> <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"com.example.broadcastdemo.SEND_BROADCAST_CLICK"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> content <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"Content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"content is == "</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态注册的代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;receiver android:name=".SendBroadcastActivity$InnerReceiver"&gt;&lt;intent-filter&gt;&lt;action android:name="com.example.broadcastdemo.SEND_BROADCAST_CLICK"/&gt;&lt;/intent-filter&gt;&lt;/receiver&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们设置一下 这个Activity是主的Activity,也就是启动时候,它先启动。</p><p>这就是我们自定义的广播发送者和广播接收者。</p><h2 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h2><p>前面我们所讲到的都是无序广播,也就是发出去了,任何应用都可以接收到,只要有对应的Action就可以了。</p><blockquote><p>有序广播：有序广播就类似于单位的通知,由上级一级一级往下传。</p></blockquote><p>特点：</p><p>1、有序</p><p>2、可以终止往下传达</p><p>3、可以修改广播的内容</p><p>布局跟前面一样,只有一个按钮：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendDonation<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>发送捐助广播<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Activity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DonationBroadcastActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_donation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDonation</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"com.example.broadcastdemo.DONATION"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendOrderedBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"给每个贫困的学生资助1000元"</span><span class="token punctuation">,</span> bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendOrderedBroadcast</span><span class="token punctuation">(</span>        <span class="token class-name">Intent</span> intent<span class="token punctuation">,</span> <span class="token class-name">String</span> receiverPermission<span class="token punctuation">,</span> <span class="token class-name">BroadcastReceiver</span> resultReceiver<span class="token punctuation">,</span>        <span class="token class-name">Handler</span> scheduler<span class="token punctuation">,</span> <span class="token keyword">int</span> initialCode<span class="token punctuation">,</span> <span class="token class-name">String</span> initialData<span class="token punctuation">,</span>        <span class="token class-name">Bundle</span> initialExtras<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mBase<span class="token punctuation">.</span><span class="token function">sendOrderedBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> receiverPermission<span class="token punctuation">,</span>                resultReceiver<span class="token punctuation">,</span> scheduler<span class="token punctuation">,</span> initialCode<span class="token punctuation">,</span>                initialData<span class="token punctuation">,</span> initialExtras<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第一个参数,是意图对象,用于封装数据和设置过滤。<br>第二个参数是权限<br>第三个参数是广播接收者,这个广播接收者是最终接收的广播接收者,用于检查数据是否有传达或者数据被修改。<br>第四个参数是一个自定义的Hanlder,用于处理结果接收者,也就是上面那个接收者的回调。<br>第五个参数是初始码,这个会作为结果码,通常是Activity.RESULT_OK,也就是-1。<br>第六个参数是用于传递数据的,这个数据在各个Receiver里获取到,通过getResultData方法获取。这个其实通常为null<br>第七个参数也是用于封装数据的,不同的是,这个用于封装数据集合</p></blockquote><p>以下是原api的说明文档：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/sendOrderedBroadcast.png"></p><p>写完了发送者以后,我们就该去写一下接收者了。</p><p>三个接收者的代码如下,分别是学校接收者,年级接收者,班级接收者,贫困这生接收者！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">BroadcastReceiver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"SchoolReceiver"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Bundle</span> resultExtras <span class="token operator">=</span> <span class="token function">getResultExtras</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> money <span class="token operator">=</span> resultExtras<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//学校处理一下,分给5个年级</span>        <span class="token keyword">int</span> perGrade <span class="token operator">=</span> money <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"学校接收到捐款 "</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">,</span> perGrade<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setResultExtras</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>年级广播接收者：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">BroadcastReceiver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GradeReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"GradeReceiver"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Bundle</span> resultExtras <span class="token operator">=</span> <span class="token function">getResultExtras</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//假设每个年级有10个班</span>        resultExtras<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">,</span> resultExtras<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"年级收到捐款 "</span> <span class="token operator">+</span> resultExtras<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>班级接收者：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">BroadcastReceiver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"ClassReceiver"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Bundle</span> resultExtras <span class="token operator">=</span> <span class="token function">getResultExtras</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//假设每个班有10个贫困的孩子</span>        <span class="token keyword">int</span> perStudent <span class="token operator">=</span> resultExtras<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"班级收到捐款--&gt; "</span> <span class="token operator">+</span> resultExtras<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">,</span> perStudent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setResultExtras</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>贫困学生接收者：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">BroadcastReceiver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoorStudentReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"PoorStudentReceiver"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Bundle</span> resultExtras <span class="token operator">=</span> <span class="token function">getResultExtras</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> money <span class="token operator">=</span> resultExtras<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"接收到捐款 --&gt; "</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"感谢各位好心人士..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>广播也写好了,接下来就是注册广播了：</p><p>在AndroidManifest.xml文件里</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.SchoolReceiver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--优先级是1000~-1000之间,超出了范围则会使用边界值--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.broadcastdemo.DONATION<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.GradeReceiver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.broadcastdemo.DONATION<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.ClassReceiver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.broadcastdemo.DONATION<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.PoorStudentReceiver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1000<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.broadcastdemo.DONATION<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>priority就是优先级</p><p>从上面的例子,我们可以看出,广播是按优先级通知的,并且可以修改广播的内容。</p><p>也可以终止广播的传达,假设这笔捐款到了学校就不往下传了,怎么处理呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>broadcastdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">BroadcastReceiver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"SchoolReceiver"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Bundle</span> resultExtras <span class="token operator">=</span> <span class="token function">getResultExtras</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> money <span class="token operator">=</span> resultExtras<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//学校处理一下,分给5个年级</span>        <span class="token keyword">int</span> perGrade <span class="token operator">=</span> money <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"学校接收到捐款 "</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">,</span> perGrade<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setResultExtras</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//终止广播往下传</span>        <span class="token function">abortBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>abortBroadcast(),我们加了这句代码就不会再往下传递了。</p><h2 id="无序广播和有序广播的区别"><a href="#无序广播和有序广播的区别" class="headerlink" title="无序广播和有序广播的区别"></a>无序广播和有序广播的区别</h2><p>无序广播和有序广播本质上是一样的,也就是说,无序广播是按注册顺序派发的,有序广播按优先级。</p><p>有序广播的接收者可以终止/修改数据,而无序广播不可以。</p><h2 id="广播的权限"><a href="#广播的权限" class="headerlink" title="广播的权限"></a>广播的权限</h2><p>广播的权限分为两部分：一部分是我们可以接收谁的广播,一部分是谁可以给我发广播。</p><p>1.如果要做到我发的广播,有权限的人才能接收到,那么需要在AndroidManifest.xml中声明permission</p><p> <code>&lt;permission android:name="com.example.permission.DONATION"/&gt;</code></p><p>发送广播的时候把permission加上,比如说：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDonation</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"com.example.broadcastdemo.DONATION"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendOrderedBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token class-name">Manifest</span><span class="token punctuation">.</span>permission<span class="token punctuation">.</span>DONATION<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"给每个贫困的学生资助1000元"</span><span class="token punctuation">,</span> bundle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Manifest.permission.DONATION这一句其实就是我们前面定义的权限</p><p>第三步则是在需要接收的应用里添加权限,因为我们这里是同一个应用,所以在本应用添加就可以了：</p><p><code>&lt;uses-permission android:name="com.example.permission.DONATION"/&gt;</code></p><p>这样就可以接收到广播</p><p>2.谁有权限给我发广播,这个其实在receiver里头,就有一个permission的属性</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/permission%E7%9A%84%E5%B1%9E%E6%80%A7.png"></p><p>这个Permission声明就是用于控制谁有权限给我发广播的。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android四大组件之Activity</title>
      <link href="/liaojie.github.io/2021/10/24/android-si-da-zu-jian-zhi-activity/"/>
      <url>/liaojie.github.io/2021/10/24/android-si-da-zu-jian-zhi-activity/</url>
      
        <content type="html"><![CDATA[<p>Activity是Android的四大组件之一.是用户操作的可视化界面,它为用户提供了一个完成操作指令的窗口.当我们创建完毕Activity之后,需要调用setContentView()方法来完成界面的显示以此来为用户提供交互的入口.在Android App中只要能看见的几乎都要依托于Activity,所以Activity是在开发中使用最频繁的一种组件.</p><h5 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h5><p>在Android中会维持一个Activity Stack(Activity栈),当一个新的Activity创建时,它就会放到栈顶,这个Activity就处于运行状态.当再有一个新的Activity被创建后会重新压人栈顶,而之前的Activity则会在这个新的Activity底下.而之前的Activity就会进入后台.<br>一个Activity实质上有四种状态：</p><p>1.运行中(Running/Active):这时Activity位于栈顶,是可见的,并且可以用户交互.<br>2.暂停(Paused):当Activity失去焦点,不能跟用户交互了,但依然可见,就处于暂停状态.当一个新的非全屏的Activity或者一个透明的Activity放置在栈顶,Activity就处于暂停状态,这个时候Activity的各种数据还被保持着.只有在系统内存在极低的状态下,系统才会自动的去销毁Activity.<br>3.停止(Stoped):当一个Activity被另一个Activity完全覆盖,或者点击HOME键退入了后台,这时候Activity处于停止状态.这里有些是跟暂停状态相似的,这个时候Activity的各种数据还被保持着,当系统的别的地方需要用到内容时,系统会自动的去销毁Activity.<br>4.销毁(Detroyed):当我们点击返回键或者系统在内存不够用的情况下就会把Activity从栈里移除销毁,被系统回去.这时候,Activity处于销毁状态.</p><p><img src="/liaojie.github.io/medias/Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="Activity的生命周期"></p><p>onCreate:当Activity第一次被创建时调用.是生命周期开始的第一个方法.在这里我们可以做一些初始化的操作,比如:调用setContentView()方法去加载界面,绑定布局里的一些控件,初始化一些Activity需要用到的数据.之后会调用onStart方法.</p><p>onStart:当Activity正在变为可见时调用.这个时候Activity已经可见了,但是还没有出现在前台还不能跟用户交互.可以简单理解为Actvity已经可见但是还没有出现在前台.之后会调用onResume.</p><p>onResume:当Activity可以跟用户交互时调用.这个时候这个Activity位于栈的顶部,跟onStart相比,它们都是表示Activity已经可见,但是onStart调用时Activity还在后台,而调用onResume时,Activity已经进入了前台,可以跟用户交互了.之后会调用 onPause.</p><p>onPause:当Activity暂停时调用这个方法,在这里我们可以用来保存数据,关闭动画和其它比较耗费CPU的操作,但是在这里做的操作绝对不能耗时,因为如果当前Activity要启动一个新的Activity,这个新的Activity会在当前Activity执行完毕onPause之后才能进入可见状态.这个方法之后一般会调用的方法有onStop或者onResume.</p><p>onStop:当Activity进入后台,并且不会被用户看到时调用.当别的Activity出现在前台时,或者Activity会被销毁时,调用此方法.在这个方法调用之后,系统可能会在内存不够的情况下回收Activity.在这个方法之后一般会调用onRestart或者onDestroy.</p><p>onDestroy:这个方法是Activity生命周期中调用的最后一个方法.它会在Activity被销毁之前调用,Activity销毁原因一般是我们调用Activity的finish方法手动销毁,另一个就是系统在内存紧张的情况下去销毁Activity,以用来节省空间.我们可以通过方法 isFinishing 来判断Activity是否正在被销毁.</p><p>onRestart:这个方法是在Activity处于停止状态后,又回到可视状态时调用.之后会调用onResume.</p><p><a href="https://github.com/liaojie1314/AndroidActivityDemo">项目代码</a>,仅供参考</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android四大组件之内容提供者</title>
      <link href="/liaojie.github.io/2021/10/23/android-si-da-zu-jian-zhi-nei-rong-ti-gong-zhe/"/>
      <url>/liaojie.github.io/2021/10/23/android-si-da-zu-jian-zhi-nei-rong-ti-gong-zhe/</url>
      
        <content type="html"><![CDATA[<p>ContentProvider(内容提供者)作为Android中的四大组件之一,但是在一般的开发中,使用比较少.ContentProvider为不同的软件之间数据共享提供统一的接口.而且ContentProvider是以类似数据库中表的方式将数据暴露,也就是说ContentProvider就像一个”数据库”.那么外界获取其提供的数据,也就应该与从数据库中获取数据的操作基本一样,只不过是采用URI来表示外界需要访问的”数据库”.至于如何从URI中识别出外界需要的是哪个”数据库”,这就是Android底层需要做的事情了.也就是说,如果我们想让其他的应用使用我们自己程序内的数据,就可以使用ContentProvider定义一个对外开放的接口,从而使得其他的应用可以使用我们自己应用中的文件、数据库内存储的信息.当然,自己开发的应用需要给其他应用共享信息的需求可能比较少见,但是在Android系统中,很多数据如:联系人信息、短信信息、图片库、音频库等,这些信息在开发中还是经常用到的,这些信息谷歌工程师已经帮我们封装好了,我们可以使用谷歌给我的Uri去直接访问这些数据.所以对于ContentProvider我们还是需要认真的学习的,在遇到获取联系人信息,图片库,音视频库等需求的时候,才能更好的实现功能.</p><h5 id="内容提供者应用场景"><a href="#内容提供者应用场景" class="headerlink" title="内容提供者应用场景"></a>内容提供者应用场景</h5><p>1.向日历里插入提醒事件</p><blockquote><p>举个例子,比如说你是淘宝app,里面有一个开团的活动,用户需要添加开团提醒,你就需要向闹钟或者日历里添加一个事件.</p></blockquote><p>2.微信/QQ/支付宝获取通讯录里的联系人</p><blockquote><p>微信,QQ,支付宝这些应用,获取通讯录里的联系人,然后向你推荐好友,就是通过内容提供者获取到通讯录信息的.</p></blockquote><p>3.媒体库</p><blockquote><p>Android的媒体库,也是一个内容提供者.比如说你微信要发朋友圈,或者你的应用要上传图片,获取系统里的图片内容视频内容,可以通过内容提供者来获取.</p></blockquote><p>4.广告精准推送</p><blockquote><p>你浏览过什么东西,搜索过什么关键字.你去上淘宝、头条之类的就会给你推荐,它们之间也可以通过内容提供者来提供数据,只要双方把利益问题处理好就行.</p></blockquote><p>5.短信备份</p><blockquote><p>短信也有内容提供者,而第三方备份工具则是通过内容提供者去获取短信内容的.</p></blockquote><h2 id="内容提供者"><a href="#内容提供者" class="headerlink" title="内容提供者"></a>内容提供者</h2><p>继承ContentProvider,然后实现里面是方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//创建@Overridepublic boolean onCreate() {    return false;}//查询@Nullable@Overridepublic Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {    return null;}@Nullable@Overridepublic String getType(@NonNull Uri uri) {    return null;}@Nullable@Overridepublic Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {    return null;}@Overridepublic int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {    return 0;}@Overridepublic int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {    return 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Manifest中注册</p><pre class="line-numbers language-AndroidManifest" data-language="AndroidManifest"><code class="language-AndroidManifest">&lt;providerandroid:exported="true"    android:name=".provider.UserProvider"    android:authorities="com.example.contentprovider"/&gt;//一般填写包名,可添加多个,用";"隔开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将数据库暴露出去,给别人操作</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private UserDatabaseHelper mUserDatabaseHelper = null;//校验URI的工具类,定义为静态,因为我们需要添加一些规则//UriMatcher.NO_MATCH 当不匹配的时候的一个返回值private static UriMatcher sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);//弱匹配之后的返回值private static UriMatcher sUriMatcher=new UriMatcher(UriMatcher.NO_MATCH);//添加规则static {    sUriMatcher.addURI("com.example.contentprovider",null,USER_MATCH_CODE);//第二个参数为path}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在onCreate是创建DatabaseHelper</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">mUserDatabaseHelper=new UserDatabaseHelper(getContext());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询-query"><a href="#查询-query" class="headerlink" title="查询(query):"></a>查询(query):</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">int result = sUriMatcher.match(uri);if (result == USER_MATCH_CODE) {    //匹配规则    SQLiteDatabase db = mUserDatabaseHelper.getReadableDatabase();    Cursor cursor = db.query(Constants.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder);    return cursor;} else {    //不匹配规则    throw new IllegalArgumentException("参数错误");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:MainActivity相关为新创建的</p><p>activity_main.xml中加入获取数据的按钮:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;Button    android:id="@+id/query_btn"    android:layout_width="wrap_content"    android:layout_height="wrap_content"    android:text="获取用户数据"    app:layout_constraintBottom_toBottomOf="parent"    app:layout_constraintLeft_toLeftOf="parent"    app:layout_constraintRight_toRightOf="parent"    android:onClick="getRemoteUser"    app:layout_constraintTop_toTopOf="parent"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在MainActivity中加入点击事件:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void getRemoteUser(View view) {    ContentResolver contentResolver = getContentResolver();    //path 为空content://com.example.contentprovider/path    Uri uri = Uri.parse("content://com.example.contentprovider");    // "http://":http协议;"tel://":电话    //query(uri,projection,selection,selectionArgs,sortOrder);    Cursor cursor = contentResolver.query(uri, null, null, null, null);//全为null,无条件查询String[] columnNames = cursor.getColumnNames();for (String columnName : columnNames) {    Log.d(TAG, "columnName == &gt;" +columnName);}while (cursor.moveToNext()) {Log.d(TAG, "=====================");    for (String columnName : columnNames) {        String value = cursor.getString(cursor.getColumnIndex(columnName));        Log.d(TAG, columnName + "====" + value);    }    Log.d(TAG, "=====================");}cursor.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入(insert):"></a>插入(insert):</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">int result = sUriMatcher.match(uri);if (result == USER_MATCH_CODE) {    SQLiteDatabase db = mUserDatabaseHelper.getWritableDatabase();    long id = db.insert(Constants.TABLE_NAME, null, values);    //将规则里面的path改为user    Uri resultUri = Uri.parse("content://com.example.contentprovider/user/" + id);    //插入数据成功,数据已经变化,通知其它地方(谁监听就通知谁)    getContext().getContentResolver().notifyChange(resultUri,null);//observer可以填空,也可以new 一个出来    return resultUri;} else {    //不匹配规则    throw new IllegalArgumentException("参数错误");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>activity_main.xml中加入获取数据的按钮:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;Button    android:layout_width="wrap_content"    android:layout_height="wrap_content"    android:onClick="addUser"    android:text="插入数据"    app:layout_constraintLeft_toLeftOf="parent"    app:layout_constraintRight_toRightOf="parent"    app:layout_constraintTop_toBottomOf="@id/query_btn" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在MainActivity中加入添加数据的点击事件:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static final String FIELD_USER_NAME="userName";public static final String FIELD_PASSWORD ="password";public static final String FIELD_SEX ="sex";public static final String FIELD_AGE ="age";public void addUser(View view) {    ContentResolver contentResolver = getContentResolver();    Uri uri = Uri.parse("content://com.example.contentprovider/user");    ContentValues values=new ContentValues();    values.put(USER_SERVICE,"BillGates");    values.put(FIELD_PASSWORD,"123456");    values.put(FIELD_SEX,"male");    values.put(FIELD_AGE,59);    contentResolver.insert(uri,values);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainActvity的onCreate中加入:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">ContentResolver contentResolver = getContentResolver();Uri uri = Uri.parse("content://com.example.contentprovider");//notifyForDescendants:true表示content://com.example.contentprovider/xxx都能监听到;//false表示严格监听content://com.example.contentprovidercontentResolver.registerContentObserver(uri, true, new ContentObserver(new Handler()) {    //Handler用于post()    @Override    public void onChange(boolean selfChange) {        super.onChange(selfChange);        Log.d(TAG, "用户数据发生变化...");        //todo:获取新的内容    }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例子1-动态获取权限读取日历表内容"><a href="#例子1-动态获取权限读取日历表内容" class="headerlink" title="例子1:动态获取权限读取日历表内容"></a>例子1:动态获取权限读取日历表内容</h2><h3 id="首先拿到contentResolver-然后获取URI"><a href="#首先拿到contentResolver-然后获取URI" class="headerlink" title="首先拿到contentResolver,然后获取URI"></a>首先拿到contentResolver,然后获取URI</h3><p>如何获取uri:可以看文档,也可以看源码<br><a href="https://github.com/TrillGates/CalendarProvider/blob/master/AndroidManifest.xml">安卓上层应用源码</a><br>找到下图位置:</p><p><img src="/liaojie.github.io/medias/calendarGithub.png"></p><p>搜索: static</p><p><img src="/liaojie.github.io/medias/calendarSource.png"></p><p>可以看出authority是:CalendarContract.AUTHORITY</p><p>添加authority常量:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static final String AUTHORITY = "com.android.calendar";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="找到path"><a href="#找到path" class="headerlink" title="找到path"></a>找到path</h3><p><img src="/liaojie.github.io/medias/path.png"></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void queryCalendars() {    ContentResolver contentResolver=getContentResolver();    //Uri uri=Uri.parse("content://"+"com.android.calender/"+"calenders");    Uri uri= CalendarContract.Calendars.CONTENT_URI;    Cursor query = contentResolver.query(uri, null, null, null, null);    String[] columnNames=query.getColumnNames();    while (query.moveToNext()){        Log.d(TAG, "==================================");        for (String columnName:columnNames){            Log.d(TAG, columnName+"==="+query.getString(query.getColumnIndex(columnName)));        }        Log.d(TAG, "===================================");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要在AndroidManifest中添加权限</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"    package="com.example.calendarprovider"&gt;    &lt;!--添加的俩个权限--&gt;    &lt;uses-permission android:name="android.permission.WRITE_CALENDAR"/&gt;    &lt;uses-permission android:name="android.permission.READ_CALENDAR"/&gt;    &lt;application        android:allowBackup="true"        android:icon="@mipmap/ic_launcher"        android:label="@string/app_name"        android:roundIcon="@mipmap/ic_launcher_round"        android:supportsRtl="true"        android:theme="@style/Theme.CalendarProvider"&gt;        &lt;activity android:name=".MainActivity"&gt;            &lt;intent-filter&gt;                &lt;action android:name="android.intent.action.MAIN" /&gt;                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Android6.0之后需要动态获取权限</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static final int PERMISSION_REQUEST_CODE=1;private void checkCalendarPermission() {    int readPermission = checkSelfPermission(Manifest.permission.READ_CALENDAR);    int writePermission = checkSelfPermission(Manifest.permission.WRITE_CALENDAR);    if (readPermission== PackageManager.PERMISSION_GRANTED&amp;&amp;writePermission==PackageManager.PERMISSION_GRANTED){        //表示有权限    }else {        Log.d(TAG, "requestPermissions...");        //用户点击了确定以后再去调用请求权限        //如果点击了就不再提示了,就不再获取了.如果不能使用,根据需求进行下一步        requestPermissions(new String[]{Manifest.permission.READ_CALENDAR,Manifest.permission.WRITE_CALENDAR},PERMISSION_REQUEST_CODE);    }}//接收结果@Overridepublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {    if (requestCode==PERMISSION_REQUEST_CODE){        //判断结果        if (grantResults.length==2&amp;&amp;grantResults[0]==PackageManager.PERMISSION_GRANTED&amp;&amp;grantResults[1]==PackageManager.PERMISSION_GRANTED){            //有权限            Log.d(TAG, "has permission...");        }else {            Log.d(TAG, "no permission...");            //没权限            finish();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在checkCalendarPermission之前加上版本检查</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {    //Build.VERSION_CODES.M(public static final int M = 23;(Build.java))  6.0    checkCalendarPermission();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>执行queryCalendars();<br>插入事件需要使用的字段<br><img src="/liaojie.github.io/medias/%E5%B8%B8%E9%87%8F%E6%8F%8F%E8%BF%B0.png"></p><p>规则：<br>    1.您必须加入 CALENDAR_ID 和 DTSTART。<br>    2.您必须加入 EVENT_TIMEZONE。如需获取系统中已安装时区 ID 的列表，请使用 getAvailableIDs()。请注意，如果您按使Intent 插入事件中所述通过 INSERT Intent 插入事件，则此规则不适用 — 在该情形下，系统会提供默认时区。<br>    3.对于非重复事件，您必须加入 DTEND。<br>    4.对于重复事件，您必须加入 DURATION，以及 RRULE 或 RDATE。请注意，如果您按使用 Intent 插入事件中所述通过 INSERT Intent 插入事件，则此规则不适用 — 在该情形下，您可以将 RRULE 与 DTSTART 和 DTEND 结合使用，日历应用会自动将其转换为持续时间。</p><p>向日历中插入事件<br>    1.先通过前面的日历表，查询到日历的id，因为CALENDAR_ID是必须填写的<br>    2.必须要填写DTSTART和EVENT_TIMEZONE<br>    3.非重复事件，必须加入DTEND<br>    4.如果重复事件，则要加入DURATION，RRULE 或 RDATE</p><p>在UI里面添加一个按钮:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;Button    android:onClick="addAlertEvent"    android:layout_width="wrap_content"    android:layout_height="wrap_content"    android:text="添加提醒"    app:layout_constraintBottom_toBottomOf="parent"    app:layout_constraintLeft_toLeftOf="parent"    app:layout_constraintRight_toRightOf="parent"    app:layout_constraintTop_toTopOf="parent" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向日历中添加提醒事件"><a href="#向日历中添加提醒事件" class="headerlink" title="向日历中添加提醒事件"></a>向日历中添加提醒事件</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void addAlertEvent(View view) {    //前面查询出来的    long calID = 1;    //创建时间    Calendar beginTime = Calendar.getInstance();    //开始时间    //月从0开始    beginTime.set(2021, 1, 14, 5, 20);    long beginTimeMills = beginTime.getTimeInMillis();    //结束时间    Calendar endTime = Calendar.getInstance();    endTime.set(2021, 2, 14, 5, 20);    long endTimeMillis = endTime.getTimeInMillis();    //事件内容        String timeZone = TimeZone.getDefault().getID();    Log.d(TAG, "timeZone--&gt;" + timeZone);    ContentValues eventValues = new ContentValues();    //开始时间    eventValues.put(CalendarContract.Events.DTSTART, beginTimeMills);    //结束时间    eventValues.put(CalendarContract.Events.DTEND, endTimeMillis);    //日历ID    eventValues.put(CalendarContract.Events.CALENDAR_ID, calID);    //时间时区    eventValues.put(CalendarContract.Events.EVENT_TIMEZONE, timeZone);    //标题    eventValues.put(CalendarContract.Events.TITLE, "双十一购物狂欢开抢");    eventValues.put(CalendarContract.Events.EVENT_LOCATION, "重庆");    eventValues.put(CalendarContract.Events.DESCRIPTION, "买东西");    Uri eventUri = CalendarContract.Events.CONTENT_URI;    //Uri uri=Uri.parse("content://"+..);    ContentResolver contentResolver = getContentResolver();    Uri resultUri = contentResolver.insert(eventUri, eventValues);    String eventID = resultUri.getLastPathSegment();    Log.d(TAG, "eventID--&gt;" + eventID);    ContentValues reminderValues = new ContentValues();    Uri reminderUri = CalendarContract.Reminders.CONTENT_URI;    contentResolver.insert(reminderUri, reminderValues);    reminderValues.put(CalendarContract.Reminders.EVENT_ID, eventID);    reminderValues.put(CalendarContract.Reminders.MINUTES, 15);    reminderValues.put(CalendarContract.Reminders.METHOD, CalendarContract.Reminders.METHOD_ALARM);    Log.d(TAG, "resultUri--&gt;" + resultUri);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入提醒"><a href="#插入提醒" class="headerlink" title="插入提醒"></a>插入提醒</h3><p>以下是提醒表的字段：<br><img src="/liaojie.github.io/medias/remain.png"><br>规则：插入新提醒时，您必须加入以上所有字段</p><p>其他操作可参考<a href="https://developer.android.google.cn/guide/topics/providers/calendar-provider.html#top_of_page">Android日历官方文档</a></p><p><a href="https://github.com/liaojie1314/CalendarProvider">完整项目</a></p><h2 id="例子2-获取通讯录联系人数据介绍"><a href="#例子2-获取通讯录联系人数据介绍" class="headerlink" title="例子2:获取通讯录联系人数据介绍"></a>例子2:获取通讯录联系人数据介绍</h2><h3 id="在配置文件里声明内容提供者的权限"><a href="#在配置文件里声明内容提供者的权限" class="headerlink" title="在配置文件里声明内容提供者的权限"></a>在配置文件里声明内容提供者的权限</h3><p><a href="https://github.com/TrillGates/ContactsProvider">联系人内容提供者源码</a></p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"    package="com.example.contactsprovider"&gt;    &lt;!--添加权限--&gt;    &lt;uses-permission android:name="android.permission.READ_CONTACTS"/&gt;    &lt;application        android:allowBackup="true"        android:icon="@mipmap/ic_launcher"        android:label="@string/app_name"        android:roundIcon="@mipmap/ic_launcher_round"        android:supportsRtl="true"        android:theme="@style/Theme.ContactsProvider"&gt;        &lt;activity android:name=".MainActivity"&gt;            &lt;intent-filter&gt;                &lt;action android:name="android.intent.action.MAIN" /&gt;                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Uri"><a href="#Uri" class="headerlink" title="Uri"></a>Uri</h3><p>首先是找到provider类， 或者从配置文件里找到注册的地方<br><img src="/liaojie.github.io/medias/providerGithub.png"></p><p>搜索静态代码块:static<br><img src="/liaojie.github.io/medias/providerSource.png"></p><p>ContactsContract.java的代码在framework里</p><p>设置ContactsContract.AUTHORITY常量:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static final String AUTHORITY = "com.android.contacts";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取数据表"><a href="#获取数据表" class="headerlink" title="获取数据表"></a>获取数据表</h3><p>raw_contacts:包含联系人数据摘要的行，针对特定用户帐户和类型。</p><p>mimetypes:数据类型描述表</p><p>data:数据表，存储号码、QQ、邮箱、昵称、图片。这些类型都在mimetypes里有。</p><p>所以如果我们要拿一个用户的数据,就应该是从raw_contacts里拿到id,再到data拿出数据,根据mimetype来判断数据的类型。</p><p>但是现在的android系统不是这样的了,也不直接给你读取mimetypes里的数据了。</p><p>得到URI:<br>content://com.android.contacts/data/phones</p><h3 id="创建Bean类-封装数据"><a href="#创建Bean类-封装数据" class="headerlink" title="创建Bean类,封装数据"></a>创建Bean类,封装数据</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class UserInfo {    private String id;    private String displayName;    private String phoneNum;    public String getId() {        return id;    }    public void setId(String id) {        this.id = id;    }    public String getDisplayName() {        return displayName;    }    public void setDisplayName(String displayName) {        this.displayName = displayName;    }    public String getPhoneNum() {        return phoneNum;    }    public void setPhoneNum(String phoneNum) {        this.phoneNum = phoneNum;    }    @Override    public String toString() {        return "UserInfo{" +                "id='" + id + '\'' +                ", displayName='" + displayName + '\'' +                ", phoneNum='" + phoneNum + '\'' +                '}';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="布局UI"><a href="#布局UI" class="headerlink" title="布局UI"></a>布局UI</h3><p>添加一个按钮:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;Button    android:layout_width="wrap_content"    android:layout_height="wrap_content"    android:text="获取联系人信息"    android:onClick="getContactInfo"    app:layout_constraintBottom_toBottomOf="parent"    app:layout_constraintLeft_toLeftOf="parent"    app:layout_constraintRight_toRightOf="parent"    app:layout_constraintTop_toTopOf="parent" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import android.Manifest;import android.content.ContentResolver;import android.content.pm.PackageManager;import android.database.Cursor;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.provider.ContactsContract;import android.util.Log;import android.view.View;import androidx.annotation.NonNull;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import java.util.ArrayList;import java.util.List;@RequiresApi(api = Build.VERSION_CODES.M)public class MainActivity extends AppCompatActivity {    private static final String TAG = "MainActivity";    public static final int PERMISSION_REQUEST_CODE = 1;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        //getUserInfo();        checkContactReadPermission();    }    private void checkContactReadPermission() {        int readContactPermission = checkSelfPermission(Manifest.permission.READ_CONTACTS);        if (readContactPermission != PackageManager.PERMISSION_GRANTED) {            requestPermissions(new String[]{Manifest.permission.READ_CONTACTS}, PERMISSION_REQUEST_CODE);        }    }    public void getContactInfo(View view) {        getUserInfo();    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if (requestCode == PERMISSION_REQUEST_CODE) {            if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Log.d(TAG, "has permission...");            } else {                Log.d(TAG, "no permission...");            }        }    }    private void getUserInfo() {        ContentResolver cr = getContentResolver();        //Uri constantsUri=Uri.parse("content://com.android.contacts");        Uri rawContactUri = Uri.parse("content://" + ContactsContract.AUTHORITY + "/raw_contacts");        Cursor rawContactCursor = cr.query(rawContactUri, new String[]{"contact_id", "display_name"}, null, null, null);        //string[] columnNames = rawContactCursor.getColumnNames();        List&lt;UserInfo&gt; userInfos = new ArrayList&lt;&gt;();        while (rawContactCursor.moveToNext()) {            UserInfo userInfo = new UserInfo();            userInfo.setId(rawContactCursor.getString(rawContactCursor.getColumnIndex("contact_id")));            userInfo.setDisplayName(rawContactCursor.getString(rawContactCursor.getColumnIndex("display_name")));            userInfos.add(userInfo);            //for (String columnName : columnNames) {            //      Log.d(TAG, columnName + " values--&gt;" + rawContactCursor.getString(rawContactCursor.getColumnIndex(columnName)));            // }        }        rawContactCursor.close();        Uri phoneUri = Uri.parse("content://" + ContactsContract.AUTHORITY + "/raw_contacts");        for (UserInfo userInfo : userInfos) {            //获取手机号码            Cursor phoneCursor = cr.query(phoneUri, new String[]{"data1"}, "raw_contact_id", new String[]{userInfo.getId()}, null);            if (phoneCursor.moveToNext()) {                userInfo.setPhoneNum(phoneCursor.getString(0).replace("-", ""));            }            phoneCursor.close();            Log.d(TAG, "UserInfo--&gt;" + userInfo);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/liaojie1314/ContactsProvider">完整项目</a></p><h2 id="例子3-读取短信内容"><a href="#例子3-读取短信内容" class="headerlink" title="例子3:读取短信内容"></a>例子3:读取短信内容</h2><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>provider地址:<br><a href="https://github.com/TrillGates/TelephonyProvider/blob/master/src/com/android/providers/telephony/SmsProvider.java">TelephonyProvider</a></p><p>搜索:static<br><img src="/liaojie.github.io/medias/phoneProviderSource.png"></p><p>得到Uri:<br>Uri uri = Uri.parse(“content://sms/“);</p><h3 id="声明权限"><a href="#声明权限" class="headerlink" title="声明权限"></a>声明权限</h3><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"    package="com.example.smsprovider"&gt;    &lt;!--权限--&gt;    &lt;uses-permission android:name="android.permission.READ_SMS"/&gt;    &lt;application        android:allowBackup="true"        android:icon="@mipmap/ic_launcher"        android:label="@string/app_name"        android:roundIcon="@mipmap/ic_launcher_round"        android:supportsRtl="true"        android:theme="@style/Theme.SMSProvider"&gt;        &lt;activity android:name=".MainActivity"&gt;            &lt;intent-filter&gt;                &lt;action android:name="android.intent.action.MAIN" /&gt;                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;        &lt;!--VerifyCodeActivity注册--&gt;        &lt;activity android:name=".VerifyCodeActivity"&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态获取权限"><a href="#动态获取权限" class="headerlink" title="动态获取权限"></a>动态获取权限</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void checkSmsReadPermission() {    int permissionResultCode = checkSelfPermission(Manifest.permission.READ_SMS);    if (permissionResultCode!= PackageManager.PERMISSION_GRANTED){        requestPermissions(new String[]{Manifest.permission.READ_SMS},PERMISSION_REQUEST_CODE);    }}@Overridepublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {    if (requestCode==PERMISSION_REQUEST_CODE){        Log.d(TAG, "grantResults--&gt;"+grantResults[0]);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="activity-main-xml"><a href="#activity-main-xml" class="headerlink" title="activity_main.xml"></a>activity_main.xml</h3><p>添加俩个按钮:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"    xmlns:app="http://schemas.android.com/apk/res-auto"    xmlns:tools="http://schemas.android.com/tools"    android:layout_width="match_parent"    android:layout_height="match_parent"    tools:context=".MainActivity"&gt;    &lt;Button        android:layout_width="wrap_content"        android:layout_height="wrap_content"        android:text="获取短信内容"        android:onClick="getSmsContent"        android:id="@+id/get_sms_content_btn"        app:layout_constraintBottom_toBottomOf="parent"        app:layout_constraintLeft_toLeftOf="parent"        app:layout_constraintRight_toRightOf="parent"        app:layout_constraintTop_toTopOf="parent" /&gt;    &lt;Button        android:layout_width="wrap_content"        android:layout_height="wrap_content"        android:text="获取短信验证码"        android:onClick="toVerityCodePage"        app:layout_constraintLeft_toLeftOf="parent"        app:layout_constraintRight_toRightOf="parent"        app:layout_constraintTop_toBottomOf="@id/get_sms_content_btn" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加点击事件"><a href="#添加点击事件" class="headerlink" title="添加点击事件:"></a>添加点击事件:</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void getSmsContent(View view){    ContentResolver cr = getContentResolver();    Uri uri=Uri.parse("content://sms/");    Cursor query = cr.query(uri, null, null, null, null);    String[] columnNames = query.getColumnNames();    while (query.moveToNext()) {        for (String columnName : columnNames) {            Log.d(TAG, columnName+"===="+query.getString(query.getColumnIndex(columnName)));        }    }    query.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MainActivity完整代码"><a href="#MainActivity完整代码" class="headerlink" title="MainActivity完整代码"></a>MainActivity完整代码</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import androidx.annotation.NonNull;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import android.Manifest;import android.content.ContentResolver;import android.content.Intent;import android.content.pm.PackageManager;import android.database.Cursor;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.util.Log;import android.view.View;@RequiresApi(api = Build.VERSION_CODES.M)public class MainActivity extends AppCompatActivity {    private static final int PERMISSION_REQUEST_CODE=1;    private static final String TAG ="MainActivity" ;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        checkSmsReadPermission();    }    public void toVerityCodePage(View view){        startActivity(new Intent(this,VerifyCodeActivity.class));    }    public void getSmsContent(View view){        ContentResolver cr = getContentResolver();        Uri uri=Uri.parse("content://sms/");        Cursor query = cr.query(uri, null, null, null, null);        String[] columnNames = query.getColumnNames();        while (query.moveToNext()) {            for (String columnName : columnNames) {                Log.d(TAG, columnName+"===="+query.getString(query.getColumnIndex(columnName)));            }        }        query.close();    }    private void checkSmsReadPermission() {        int permissionResultCode = checkSelfPermission(Manifest.permission.READ_SMS);        if (permissionResultCode!= PackageManager.PERMISSION_GRANTED){            requestPermissions(new String[]{Manifest.permission.READ_SMS},PERMISSION_REQUEST_CODE);        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if (requestCode==PERMISSION_REQUEST_CODE){            Log.d(TAG, "grantResults--&gt;"+grantResults[0]);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建VerifycodeActivity"><a href="#新建VerifycodeActivity" class="headerlink" title="新建VerifycodeActivity"></a>新建VerifycodeActivity</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import android.content.UriMatcher;import android.database.ContentObserver;import android.database.Cursor;import android.net.Uri;import android.os.Bundle;import android.os.CountDownTimer;import android.os.Handler;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import java.util.concurrent.atomic.AtomicReference;import java.util.regex.Matcher;import java.util.regex.Pattern;public class VerifyCodeActivity extends AppCompatActivity {    private static final String TAG = "VerifyCodeActivity";    private EditText mPhoneNumEt;    private Button mCountDownBtn;    private EditText mVerifyCodeEt;    private Button mCommitBtn;    private static final int MATCH_CODE=1;    private static UriMatcher uriMatcher=new UriMatcher(UriMatcher.NO_MATCH);    static {        uriMatcher.addURI("sms","#",MATCH_CODE);        //"#"代表数字;"*"代表文本    }    //倒计时CountDownTimer(总时间,梯度)    private CountDownTimer mCountDownTimer=new CountDownTimer(60*1000,1000) {        @Override        public void onTick(long millisUntilFinished) {            mCountDownBtn.setEnabled(false);            mCountDownBtn.setText(String.format("重新获取(%d)",millisUntilFinished/1000));        }        @Override        public void onFinish() {            mCountDownBtn.setEnabled(true);            mCountDownBtn.setText(String.format("获取验证码"));        }    };    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_verify_code);        initView();        initEvent();        //注册短信内容提供者的观察者        Uri uri=Uri.parse("content://sms/");        getContentResolver().registerContentObserver(uri, true, new ContentObserver(new Handler()) {            @Override            public void onChange(boolean selfChange, @Nullable Uri uri) {                Log.d(TAG, "selfChange--&gt;"+selfChange);                if (uriMatcher.match(uri)==MATCH_CODE) {                    Log.d(TAG, "uri--&gt;"+uri);                    Cursor query = getContentResolver().query(uri, new String[]{"body"}, null, null, null);                    if (query.moveToNext()) {                        String body = query.getString(0);                        Log.d(TAG, "body==="+body);                        handlerBody(body);                    }                    query.close();                }            }        });    }    private void handlerBody(String body) {        if (!TextUtils.isEmpty(body)&amp;&amp;body.startsWith("【xxx】")) {            Pattern p=Pattern.compile("(?&lt;![0-9])([0-9]{4})(?![0-9])");//4位验证码            Matcher matcher=p.matcher(body);            boolean contain=matcher.find();            if (contain) {                String group = matcher.group();                Log.d(TAG, "verifyCode--&gt;"+ group);                mVerifyCodeEt.setText(group);                mVerifyCodeEt.setFocusable(true);//添加焦点            }        }    }    private void initEvent() {       mCountDownBtn.setOnClickListener(new View.OnClickListener() {           @Override           public void onClick(View v) {               String phoneNum = mPhoneNumEt.getText().toString().trim();               if (TextUtils.isEmpty(phoneNum)) {                   Toast.makeText(VerifyCodeActivity.this,"手机号码不能为空",Toast.LENGTH_SHORT).show();                   return;               }               // TODO: 向服务器请求发送验证码到手机               mCountDownTimer.start();           }       });       mCommitBtn.setOnClickListener(new View.OnClickListener() {           @Override           public void onClick(View v) {               String phoneNum = mPhoneNumEt.getText().toString().trim();               String verifyCode = mVerifyCodeEt.getText().toString().trim();               if (TextUtils.isEmpty(phoneNum)||TextUtils.isEmpty(verifyCode)){                   Toast.makeText(VerifyCodeActivity.this,"验证码和手机号都不能为空",Toast.LENGTH_SHORT).show();                   return;               }               // TODO: 向服务器提交           }       });    }    private void initView() {        mPhoneNumEt = this.findViewById(R.id.phone_num_et);        mVerifyCodeEt = this.findViewById(R.id.verify_code_et);        mCountDownBtn = this.findViewById(R.id.count_down_btn);        mCommitBtn = this.findViewById(R.id.submit_btn);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="activity-verity-code-xml"><a href="#activity-verity-code-xml" class="headerlink" title="activity_verity_code.xml"></a>activity_verity_code.xml</h3><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"    android:layout_width="match_parent"    android:layout_height="match_parent"    android:orientation="vertical"&gt;    &lt;RelativeLayout        android:layout_width="match_parent"        android:layout_height="50dp"&gt;        &lt;EditText            android:id="@+id/phone_num_et"            android:layout_width="match_parent"            android:layout_height="match_parent"            android:layout_marginRight="120dp"            android:hint="请输入手机号码"            android:inputType="number" /&gt;        &lt;Button            android:id="@+id/count_down_btn"            android:layout_width="120dp"            android:layout_height="match_parent"            android:layout_alignParentRight="true"            android:layout_marginRight="10dp"            android:text="获取验证码" /&gt;    &lt;/RelativeLayout&gt;    &lt;EditText        android:id="@+id/verify_code_et"        android:layout_width="match_parent"        android:layout_height="50dp"        android:hint="请输入验证码"        android:inputType="number" /&gt;    &lt;Button        android:id="@+id/submit_btn"        android:layout_width="match_parent"        android:layout_height="50dp"        android:text="检查验证码" /&gt;&lt;/LinearLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发送验证码"><a href="#发送验证码" class="headerlink" title="发送验证码:"></a>发送验证码:</h3><p><img src="/liaojie.github.io/medias/%E9%AA%8C%E8%AF%81.png"></p><p>在其中输入:<br>    【xxx】验证码：4356，15分钟内有效</p><p>校验结果:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static UriMatcher sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);public static final int MATCH_CODE = 1;static {    sUriMatcher.addURI("sms","#",MATCH_CODE);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注册短信内容变化的观察者"><a href="#注册短信内容变化的观察者" class="headerlink" title="注册短信内容变化的观察者:"></a>注册短信内容变化的观察者:</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">final ContentResolver contentResolver = getContentResolver();    Uri uri = Uri.parse("content://sms/");    contentResolver.registerContentObserver(uri,true,new ContentObserver(new Handler()) {        @Override        public void onChange(boolean selfChange,Uri uri) {            if(sUriMatcher.match(uri) == MATCH_CODE) {                Log.d(TAG,"selfChange -- &gt; " + " uri -- &gt; " + uri);                Cursor query = contentResolver.query(uri,null,null,null,null);                if(query.moveToNext()) {                    String body = query.getString(query.getColumnIndex("body"));                    Log.d(TAG,"body -- &gt; " + body);                    handlerMsg(body);                }            query.close();            }        }    });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理结果:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void handlerMsg(String body) {    if(body != null &amp;&amp; body.startsWith("【xxx】")) {        //符合条件        //截取数字        Pattern p = Pattern.compile("(?&lt;![0-9])([0-9]{4})(?![0-9])");        Matcher matcher = p.matcher(body);        boolean contain = matcher.find();        if(contain) {            Log.d(TAG,"verifyCode -- &gt; " + matcher.group());        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token property">D/MainActivity:</span> selfChange <span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">&gt;</span>  uri <span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">&gt;</span> content<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>sms<span class="token operator">/</span><span class="token number">19</span><span class="token property">D/MainActivity:</span> body <span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">&gt;</span> 【xxx】验证码：<span class="token number">4356</span>，<span class="token number">15</span>分钟内有效<span class="token property">D/MainActivity:</span> verifyCode <span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">&gt;</span> <span class="token number">4356</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/liaojie1314/SMSProvider">完整代码</a></p><h2 id="例子4-获取媒体库里的图片"><a href="#例子4-获取媒体库里的图片" class="headerlink" title="例子4:获取媒体库里的图片"></a>例子4:获取媒体库里的图片</h2><p>在android中有一个提供者中做MediaProvider</p><p>源码地址：<br><a href="https://github.com/TrillGates/MediaProvider">MediaProvider</a><br>获取到图片内容<br>URI</p><ul><li>图片的Url</li></ul><blockquote><p>MediaStore.Images.Media.EXTERNAL_CONTENT_URI</p></blockquote><ul><li>视频的Url</li></ul><blockquote><p>MediaStore.Video.Media.EXTERNAL_CONTENT_URI</p></blockquote><ul><li>音频的Url</li></ul><blockquote><p>MediaStore.Audio.Media.EXTERNAL_CONTENT_URI</p></blockquote><p>权限</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="检查权限"><a href="#检查权限" class="headerlink" title="检查权限"></a>检查权限</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void checkPermission() {    int readExternalStoragePermissionResult = checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE);    if(readExternalStoragePermissionResult != PackageManager.PERMISSION_GRANTED) {        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},PERMISSION_REQUEST_CODE);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据表字段"><a href="#数据表字段" class="headerlink" title="数据表字段"></a>数据表字段</h3><p>获得表的内容和字段</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">ContentResolver contentResolver = getContentResolver();Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;Cursor query = contentResolver.query(uri,null,null,null,null,null);String[] columnNames = query.getColumnNames();while(query.moveToNext()) {    Log.d(TAG,"----------------------------");    for(String columnName : columnNames) {        Log.d(TAG,columnName + " ==== " + query.getString(query.getColumnIndex(columnName)));    }    Log.d(TAG,"----------------------------");}query.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得需要的字段:</p><ul><li>路径_data</li><li>图片名称_display_name</li><li>时间date_added</li></ul><p>还有经纬度等,通过这个经纬度+API转换就可以得到地址了,所以图片里可以包含着地理信息.</p><p>使用LoaderManager</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void initLoaderManager() {    LoaderManager loaderManager = LoaderManager.getInstance(this);    loaderManager.initLoader(LOADER_ID, null, new LoaderManager.LoaderCallbacks&lt;Cursor&gt;() {        @NonNull        @Override        public Loader&lt;Cursor&gt; onCreateLoader(int id, @Nullable Bundle args) {            if (id == LOADER_ID) {                return new CursorLoader(PickerActivity.this,                        MediaStore.Images.Media.EXTERNAL_CONTENT_URI,                        new String[]{"_data", "_display_name", "date_added"},                        null, null, "date_added DESC");                //DESC 逆序            }            return null;        }        @Override        public void onLoadFinished(@NonNull androidx.loader.content.Loader&lt;Cursor&gt; loader, Cursor cursor) {            if (cursor != null) {                String[] columnNames = cursor.getColumnNames();                while (cursor.moveToNext()) {                    Log.d(TAG, "----------------------------");                    for (String columnName : columnNames) {                        Log.d(TAG, columnName + " ==== " + cursor.getString(cursor.getColumnIndex(columnName)));                    }                    Log.d(TAG, "----------------------------");                }                cursor.close();            }        }        @Override        public void onLoaderReset(@NonNull androidx.loader.content.Loader&lt;Cursor&gt; loader) {        }    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="准备一个封装数据的bean类"><a href="#准备一个封装数据的bean类" class="headerlink" title="准备一个封装数据的bean类"></a>准备一个封装数据的bean类</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class PhotoItem {    private String path;    private String name;    private long createDate;    private boolean isSelected = false;    public boolean isSelected() {        return isSelected;    }    public void setSelected(boolean selected) {        isSelected = selected;    }    public String getPath() {        return path;    }    public void setPath(String path) {        this.path = path;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public long getCreateDate() {        return createDate;    }    public void setCreateDate(long createDate) {        this.createDate = createDate;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取到图片的数据-并且封装起来-显示出来"><a href="#获取到图片的数据-并且封装起来-显示出来" class="headerlink" title="获取到图片的数据,并且封装起来,显示出来"></a>获取到图片的数据,并且封装起来,显示出来</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import android.content.ContentResolver;import android.database.Cursor;import android.net.Uri;import android.os.Bundle;import android.provider.MediaStore;import com.example.imagepickerdemo.domain.PhotoItem;import java.util.ArrayList;import java.util.List;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.RecyclerView;public class ImagePickerActivity extends AppCompatActivity {    private static final String TAG = "ImagePickerActivity";    private RecyclerView mPicListView;    private List&lt;PhotoItem&gt; mPics = new ArrayList&lt;&gt;();    private PicListAdapter mPicListAdapter;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_image_picker);        initView();        initData();    }    private void initData() {        //这些事情其实不能在主线程做        ContentResolver contentResolver = getContentResolver();        Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;        Cursor query = contentResolver.query(uri,new String[]{                MediaStore.Images.Media.DATA,                MediaStore.Images.Media.DISPLAY_NAME,                MediaStore.Images.Media.DATE_ADDED,                MediaStore.Images.Media._ID},null,null,null,null);        while(query.moveToNext()) {            PhotoItem photoItem = new PhotoItem();            photoItem.setPath(query.getString(0));            //这里的下标跟上面的query第一个参数对应，时间是第2个，所以下标为1            photoItem.setCreateDate(query.getLong(1));            photoItem.setName(query.getString(2));            mPics.add(photoItem);        }        query.close();        mPicListAdapter.setData(mPics);    }    private void initView() {        mPicListView = this.findViewById(R.id.pic_list);        mPicListView.setLayoutManager(new GridLayoutManager(this,3));        mPicListAdapter = new PicListAdapter();        mPicListView.setAdapter(mPicListAdapter);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="适配器代码"><a href="#适配器代码" class="headerlink" title="适配器代码"></a>适配器代码</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class PicListAdapter extends RecyclerView.Adapter&lt;PicListAdapter.InnerHolder&gt; {    private List&lt;PhotoItem&gt; mData = new ArrayList&lt;&gt;();    @NonNull    @Override    public InnerHolder onCreateViewHolder(@NonNull ViewGroup parent,int viewType) {        ImageView iv = new ImageView(parent.getContext());        iv.setScaleType(ImageView.ScaleType.CENTER_CROP);        Point point = new Point();        ((WindowManager) parent.getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getSize(point);        RecyclerView.LayoutParams layoutParams = new RecyclerView.LayoutParams(point.x / 3,point.x / 3);        iv.setLayoutParams(layoutParams);        return new InnerHolder(iv);    }    @Override    public void onBindViewHolder(@NonNull InnerHolder holder,int position) {        if(holder.itemView instanceof ImageView) {            Glide.with(holder.itemView.getContext()).load(mData.get(position).getPath()).into((ImageView) holder.itemView);        }    }    @Override    public int getItemCount() {        return mData.size();    }    public void setData(List&lt;PhotoItem&gt; pics) {        mData.clear();        mData.addAll(pics);        notifyDataSetChanged();    }    public class InnerHolder extends RecyclerView.ViewHolder {        public InnerHolder(@NonNull View itemView) {            super(itemView);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用LoaderManager来加载"><a href="#使用LoaderManager来加载" class="headerlink" title="使用LoaderManager来加载"></a>使用LoaderManager来加载</h3><p>前面我们直接在onCreate的地方加载数据,如果数据量大的话会导致主线程阻塞出现ANR异常。如果数据量小会影响页面的打开速度。<br>所以我们要么自己创建子线程去获取,要么通过LoaderManager去获取。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class MediaContentPickerActivity extends AppCompatActivity {    private static final int LOADER_ALL = 0;         // 获取所有图片    private static final String TAG = "ContentPickerActivity";    private List&lt;PhotoItem&gt; photoInfoList = new ArrayList&lt;&gt;();      // 本地图片信息List    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_media_picker);        initLoader();    }    private void initLoader() {        LoaderManager loaderManager = LoaderManager.getInstance(this);        loaderManager.initLoader(LOADER_ALL,null,new LoaderManager.LoaderCallbacks&lt;Cursor&gt;() {            private final String[] IMAGE_PROJECTION = {                    MediaStore.Images.Media.DATA,                    MediaStore.Images.Media.DISPLAY_NAME,                    MediaStore.Images.Media.DATE_ADDED,                    MediaStore.Images.Media._ID,            };            @NonNull            @Override            public Loader&lt;Cursor&gt; onCreateLoader(int id,@Nullable Bundle args) {                if(id == LOADER_ALL) {                    return new CursorLoader(MediaContentPickerActivity.this,                            MediaStore.Images.Media.EXTERNAL_CONTENT_URI,IMAGE_PROJECTION,                            null,null,IMAGE_PROJECTION[2] + " DESC");                }                return null;            }            @Override            public void onLoadFinished(@NonNull Loader&lt;Cursor&gt; loader,Cursor data) {                if(data != null) {                    int count = data.getCount();                    if(count &gt; 0) {                        List&lt;PhotoItem&gt; tempPhotoList = new ArrayList&lt;&gt;();                        data.moveToFirst();                        do {                            String path = data.getString(data.getColumnIndexOrThrow(IMAGE_PROJECTION[0]));                            String name = data.getString(data.getColumnIndexOrThrow(IMAGE_PROJECTION[1]));                            long dateTime = data.getLong(data.getColumnIndexOrThrow(IMAGE_PROJECTION[2]));                            PhotoItem photoItem = new PhotoItem();                            photoItem.setName(name);                            photoItem.setPath(path);                            photoItem.setCreateDate(dateTime);                            tempPhotoList.add(photoItem);                        } while(data.moveToNext());                        photoInfoList.clear();                        photoInfoList.addAll(tempPhotoList);                    }                    //输出结果                    for(PhotoItem photoItem : photoInfoList) {                        Log.d(TAG,"photoItem -- &gt; " + photoItem);                    }                }            }            @Override            public void onLoaderReset(@NonNull Loader&lt;Cursor&gt; loader) {            }        });    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给PhotoItem.java添加toString方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Overridepublic String toString() {    return "PhotoItem{" +            "path='" + path + '\'' +            ", name='" + name + '\'' +            ", createDate=" + createDate +            ", isSelected=" + isSelected +            '}';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里我们就把图片获取出来了</p><h3 id="图片素材"><a href="#图片素材" class="headerlink" title="图片素材"></a>图片素材</h3><p><a href="https://www.iconfont.cn/">iconfont</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开源库之Jetpack</title>
      <link href="/liaojie.github.io/2021/10/20/jetpack/"/>
      <url>/liaojie.github.io/2021/10/20/jetpack/</url>
      
        <content type="html"><![CDATA[<h5 id="什么是Jetpack"><a href="#什么是Jetpack" class="headerlink" title="什么是Jetpack?"></a>什么是Jetpack?</h5><p>Jetpack 是一个丰富的组件库,它的组件库按类别分为 4 类,分别是架构（Architecture）、界面（UI）、行为（behavior）和基础（foundation）.每个组件都可以单独使用,也可以配合在一起使用.每个组件都给用户提供了一个标准,能够帮助开发者遵循最佳做法,减少样板代码并编写可在各种 Android 版本和设备中一致运行的代码,让开发者能够集中精力编写重要的业务代码.</p><p><img src="/liaojie.github.io/medias/jetpack%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p><pre class="line-numbers language-官方" data-language="官方"><code class="language-官方">Jetpack 是一个由多个库组成的套件,可帮助开发者遵循最佳做法、减少样板代码并编写可在各种 Android 版本和设备中一致运行的代码,让开发者可将精力集中于真正重要的编码工作.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>优点:<br>1.体现了单一原则<br>2.分层清晰<br>3.不需要非常依赖Activity<br>4.旋转数据不会丢失<br>…</p><p><a href="https://developer.android.google.cn/jetpack">官方文档</a></p><h5 id="在应用中使用-Jetpack-库"><a href="#在应用中使用-Jetpack-库" class="headerlink" title="在应用中使用 Jetpack 库"></a>在应用中使用 Jetpack 库</h5><p>所有 Jetpack 组件都可在 Google Maven 代码库中找到。</p><p>打开项目的 build.gradle 文件并添加 google() 代码库，如下所示：</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">Groovy:allprojects {    repositories {        google()        jcenter()    }}Kotlin:allprojects {    repositories {        google()        jcenter()    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，您可以添加 Jetpack 组件（例如 LiveData 和 ViewModel 等架构组件），如下所示：</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">Groovy:dependencies {    def lifecycle_version = "2.2.0"    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"    ...}Kotlin:dependencies {    val lifecycle_version = "2.2.0"    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>许多 Jetpack 库都提供 <a href="https://developer.android.google.cn/kotlin/ktx">Android KTX 扩展</a>，如上面的 lifecycle-livedata-ktx 和 lifecycle-viewmodel-ktx 所示。KTX 扩展在基于 Java 的 API 基础上构建，充分利用了 Kotlin 特有的语言功能。</p><p>基于 <a href="https://developer.android.google.cn/reference/kotlin/androidx/packages">Kotlin</a> 以及基于 <a href="https://developer.android.google.cn/reference/androidx/packages">Java</a> 的 API 参考文档页面适用于所有 Jetpack 库</p><h5 id="利用-Jetpack"><a href="#利用-Jetpack" class="headerlink" title="利用 Jetpack"></a>利用 Jetpack</h5><p>Jetpack 库可以单独使用，也可以组合使用，以满足应用的不同需求。</p><p><a href="https://developer.android.google.cn/topic/libraries/architecture/workmanager">WorkManager</a> - 满足您的后台调度需求。<br><a href="https://developer.android.google.cn/topic/libraries/architecture/room">Room</a> - 实现数据存储持久性。<br><a href="https://developer.android.google.cn/guide/navigation/navigation-getting-started">Navigation</a> - 管理应用导航流程。<br><a href="https://developer.android.google.cn/training/camerax">CameraX</a> - 满足相机应用需求。<br>请参阅所有 Jetpack 库的<a href="https://developer.android.google.cn/jetpack/androidx/versions#version-table">概览</a>。</p><p>Jetpack 库在 androidx 命名空间中发布。如果项目目前使用 Android 支持库，请阅读如何迁移到 androidx 命名空间。</p><p>如需详细了解如何使用 Jetpack，请查看以下页面：</p><p><a href="https://developer.android.google.cn/topic/libraries/architecture">Android 架构组件</a><br><a href="https://developer.android.google.cn/topic/libraries/architecture">Jetpack 组件的完整列表</a></p><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>以注重生命周期的方式管理界面相关的数据(管理UI数据)</p><h3 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h3><p>source:</p><p>1.首先定义一个LiveData实例</p><p>2.观察LiveData数据变化,变化时将数据展示到TextView上</p><p>3.改变LiveData里面的数据,数据变化时会回调onChanged()方法</p><p>在底层数据库更改时通知视图(感应改变数据),UI刷新(LiveData+DataBinding)</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class MainViewModel extend /*ViewModel*/AndroidViewModel{    //ViewModel 无环境    //AndroidViewModel 有环境 需重写构造函数    private Context context;    public MainViewModel(@NonNull Application application)    {    super(application);    context = application;    }    private MutableLiveData&lt;String&gt;info(){    info.setValue("");//默认值    return info;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataBinding"><a href="#DataBinding" class="headerlink" title="DataBinding"></a>DataBinding</h3><p>//DataBinding的引入(在build.gradle(:app)中添加):</p><pre class="line-numbers language-gradle(:app)" data-language="gradle(:app)"><code class="language-gradle(:app)">方式一:  dataBinding{  enabled true  }方式二:  dataBinding.enabled=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加后需同步<br>使用:(整个布局交给DataBinding管理)</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;Layout xmlns:android="http://schemas.android.com/apk/res/android"&gt;    &lt;!-- 和类交互 --&gt;    &lt;data&gt;          &lt;variable               name="name"               type="包名+类名"/&gt;    &lt;/data&gt;      //使用:android:text="@{name.info}"      //android:onClick="@{()-&gt;name.function(value)}"           所有布局...&lt;/Layout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainActivity需要做绑定工作</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private ActivityMainBinding binding;private MainViewModel mainViewModel;//onCreate中添加binding = DataBindingUtil.setContentView(this,R.layout.activity_main);//AndroidViewModelmainViewModel = new ViewModelProvider(this,new ViewModelProvider.AndroidViewModelFactory(getApplication())).get(MainViewModel.class);//ViewModelmainViewModel = new ViewModelProvider(this,new ViewModelProvider.NewInstanceFactory()).get(MainViewModel.class);//绑定工作binding.setName(mainViewModel);//建立感应binding.setLifecycleOwner(this);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：非Activity启动需要加标记.</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Intent intent = new Intent();intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Jetpack+MVVM : Google标准化Jetpack架构模式(强力推荐)</p><h2 id="MVVM、MVC、MVP"><a href="#MVVM、MVC、MVP" class="headerlink" title="MVVM、MVC、MVP"></a>MVVM、MVC、MVP</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>  创建过程:C-&gt;M+V</p><p>  优点:分离了Model和Controller.view与model隔离,view换了,model不影响.model换其他的数据源,view层也不受影响.一个view可以连接多个model,有些model可以复用.比如说你这个页面需要用户信息,另外一个界面也需要用户信息.</p><p>  缺点:Controller变得复杂.这里我们主要指Android上的缺点,不适合在Android开发上使用.在Android开发中,View的相关内容和Controller都写到一起了会让Activity/Fragment越来越臃肿</p><p>  建议:用于简单的、不大修改的页面</p><p>组件的互动:<br>将应用程序划分为三种组件,模型-视图-控制器(MVC)设计定义它们之间的相互作用.<br>  模型 (Model)用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法. Model”有对数据直接访问的权力,例如对数据库的访问.”Model”不依赖”View”和”Controller”.也就是说,Model不关心它会被如何显示或是如何被操作.但是Model中数据的变化一般会通过一种刷新机制被公布.为了实现这种机制,那些用于监视此 Model 的 View 必须事先在此Model上注册,从而,View 可以了解在数据Model上发生的改变.(比如：观察者模式(软件设计模式))</p><p>  视图（View）能够实现数据有目的的显示（理论上，这不是必需的）.在 View 中一般没有程序上的逻辑.为了实现 View 上的刷新功能,View 需要访问它监视的数据模型(Model),因此应该事先在被它监视的数据那里注册.<br>  控制器(Controller)起到不同层面间的组织作用,用于控制应用程序的流程.它处理事件并作出响应.”事件”包括用户的行为和数据Model上的改变.</p><p>在不同的项目开发里面,分别有不同的内容充当MVC.那在Android里是什么充当View,什么充当Model,什么充当Controller呢？<br>  View:Acitivity(View)、Fragment(View)视图,在android里xml布局转成View后,加载到了Activity/Fragmen里了.<br>  Controller:Controller对应着Activity/Fragment,绑定UI,处理各种业务.<br>  Model：数据的获取、存储、更新、domain</p><h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h3><p>  创建过程:C-&gt;P-&gt;M<br>  优点:在MVC的基础上,通过Interface彻底分离了View和Model。剥离了View和Controller，解决了复杂的业务Activity过于庞大的问题<br>  缺点:Presenter与View的交互会琐碎而复杂</p><ul><li><p>更新UI需要主意线程，UI控件是否已经销毁(在用户可视的生命周期范围内更新UI即可)假如我们去请求一个数据，这个时候请求是耗时的，数据回来了，可是界面已经被用户关掉了，数据回来以后，我们得判断UI控件是否还存在。</p></li><li><p>如果多个地方使用到同一个Presenter，可能会存在一些用不上的接口还是有的，我们在喜马拉雅FM电台里就有体现出来。比如说我们的播放器逻辑层PlayerPresenter，我们对应需要通知UI的接口有开始播放，暂停播放，缓冲中，播放失败，下一首，上一首，播放模式改变…如果我们多个地方使用到这个Presenter。比如说首页，详情页面，播放器页面。播放器页面使用这个Presenter实现这个接口没问题，都用得上。可是我的首页，只需要暂停播放和播放呀，其他的状态并不需要。一大堆用不上的接口</p></li></ul><p>  建议:核心、复杂、需求变得快页面</p><p>大家都觉得MVC套在Android上不好。VC的代码会越来越多，如果要处理复杂的逻辑，Activity的代码上千上行。于是大家开始剥离VC里的代码。</p><p>这个用起来爽了很多，Activity的代码量也没这么多了。</p><p>大量的逻辑代码抽取到了Presenter层。</p><p>这两个项目就是MVP的架构</p><ul><li>View：Activity、Fragment</li><li>Presneter：逻辑层</li><li>Model：数据处理</li></ul><p>在MVP架构中，我们设计到的内容是调用逻辑层的方法和更新UI，这是最简单的。</p><p>问题点就是：怎么调用逻辑层的方法呢？怎么通知UI更新呢？</p><p>View层持有Presenter层的引用或者通过管理类管理Presenter，总之View可以直接拿到Presenter，这样子，View就可以调用Presenter里的方法了。比如说Presenter你给我获取一个这个页面的分类。</p><p>Presenter层如何更新UI呢？当View层去获取/创建Presenter的时候，把接口给到Presenter，比如说Presenter层获取到分类以后，通过接口更新UI即可。</p><p>这样子就完事了。Presenter层则通过Model层去拿数据。</p><h3 id="改造MVP"><a href="#改造MVP" class="headerlink" title="改造MVP"></a>改造MVP</h3><p>原则</p><ul><li>减少/不依赖View</li><li>数据驱动UI，数据变化，UI自动更新</li></ul><p>目的</p><ul><li>View不与Presenter直接关联</li><li>确保数据在主线程更新UI</li><li>感知View的生命周期<ul><li>可见的生命周期范围数据更新则更新UI，否则不更新UI</li><li>View不可见时时候，暂停某些不必要的操作</li></ul></li></ul><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>  创建过程:C-&gt;VM-&gt;M<br>  优点:在MVP的基础上增加了DataBinding,代码量更小<br>  缺点:XML中包含代码<br>  建议:核心、复杂、需求变得快页面</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Jetpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C language</title>
      <link href="/liaojie.github.io/2021/10/19/c/"/>
      <url>/liaojie.github.io/2021/10/19/c/</url>
      
        <content type="html"><![CDATA[<p>C语言是一种计算机程序设计语言.它既具有高级语言的特点.又具有汇编语言的特点,它由美国贝尔研究所的D.M.Ritchie于1972年推出.1978后,C语言已先后被移植到大、中、小及微型机上.它可以作为工作系统设计语言,编写系统应用程序,也可以作为应用程序设计语言,编写不依赖计算机硬件的应用程序.它的应用范围广泛,具备很强的数据处理能力,不仅仅是在软件开发上,而且各类科研都需要用到C语言,适于编写系统软件、三维、二维图形和动画.具体应用比如单片机以及嵌入式系统开发.C语言是一门通用计算机编程语言,应用广泛.C语言的设计目标是提供一种能以简易的方式编译、处理低级存储器、产生少量的机器码以及不需要任何运行环境支持便能运行的编程语言.</p><p>尽管C语言提供了许多低级处理的功能,但仍然保持着良好跨平台的特性,以一个标准规格写出的C语言程序可在许多电脑平台上进行编译,甚至包含一些嵌入式处理器(单片机或称MCU)级电脑等作业平台.</p><p>二十世纪八十年代,为了避免各开发厂商用的C语言语法产生差异,由美国国家标准局为C语言订定了一套完整的国际标准语法,称为ANSI C,作为C语言最初的标准.</p><h5 id="C都能干啥呢？"><a href="#C都能干啥呢？" class="headerlink" title="C都能干啥呢？"></a>C都能干啥呢？</h5><p>1、C语言可以做嵌入式开发.51单片机、ARM等….</p><p>2、C语言可以写漂亮的界面,以windows开发为例,你可以学习《windows程序设计（第五版）》,学完就可以写出界面来.还有一些开源库界面库,例如soui也是用C写出来的.</p><p>3、C语言可以做服务器开发,现在的游戏服务器端大多都是C/C++开发的.《windows核心编程》里面的例子就是用C写的.</p><p>4、C语言可以写游戏.cocos2d-x就是C/C++写的.DirectX也是.</p><p>5、C语言可以写驱动程序.windows下各种硬件驱动都是C/C++写的.腾讯游戏保护软件(TP)也是驱动程序.</p><p>6、C语言可以写外挂.</p><p>7、C语言可以做视频图片流媒体处理.ffmpeg、live555、sdl等开源库.</p><p>8、C语言可以做网页和爬虫相关的编程.gsoap、libcur等相关开源库.</p><p>9、C语言可以进行黑客编程.配合汇编获取随机地址、调shellcode等.</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发之自定义控件</title>
      <link href="/liaojie.github.io/2021/10/11/android/"/>
      <url>/liaojie.github.io/2021/10/11/android/</url>
      
        <content type="html"><![CDATA[<p>自定义控件概念:Android中组件必须是View的直接子类或间接的子类,其中View有一个ViewGroup的子类,用于定义容器,(FrameLayout,LinearLayout,都是ViewGroup的子类).如果组件中还有子组件,就是从ViewGroup类继承,否则从View类继承.只要你自定义控件,要么是View的直接子类,要么就是View的间接子类.</p><h2 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h2><pre class="line-numbers language-none"><code class="language-none">1.自定义组合控件  继承自ViewGroup,比如说LinearLayout/RealativeLayout/FrameLayout--&gt;定义相关属性,获取相关属性  --&gt;加载组合的View/根据属性调整UI--&gt;处理相关事件/根据属性去处理数据--&gt;定义功能接口,对外暴露接口方法  --&gt;处理事件/数据2.自定义ViewGroup  继承自ViewGroup--&gt;定义相关属性,获取相关属性--&gt;把子View添加进来--&gt;测量:测量孩子,测量自己(覆写onMeasure方法)  --&gt;布局Layout--&gt;定义功能接口--&gt;处理事件和数据  3.自定义view  继承自View--&gt;定义相关属性,获取相关属性--&gt;测量自己--&gt;创建相关画笔--&gt;覆写onDraw方法,绘制相关内容  --&gt;定义功能接口--&gt;处理相关事件和数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性添加"><a href="#属性添加" class="headerlink" title="属性添加"></a>属性添加</h3><p>1.声明属性名称和值的类型<br>在res/values文件下新建一个属性xml文件,如attrs.xml,然后在属性文件里添加<declare-styleable>标签,并声明属性</declare-styleable></p><pre class="line-numbers language-attrs" data-language="attrs"><code class="language-attrs">&lt;declare-styleable name="InputNumberView"&gt;    &lt;attr name="max" format="integer" /&gt;    &lt;attr name="min" format="integer" /&gt;    &lt;attr name="step" format="integer" /&gt;    &lt;attr name="defaultValue" format="integer" /&gt;    &lt;attr name="disable" format="boolean" /&gt;    &lt;attr name="btnBackground" format="reference" /&gt;    &lt;attr name="valueSize" format="dimension" /&gt;    &lt;attr name="function" format="flags"&gt;        &lt;flag name="delete" value="0x30"/&gt;        &lt;flag name="read" value="0x50"/&gt;        &lt;flag name="top" value="0x03"/&gt;    &lt;/attr&gt;&lt;/declare-styleable&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Integer，比如说行数，TextView的maxLine，就是Integer类型<br>enum，枚举类型，比如说left,top,bottom,center,right这些是枚举类型<br>boolean，布尔类型，比如说layout_alignParentRight<br>dimension，尺寸比如说size,margin_left这些，单位为px,dp,sp这些<br>color，颜色，比如说background，比如说textColor<br>flags，标记，比如说activity声明周期时的configChanges，gravity<br>float，浮点数，也就是小数，比如说透明度alpha<br>fraction，百分数，比如说动画的开始位置，fromDx<br>refrence，引用，比如说background，src，但background可以是color又可以是refrence，其实是可以多个，比如说：name=”switch_time” format=”integer|float”，可以是Integer类型，或者float类型<br>string，比如说text</p><p>2.获取属性值</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">$  TypedArray a = context.obtainStyledAttributes(attrs,R.styleable.looper_style);   //从TypedArray中读取属性值   //......   //如：a.getColor(R.styleable.KeypadView_numberColor, context.getResources().getColor(R.color.white));   a.recycle();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.属性的获取</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">$ app:itemMargin="4dp"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义控件基本绘制原理"><a href="#自定义控件基本绘制原理" class="headerlink" title="自定义控件基本绘制原理"></a>自定义控件基本绘制原理</h3><p>View的绘制基本上由measure()、layout()、draw()三个函数完成<br>1.测量-Measure过程是计算视图大小，View measure过程相关方法主要有三个:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public final void measure(int widthMeasureSpec, int heightMeasureSpec)  protected final void setMeasuredDimension(int measuredWidth, int measuredHeight)  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>measure调用onMeasure,onMeasure测量宽度、高度然后调用setMeasureDimension保存测量结果,measure,setMeasureDimension是final类型,view的子类不需要重写,onMeasure在view的子类中重写.<br>关于MeasureSpec的三个值：</p><p>(1) UPSPECIFIED ：未指定模式，父容器对于子容器没有任何限制,子容器想要多大就多大，通常在绘制自定义View时才会用</p><p>(2) EXACTLY：精确值模式，父容器已经为子容器设置了尺寸,子容器应当服从这些边界,不论子容器想要多大的空间，当控件的layout_width和layout_height属性指定为具体数值或match_parent时为该模式。</p><p>(3) AT_MOST：最大值模式，子容器可以是声明大小内的任意大小，当空间的宽高设置为wrap_content时为该模式</p><p>2.布局-Layout过程用于设置视图在屏幕中显示的位置，View layout过程相关方法主要要三个:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void layout(int l, int t, int r, int b)protected boolean setFrame(int left, int top, int right, int bottom)protected void onLayout(boolean changed, int left, int top, int right, int bottom)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>layout通过调用setFrame（l,t,r,b），l,t,r,b即子视图在父视图中的具体位置，onLayout一般只会在自定义ViewGroup中才会使用</p><p>3.绘制-draw过程主要用于利用前两步得到的参数，将视图显示在屏幕上，到这里也就完成了整个的视图绘制工作:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void draw(Canvas canvas)protected void onDraw(Canvas canvas)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过调用draw函数进行视图绘制,在View类中onDraw函数是个空函数,最终的绘制需求需要在自定义的onDraw函数中进行实现,比如ImageView完成图片的绘制,如果自定义ViewGroup这个函数则不需要重载.</p><h3 id="给自定义控件添加事件"><a href="#给自定义控件添加事件" class="headerlink" title="给自定义控件添加事件"></a>给自定义控件添加事件</h3><p>1.获取自定义控件坐标</p><p><img src="/liaojie.github.io/medias/viewFunction.jpg"></p><p>1.view获取自身坐标：getLeft(),getTop(),getRight(),getBottom()<br>getTop：获取到的是view自身的顶边到其父布局顶边的距离<br>getLeft：获取到的是view自身的左边到其父布局左边的距离<br>getRight：获取到的是view自身的右边到其父布局左边的距离<br>getBottom：获取到的是view自身的底边到其父布局顶边的距离<br>2.view获取自身宽高：getHeight(),getWidth()<br>3.motionEvent获取坐标：getX(),getY(),getRawX(),getRawY()<br>getX()：获取点击事件相对控件左边的x轴坐标，即点击事件距离控件左边的距离<br>getY()：获取点击事件相对控件顶边的y轴坐标，即点击事件距离控件顶边的距离<br>getRawX()：获取点击事件相对整个屏幕左边的x轴坐标，即点击事件距离整个屏幕左边的距离<br>getRawY()：获取点击事件相对整个屏幕顶边的y轴坐标，即点击事件距离整个屏幕顶边的距离</p><p>2.计算控件左上角坐标,当按下控件移动的时候,计算偏移距离,重新绘制</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class SimpleView extends View {    //创建画笔    private Paint mPaint;    private RectF oval;    //事件处理    private EventHandle mEventHandle;    //鼠标按下位置    private int startX,startY;    //按下鼠标时控件的位置    private int startLeft,startTop;    //状态栏高度    int statusHeight = 0;    public SimpleView(Context context) {        this(context,null);        //统一入口    }     public SimpleView(Context context, @Nullable AttributeSet attrs) {        this(context, attrs,0);        //统一入口    }     public SimpleView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        init();    }     private void init(){        mPaint = new Paint();        //设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢。        mPaint.setAntiAlias(true);        mPaint.setTextSize(30.0f);        oval=new RectF();        mEventHandle=null;        startY=startX=0;        int resourceId = this.getResources().getIdentifier("status_bar_height", "dimen", "android");        if (resourceId &gt; 0) {            statusHeight = this.getResources().getDimensionPixelSize(resourceId);        }    }     @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        int widthMode = MeasureSpec.getMode(widthMeasureSpec);        int widthSize = MeasureSpec.getSize(widthMeasureSpec);        int heightMode = MeasureSpec.getMode(heightMeasureSpec);        int heightSize = MeasureSpec.getSize(heightMeasureSpec);        switch (widthMode) {            case MeasureSpec.EXACTLY:                //精确值模式，当控件的layout_width和layout_height属性指定为具体数值或match_parent时。                break;            case MeasureSpec.AT_MOST:                //最大值模式，当空间的宽高设置为wrap_content时。                break;            case MeasureSpec.UNSPECIFIED:                //未指定模式，View想多大就多大，通常在绘制自定义View时才会用。                break;        }        //取最小边为控件的宽高的最小值        int minWidth=widthSize&gt;heightSize?heightSize:widthSize;        setMeasuredDimension(minWidth,minWidth);    }      @Override    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        mPaint.setColor(Color.GRAY);        // FILL填充, STROKE描边,FILL_AND_STROKE填充和描边        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);        int with = getWidth();        int height = getHeight();        float radius = with / 2-5;        canvas.drawCircle(with / 2, with / 2, radius, mPaint);        mPaint.setColor(Color.RED);        oval.set(with / 2 - radius, with / 2 - radius, with / 2                + radius, with / 2 + radius);//用于定义的圆弧的形状和大小的界限        int sweepAngle=120;        canvas.drawArc(oval, 0, -sweepAngle, true, mPaint);  //根据进度画圆弧        double percent=sweepAngle/360.0;        //设置文本颜色        mPaint.setColor(Color.WHITE);        //绘制文本百分比数据        canvas.drawText(String.format("%.2f",percent)+"%",(float)(with/2+radius*Math.cos(sweepAngle*Math.PI/360)/4)                ,(float)(with/2-radius*Math.sin(sweepAngle*Math.PI/360)/3),mPaint);        canvas.drawText(String.format("%.2f",1-percent)+"%",(float)(with/2-radius*Math.cos(sweepAngle*Math.PI/360))                ,(float)(with/2+radius*Math.sin(sweepAngle*Math.PI/360)/3),mPaint);    }     @Override    public boolean onTouchEvent(MotionEvent event) {        switch (event.getAction())        {            case MotionEvent.ACTION_DOWN:                 startX=(int)event.getRawX();                startY=(int)event.getRawY();                startLeft=(int)(startX-event.getX());                /**                 * 这里startTop计算有些偏离，原因在于计算时加入了标题栏和状态栏的高度                 * 注意：要是你的Activity没有去掉标题栏，这里还要去掉标题栏的高度                 */                startTop= (int)(startY-event.getY())-statusHeight;//减去状态栏高度                break;            case MotionEvent.ACTION_MOVE:                if(mEventHandle!=null)                {                    mEventHandle.onTouchEvent(event);                }else{                    int disX=(int)event.getRawX()-startX;//计算偏移的X坐标                    int disY=(int)event.getRawY()-startY;//计算偏移的Y坐标;                    int left=startLeft+disX;                    int top=startTop+disY;                    //更新控件位置                    layout(left,top,left+getWidth(),top+getHeight());                }                break;            case MotionEvent.ACTION_UP:                break;        }        //返回true表示不消耗此事件，事件继续传递，返回flase表示事件消耗        return true;    }     public void setmEventHandle(EventHandle mEventHandle) {        this.mEventHandle = mEventHandle;    }     interface EventHandle{        public void onTouchEvent(MotionEvent event);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XML文件中添加:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;com.example.myapplication.SimpleView  android:layout_width="150dp"  android:layout_height="150dp"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意:MainActivity需要将标题栏去掉,否则拖动的时候会出现偏差,在onCreate中添加</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">requestWindowFeature(Window.FEATURE_NO_TITLE);//去掉标题栏/*  requestWindowFeature(Window.FEATURE_NO_TITLE)无效解决方法：  正常情况下requestWindowFeature(Window.FEATURE_NO_TITLE)是可以生效的，  但是当Activity继承子AppCompatActivity的时候,这个就失效了   解决办法：  1、手动在oncreate里调用hide()  if (getSupportActionBar() != null){     getSupportActionBar().hide();  }*/if (getSupportActionBar() != null){    getSupportActionBar().hide();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/liaojie1314/customviewLayout.git">自定义控件</a>,仅供参考.</p><h5 id="手机号码正则表达式"><a href="#手机号码正则表达式" class="headerlink" title="手机号码正则表达式"></a>手机号码正则表达式</h5><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static final String REGEX_MOBILE_EXACT = "^((13[0-9])|(14[5,7])|(15[0-3,5-9])|(17[0,3,5-8])|(18[0-9])|166|198|199|(147))\\d{8}$";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Android单位转换工具类"><a href="#Android单位转换工具类" class="headerlink" title="Android单位转换工具类"></a>Android单位转换工具类</h5><p>如果要在代码里直接填写尺寸，一般是px，如果要做好屏幕适配，我们通常使用dp作为单位</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class SizeUtils {    public static int dip2px(Context context,float dpValue) {        float scale = context.getResources().getDisplayMetrics().density;        return (int) (dpValue * scale + 0.5f);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="获取屏幕尺寸"><a href="#获取屏幕尺寸" class="headerlink" title="获取屏幕尺寸"></a>获取屏幕尺寸</h5><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import android.content.Context;import android.graphics.Point;import android.view.WindowManager;public class SizeUtils {    public static Point getScreenSize(Context context) {        Point point = new Point();        ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getSize(point);        return point;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
