<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android开源库之Jetpack</title>
      <link href="/liaojie.github.io/2021/10/20/jetpack/"/>
      <url>/liaojie.github.io/2021/10/20/jetpack/</url>
      
        <content type="html"><![CDATA[<p>Welcome to Lj’Blog! In this page,we will learn Android together.<br>If you have some trouble, you can send me an e-mail. I will try my best to help you.<br>This is my <a href="https://github.com/liaojie1314">github website</a>. </p><h3 id="Jetpack"><a href="#Jetpack" class="headerlink" title="Jetpack"></a>Jetpack</h3><p>优点:<br>1.体现了单一原则<br>2.分层清晰<br>3.不需要非常依赖Activity<br>4.旋转数据不会丢失<br>…</p><h2 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h2><p>以注重生命周期的方式管理界面相关的数据(管理UI数据)</p><h2 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h2><p>source:<br>1.首先定义一个LiveData实例<br>2.观察LiveData数据变化,变化时将数据展示到TextView上<br>3.改变LiveData里面的数据,数据变化时会回调onChanged()方法</p><p>在底层数据库更改时通知视图(感应改变数据),UI刷新(LiveData+DataBinding)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">public class MainViewModel extend /*ViewModel*/AndroidViewModel<span class="token punctuation">{</span>  //ViewModel 无环境  //AndroidViewModel 有环境 需重写构造函数  private Context context<span class="token punctuation">;</span>  public MainViewModel<span class="token punctuation">(</span>@NonNull Application application<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    super<span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">;</span>    context <span class="token operator">=</span> application<span class="token punctuation">;</span>  <span class="token punctuation">}</span>private MutableLiveData<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token function-name function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>info.setValue<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//默认值<span class="token builtin class-name">return</span> info<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DataBinding"><a href="#DataBinding" class="headerlink" title="DataBinding"></a>DataBinding</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//DataBinding的引入<span class="token punctuation">(</span>在build.gradle<span class="token punctuation">(</span>:app<span class="token punctuation">)</span>中添加<span class="token punctuation">)</span>:方式一:  dataBinding<span class="token punctuation">{</span>  enabled <span class="token boolean">true</span>  <span class="token punctuation">}</span>方式二:  dataBinding.enabled<span class="token operator">=</span>true//添加后同步//使用:<span class="token punctuation">(</span>整个布局交给DataBinding管理<span class="token punctuation">)</span><span class="token operator">&lt;</span>Layout xmlns:android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 和类交互 --<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>data<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>variable               <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"name"</span>               <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"包名+类名"</span>/<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/data<span class="token operator">&gt;</span>      //使用:android:text<span class="token operator">=</span><span class="token string">"@{name.info}"</span>      //android:onClick<span class="token operator">=</span><span class="token string">"@{()-&gt;name.function(value)}"</span>           所有布局<span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/Layout<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MainActivity需要做绑定工作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">private ActivityMainBinding binding<span class="token punctuation">;</span>private MainViewModel mainViewModel<span class="token punctuation">;</span>//onCreate中添加binding <span class="token operator">=</span> DataBindingUtil.setContentView<span class="token punctuation">(</span>this,R.layout.activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>//AndroidViewModelmainViewModel <span class="token operator">=</span> new ViewModelProvider<span class="token punctuation">(</span>this,new ViewModelProvider.AndroidViewModelFactory<span class="token punctuation">(</span>getApplication<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>.get<span class="token punctuation">(</span>MainViewModel.class<span class="token punctuation">)</span><span class="token punctuation">;</span>//ViewModelmainViewModel <span class="token operator">=</span> new ViewModelProvider<span class="token punctuation">(</span>this,new ViewModelProvider.NewInstanceFactory<span class="token punctuation">(</span><span class="token punctuation">))</span>.get<span class="token punctuation">(</span>MainViewModel.class<span class="token punctuation">)</span><span class="token punctuation">;</span>//绑定工作binding.setName<span class="token punctuation">(</span>mainViewModel<span class="token punctuation">)</span><span class="token punctuation">;</span>//建立感应binding.setLifecycleOwner<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：非Activity启动需要加标记.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Intent intent <span class="token operator">=</span> new Intent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent.setFlags<span class="token punctuation">(</span>Intent.FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Jetpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C language</title>
      <link href="/liaojie.github.io/2021/10/19/c/"/>
      <url>/liaojie.github.io/2021/10/19/c/</url>
      
        <content type="html"><![CDATA[<p>Welcome to Lj’Blog! In this page,we will learn C language together.<br>If you have some trouble, you can send me an e-mail. I will try my best to help you.<br>This is my <a href="https://github.com/liaojie1314">github website</a>. </p>]]></content>
      
      
      <categories>
          
          <category> C language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发之自定义控件</title>
      <link href="/liaojie.github.io/2021/10/11/android/"/>
      <url>/liaojie.github.io/2021/10/11/android/</url>
      
        <content type="html"><![CDATA[<p>Welcome to Lj’Blog! In this page,we will learn Android together.<br>If you have some trouble, you can send me an e-mail. I will try my best to help you.<br>This is my <a href="https://github.com/liaojie1314">github website</a>. </p><h3 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ 自定义组合控件  继承自ViewGroup,比如说LinearLayout/RealativeLayout/FrameLayout--<span class="token operator">&gt;</span>定义相关属性,获取相关属性  --<span class="token operator">&gt;</span>加载组合的View/根据属性调整UI--<span class="token operator">&gt;</span>处理相关事件/根据属性去处理数据--<span class="token operator">&gt;</span>定义功能接口,对外暴露接口方法  --<span class="token operator">&gt;</span>处理事件/数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ 自定义ViewGroup  继承自ViewGroup--<span class="token operator">&gt;</span>定义相关属性,获取相关属性--<span class="token operator">&gt;</span>把子View添加进来--<span class="token operator">&gt;</span>测量:测量孩子,测量自己<span class="token punctuation">(</span>覆写onMeasure方法<span class="token punctuation">)</span>  --<span class="token operator">&gt;</span>布局Layout--<span class="token operator">&gt;</span>定义功能接口--<span class="token operator">&gt;</span>处理事件和数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ 自定义view  继承自View--<span class="token operator">&gt;</span>定义相关属性,获取相关属性--<span class="token operator">&gt;</span>测量自己--<span class="token operator">&gt;</span>创建相关画笔--<span class="token operator">&gt;</span>覆写onDraw方法,绘制相关内容  --<span class="token operator">&gt;</span>定义功能接口--<span class="token operator">&gt;</span>处理相关事件和数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="声明属性名称和值的类型"><a href="#声明属性名称和值的类型" class="headerlink" title="声明属性名称和值的类型"></a>声明属性名称和值的类型</h2><p>Integer，比如说行数，TextView的maxLine，就是Integer类型<br>enum，枚举类型，比如说left,top,bottom,center,right这些是枚举类型<br>boolean，布尔类型，比如说layout_alignParentRight<br>dimension，尺寸比如说size,margin_left这些，单位为px,dp,sp这些<br>color，颜色，比如说background，比如说textColor<br>flags，标记，比如说activity声明周期时的configChanges，gravity<br>float，浮点数，也就是小数，比如说透明度alpha<br>fraction，百分数，比如说动画的开始位置，fromDx<br>refrence，引用，比如说background，src，但background可以是color又可以是refrence，其实是可以多个，比如说：name=”switch_time” format=”integer|float”，可以是Integer类型，或者float类型<br>string，比如说text</p><h2 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$  TypedArray a <span class="token operator">=</span> context.obtainStyledAttributes<span class="token punctuation">(</span>attrs,R.styleable.looper_style<span class="token punctuation">)</span><span class="token punctuation">;</span>   //从TypedArray中读取属性值   //<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>   //如：a.getColor<span class="token punctuation">(</span>R.styleable.KeypadView_numberColor, context.getResources<span class="token punctuation">(</span><span class="token punctuation">)</span>.getColor<span class="token punctuation">(</span>R.color.white<span class="token punctuation">))</span><span class="token punctuation">;</span>   a.recycle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="属性的获取"><a href="#属性的获取" class="headerlink" title="属性的获取"></a>属性的获取</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ app:itemMargin<span class="token operator">=</span><span class="token string">"4dp"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="手机号码正则表达式"><a href="#手机号码正则表达式" class="headerlink" title="手机号码正则表达式"></a>手机号码正则表达式</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ public static final String REGEX_MOBILE_EXACT <span class="token operator">=</span>   <span class="token string">"^<span class="token variable"><span class="token punctuation">((</span><span class="token number">13</span>[<span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>]<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">14</span>[<span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span>]<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">15</span>[<span class="token number">0</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">9</span>]<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">17</span>[<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">8</span>]<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">18</span>[<span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>]<span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">166</span><span class="token operator">|</span><span class="token number">198</span><span class="token operator">|</span><span class="token number">199</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">147</span><span class="token punctuation">))</span></span><span class="token entity" title="\\">\\</span>d{8}$"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Android单位转换工具类"><a href="#Android单位转换工具类" class="headerlink" title="Android单位转换工具类"></a>Android单位转换工具类</h1><p>如果要在代码里直接填写尺寸，一般是px，如果要做好屏幕适配，我们通常使用dp作为单位</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ public class SizeUtils <span class="token punctuation">{</span>    public static int dip2px<span class="token punctuation">(</span>Context context,float dpValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        float scale <span class="token operator">=</span> context.getResources<span class="token punctuation">(</span><span class="token punctuation">)</span>.getDisplayMetrics<span class="token punctuation">(</span><span class="token punctuation">)</span>.density<span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token punctuation">(</span>dpValue * scale + <span class="token number">0</span>.5f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
